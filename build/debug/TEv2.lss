
build/debug/TEv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d218  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cb0  0801d3b8  0801d3b8  0001e3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f068  0801f068  00023668  2**0
                  CONTENTS
  4 .ARM          00000008  0801f068  0801f068  00020068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f070  0801f070  00023668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801f070  0801f070  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801f080  0801f080  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002668  20000000  0801f088  00021000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad40  20002668  080216f0  00023668  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000d3a8  080216f0  000243a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023668  2**0
                  CONTENTS, READONLY
 12 .comment      0000005f  00000000  00000000  00023698  2**0
                  CONTENTS, READONLY
 13 .debug_info   00102d25  00000000  00000000  000236f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001e921  00000000  00000000  0012641c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00017f28  00000000  00000000  00144d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00005888  00000000  00000000  0015cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b34  00000000  00000000  001624f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007f123  00000000  00000000  00164024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00025e89  00000000  00000000  001e3147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00011640  00000000  00000000  00208fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000018f  00000000  00000000  0021a610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 0000bfe0  00000000  00000000  0021a79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0006e055  00000000  00000000  0022677f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <strcmp>:
 80001a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001a8:	2a01      	cmp	r2, #1
 80001aa:	bf28      	it	cs
 80001ac:	429a      	cmpcs	r2, r3
 80001ae:	d0f7      	beq.n	80001a0 <strcmp>
 80001b0:	1ad0      	subs	r0, r2, r3
 80001b2:	4770      	bx	lr
	...

080001c0 <memchr>:
 80001c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001c4:	2a10      	cmp	r2, #16
 80001c6:	db2b      	blt.n	8000220 <memchr+0x60>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	d008      	beq.n	80001e0 <memchr+0x20>
 80001ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001d2:	3a01      	subs	r2, #1
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d02d      	beq.n	8000234 <memchr+0x74>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	b342      	cbz	r2, 8000230 <memchr+0x70>
 80001de:	d1f6      	bne.n	80001ce <memchr+0xe>
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
 80001e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ea:	f022 0407 	bic.w	r4, r2, #7
 80001ee:	f07f 0700 	mvns.w	r7, #0
 80001f2:	2300      	movs	r3, #0
 80001f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001f8:	3c08      	subs	r4, #8
 80001fa:	ea85 0501 	eor.w	r5, r5, r1
 80001fe:	ea86 0601 	eor.w	r6, r6, r1
 8000202:	fa85 f547 	uadd8	r5, r5, r7
 8000206:	faa3 f587 	sel	r5, r3, r7
 800020a:	fa86 f647 	uadd8	r6, r6, r7
 800020e:	faa5 f687 	sel	r6, r5, r7
 8000212:	b98e      	cbnz	r6, 8000238 <memchr+0x78>
 8000214:	d1ee      	bne.n	80001f4 <memchr+0x34>
 8000216:	bcf0      	pop	{r4, r5, r6, r7}
 8000218:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800021c:	f002 0207 	and.w	r2, r2, #7
 8000220:	b132      	cbz	r2, 8000230 <memchr+0x70>
 8000222:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000226:	3a01      	subs	r2, #1
 8000228:	ea83 0301 	eor.w	r3, r3, r1
 800022c:	b113      	cbz	r3, 8000234 <memchr+0x74>
 800022e:	d1f8      	bne.n	8000222 <memchr+0x62>
 8000230:	2000      	movs	r0, #0
 8000232:	4770      	bx	lr
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr
 8000238:	2d00      	cmp	r5, #0
 800023a:	bf06      	itte	eq
 800023c:	4635      	moveq	r5, r6
 800023e:	3803      	subeq	r0, #3
 8000240:	3807      	subne	r0, #7
 8000242:	f015 0f01 	tst.w	r5, #1
 8000246:	d107      	bne.n	8000258 <memchr+0x98>
 8000248:	3001      	adds	r0, #1
 800024a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800024e:	bf02      	ittt	eq
 8000250:	3001      	addeq	r0, #1
 8000252:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000256:	3001      	addeq	r0, #1
 8000258:	bcf0      	pop	{r4, r5, r6, r7}
 800025a:	3801      	subs	r0, #1
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <strlen>:
 8000260:	4603      	mov	r3, r0
 8000262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000266:	2a00      	cmp	r2, #0
 8000268:	d1fb      	bne.n	8000262 <strlen+0x2>
 800026a:	1a18      	subs	r0, r3, r0
 800026c:	3801      	subs	r0, #1
 800026e:	4770      	bx	lr

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_ldivmod>:
 8000c38:	b97b      	cbnz	r3, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3a:	b972      	cbnz	r2, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bfbe      	ittt	lt
 8000c40:	2000      	movlt	r0, #0
 8000c42:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c46:	e006      	blt.n	8000c56 <__aeabi_ldivmod+0x1e>
 8000c48:	bf08      	it	eq
 8000c4a:	2800      	cmpeq	r0, #0
 8000c4c:	bf1c      	itt	ne
 8000c4e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c52:	f04f 30ff 	movne.w	r0, #4294967295
 8000c56:	f000 b857 	b.w	8000d08 <__aeabi_idiv0>
 8000c5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c62:	2900      	cmp	r1, #0
 8000c64:	db09      	blt.n	8000c7a <__aeabi_ldivmod+0x42>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db1a      	blt.n	8000ca0 <__aeabi_ldivmod+0x68>
 8000c6a:	f01c fa1d 	bl	801d0a8 <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4770      	bx	lr
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db1b      	blt.n	8000cbc <__aeabi_ldivmod+0x84>
 8000c84:	f01c fa10 	bl	801d0a8 <__udivmoddi4>
 8000c88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c90:	b004      	add	sp, #16
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	4252      	negs	r2, r2
 8000c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f01c f9ff 	bl	801d0a8 <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cba:	4770      	bx	lr
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc2:	f01c f9f1 	bl	801d0a8 <__udivmoddi4>
 8000cc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cce:	b004      	add	sp, #16
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b80c 	b.w	8000d08 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f01c f9d6 	bl	801d0a8 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <__do_global_dtors_aux>:
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	4c05      	ldr	r4, [pc, #20]	@ (8000d24 <__do_global_dtors_aux+0x18>)
 8000d10:	7823      	ldrb	r3, [r4, #0]
 8000d12:	b933      	cbnz	r3, 8000d22 <__do_global_dtors_aux+0x16>
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <__do_global_dtors_aux+0x1c>)
 8000d16:	b113      	cbz	r3, 8000d1e <__do_global_dtors_aux+0x12>
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <__do_global_dtors_aux+0x20>)
 8000d1a:	f3af 8000 	nop.w
 8000d1e:	2301      	movs	r3, #1
 8000d20:	7023      	strb	r3, [r4, #0]
 8000d22:	bd10      	pop	{r4, pc}
 8000d24:	20002668 	.word	0x20002668
 8000d28:	00000000 	.word	0x00000000
 8000d2c:	0801d3a0 	.word	0x0801d3a0

08000d30 <frame_dummy>:
 8000d30:	b508      	push	{r3, lr}
 8000d32:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <frame_dummy+0x10>)
 8000d34:	b11b      	cbz	r3, 8000d3e <frame_dummy+0xe>
 8000d36:	4903      	ldr	r1, [pc, #12]	@ (8000d44 <frame_dummy+0x14>)
 8000d38:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <frame_dummy+0x18>)
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	bd08      	pop	{r3, pc}
 8000d40:	00000000 	.word	0x00000000
 8000d44:	2000266c 	.word	0x2000266c
 8000d48:	0801d3a0 	.word	0x0801d3a0

08000d4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d4c:	b500      	push	{lr}
 8000d4e:	b087      	sub	sp, #28

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d50:	2300      	movs	r3, #0
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	9304      	str	r3, [sp, #16]
 8000d5c:	9305      	str	r3, [sp, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d5e:	4819      	ldr	r0, [pc, #100]	@ (8000dc4 <MX_ADC1_Init+0x78>)
 8000d60:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <MX_ADC1_Init+0x7c>)
 8000d62:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d64:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d66:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d68:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6a:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d70:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d72:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d74:	2201      	movs	r2, #1
 8000d76:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d78:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d80:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d84:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d86:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8a:	f002 faa9 	bl	80032e0 <HAL_ADC_Init>
 8000d8e:	b990      	cbnz	r0, 8000db6 <MX_ADC1_Init+0x6a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_ADC1_Init+0x80>)
 8000d92:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d94:	2306      	movs	r3, #6
 8000d96:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d9c:	227f      	movs	r2, #127	@ 0x7f
 8000d9e:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da0:	2204      	movs	r2, #4
 8000da2:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8000da4:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	4669      	mov	r1, sp
 8000da8:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <MX_ADC1_Init+0x78>)
 8000daa:	f002 fd03 	bl	80037b4 <HAL_ADC_ConfigChannel>
 8000dae:	b928      	cbnz	r0, 8000dbc <MX_ADC1_Init+0x70>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	b007      	add	sp, #28
 8000db2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000db6:	f001 fa61 	bl	800227c <Error_Handler>
 8000dba:	e7e9      	b.n	8000d90 <MX_ADC1_Init+0x44>
    Error_Handler();
 8000dbc:	f001 fa5e 	bl	800227c <Error_Handler>
}
 8000dc0:	e7f6      	b.n	8000db0 <MX_ADC1_Init+0x64>
 8000dc2:	bf00      	nop
 8000dc4:	20002684 	.word	0x20002684
 8000dc8:	50040000 	.word	0x50040000
 8000dcc:	3ef08000 	.word	0x3ef08000

08000dd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	b0a2      	sub	sp, #136	@ 0x88
 8000dd4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	911d      	str	r1, [sp, #116]	@ 0x74
 8000dda:	911e      	str	r1, [sp, #120]	@ 0x78
 8000ddc:	911f      	str	r1, [sp, #124]	@ 0x7c
 8000dde:	9120      	str	r1, [sp, #128]	@ 0x80
 8000de0:	9121      	str	r1, [sp, #132]	@ 0x84
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de2:	2268      	movs	r2, #104	@ 0x68
 8000de4:	a803      	add	r0, sp, #12
 8000de6:	f019 ff72 	bl	801acce <memset>
  if(adcHandle->Instance==ADC1)
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <HAL_ADC_MspInit+0x98>)
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d001      	beq.n	8000df6 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000df2:	b022      	add	sp, #136	@ 0x88
 8000df4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dfa:	9303      	str	r3, [sp, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dfc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e00:	931a      	str	r3, [sp, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	9304      	str	r3, [sp, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e06:	2201      	movs	r2, #1
 8000e08:	9205      	str	r2, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	9206      	str	r2, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e0e:	2207      	movs	r2, #7
 8000e10:	9207      	str	r2, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e12:	9308      	str	r3, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e14:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e1a:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1c:	a803      	add	r0, sp, #12
 8000e1e:	f005 f965 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	b9e8      	cbnz	r0, 8000e60 <HAL_ADC_MspInit+0x90>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <HAL_ADC_MspInit+0x9c>)
 8000e26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e30:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000e34:	9201      	str	r2, [sp, #4]
 8000e36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e3a:	f042 0202 	orr.w	r2, r2, #2
 8000e3e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = BAT_Voltage_Pin;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e4e:	230b      	movs	r3, #11
 8000e50:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	931f      	str	r3, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(BAT_Voltage_GPIO_Port, &GPIO_InitStruct);
 8000e56:	a91d      	add	r1, sp, #116	@ 0x74
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <HAL_ADC_MspInit+0xa0>)
 8000e5a:	f003 faf9 	bl	8004450 <HAL_GPIO_Init>
}
 8000e5e:	e7c8      	b.n	8000df2 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8000e60:	f001 fa0c 	bl	800227c <Error_Handler>
 8000e64:	e7de      	b.n	8000e24 <HAL_ADC_MspInit+0x54>
 8000e66:	bf00      	nop
 8000e68:	50040000 	.word	0x50040000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400

08000e74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000e74:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8000e76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e7a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000e7c:	f009 f988 	bl	800a190 <xTaskGetSchedulerState>
 8000e80:	2801      	cmp	r0, #1
 8000e82:	d100      	bne.n	8000e86 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8000e84:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8000e86:	f001 fd65 	bl	8002954 <xPortSysTickHandler>
}
 8000e8a:	e7fb      	b.n	8000e84 <SysTick_Handler+0x10>

08000e8c <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000e8c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000e90:	b92b      	cbnz	r3, 8000e9e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <osKernelInitialize+0x20>)
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	b928      	cbnz	r0, 8000ea4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000e9c:	4770      	bx	lr
    stat = osErrorISR;
 8000e9e:	f06f 0005 	mvn.w	r0, #5
 8000ea2:	4770      	bx	lr
    } else {
      stat = osError;
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20002da4 	.word	0x20002da4

08000eb0 <osKernelStart>:
 8000eb0:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8000eb4:	b973      	cbnz	r3, 8000ed4 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <osKernelStart+0x30>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10d      	bne.n	8000eda <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8000ebe:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <osKernelStart+0x34>)
 8000ec4:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <osKernelStart+0x30>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000ecc:	f008 fea0 	bl	8009c10 <vTaskStartScheduler>
      stat = osOK;
 8000ed0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8000ed2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8000ed4:	f06f 0005 	mvn.w	r0, #5
 8000ed8:	4770      	bx	lr
      stat = osError;
 8000eda:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000ede:	4770      	bx	lr
 8000ee0:	20002da4 	.word	0x20002da4
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eea:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000eec:	2400      	movs	r4, #0
 8000eee:	9405      	str	r4, [sp, #20]
 8000ef0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8000ef4:	bb04      	cbnz	r4, 8000f38 <osThreadNew+0x50>
 8000ef6:	b1f8      	cbz	r0, 8000f38 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	d034      	beq.n	8000f66 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8000efc:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8000efe:	6993      	ldr	r3, [r2, #24]
 8000f00:	b12b      	cbz	r3, 8000f0e <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8000f02:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000f04:	3b01      	subs	r3, #1
 8000f06:	2b37      	cmp	r3, #55	@ 0x37
 8000f08:	d902      	bls.n	8000f10 <osThreadNew+0x28>
        return (NULL);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e015      	b.n	8000f3a <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8000f0e:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000f10:	6853      	ldr	r3, [r2, #4]
 8000f12:	f013 0f01 	tst.w	r3, #1
 8000f16:	d13f      	bne.n	8000f98 <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 8000f18:	6954      	ldr	r4, [r2, #20]
 8000f1a:	b184      	cbz	r4, 8000f3e <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000f1c:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000f20:	6893      	ldr	r3, [r2, #8]
 8000f22:	b12b      	cbz	r3, 8000f30 <osThreadNew+0x48>
 8000f24:	68d7      	ldr	r7, [r2, #12]
 8000f26:	2f5b      	cmp	r7, #91	@ 0x5b
 8000f28:	d902      	bls.n	8000f30 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f2a:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000f2c:	b107      	cbz	r7, 8000f30 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000f2e:	b984      	cbnz	r4, 8000f52 <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f30:	b143      	cbz	r3, 8000f44 <osThreadNew+0x5c>
    mem  = -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8000f36:	b30b      	cbz	r3, 8000f7c <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000f38:	9805      	ldr	r0, [sp, #20]
}
 8000f3a:	b007      	add	sp, #28
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8000f3e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f42:	e7ed      	b.n	8000f20 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000f44:	68d3      	ldr	r3, [r2, #12]
 8000f46:	b9a3      	cbnz	r3, 8000f72 <osThreadNew+0x8a>
 8000f48:	6913      	ldr	r3, [r2, #16]
 8000f4a:	b1ab      	cbz	r3, 8000f78 <osThreadNew+0x90>
    mem  = -1;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e7f1      	b.n	8000f36 <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	9701      	str	r7, [sp, #4]
 8000f56:	9600      	str	r6, [sp, #0]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4662      	mov	r2, ip
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	f008 fde9 	bl	8009b34 <xTaskCreateStatic>
 8000f62:	9005      	str	r0, [sp, #20]
 8000f64:	e7e8      	b.n	8000f38 <osThreadNew+0x50>
    name = NULL;
 8000f66:	4615      	mov	r5, r2
      mem = 0;
 8000f68:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8000f6a:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8000f6c:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8000f70:	e7e1      	b.n	8000f36 <osThreadNew+0x4e>
    mem  = -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e7de      	b.n	8000f36 <osThreadNew+0x4e>
          mem = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e7dc      	b.n	8000f36 <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000f7c:	ab05      	add	r3, sp, #20
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	9600      	str	r6, [sp, #0]
 8000f82:	460b      	mov	r3, r1
 8000f84:	fa1f f28c 	uxth.w	r2, ip
 8000f88:	4629      	mov	r1, r5
 8000f8a:	f008 fe0e 	bl	8009baa <xTaskCreate>
 8000f8e:	2801      	cmp	r0, #1
 8000f90:	d0d2      	beq.n	8000f38 <osThreadNew+0x50>
            hTask = NULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	9305      	str	r3, [sp, #20]
 8000f96:	e7cf      	b.n	8000f38 <osThreadNew+0x50>
        return (NULL);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	e7ce      	b.n	8000f3a <osThreadNew+0x52>

08000f9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000f9c:	b508      	push	{r3, lr}
 8000f9e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8000fa2:	b933      	cbnz	r3, 8000fb2 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8000fa4:	b908      	cbnz	r0, 8000faa <osDelay+0xe>
    stat = osOK;
 8000fa6:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8000fa8:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8000faa:	f008 ff93 	bl	8009ed4 <vTaskDelay>
    stat = osOK;
 8000fae:	2000      	movs	r0, #0
 8000fb0:	e7fa      	b.n	8000fa8 <osDelay+0xc>
    stat = osErrorISR;
 8000fb2:	f06f 0005 	mvn.w	r0, #5
 8000fb6:	e7f7      	b.n	8000fa8 <osDelay+0xc>

08000fb8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <vApplicationGetIdleTaskMemory+0x10>)
 8000fba:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <vApplicationGetIdleTaskMemory+0x14>)
 8000fbe:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20002d48 	.word	0x20002d48
 8000fcc:	20002b48 	.word	0x20002b48

08000fd0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <vApplicationGetTimerTaskMemory+0x10>)
 8000fd2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <vApplicationGetTimerTaskMemory+0x14>)
 8000fd6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fdc:	6013      	str	r3, [r2, #0]
}
 8000fde:	4770      	bx	lr
 8000fe0:	20002aec 	.word	0x20002aec
 8000fe4:	200026ec 	.word	0x200026ec

08000fe8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000fe8:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000fea:	f012 0f07 	tst.w	r2, #7
 8000fee:	d01f      	beq.n	8001030 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ff0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ff2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ff6:	f5c1 633b 	rsb	r3, r1, #2992	@ 0xbb0
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ffe:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001000:	480e      	ldr	r0, [pc, #56]	@ (800103c <prvHeapInit+0x54>)
 8001002:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001004:	2100      	movs	r1, #0
 8001006:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001008:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800100a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800100c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <prvHeapInit+0x58>)
 8001012:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8001014:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001016:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001018:	1a99      	subs	r1, r3, r2
 800101a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800101c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <prvHeapInit+0x5c>)
 8001020:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <prvHeapInit+0x60>)
 8001024:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <prvHeapInit+0x64>)
 8001028:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001030:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001034:	e7e4      	b.n	8001000 <prvHeapInit+0x18>
 8001036:	bf00      	nop
 8001038:	20002dc0 	.word	0x20002dc0
 800103c:	20002db8 	.word	0x20002db8
 8001040:	20002db4 	.word	0x20002db4
 8001044:	20002dac 	.word	0x20002dac
 8001048:	20002db0 	.word	0x20002db0
 800104c:	20002da8 	.word	0x20002da8

08001050 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <prvInsertBlockIntoFreeList+0x5c>)
 8001052:	461a      	mov	r2, r3
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4283      	cmp	r3, r0
 8001058:	d3fb      	bcc.n	8001052 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800105a:	6851      	ldr	r1, [r2, #4]
 800105c:	eb02 0c01 	add.w	ip, r2, r1
 8001060:	4584      	cmp	ip, r0
 8001062:	d009      	beq.n	8001078 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001064:	6841      	ldr	r1, [r0, #4]
 8001066:	eb00 0c01 	add.w	ip, r0, r1
 800106a:	4563      	cmp	r3, ip
 800106c:	d009      	beq.n	8001082 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800106e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001070:	4290      	cmp	r0, r2
 8001072:	d019      	beq.n	80010a8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001074:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8001076:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001078:	6840      	ldr	r0, [r0, #4]
 800107a:	4401      	add	r1, r0
 800107c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800107e:	4610      	mov	r0, r2
 8001080:	e7f0      	b.n	8001064 <prvInsertBlockIntoFreeList+0x14>
{
 8001082:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001084:	4c0a      	ldr	r4, [pc, #40]	@ (80010b0 <prvInsertBlockIntoFreeList+0x60>)
 8001086:	6824      	ldr	r4, [r4, #0]
 8001088:	42a3      	cmp	r3, r4
 800108a:	d00b      	beq.n	80010a4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4419      	add	r1, r3
 8001090:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8001098:	4290      	cmp	r0, r2
 800109a:	d000      	beq.n	800109e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800109c:	6010      	str	r0, [r2, #0]
	}
}
 800109e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010a2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80010a4:	6004      	str	r4, [r0, #0]
 80010a6:	e7f7      	b.n	8001098 <prvInsertBlockIntoFreeList+0x48>
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20002db8 	.word	0x20002db8
 80010b0:	20002db4 	.word	0x20002db4

080010b4 <pvPortMallocMicroROS>:
{
 80010b4:	b538      	push	{r3, r4, r5, lr}
 80010b6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80010b8:	f008 fdf6 	bl	8009ca8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80010bc:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <pvPortMallocMicroROS+0xe4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b1b3      	cbz	r3, 80010f0 <pvPortMallocMicroROS+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010c2:	4b36      	ldr	r3, [pc, #216]	@ (800119c <pvPortMallocMicroROS+0xe8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	421c      	tst	r4, r3
 80010c8:	d14c      	bne.n	8001164 <pvPortMallocMicroROS+0xb0>
			if( xWantedSize > 0 )
 80010ca:	2c00      	cmp	r4, #0
 80010cc:	d04c      	beq.n	8001168 <pvPortMallocMicroROS+0xb4>
				xWantedSize += xHeapStructSize;
 80010ce:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80010d2:	f014 0f07 	tst.w	r4, #7
 80010d6:	d002      	beq.n	80010de <pvPortMallocMicroROS+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010d8:	f022 0207 	bic.w	r2, r2, #7
 80010dc:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80010de:	2a00      	cmp	r2, #0
 80010e0:	d051      	beq.n	8001186 <pvPortMallocMicroROS+0xd2>
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <pvPortMallocMicroROS+0xec>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d34f      	bcc.n	800118a <pvPortMallocMicroROS+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 80010ea:	492e      	ldr	r1, [pc, #184]	@ (80011a4 <pvPortMallocMicroROS+0xf0>)
 80010ec:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010ee:	e004      	b.n	80010fa <pvPortMallocMicroROS+0x46>
			prvHeapInit();
 80010f0:	f7ff ff7a 	bl	8000fe8 <prvHeapInit>
 80010f4:	e7e5      	b.n	80010c2 <pvPortMallocMicroROS+0xe>
					pxPreviousBlock = pxBlock;
 80010f6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80010f8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d202      	bcs.n	8001106 <pvPortMallocMicroROS+0x52>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f7      	bne.n	80010f6 <pvPortMallocMicroROS+0x42>
				if( pxBlock != pxEnd )
 8001106:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <pvPortMallocMicroROS+0xe4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	42a3      	cmp	r3, r4
 800110c:	d03f      	beq.n	800118e <pvPortMallocMicroROS+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800110e:	680d      	ldr	r5, [r1, #0]
 8001110:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	2b10      	cmp	r3, #16
 800111c:	d910      	bls.n	8001140 <pvPortMallocMicroROS+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800111e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001120:	f010 0f07 	tst.w	r0, #7
 8001124:	d008      	beq.n	8001138 <pvPortMallocMicroROS+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800112a:	f383 8811 	msr	BASEPRI, r3
 800112e:	f3bf 8f6f 	isb	sy
 8001132:	f3bf 8f4f 	dsb	sy
 8001136:	e7fe      	b.n	8001136 <pvPortMallocMicroROS+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001138:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800113a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800113c:	f7ff ff88 	bl	8001050 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001140:	6862      	ldr	r2, [r4, #4]
 8001142:	4917      	ldr	r1, [pc, #92]	@ (80011a0 <pvPortMallocMicroROS+0xec>)
 8001144:	680b      	ldr	r3, [r1, #0]
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800114a:	4917      	ldr	r1, [pc, #92]	@ (80011a8 <pvPortMallocMicroROS+0xf4>)
 800114c:	6809      	ldr	r1, [r1, #0]
 800114e:	428b      	cmp	r3, r1
 8001150:	d201      	bcs.n	8001156 <pvPortMallocMicroROS+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001152:	4915      	ldr	r1, [pc, #84]	@ (80011a8 <pvPortMallocMicroROS+0xf4>)
 8001154:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <pvPortMallocMicroROS+0xe8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4313      	orrs	r3, r2
 800115c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800115e:	2300      	movs	r3, #0
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	e002      	b.n	800116a <pvPortMallocMicroROS+0xb6>
void *pvReturn = NULL;
 8001164:	2500      	movs	r5, #0
 8001166:	e000      	b.n	800116a <pvPortMallocMicroROS+0xb6>
 8001168:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800116a:	f008 fe37 	bl	8009ddc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800116e:	f015 0f07 	tst.w	r5, #7
 8001172:	d00e      	beq.n	8001192 <pvPortMallocMicroROS+0xde>
 8001174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	e7fe      	b.n	8001184 <pvPortMallocMicroROS+0xd0>
void *pvReturn = NULL;
 8001186:	2500      	movs	r5, #0
 8001188:	e7ef      	b.n	800116a <pvPortMallocMicroROS+0xb6>
 800118a:	2500      	movs	r5, #0
 800118c:	e7ed      	b.n	800116a <pvPortMallocMicroROS+0xb6>
 800118e:	2500      	movs	r5, #0
 8001190:	e7eb      	b.n	800116a <pvPortMallocMicroROS+0xb6>
}
 8001192:	4628      	mov	r0, r5
 8001194:	bd38      	pop	{r3, r4, r5, pc}
 8001196:	bf00      	nop
 8001198:	20002db4 	.word	0x20002db4
 800119c:	20002da8 	.word	0x20002da8
 80011a0:	20002db0 	.word	0x20002db0
 80011a4:	20002db8 	.word	0x20002db8
 80011a8:	20002dac 	.word	0x20002dac

080011ac <vPortFreeMicroROS>:
	if( pv != NULL )
 80011ac:	b380      	cbz	r0, 8001210 <vPortFreeMicroROS+0x64>
{
 80011ae:	b538      	push	{r3, r4, r5, lr}
 80011b0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80011b2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80011ba:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <vPortFreeMicroROS+0x68>)
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	4213      	tst	r3, r2
 80011c0:	d108      	bne.n	80011d4 <vPortFreeMicroROS+0x28>
 80011c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	f3bf 8f6f 	isb	sy
 80011ce:	f3bf 8f4f 	dsb	sy
 80011d2:	e7fe      	b.n	80011d2 <vPortFreeMicroROS+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011d4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80011d8:	b141      	cbz	r1, 80011ec <vPortFreeMicroROS+0x40>
 80011da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	e7fe      	b.n	80011ea <vPortFreeMicroROS+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011ec:	ea23 0302 	bic.w	r3, r3, r2
 80011f0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80011f4:	f008 fd58 	bl	8009ca8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011f8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80011fc:	4a06      	ldr	r2, [pc, #24]	@ (8001218 <vPortFreeMicroROS+0x6c>)
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	440b      	add	r3, r1
 8001202:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001204:	4628      	mov	r0, r5
 8001206:	f7ff ff23 	bl	8001050 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800120a:	f008 fde7 	bl	8009ddc <xTaskResumeAll>
}
 800120e:	bd38      	pop	{r3, r4, r5, pc}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20002da8 	.word	0x20002da8
 8001218:	20002db0 	.word	0x20002db0

0800121c <getBlockSize>:
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800121c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001220:	4a02      	ldr	r2, [pc, #8]	@ (800122c <getBlockSize+0x10>)
 8001222:	6810      	ldr	r0, [r2, #0]
}
 8001224:	ea23 0000 	bic.w	r0, r3, r0
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20002da8 	.word	0x20002da8

08001230 <pvPortReallocMicroROS>:
{
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	4605      	mov	r5, r0
 8001234:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8001236:	f008 fd37 	bl	8009ca8 <vTaskSuspendAll>
	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800123a:	4620      	mov	r0, r4
 800123c:	f7ff ff3a 	bl	80010b4 <pvPortMallocMicroROS>
	if (newmem != NULL && pv != NULL)
 8001240:	4606      	mov	r6, r0
 8001242:	b178      	cbz	r0, 8001264 <pvPortReallocMicroROS+0x34>
 8001244:	b175      	cbz	r5, 8001264 <pvPortReallocMicroROS+0x34>
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff ffe8 	bl	800121c <getBlockSize>
 800124c:	3808      	subs	r0, #8
		if (xWantedSize < count)
 800124e:	4284      	cmp	r4, r0
 8001250:	d300      	bcc.n	8001254 <pvPortReallocMicroROS+0x24>
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001252:	4604      	mov	r4, r0
		memcpy(newmem, pv, count);
 8001254:	4622      	mov	r2, r4
 8001256:	4629      	mov	r1, r5
 8001258:	4630      	mov	r0, r6
 800125a:	f019 fe18 	bl	801ae8e <memcpy>
		vPortFreeMicroROS(pv);
 800125e:	4628      	mov	r0, r5
 8001260:	f7ff ffa4 	bl	80011ac <vPortFreeMicroROS>
	( void ) xTaskResumeAll();
 8001264:	f008 fdba 	bl	8009ddc <xTaskResumeAll>
}
 8001268:	4630      	mov	r0, r6
 800126a:	bd70      	pop	{r4, r5, r6, pc}

0800126c <pvPortCallocMicroROS>:
{
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4605      	mov	r5, r0
 8001270:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8001272:	f008 fd19 	bl	8009ca8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001276:	fb05 f404 	mul.w	r4, r5, r4
	void * mem = pvPortMallocMicroROS(count);
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff ff1a 	bl	80010b4 <pvPortMallocMicroROS>
 8001280:	4605      	mov	r5, r0
  	char *in_dest = (char*)mem;
 8001282:	4603      	mov	r3, r0
  	while(count--)
 8001284:	e003      	b.n	800128e <pvPortCallocMicroROS+0x22>
    	*in_dest++ = 0;
 8001286:	2100      	movs	r1, #0
 8001288:	f803 1b01 	strb.w	r1, [r3], #1
  	while(count--)
 800128c:	4614      	mov	r4, r2
 800128e:	1e62      	subs	r2, r4, #1
 8001290:	2c00      	cmp	r4, #0
 8001292:	d1f8      	bne.n	8001286 <pvPortCallocMicroROS+0x1a>
	( void ) xTaskResumeAll();
 8001294:	f008 fda2 	bl	8009ddc <xTaskResumeAll>
}
 8001298:	4628      	mov	r0, r5
 800129a:	bd38      	pop	{r3, r4, r5, pc}

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800129c:	b500      	push	{lr}
 800129e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_DMA_Init+0x70>)
 80012a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	649a      	str	r2, [r3, #72]	@ 0x48
 80012aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012ac:	f002 0201 	and.w	r2, r2, #1
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012b6:	f042 0202 	orr.w	r2, r2, #2
 80012ba:	649a      	str	r2, [r3, #72]	@ 0x48
 80012bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2105      	movs	r1, #5
 80012ca:	2010      	movs	r0, #16
 80012cc:	f002 fe68 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012d0:	2010      	movs	r0, #16
 80012d2:	f002 fe89 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2105      	movs	r1, #5
 80012da:	2011      	movs	r0, #17
 80012dc:	f002 fe60 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012e0:	2011      	movs	r0, #17
 80012e2:	f002 fe81 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	2044      	movs	r0, #68	@ 0x44
 80012ec:	f002 fe58 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80012f0:	2044      	movs	r0, #68	@ 0x44
 80012f2:	f002 fe79 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2105      	movs	r1, #5
 80012fa:	2045      	movs	r0, #69	@ 0x45
 80012fc:	f002 fe50 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001300:	2045      	movs	r0, #69	@ 0x45
 8001302:	f002 fe71 	bl	8003fe8 <HAL_NVIC_EnableIRQ>

}
 8001306:	b003      	add	sp, #12
 8001308:	f85d fb04 	ldr.w	pc, [sp], #4
 800130c:	40021000 	.word	0x40021000

08001310 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001310:	b508      	push	{r3, lr}
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001316:	4903      	ldr	r1, [pc, #12]	@ (8001324 <cubemx_transport_open+0x14>)
 8001318:	f8d0 028c 	ldr.w	r0, [r0, #652]	@ 0x28c
 800131c:	f008 f984 	bl	8009628 <HAL_UART_Receive_DMA>
    return true;
}
 8001320:	2001      	movs	r0, #1
 8001322:	bd08      	pop	{r3, pc}
 8001324:	20003980 	.word	0x20003980

08001328 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001328:	b508      	push	{r3, lr}
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
    HAL_UART_DMAStop(uart);
 800132a:	f8d0 028c 	ldr.w	r0, [r0, #652]	@ 0x28c
 800132e:	f007 fa71 	bl	8008814 <HAL_UART_DMAStop>
    return true;
}
 8001332:	2001      	movs	r0, #1
 8001334:	bd08      	pop	{r3, pc}

08001336 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001336:	b570      	push	{r4, r5, r6, lr}
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001338:	f8d0 528c 	ldr.w	r5, [r0, #652]	@ 0x28c

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800133c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800133e:	2b20      	cmp	r3, #32
 8001340:	d001      	beq.n	8001346 <cubemx_transport_write+0x10>
            osDelay(1);
        }

        return (ret == HAL_OK) ? len : 0;
    }else{
        return 0;
 8001342:	2000      	movs	r0, #0
    }
}
 8001344:	bd70      	pop	{r4, r5, r6, pc}
 8001346:	4614      	mov	r4, r2
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001348:	b292      	uxth	r2, r2
 800134a:	4628      	mov	r0, r5
 800134c:	f007 fa16 	bl	800877c <HAL_UART_Transmit_DMA>
 8001350:	4606      	mov	r6, r0
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001352:	b936      	cbnz	r6, 8001362 <cubemx_transport_write+0x2c>
 8001354:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8001356:	2b20      	cmp	r3, #32
 8001358:	d003      	beq.n	8001362 <cubemx_transport_write+0x2c>
            osDelay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fe1e 	bl	8000f9c <osDelay>
 8001360:	e7f7      	b.n	8001352 <cubemx_transport_write+0x1c>
        return (ret == HAL_OK) ? len : 0;
 8001362:	b90e      	cbnz	r6, 8001368 <cubemx_transport_write+0x32>
 8001364:	4620      	mov	r0, r4
 8001366:	e7ed      	b.n	8001344 <cubemx_transport_write+0xe>
 8001368:	2000      	movs	r0, #0
 800136a:	e7eb      	b.n	8001344 <cubemx_transport_write+0xe>

0800136c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800136c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001370:	460d      	mov	r5, r1
 8001372:	4614      	mov	r4, r2
 8001374:	461f      	mov	r7, r3
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001376:	f8d0 828c 	ldr.w	r8, [r0, #652]	@ 0x28c

    int ms_used = 0;
 800137a:	2600      	movs	r6, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800137e:	f8d8 3074 	ldr.w	r3, [r8, #116]	@ 0x74
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6858      	ldr	r0, [r3, #4]
 8001386:	f5c0 6000 	rsb	r0, r0, #2048	@ 0x800
 800138a:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 80013e0 <cubemx_transport_read+0x74>
 800138e:	f8c9 0000 	str.w	r0, [r9]
  __ASM volatile ("cpsie i" : : : "memory");
 8001392:	b662      	cpsie	i
        __enable_irq();
        ms_used++;
 8001394:	3601      	adds	r6, #1
        osDelay(portTICK_RATE_MS);
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fe00 	bl	8000f9c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800139c:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <cubemx_transport_read+0x6c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d9 2000 	ldr.w	r2, [r9]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d114      	bne.n	80013d2 <cubemx_transport_read+0x66>
 80013a8:	42be      	cmp	r6, r7
 80013aa:	dbe7      	blt.n	800137c <cubemx_transport_read+0x10>
 80013ac:	2000      	movs	r0, #0
 80013ae:	e008      	b.n	80013c2 <cubemx_transport_read+0x56>
    
    size_t wrote = 0;
    while ((dma_head != dma_tail) && (wrote < len)){
        buf[wrote] = dma_buffer[dma_head];
 80013b0:	490a      	ldr	r1, [pc, #40]	@ (80013dc <cubemx_transport_read+0x70>)
 80013b2:	5cc9      	ldrb	r1, [r1, r3]
 80013b4:	5429      	strb	r1, [r5, r0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80013b6:	3301      	adds	r3, #1
 80013b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013bc:	4906      	ldr	r1, [pc, #24]	@ (80013d8 <cubemx_transport_read+0x6c>)
 80013be:	600b      	str	r3, [r1, #0]
        wrote++;
 80013c0:	3001      	adds	r0, #1
    while ((dma_head != dma_tail) && (wrote < len)){
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <cubemx_transport_read+0x6c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <cubemx_transport_read+0x62>
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	d3f0      	bcc.n	80013b0 <cubemx_transport_read+0x44>
    }
    
    return wrote;
}
 80013ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7f5      	b.n	80013c2 <cubemx_transport_read+0x56>
 80013d6:	bf00      	nop
 80013d8:	2000397c 	.word	0x2000397c
 80013dc:	20003980 	.word	0x20003980
 80013e0:	20003978 	.word	0x20003978

080013e4 <encoder_init>:

#include "encoder.h"

void encoder_init(encoder_t *encoder, GPIO_TypeDef *gpio_a_port, uint16_t gpio_a_pin, GPIO_TypeDef *gpio_b_port,
                  uint16_t gpio_b_pin) {
  encoder->gpio_a_port = gpio_a_port;
 80013e4:	6001      	str	r1, [r0, #0]
  encoder->gpio_a_pin = gpio_a_pin;
 80013e6:	8082      	strh	r2, [r0, #4]
  encoder->gpio_b_port = gpio_b_port;
 80013e8:	6083      	str	r3, [r0, #8]
  encoder->gpio_b_pin = gpio_b_pin;
 80013ea:	f8bd 3000 	ldrh.w	r3, [sp]
 80013ee:	8183      	strh	r3, [r0, #12]
  encoder->counter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	6103      	str	r3, [r0, #16]
}
 80013f4:	4770      	bx	lr

080013f6 <encoder_handle_interrupt>:

void encoder_handle_interrupt(encoder_t *encoder) {
 80013f6:	b510      	push	{r4, lr}
 80013f8:	4604      	mov	r4, r0
  // Get the state of the B pin
  GPIO_PinState state_b = HAL_GPIO_ReadPin(encoder->gpio_b_port, encoder->gpio_b_pin);
 80013fa:	8981      	ldrh	r1, [r0, #12]
 80013fc:	6880      	ldr	r0, [r0, #8]
 80013fe:	f003 f983 	bl	8004708 <HAL_GPIO_ReadPin>

  // Check B pin state and adjust the counter accordingly.
  if (state_b == GPIO_PIN_SET)
 8001402:	2801      	cmp	r0, #1
 8001404:	d004      	beq.n	8001410 <encoder_handle_interrupt+0x1a>
    encoder->counter++;
  else if (state_b == GPIO_PIN_RESET)
 8001406:	b930      	cbnz	r0, 8001416 <encoder_handle_interrupt+0x20>
    encoder->counter--;
 8001408:	6923      	ldr	r3, [r4, #16]
 800140a:	3b01      	subs	r3, #1
 800140c:	6123      	str	r3, [r4, #16]
}
 800140e:	e002      	b.n	8001416 <encoder_handle_interrupt+0x20>
    encoder->counter++;
 8001410:	6923      	ldr	r3, [r4, #16]
 8001412:	3301      	adds	r3, #1
 8001414:	6123      	str	r3, [r4, #16]
}
 8001416:	bd10      	pop	{r4, pc}

08001418 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0d4      	sub	sp, #336	@ 0x150
  /* USER CODE BEGIN StartDefaultTask */



  rmw_uros_set_custom_transport(
 800141c:	4b7e      	ldr	r3, [pc, #504]	@ (8001618 <StartDefaultTask+0x200>)
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	4b7e      	ldr	r3, [pc, #504]	@ (800161c <StartDefaultTask+0x204>)
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4b7e      	ldr	r3, [pc, #504]	@ (8001620 <StartDefaultTask+0x208>)
 8001426:	4a7f      	ldr	r2, [pc, #508]	@ (8001624 <StartDefaultTask+0x20c>)
 8001428:	497f      	ldr	r1, [pc, #508]	@ (8001628 <StartDefaultTask+0x210>)
 800142a:	2001      	movs	r0, #1
 800142c:	f00c fcbc 	bl	800dda8 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
    
    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001430:	ac3d      	add	r4, sp, #244	@ 0xf4
 8001432:	4620      	mov	r0, r4
 8001434:	f00c fbb8 	bl	800dba8 <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate = microros_allocate;
 8001438:	4b7c      	ldr	r3, [pc, #496]	@ (800162c <StartDefaultTask+0x214>)
 800143a:	933d      	str	r3, [sp, #244]	@ 0xf4
    freeRTOS_allocator.deallocate = microros_deallocate;
 800143c:	4b7c      	ldr	r3, [pc, #496]	@ (8001630 <StartDefaultTask+0x218>)
 800143e:	933e      	str	r3, [sp, #248]	@ 0xf8
    freeRTOS_allocator.reallocate = microros_reallocate;
 8001440:	4b7c      	ldr	r3, [pc, #496]	@ (8001634 <StartDefaultTask+0x21c>)
 8001442:	933f      	str	r3, [sp, #252]	@ 0xfc
    freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001444:	4b7c      	ldr	r3, [pc, #496]	@ (8001638 <StartDefaultTask+0x220>)
 8001446:	9340      	str	r3, [sp, #256]	@ 0x100

    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001448:	4620      	mov	r0, r4
 800144a:	f00c fbc9 	bl	800dbe0 <rcutils_set_default_allocator>
 800144e:	b950      	cbnz	r0, 8001466 <StartDefaultTask+0x4e>
        printf("Error on default allocators (line %d)\n", __LINE__);
 8001450:	21db      	movs	r1, #219	@ 0xdb
 8001452:	487a      	ldr	r0, [pc, #488]	@ (800163c <StartDefaultTask+0x224>)
 8001454:	f019 fa5a 	bl	801a90c <iprintf>
 8001458:	e005      	b.n	8001466 <StartDefaultTask+0x4e>
  rclc_support_t support;
  //rcl_ret_t rc;

  // After transport setup, before node creation
  while (rmw_uros_ping_agent(100, 3) != RCL_RET_OK) {
    printf("Waiting for agent...\n");
 800145a:	4879      	ldr	r0, [pc, #484]	@ (8001640 <StartDefaultTask+0x228>)
 800145c:	f019 fabe 	bl	801a9dc <puts>
    osDelay(100);  // Don't block indefinitely
 8001460:	2064      	movs	r0, #100	@ 0x64
 8001462:	f7ff fd9b 	bl	8000f9c <osDelay>
  while (rmw_uros_ping_agent(100, 3) != RCL_RET_OK) {
 8001466:	2103      	movs	r1, #3
 8001468:	2064      	movs	r0, #100	@ 0x64
 800146a:	f00c fcb3 	bl	800ddd4 <rmw_uros_ping_agent>
 800146e:	2800      	cmp	r0, #0
 8001470:	d1f3      	bne.n	800145a <StartDefaultTask+0x42>
  }

  hcsr04_init_range_msg(&ultra_ranges_msg.front_left, micro_ros_string_utilities_init("us_front_left"));
 8001472:	ad42      	add	r5, sp, #264	@ 0x108
 8001474:	4973      	ldr	r1, [pc, #460]	@ (8001644 <StartDefaultTask+0x22c>)
 8001476:	4628      	mov	r0, r5
 8001478:	f009 fdb0 	bl	800afdc <micro_ros_string_utilities_init>
 800147c:	4c72      	ldr	r4, [pc, #456]	@ (8001648 <StartDefaultTask+0x230>)
 800147e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001482:	4620      	mov	r0, r4
 8001484:	f000 fc18 	bl	8001cb8 <hcsr04_init_range_msg>
  hcsr04_init_range_msg(&ultra_ranges_msg.front_right, micro_ros_string_utilities_init("us_front_right"));
 8001488:	ad45      	add	r5, sp, #276	@ 0x114
 800148a:	4970      	ldr	r1, [pc, #448]	@ (800164c <StartDefaultTask+0x234>)
 800148c:	4628      	mov	r0, r5
 800148e:	f009 fda5 	bl	800afdc <micro_ros_string_utilities_init>
 8001492:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001496:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800149a:	f000 fc0d 	bl	8001cb8 <hcsr04_init_range_msg>
  hcsr04_init_range_msg(&ultra_ranges_msg.center_left, micro_ros_string_utilities_init("us_center_left"));
 800149e:	ad48      	add	r5, sp, #288	@ 0x120
 80014a0:	496b      	ldr	r1, [pc, #428]	@ (8001650 <StartDefaultTask+0x238>)
 80014a2:	4628      	mov	r0, r5
 80014a4:	f009 fd9a 	bl	800afdc <micro_ros_string_utilities_init>
 80014a8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80014ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80014b0:	f000 fc02 	bl	8001cb8 <hcsr04_init_range_msg>
  hcsr04_init_range_msg(&ultra_ranges_msg.center_right, micro_ros_string_utilities_init("us_center_right"));
 80014b4:	ad4b      	add	r5, sp, #300	@ 0x12c
 80014b6:	4967      	ldr	r1, [pc, #412]	@ (8001654 <StartDefaultTask+0x23c>)
 80014b8:	4628      	mov	r0, r5
 80014ba:	f009 fd8f 	bl	800afdc <micro_ros_string_utilities_init>
 80014be:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80014c2:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 80014c6:	f000 fbf7 	bl	8001cb8 <hcsr04_init_range_msg>
  hcsr04_init_range_msg(&ultra_ranges_msg.rear_left, micro_ros_string_utilities_init("us_rear_left"));
 80014ca:	ad4e      	add	r5, sp, #312	@ 0x138
 80014cc:	4962      	ldr	r1, [pc, #392]	@ (8001658 <StartDefaultTask+0x240>)
 80014ce:	4628      	mov	r0, r5
 80014d0:	f009 fd84 	bl	800afdc <micro_ros_string_utilities_init>
 80014d4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80014d8:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 80014dc:	f000 fbec 	bl	8001cb8 <hcsr04_init_range_msg>
  hcsr04_init_range_msg(&ultra_ranges_msg.rear_right, micro_ros_string_utilities_init("us_rear_right"));
 80014e0:	ad51      	add	r5, sp, #324	@ 0x144
 80014e2:	495e      	ldr	r1, [pc, #376]	@ (800165c <StartDefaultTask+0x244>)
 80014e4:	4628      	mov	r0, r5
 80014e6:	f009 fd79 	bl	800afdc <micro_ros_string_utilities_init>
 80014ea:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80014ee:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 80014f2:	f000 fbe1 	bl	8001cb8 <hcsr04_init_range_msg>

  encoders_msg.header.frame_id = micro_ros_string_utilities_init("encoders");
 80014f6:	ac02      	add	r4, sp, #8
 80014f8:	4959      	ldr	r1, [pc, #356]	@ (8001660 <StartDefaultTask+0x248>)
 80014fa:	4620      	mov	r0, r4
 80014fc:	f009 fd6e 	bl	800afdc <micro_ros_string_utilities_init>
 8001500:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <StartDefaultTask+0x24c>)
 8001502:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001506:	e883 0007 	stmia.w	r3, {r0, r1, r2}


  // Initialize init_options
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 800150a:	f00b fa49 	bl	800c9a0 <rcl_get_zero_initialized_init_options>
 800150e:	902f      	str	r0, [sp, #188]	@ 0xbc

  rcl_init_options_init(&init_options, freeRTOS_allocator);
 8001510:	ac2f      	add	r4, sp, #188	@ 0xbc
 8001512:	ab40      	add	r3, sp, #256	@ 0x100
 8001514:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001518:	e88d 0003 	stmia.w	sp, {r0, r1}
 800151c:	ae3d      	add	r6, sp, #244	@ 0xf4
 800151e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001522:	4620      	mov	r0, r4
 8001524:	f00b fa3e 	bl	800c9a4 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, 255);
 8001528:	21ff      	movs	r1, #255	@ 0xff
 800152a:	4620      	mov	r0, r4
 800152c:	f00b fb1c 	bl	800cb68 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &freeRTOS_allocator);
 8001530:	ad30      	add	r5, sp, #192	@ 0xc0
 8001532:	9600      	str	r6, [sp, #0]
 8001534:	4623      	mov	r3, r4
 8001536:	2200      	movs	r2, #0
 8001538:	4611      	mov	r1, r2
 800153a:	4628      	mov	r0, r5
 800153c:	f00c fa22 	bl	800d984 <rclc_support_init_with_options>

  // create rcl_node
  rcl_node_t my_node;
  rclc_node_init_default(&my_node, "stm32", "", &support);
 8001540:	ac2d      	add	r4, sp, #180	@ 0xb4
 8001542:	462b      	mov	r3, r5
 8001544:	4a48      	ldr	r2, [pc, #288]	@ (8001668 <StartDefaultTask+0x250>)
 8001546:	4949      	ldr	r1, [pc, #292]	@ (800166c <StartDefaultTask+0x254>)
 8001548:	4620      	mov	r0, r4
 800154a:	f00c fa4f 	bl	800d9ec <rclc_node_init_default>
  //if (rc != RCL_RET_OK) {
    //printf("Error in rclc_node_init_default\n");
    //return;
  //}

  rmw_uros_sync_session(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001552:	f00d fb65 	bl	800ec20 <rmw_uros_sync_session>

  rclc_publisher_init_default(&encoders_pub, &my_node, ROSIDL_GET_MSG_TYPE_SUPPORT(mobi_interfaces, msg, EncodersStamped), "/encoder");
 8001556:	f00b f85b 	bl	800c610 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped>
 800155a:	4602      	mov	r2, r0
 800155c:	4b44      	ldr	r3, [pc, #272]	@ (8001670 <StartDefaultTask+0x258>)
 800155e:	4621      	mov	r1, r4
 8001560:	4844      	ldr	r0, [pc, #272]	@ (8001674 <StartDefaultTask+0x25c>)
 8001562:	f00c fa7f 	bl	800da64 <rclc_publisher_init_default>

  rclc_publisher_init_default(&ultra_ranges_pub, &my_node, ROSIDL_GET_MSG_TYPE_SUPPORT(mobi_interfaces, msg, UltraRanges), "/ultra_ranges");
 8001566:	f00b f86b 	bl	800c640 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges>
 800156a:	4602      	mov	r2, r0
 800156c:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <StartDefaultTask+0x260>)
 800156e:	4621      	mov	r1, r4
 8001570:	4842      	ldr	r0, [pc, #264]	@ (800167c <StartDefaultTask+0x264>)
 8001572:	f00c fa77 	bl	800da64 <rclc_publisher_init_default>

  // Initialize subscribers
  rclc_subscription_init_default(&cmd_vel_sub, &my_node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "/cmd_vel");
 8001576:	f009 fbf9 	bl	800ad6c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800157a:	4602      	mov	r2, r0
 800157c:	4f40      	ldr	r7, [pc, #256]	@ (8001680 <StartDefaultTask+0x268>)
 800157e:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <StartDefaultTask+0x26c>)
 8001580:	4621      	mov	r1, r4
 8001582:	4638      	mov	r0, r7
 8001584:	f00c faa2 	bl	800dacc <rclc_subscription_init_default>


  rcl_timer_t timer_100ms;
  
  rclc_timer_init_default2(&timer_100ms, &support, RCL_MS_TO_NS(100), timer_100ms_callback, true);
 8001588:	f10d 09b0 	add.w	r9, sp, #176	@ 0xb0
 800158c:	2401      	movs	r4, #1
 800158e:	9401      	str	r4, [sp, #4]
 8001590:	4b3d      	ldr	r3, [pc, #244]	@ (8001688 <StartDefaultTask+0x270>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	a31c      	add	r3, pc, #112	@ (adr r3, 8001608 <StartDefaultTask+0x1f0>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	4629      	mov	r1, r5
 800159c:	4648      	mov	r0, r9
 800159e:	f00c fac9 	bl	800db34 <rclc_timer_init_default2>
  
  rcl_timer_t timer_250ms;
  rclc_timer_init_default2(&timer_250ms, &support, RCL_MS_TO_NS(250), timer_250ms_callback, true);
 80015a2:	f10d 08ac 	add.w	r8, sp, #172	@ 0xac
 80015a6:	9401      	str	r4, [sp, #4]
 80015a8:	4b38      	ldr	r3, [pc, #224]	@ (800168c <StartDefaultTask+0x274>)
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	a318      	add	r3, pc, #96	@ (adr r3, 8001610 <StartDefaultTask+0x1f8>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	4629      	mov	r1, r5
 80015b4:	4640      	mov	r0, r8
 80015b6:	f00c fabd 	bl	800db34 <rclc_timer_init_default2>

  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 80015ba:	ac06      	add	r4, sp, #24
 80015bc:	4620      	mov	r0, r4
 80015be:	f00b ff5b 	bl	800d478 <rclc_executor_get_zero_initialized_executor>
  

  rclc_executor_init(&executor, &support.context, 3, &freeRTOS_allocator);
 80015c2:	4633      	mov	r3, r6
 80015c4:	2203      	movs	r2, #3
 80015c6:	4629      	mov	r1, r5
 80015c8:	4620      	mov	r0, r4
 80015ca:	f00b ff61 	bl	800d490 <rclc_executor_init>

  rclc_executor_add_timer(&executor, &timer_100ms);
 80015ce:	4649      	mov	r1, r9
 80015d0:	4620      	mov	r0, r4
 80015d2:	f00b fffd 	bl	800d5d0 <rclc_executor_add_timer>
  //if (rc != RCL_RET_OK) {
    //printf("Error in rclc_executor_add_timer.\n");
  //}

  rclc_executor_add_timer(&executor, &timer_250ms);
 80015d6:	4641      	mov	r1, r8
 80015d8:	4620      	mov	r0, r4
 80015da:	f00b fff9 	bl	800d5d0 <rclc_executor_add_timer>

  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, &cmd_vel_callback, ON_NEW_DATA);
 80015de:	2300      	movs	r3, #0
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <StartDefaultTask+0x278>)
 80015e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001694 <StartDefaultTask+0x27c>)
 80015e6:	4639      	mov	r1, r7
 80015e8:	4620      	mov	r0, r4
 80015ea:	f00b ffbd 	bl	800d568 <rclc_executor_add_subscription>

  rclc_executor_prepare(&executor);
 80015ee:	4620      	mov	r0, r4
 80015f0:	f00c f818 	bl	800d624 <rclc_executor_prepare>
    //HAL_Delay(2000);
    //steering_servo.timer->Instance->CCR3 = 2000;
    //HAL_Delay(2000);


    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80015f4:	a304      	add	r3, pc, #16	@ (adr r3, 8001608 <StartDefaultTask+0x1f0>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	a806      	add	r0, sp, #24
 80015fc:	f00c f85c 	bl	800d6b8 <rclc_executor_spin_some>
  // Safety: Update motion control even without new messages
    //if(HAL_GetTick() - motion_state.last_update > 100) {
      //  float dt = 0.1f; // 100ms
        //UpdateMotionControl(&motion_state, dt);
    //}
    osDelay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fccb 	bl	8000f9c <osDelay>
  for(;;)
 8001606:	e7f5      	b.n	80015f4 <StartDefaultTask+0x1dc>
 8001608:	05f5e100 	.word	0x05f5e100
 800160c:	00000000 	.word	0x00000000
 8001610:	0ee6b280 	.word	0x0ee6b280
 8001614:	00000000 	.word	0x00000000
 8001618:	0800136d 	.word	0x0800136d
 800161c:	08001337 	.word	0x08001337
 8001620:	08001329 	.word	0x08001329
 8001624:	08001311 	.word	0x08001311
 8001628:	20008850 	.word	0x20008850
 800162c:	0800246d 	.word	0x0800246d
 8001630:	0800248d 	.word	0x0800248d
 8001634:	080024ad 	.word	0x080024ad
 8001638:	080024ed 	.word	0x080024ed
 800163c:	0801d3d8 	.word	0x0801d3d8
 8001640:	0801d400 	.word	0x0801d400
 8001644:	0801d418 	.word	0x0801d418
 8001648:	200070fc 	.word	0x200070fc
 800164c:	0801d428 	.word	0x0801d428
 8001650:	0801d438 	.word	0x0801d438
 8001654:	0801d448 	.word	0x0801d448
 8001658:	0801d458 	.word	0x0801d458
 800165c:	0801d468 	.word	0x0801d468
 8001660:	0801d478 	.word	0x0801d478
 8001664:	2000720c 	.word	0x2000720c
 8001668:	0801e18c 	.word	0x0801e18c
 800166c:	0801d484 	.word	0x0801d484
 8001670:	0801d48c 	.word	0x0801d48c
 8001674:	2000722c 	.word	0x2000722c
 8001678:	0801d498 	.word	0x0801d498
 800167c:	20007228 	.word	0x20007228
 8001680:	200070f8 	.word	0x200070f8
 8001684:	0801d4a8 	.word	0x0801d4a8
 8001688:	08001699 	.word	0x08001699
 800168c:	0800185d 	.word	0x0800185d
 8001690:	080016cd 	.word	0x080016cd
 8001694:	200070c8 	.word	0x200070c8

08001698 <timer_100ms_callback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static int32_t fake_left = 0;
static int32_t fake_right = 1000;

void timer_100ms_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001698:	b510      	push	{r4, lr}
  (void)last_call_time;

  encoders_msg.encoders.front_left = encoder_1.counter;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <timer_100ms_callback+0x24>)
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	4c08      	ldr	r4, [pc, #32]	@ (80016c0 <timer_100ms_callback+0x28>)
 80016a0:	6163      	str	r3, [r4, #20]
  encoders_msg.encoders.front_right = encoder_2.counter;
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <timer_100ms_callback+0x2c>)
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	61a3      	str	r3, [r4, #24]

  stamp_header(&encoders_msg.header.stamp);
 80016a8:	4620      	mov	r0, r4
 80016aa:	f009 fb27 	bl	800acfc <stamp_header>
  rcl_publish(&encoders_pub, &encoders_msg, NULL);
 80016ae:	2200      	movs	r2, #0
 80016b0:	4621      	mov	r1, r4
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <timer_100ms_callback+0x30>)
 80016b4:	f00b fb38 	bl	800cd28 <rcl_publish>
}
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	bf00      	nop
 80016bc:	20007ff4 	.word	0x20007ff4
 80016c0:	20007204 	.word	0x20007204
 80016c4:	20007fe0 	.word	0x20007fe0
 80016c8:	2000722c 	.word	0x2000722c

080016cc <cmd_vel_callback>:

void cmd_vel_callback(const void *msgin) {
 80016cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ce:	ed2d 8b02 	vpush	{d8}
 80016d2:	4604      	mov	r4, r0

  if (!motors_initialized){
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <cmd_vel_callback+0x158>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8081 	beq.w	80017e0 <cmd_vel_callback+0x114>
  }
  
  const geometry_msgs__msg__Twist *msg = (const geometry_msgs__msg__Twist *)msgin;
  
  // Convert Twist to Ackermann commands
    float linear_x = fmaxf(fminf(msg->linear.x, 1.0f), -1.0f);
 80016de:	e9d4 0100 	ldrd	r0, r1, [r4]
 80016e2:	f7ff fa59 	bl	8000b98 <__aeabi_d2f>
 80016e6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80016ea:	ee00 0a10 	vmov	s0, r0
 80016ee:	f01b fb17 	bl	801cd20 <fminf>
 80016f2:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80016f6:	f01b faeb 	bl	801ccd0 <fmaxf>
 80016fa:	eeb0 8a40 	vmov.f32	s16, s0
    float angular_z = msg->angular.z;
 80016fe:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8001702:	f7ff fa49 	bl	8000b98 <__aeabi_d2f>
 8001706:	ee07 0a10 	vmov	s14, r0

    float target_angle = CENTER_STEERING_ANGLE;

    // Calculate Ackermann steering angle
    if(fabsf(linear_x) > 0.1f) {
 800170a:	eef0 0ac8 	vabs.f32	s1, s16
 800170e:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8001828 <cmd_vel_callback+0x15c>
 8001712:	eef4 0ae7 	vcmpe.f32	s1, s15
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dd6b      	ble.n	80017f4 <cmd_vel_callback+0x128>
      float direction_sign = (linear_x >= 0) ? 1.0f : -1.0f;
 800171c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	db63      	blt.n	80017ee <cmd_vel_callback+0x122>
 8001726:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
      float angle_rad = atan2f(WHEELBASE * angular_z , fabsf(linear_x)) * direction_sign;
 800172a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 800182c <cmd_vel_callback+0x160>
 800172e:	ee27 0a00 	vmul.f32	s0, s14, s0
 8001732:	f01b facb 	bl	801cccc <atan2f>
 8001736:	ee60 7a28 	vmul.f32	s15, s0, s17
      target_angle = RAD_TO_DEG(angle_rad) + CENTER_STEERING_ANGLE;
 800173a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001830 <cmd_vel_callback+0x164>
 800173e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001742:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001834 <cmd_vel_callback+0x168>
 8001746:	ee37 0a87 	vadd.f32	s0, s15, s14
    } else if(fabsf(angular_z) > 0.01f) {
        // Handle stationary steering
        target_angle = copysignf(MAX_STEERING_ANGLE, angular_z) + CENTER_STEERING_ANGLE;
    }

    motion_state.target_steering = fmaxf(fminf(target_angle, SERVO_MAX_ANGLE), SERVO_MIN_ANGLE);
 800174a:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8001838 <cmd_vel_callback+0x16c>
 800174e:	f01b fae7 	bl	801cd20 <fminf>
 8001752:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800183c <cmd_vel_callback+0x170>
 8001756:	f01b fabb 	bl	801ccd0 <fmaxf>
 800175a:	4d39      	ldr	r5, [pc, #228]	@ (8001840 <cmd_vel_callback+0x174>)
 800175c:	ed85 0a04 	vstr	s0, [r5, #16]

    //angle_deg = fmax(fmin(angle_deg, SERVO_MAX_ANGLE), SERVO_MIN_ANGLE);
    //if (angular_z == 0){angle_deg = CENTER_STEERING_ANGLE;}

    // Set target speed
    motion_state.target_speed = linear_x;
 8001760:	ed85 8a01 	vstr	s16, [r5, #4]

    // Calculate time delta
    uint32_t now = HAL_GetTick();
 8001764:	f001 fd88 	bl	8003278 <HAL_GetTick>
    float dt = (now - motion_state.last_update) / 1000.0f;
 8001768:	696b      	ldr	r3, [r5, #20]
 800176a:	1ac3      	subs	r3, r0, r3
 800176c:	ee00 3a10 	vmov	s0, r3
 8001770:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    motion_state.last_update = now;
 8001774:	6168      	str	r0, [r5, #20]

    // Update motion control
    UpdateMotionControl(&motion_state, dt);
 8001776:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8001844 <cmd_vel_callback+0x178>
 800177a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800177e:	4628      	mov	r0, r5
 8001780:	f000 ff32 	bl	80025e8 <UpdateMotionControl>

    // Convert to motor control (differential steering)
    float speed_percent = (motion_state.current_speed / MAX_LINEAR_SPEED) * 100.0f;
 8001784:	ed95 8a00 	vldr	s16, [r5]
 8001788:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8001848 <cmd_vel_callback+0x17c>
 800178c:	ee28 8a27 	vmul.f32	s16, s16, s15
    bool direction = speed_percent >= 0;
 8001790:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001798:	bfac      	ite	ge
 800179a:	2401      	movge	r4, #1
 800179c:	2400      	movlt	r4, #0

    // Set motor speeds (same for both wheels in Ackermann steering)
    SetMotorDirection(&motor_left, direction);
 800179e:	4f2b      	ldr	r7, [pc, #172]	@ (800184c <cmd_vel_callback+0x180>)
 80017a0:	4621      	mov	r1, r4
 80017a2:	4638      	mov	r0, r7
 80017a4:	f000 ffc7 	bl	8002736 <SetMotorDirection>
    SetMotorDirection(&motor_right, direction);
 80017a8:	4e29      	ldr	r6, [pc, #164]	@ (8001850 <cmd_vel_callback+0x184>)
 80017aa:	4621      	mov	r1, r4
 80017ac:	4630      	mov	r0, r6
 80017ae:	f000 ffc2 	bl	8002736 <SetMotorDirection>
    SetMotorSpeed(&motor_left, fabsf(speed_percent));
 80017b2:	eeb0 8ac8 	vabs.f32	s16, s16
 80017b6:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 80017ba:	ee18 3a10 	vmov	r3, s16
 80017be:	b29c      	uxth	r4, r3
 80017c0:	4621      	mov	r1, r4
 80017c2:	4638      	mov	r0, r7
 80017c4:	f000 ffbe 	bl	8002744 <SetMotorSpeed>
    SetMotorSpeed(&motor_right, fabsf(speed_percent));
 80017c8:	4621      	mov	r1, r4
 80017ca:	4630      	mov	r0, r6
 80017cc:	f000 ffba 	bl	8002744 <SetMotorSpeed>
    // Set steering angle
    SetSteeringAngle(&steering_servo, motion_state.current_steering);
 80017d0:	ed95 0a03 	vldr	s0, [r5, #12]
 80017d4:	481f      	ldr	r0, [pc, #124]	@ (8001854 <cmd_vel_callback+0x188>)
 80017d6:	f001 fcf7 	bl	80031c8 <SetSteeringAngle>

}
 80017da:	ecbd 8b02 	vpop	{d8}
 80017de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    EnableMotorOutputs(&motor_right);
 80017e0:	481b      	ldr	r0, [pc, #108]	@ (8001850 <cmd_vel_callback+0x184>)
 80017e2:	f000 ffcf 	bl	8002784 <EnableMotorOutputs>
    motors_initialized = true;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <cmd_vel_callback+0x158>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e777      	b.n	80016de <cmd_vel_callback+0x12>
      float direction_sign = (linear_x >= 0) ? 1.0f : -1.0f;
 80017ee:	eeff 8a00 	vmov.f32	s17, #240	@ 0xbf800000 -1.0
 80017f2:	e79a      	b.n	800172a <cmd_vel_callback+0x5e>
    } else if(fabsf(angular_z) > 0.01f) {
 80017f4:	eef0 7ac7 	vabs.f32	s15, s14
 80017f8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001858 <cmd_vel_callback+0x18c>
 80017fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	dd0a      	ble.n	800181c <cmd_vel_callback+0x150>
        target_angle = copysignf(MAX_STEERING_ANGLE, angular_z) + CENTER_STEERING_ANGLE;
 8001806:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 800180a:	2800      	cmp	r0, #0
 800180c:	da01      	bge.n	8001812 <cmd_vel_callback+0x146>
 800180e:	eefb 7a0e 	vmov.f32	s15, #190	@ 0xc1f00000 -30.0
 8001812:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001834 <cmd_vel_callback+0x168>
 8001816:	ee37 0a87 	vadd.f32	s0, s15, s14
 800181a:	e796      	b.n	800174a <cmd_vel_callback+0x7e>
    float target_angle = CENTER_STEERING_ANGLE;
 800181c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001834 <cmd_vel_callback+0x168>
 8001820:	e793      	b.n	800174a <cmd_vel_callback+0x7e>
 8001822:	bf00      	nop
 8001824:	20004184 	.word	0x20004184
 8001828:	3dcccccd 	.word	0x3dcccccd
 800182c:	3ecccccd 	.word	0x3ecccccd
 8001830:	42652ee1 	.word	0x42652ee1
 8001834:	42b40000 	.word	0x42b40000
 8001838:	42f00000 	.word	0x42f00000
 800183c:	42700000 	.word	0x42700000
 8001840:	20007ef8 	.word	0x20007ef8
 8001844:	447a0000 	.word	0x447a0000
 8001848:	42c80000 	.word	0x42c80000
 800184c:	20007f20 	.word	0x20007f20
 8001850:	20007f10 	.word	0x20007f10
 8001854:	20007eec 	.word	0x20007eec
 8001858:	3c23d70a 	.word	0x3c23d70a

0800185c <timer_250ms_callback>:

void timer_250ms_callback(rcl_timer_t *timer, int64_t last_call_time) {
 800185c:	b570      	push	{r4, r5, r6, lr}
  (void)last_call_time;

  hcsr04_measure(&ultra_1);
 800185e:	4824      	ldr	r0, [pc, #144]	@ (80018f0 <timer_250ms_callback+0x94>)
 8001860:	f000 f94d 	bl	8001afe <hcsr04_measure>
  ultra_ranges_msg.front_left.range = fake_left++;
 8001864:	4e23      	ldr	r6, [pc, #140]	@ (80018f4 <timer_250ms_callback+0x98>)
 8001866:	6833      	ldr	r3, [r6, #0]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	6032      	str	r2, [r6, #0]
 800186c:	4c22      	ldr	r4, [pc, #136]	@ (80018f8 <timer_250ms_callback+0x9c>)
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
  stamp_header(&ultra_ranges_msg.front_left.header.stamp);
 800187a:	4620      	mov	r0, r4
 800187c:	f009 fa3e 	bl	800acfc <stamp_header>
  hcsr04_measure(&ultra_2);
 8001880:	481e      	ldr	r0, [pc, #120]	@ (80018fc <timer_250ms_callback+0xa0>)
 8001882:	f000 f93c 	bl	8001afe <hcsr04_measure>
  ultra_ranges_msg.front_right.range = fake_right++;
 8001886:	4d1e      	ldr	r5, [pc, #120]	@ (8001900 <timer_250ms_callback+0xa4>)
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	602a      	str	r2, [r5, #0]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
  stamp_header(&ultra_ranges_msg.front_right.header.stamp);
 800189a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800189e:	f009 fa2d 	bl	800acfc <stamp_header>
  hcsr04_measure(&ultra_3);
 80018a2:	4818      	ldr	r0, [pc, #96]	@ (8001904 <timer_250ms_callback+0xa8>)
 80018a4:	f000 f92b 	bl	8001afe <hcsr04_measure>
  ultra_ranges_msg.rear_left.range = fake_left++;
 80018a8:	6833      	ldr	r3, [r6, #0]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	6032      	str	r2, [r6, #0]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b6:	edc4 7a35 	vstr	s15, [r4, #212]	@ 0xd4
  stamp_header(&ultra_ranges_msg.rear_left.header.stamp);
 80018ba:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 80018be:	f009 fa1d 	bl	800acfc <stamp_header>
  hcsr04_measure(&ultra_4);
 80018c2:	4811      	ldr	r0, [pc, #68]	@ (8001908 <timer_250ms_callback+0xac>)
 80018c4:	f000 f91b 	bl	8001afe <hcsr04_measure>
  ultra_ranges_msg.rear_right.range = fake_right++;
 80018c8:	682b      	ldr	r3, [r5, #0]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	602a      	str	r2, [r5, #0]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d6:	edc4 7a40 	vstr	s15, [r4, #256]	@ 0x100
  stamp_header(&ultra_ranges_msg.rear_right.header.stamp);
 80018da:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 80018de:	f009 fa0d 	bl	800acfc <stamp_header>

  rcl_publish(&ultra_ranges_pub, &ultra_ranges_msg, NULL);
 80018e2:	2200      	movs	r2, #0
 80018e4:	4621      	mov	r1, r4
 80018e6:	4809      	ldr	r0, [pc, #36]	@ (800190c <timer_250ms_callback+0xb0>)
 80018e8:	f00b fa1e 	bl	800cd28 <rcl_publish>


}
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
 80018ee:	bf00      	nop
 80018f0:	20007fb4 	.word	0x20007fb4
 80018f4:	20004180 	.word	0x20004180
 80018f8:	200070fc 	.word	0x200070fc
 80018fc:	20007f88 	.word	0x20007f88
 8001900:	20000000 	.word	0x20000000
 8001904:	20007f5c 	.word	0x20007f5c
 8001908:	20007f30 	.word	0x20007f30
 800190c:	20007228 	.word	0x20007228

08001910 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001910:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001912:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <MX_FREERTOS_Init+0x14>)
 8001914:	2100      	movs	r1, #0
 8001916:	4804      	ldr	r0, [pc, #16]	@ (8001928 <MX_FREERTOS_Init+0x18>)
 8001918:	f7ff fae6 	bl	8000ee8 <osThreadNew>
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <MX_FREERTOS_Init+0x1c>)
 800191e:	6018      	str	r0, [r3, #0]
}
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop
 8001924:	0801e234 	.word	0x0801e234
 8001928:	08001419 	.word	0x08001419
 800192c:	200070c4 	.word	0x200070c4

08001930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001934:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	ad05      	add	r5, sp, #20
 8001938:	2400      	movs	r4, #0
 800193a:	9405      	str	r4, [sp, #20]
 800193c:	9406      	str	r4, [sp, #24]
 800193e:	9407      	str	r4, [sp, #28]
 8001940:	9408      	str	r4, [sp, #32]
 8001942:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001944:	4b58      	ldr	r3, [pc, #352]	@ (8001aa8 <MX_GPIO_Init+0x178>)
 8001946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001948:	f042 0204 	orr.w	r2, r2, #4
 800194c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800194e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001950:	f002 0204 	and.w	r2, r2, #4
 8001954:	9201      	str	r2, [sp, #4]
 8001956:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001958:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800195a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800195e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001960:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001962:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001966:	9202      	str	r2, [sp, #8]
 8001968:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800196c:	f042 0201 	orr.w	r2, r2, #1
 8001970:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001974:	f002 0201 	and.w	r2, r2, #1
 8001978:	9203      	str	r2, [sp, #12]
 800197a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800197e:	f042 0202 	orr.w	r2, r2, #2
 8001982:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	9304      	str	r3, [sp, #16]
 800198c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MD_DIR_Pin|Ultra_4_Trig_Pin, GPIO_PIN_RESET);
 800198e:	4e47      	ldr	r6, [pc, #284]	@ (8001aac <MX_GPIO_Init+0x17c>)
 8001990:	4622      	mov	r2, r4
 8001992:	f241 0108 	movw	r1, #4104	@ 0x1008
 8001996:	4630      	mov	r0, r6
 8001998:	f002 feca 	bl	8004730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Ultra_1_Trig_Pin|SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin
 800199c:	4622      	mov	r2, r4
 800199e:	f248 11b2 	movw	r1, #33202	@ 0x81b2
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a6:	f002 fec3 	bl	8004730 <HAL_GPIO_WritePin>
                          |MA_DIR_Pin|Ultra_2_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ultra_3_Trig_Pin|NSLEEP_Pin|NFAULT_Pin|ONOFF_LED_Strip_Pin, GPIO_PIN_RESET);
 80019aa:	4f41      	ldr	r7, [pc, #260]	@ (8001ab0 <MX_GPIO_Init+0x180>)
 80019ac:	4622      	mov	r2, r4
 80019ae:	f246 2104 	movw	r1, #25092	@ 0x6204
 80019b2:	4638      	mov	r0, r7
 80019b4:	f002 febc 	bl	8004730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019c2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c6:	4629      	mov	r1, r5
 80019c8:	4630      	mov	r0, r6
 80019ca:	f002 fd41 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pins : MD_ENCB_Pin MD_IPROPI_Pin MA_IPROPI_Pin MA_ENCB_Pin */
  GPIO_InitStruct.Pin = MD_ENCB_Pin|MD_IPROPI_Pin|MA_IPROPI_Pin|MA_ENCB_Pin;
 80019ce:	2395      	movs	r3, #149	@ 0x95
 80019d0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	4629      	mov	r1, r5
 80019d8:	4630      	mov	r0, r6
 80019da:	f002 fd39 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pin : MD_ENCA_Pin */
  GPIO_InitStruct.Pin = MD_ENCA_Pin;
 80019de:	2302      	movs	r3, #2
 80019e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1988 	mov.w	r9, #1114112	@ 0x110000
 80019e6:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MD_ENCA_GPIO_Port, &GPIO_InitStruct);
 80019ec:	4629      	mov	r1, r5
 80019ee:	4630      	mov	r0, r6
 80019f0:	f002 fd2e 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pins : MD_DIR_Pin Ultra_4_Trig_Pin */
  GPIO_InitStruct.Pin = MD_DIR_Pin|Ultra_4_Trig_Pin;
 80019f4:	f241 0308 	movw	r3, #4104	@ 0x1008
 80019f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	f04f 0801 	mov.w	r8, #1
 80019fe:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	4629      	mov	r1, r5
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f002 fd21 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultra_1_Trig_Pin SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin
                           MA_DIR_Pin Ultra_2_Trig_Pin */
  GPIO_InitStruct.Pin = Ultra_1_Trig_Pin|SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin
 8001a0e:	f248 13b2 	movw	r3, #33202	@ 0x81b2
 8001a12:	9305      	str	r3, [sp, #20]
                          |MA_DIR_Pin|Ultra_2_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a22:	f002 fd15 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001a26:	2640      	movs	r6, #64	@ 0x40
 8001a28:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001a30:	4629      	mov	r1, r5
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a36:	f002 fd0b 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ultra_3_Trig_Pin NSLEEP_Pin NFAULT_Pin ONOFF_LED_Strip_Pin */
  GPIO_InitStruct.Pin = Ultra_3_Trig_Pin|NSLEEP_Pin|NFAULT_Pin|ONOFF_LED_Strip_Pin;
 8001a3a:	f246 2304 	movw	r3, #25092	@ 0x6204
 8001a3e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	f002 fd00 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pin : MA_ENCA_Pin */
  GPIO_InitStruct.Pin = MA_ENCA_Pin;
 8001a50:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(MA_ENCA_GPIO_Port, &GPIO_InitStruct);
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	f002 fcf8 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a64:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4638      	mov	r0, r7
 8001a6e:	f002 fcef 	bl	8004450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001a72:	4622      	mov	r2, r4
 8001a74:	2105      	movs	r1, #5
 8001a76:	2007      	movs	r0, #7
 8001a78:	f002 fa92 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a7c:	2007      	movs	r0, #7
 8001a7e:	f002 fab3 	bl	8003fe8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a82:	4622      	mov	r2, r4
 8001a84:	2105      	movs	r1, #5
 8001a86:	2017      	movs	r0, #23
 8001a88:	f002 fa8a 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a8c:	2017      	movs	r0, #23
 8001a8e:	f002 faab 	bl	8003fe8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a92:	4622      	mov	r2, r4
 8001a94:	2105      	movs	r1, #5
 8001a96:	2028      	movs	r0, #40	@ 0x28
 8001a98:	f002 fa82 	bl	8003fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a9c:	2028      	movs	r0, #40	@ 0x28
 8001a9e:	f002 faa3 	bl	8003fe8 <HAL_NVIC_EnableIRQ>

}
 8001aa2:	b00b      	add	sp, #44	@ 0x2c
 8001aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48000800 	.word	0x48000800
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <hcsr04_init>:
#include "hcsr04.h"
#include "cmsis_os.h"
#include "tim.h"

void hcsr04_init(hcsr04_t *hcsr04, TIM_HandleTypeDef *htim, uint16_t tim_channel, HAL_TIM_ActiveChannel active_channel,
                 uint32_t interrupt_channel, GPIO_TypeDef *gpio_trig_port, uint16_t gpio_trig_pin) {
 8001ab4:	b508      	push	{r3, lr}
 8001ab6:	4684      	mov	ip, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
  hcsr04->htim = htim;
 8001abc:	f8cc 0000 	str.w	r0, [ip]
  hcsr04->tim_channel = tim_channel;
 8001ac0:	f8ac 2004 	strh.w	r2, [ip, #4]
  hcsr04->active_channel = active_channel;
 8001ac4:	f88c 3006 	strb.w	r3, [ip, #6]
  hcsr04->interrupt_channel = interrupt_channel;
 8001ac8:	9b02      	ldr	r3, [sp, #8]
 8001aca:	f8cc 3008 	str.w	r3, [ip, #8]
  hcsr04->gpio_trig_port = gpio_trig_port;
 8001ace:	9b03      	ldr	r3, [sp, #12]
 8001ad0:	f8cc 300c 	str.w	r3, [ip, #12]
  hcsr04->gpio_trig_pin = gpio_trig_pin;
 8001ad4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001ad8:	f8ac 3010 	strh.w	r3, [ip, #16]

  hcsr04->is_first_captured = false;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
  hcsr04->overflow_count = 0;
 8001ae2:	f88c 301c 	strb.w	r3, [ip, #28]
  hcsr04->difference = 0;
 8001ae6:	f8cc 3020 	str.w	r3, [ip, #32]
  hcsr04->val_1 = 0;
 8001aea:	f8cc 3014 	str.w	r3, [ip, #20]
  hcsr04->val_2 = 0;
 8001aee:	f8cc 3018 	str.w	r3, [ip, #24]
  hcsr04->range = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  // Start capture compare
  HAL_TIM_IC_Start_IT(hcsr04->htim, hcsr04->tim_channel);
 8001af8:	f006 fa14 	bl	8007f24 <HAL_TIM_IC_Start_IT>
}
 8001afc:	bd08      	pop	{r3, pc}

08001afe <hcsr04_measure>:

void hcsr04_measure(hcsr04_t *hcsr04) {
 8001afe:	b510      	push	{r4, lr}
 8001b00:	4604      	mov	r4, r0
  // Trigger
  HAL_GPIO_WritePin(hcsr04->gpio_trig_port, hcsr04->gpio_trig_pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 8001b02:	2201      	movs	r2, #1
 8001b04:	8a01      	ldrh	r1, [r0, #16]
 8001b06:	68c0      	ldr	r0, [r0, #12]
 8001b08:	f002 fe12 	bl	8004730 <HAL_GPIO_WritePin>
  osDelay(1);                                                                       // wait for 10 us
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff fa45 	bl	8000f9c <osDelay>
  HAL_GPIO_WritePin(hcsr04->gpio_trig_port, hcsr04->gpio_trig_pin, GPIO_PIN_RESET); // pull the TRIG pin low
 8001b12:	2200      	movs	r2, #0
 8001b14:	8a21      	ldrh	r1, [r4, #16]
 8001b16:	68e0      	ldr	r0, [r4, #12]
 8001b18:	f002 fe0a 	bl	8004730 <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(hcsr04->htim, hcsr04->interrupt_channel);
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68d3      	ldr	r3, [r2, #12]
 8001b22:	68a1      	ldr	r1, [r4, #8]
 8001b24:	430b      	orrs	r3, r1
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bd10      	pop	{r4, pc}
 8001b2a:	0000      	movs	r0, r0
 8001b2c:	0000      	movs	r0, r0
	...

08001b30 <hcsr04_handle_capture_complete>:

void hcsr04_handle_capture_complete(hcsr04_t *hcsr04) {
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4604      	mov	r4, r0
  if (!hcsr04->is_first_captured) {                                               // Rising edge capture
 8001b34:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d14c      	bne.n	8001bd6 <hcsr04_handle_capture_complete+0xa6>
    hcsr04->val_1 = HAL_TIM_ReadCapturedValue(hcsr04->htim, hcsr04->tim_channel); // read the first value
 8001b3c:	8881      	ldrh	r1, [r0, #4]
 8001b3e:	6800      	ldr	r0, [r0, #0]
 8001b40:	f005 f814 	bl	8006b6c <HAL_TIM_ReadCapturedValue>
 8001b44:	6160      	str	r0, [r4, #20]
    hcsr04->is_first_captured = true;                                             // set the first captured as true
 8001b46:	2301      	movs	r3, #1
 8001b48:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    hcsr04->overflow_count = 0;                                                   // reset overflow count
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	7723      	strb	r3, [r4, #28]

    // Now change the polarity to falling edge
    __HAL_TIM_SET_CAPTUREPOLARITY(hcsr04->htim, hcsr04->tim_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001b50:	88a3      	ldrh	r3, [r4, #4]
 8001b52:	b973      	cbnz	r3, 8001b72 <hcsr04_handle_capture_complete+0x42>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	6a13      	ldr	r3, [r2, #32]
 8001b5a:	f023 030a 	bic.w	r3, r3, #10
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	88a3      	ldrh	r3, [r4, #4]
 8001b62:	b9fb      	cbnz	r3, 8001ba4 <hcsr04_handle_capture_complete+0x74>
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	6a13      	ldr	r3, [r2, #32]
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e06b      	b.n	8001c4a <hcsr04_handle_capture_complete+0x11a>
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d008      	beq.n	8001b88 <hcsr04_handle_capture_complete+0x58>
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d00d      	beq.n	8001b96 <hcsr04_handle_capture_complete+0x66>
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	6a13      	ldr	r3, [r2, #32]
 8001b80:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	e7eb      	b.n	8001b60 <hcsr04_handle_capture_complete+0x30>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	6a13      	ldr	r3, [r2, #32]
 8001b8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e7e4      	b.n	8001b60 <hcsr04_handle_capture_complete+0x30>
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	6a13      	ldr	r3, [r2, #32]
 8001b9c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	e7dd      	b.n	8001b60 <hcsr04_handle_capture_complete+0x30>
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d008      	beq.n	8001bba <hcsr04_handle_capture_complete+0x8a>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d00d      	beq.n	8001bc8 <hcsr04_handle_capture_complete+0x98>
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	6a13      	ldr	r3, [r2, #32]
 8001bb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	e047      	b.n	8001c4a <hcsr04_handle_capture_complete+0x11a>
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	6a13      	ldr	r3, [r2, #32]
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	e040      	b.n	8001c4a <hcsr04_handle_capture_complete+0x11a>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	6a13      	ldr	r3, [r2, #32]
 8001bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e039      	b.n	8001c4a <hcsr04_handle_capture_complete+0x11a>

  } else {                                                                        // Falling edge capture
    hcsr04->val_2 = HAL_TIM_ReadCapturedValue(hcsr04->htim, hcsr04->tim_channel); // read second value
 8001bd6:	8881      	ldrh	r1, [r0, #4]
 8001bd8:	6800      	ldr	r0, [r0, #0]
 8001bda:	f004 ffc7 	bl	8006b6c <HAL_TIM_ReadCapturedValue>
 8001bde:	61a0      	str	r0, [r4, #24]
    hcsr04->val_2 += hcsr04->overflow_count * (hcsr04->htim->Instance->ARR + 1);  // handle overflow
 8001be0:	7f23      	ldrb	r3, [r4, #28]
 8001be2:	6825      	ldr	r5, [r4, #0]
 8001be4:	682a      	ldr	r2, [r5, #0]
 8001be6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001be8:	fb02 3303 	mla	r3, r2, r3, r3
 8001bec:	4418      	add	r0, r3
 8001bee:	61a0      	str	r0, [r4, #24]

    hcsr04->difference = hcsr04->val_2 - hcsr04->val_1;
 8001bf0:	6963      	ldr	r3, [r4, #20]
 8001bf2:	1ac0      	subs	r0, r0, r3
 8001bf4:	6220      	str	r0, [r4, #32]

    hcsr04->is_first_captured = false;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    hcsr04->overflow_count = 0;
 8001bfc:	7723      	strb	r3, [r4, #28]

    hcsr04->range = (hcsr04->difference * 0.034 / 2) / 100; // NOTE: The devision will be optimized by the compiler
 8001bfe:	f7fe fc79 	bl	80004f4 <__aeabi_ui2d>
 8001c02:	a329      	add	r3, pc, #164	@ (adr r3, 8001ca8 <hcsr04_handle_capture_complete+0x178>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fcee 	bl	80005e8 <__aeabi_dmul>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <hcsr04_handle_capture_complete+0x170>)
 8001c10:	f7fe fcea 	bl	80005e8 <__aeabi_dmul>
 8001c14:	2200      	movs	r2, #0
 8001c16:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <hcsr04_handle_capture_complete+0x174>)
 8001c18:	f7fe fe10 	bl	800083c <__aeabi_ddiv>
 8001c1c:	f7fe ffbc 	bl	8000b98 <__aeabi_d2f>
 8001c20:	62a0      	str	r0, [r4, #40]	@ 0x28

    // set polarity to rising edge
    __HAL_TIM_SET_CAPTUREPOLARITY(hcsr04->htim, hcsr04->tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c22:	88a3      	ldrh	r3, [r4, #4]
 8001c24:	b993      	cbnz	r3, 8001c4c <hcsr04_handle_capture_complete+0x11c>
 8001c26:	682a      	ldr	r2, [r5, #0]
 8001c28:	6a13      	ldr	r3, [r2, #32]
 8001c2a:	f023 030a 	bic.w	r3, r3, #10
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	88a3      	ldrh	r3, [r4, #4]
 8001c32:	bb0b      	cbnz	r3, 8001c78 <hcsr04_handle_capture_complete+0x148>
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(hcsr04->htim, hcsr04->interrupt_channel); // Disable the interrupt
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68d3      	ldr	r3, [r2, #12]
 8001c42:	68a1      	ldr	r1, [r4, #8]
 8001c44:	ea23 0301 	bic.w	r3, r3, r1
 8001c48:	60d3      	str	r3, [r2, #12]
  }
}
 8001c4a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_SET_CAPTUREPOLARITY(hcsr04->htim, hcsr04->tim_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d007      	beq.n	8001c60 <hcsr04_handle_capture_complete+0x130>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d00b      	beq.n	8001c6c <hcsr04_handle_capture_complete+0x13c>
 8001c54:	682a      	ldr	r2, [r5, #0]
 8001c56:	6a13      	ldr	r3, [r2, #32]
 8001c58:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	e7e7      	b.n	8001c30 <hcsr04_handle_capture_complete+0x100>
 8001c60:	682a      	ldr	r2, [r5, #0]
 8001c62:	6a13      	ldr	r3, [r2, #32]
 8001c64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	e7e1      	b.n	8001c30 <hcsr04_handle_capture_complete+0x100>
 8001c6c:	682a      	ldr	r2, [r5, #0]
 8001c6e:	6a13      	ldr	r3, [r2, #32]
 8001c70:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	e7db      	b.n	8001c30 <hcsr04_handle_capture_complete+0x100>
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d006      	beq.n	8001c8a <hcsr04_handle_capture_complete+0x15a>
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d009      	beq.n	8001c94 <hcsr04_handle_capture_complete+0x164>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	621a      	str	r2, [r3, #32]
 8001c88:	e7d8      	b.n	8001c3c <hcsr04_handle_capture_complete+0x10c>
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	621a      	str	r2, [r3, #32]
 8001c92:	e7d3      	b.n	8001c3c <hcsr04_handle_capture_complete+0x10c>
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	621a      	str	r2, [r3, #32]
 8001c9c:	e7ce      	b.n	8001c3c <hcsr04_handle_capture_complete+0x10c>
 8001c9e:	bf00      	nop
 8001ca0:	3fe00000 	.word	0x3fe00000
 8001ca4:	40590000 	.word	0x40590000
 8001ca8:	b020c49c 	.word	0xb020c49c
 8001cac:	3fa16872 	.word	0x3fa16872

08001cb0 <hcsr04_handle_period_elapsed_interrupt>:

void hcsr04_handle_period_elapsed_interrupt(hcsr04_t *hcsr04) { hcsr04->overflow_count++; }
 8001cb0:	7f03      	ldrb	r3, [r0, #28]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	7703      	strb	r3, [r0, #28]
 8001cb6:	4770      	bx	lr

08001cb8 <hcsr04_init_range_msg>:

void hcsr04_init_range_msg(sensor_msgs__msg__Range *msg, rosidl_runtime_c__String frame_id) {
 8001cb8:	b500      	push	{lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	4684      	mov	ip, r0
 8001cbe:	a801      	add	r0, sp, #4
 8001cc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  msg->radiation_type = 0;
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f88c 2014 	strb.w	r2, [ip, #20]
  msg->header.frame_id = frame_id;
 8001cca:	f10c 0e08 	add.w	lr, ip, #8
 8001cce:	c807      	ldmia	r0, {r0, r1, r2}
 8001cd0:	e88e 000b 	stmia.w	lr, {r0, r1, r3}
  msg->min_range = 0.02;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <hcsr04_init_range_msg+0x3c>)
 8001cd6:	f8cc 301c 	str.w	r3, [ip, #28]
  msg->max_range = 4;
 8001cda:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001cde:	f8cc 3020 	str.w	r3, [ip, #32]
  msg->field_of_view = 0.2617994;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <hcsr04_init_range_msg+0x40>)
 8001ce4:	f8cc 3018 	str.w	r3, [ip, #24]
  msg->range = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8cc 3024 	str.w	r3, [ip, #36]	@ 0x24
}
 8001cee:	b005      	add	sp, #20
 8001cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cf4:	3ca3d70a 	.word	0x3ca3d70a
 8001cf8:	3e860a92 	.word	0x3e860a92

08001cfc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001cfc:	4a13      	ldr	r2, [pc, #76]	@ (8001d4c <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001cfe:	f012 0f07 	tst.w	r2, #7
 8001d02:	d01f      	beq.n	8001d44 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d04:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d06:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d0a:	f5c1 633b 	rsb	r3, r1, #2992	@ 0xbb0
 8001d0e:	3308      	adds	r3, #8
 8001d10:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d12:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d14:	480e      	ldr	r0, [pc, #56]	@ (8001d50 <prvHeapInit+0x54>)
 8001d16:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d18:	2100      	movs	r1, #0
 8001d1a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d1c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001d1e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d20:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8001d24:	480b      	ldr	r0, [pc, #44]	@ (8001d54 <prvHeapInit+0x58>)
 8001d26:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8001d28:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d2a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d2c:	1a99      	subs	r1, r3, r2
 8001d2e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d30:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <prvHeapInit+0x5c>)
 8001d34:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <prvHeapInit+0x60>)
 8001d38:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <prvHeapInit+0x64>)
 8001d3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d44:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001d48:	e7e4      	b.n	8001d14 <prvHeapInit+0x18>
 8001d4a:	bf00      	nop
 8001d4c:	20007250 	.word	0x20007250
 8001d50:	20007248 	.word	0x20007248
 8001d54:	20007244 	.word	0x20007244
 8001d58:	2000723c 	.word	0x2000723c
 8001d5c:	20007240 	.word	0x20007240
 8001d60:	20007230 	.word	0x20007230

08001d64 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d64:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <prvInsertBlockIntoFreeList+0x5c>)
 8001d66:	461a      	mov	r2, r3
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4283      	cmp	r3, r0
 8001d6c:	d3fb      	bcc.n	8001d66 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d6e:	6851      	ldr	r1, [r2, #4]
 8001d70:	eb02 0c01 	add.w	ip, r2, r1
 8001d74:	4584      	cmp	ip, r0
 8001d76:	d009      	beq.n	8001d8c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d78:	6841      	ldr	r1, [r0, #4]
 8001d7a:	eb00 0c01 	add.w	ip, r0, r1
 8001d7e:	4563      	cmp	r3, ip
 8001d80:	d009      	beq.n	8001d96 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d82:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d019      	beq.n	8001dbc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d88:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8001d8a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d8c:	6840      	ldr	r0, [r0, #4]
 8001d8e:	4401      	add	r1, r0
 8001d90:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8001d92:	4610      	mov	r0, r2
 8001d94:	e7f0      	b.n	8001d78 <prvInsertBlockIntoFreeList+0x14>
{
 8001d96:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d98:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc4 <prvInsertBlockIntoFreeList+0x60>)
 8001d9a:	6824      	ldr	r4, [r4, #0]
 8001d9c:	42a3      	cmp	r3, r4
 8001d9e:	d00b      	beq.n	8001db8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4419      	add	r1, r3
 8001da4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001da6:	6813      	ldr	r3, [r2, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8001dac:	4290      	cmp	r0, r2
 8001dae:	d000      	beq.n	8001db2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001db0:	6010      	str	r0, [r2, #0]
	}
}
 8001db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001db6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001db8:	6004      	str	r4, [r0, #0]
 8001dba:	e7f7      	b.n	8001dac <prvInsertBlockIntoFreeList+0x48>
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20007248 	.word	0x20007248
 8001dc4:	20007244 	.word	0x20007244

08001dc8 <pvPortMalloc>:
{
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001dcc:	f007 ff6c 	bl	8009ca8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001dd0:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <pvPortMalloc+0xec>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b1b3      	cbz	r3, 8001e04 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001dd6:	4b38      	ldr	r3, [pc, #224]	@ (8001eb8 <pvPortMalloc+0xf0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	421c      	tst	r4, r3
 8001ddc:	d150      	bne.n	8001e80 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d050      	beq.n	8001e84 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8001de2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001de6:	f014 0f07 	tst.w	r4, #7
 8001dea:	d002      	beq.n	8001df2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001dec:	f022 0207 	bic.w	r2, r2, #7
 8001df0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	d055      	beq.n	8001ea2 <pvPortMalloc+0xda>
 8001df6:	4b31      	ldr	r3, [pc, #196]	@ (8001ebc <pvPortMalloc+0xf4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d353      	bcc.n	8001ea6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8001dfe:	4930      	ldr	r1, [pc, #192]	@ (8001ec0 <pvPortMalloc+0xf8>)
 8001e00:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e02:	e004      	b.n	8001e0e <pvPortMalloc+0x46>
			prvHeapInit();
 8001e04:	f7ff ff7a 	bl	8001cfc <prvHeapInit>
 8001e08:	e7e5      	b.n	8001dd6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8001e0a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8001e0c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d202      	bcs.n	8001e1a <pvPortMalloc+0x52>
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f7      	bne.n	8001e0a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8001e1a:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <pvPortMalloc+0xec>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	42a3      	cmp	r3, r4
 8001e20:	d043      	beq.n	8001eaa <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e22:	680d      	ldr	r5, [r1, #0]
 8001e24:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d910      	bls.n	8001e54 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e32:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e34:	f010 0f07 	tst.w	r0, #7
 8001e38:	d008      	beq.n	8001e4c <pvPortMalloc+0x84>
 8001e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	e7fe      	b.n	8001e4a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e4c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001e4e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e50:	f7ff ff88 	bl	8001d64 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e54:	6862      	ldr	r2, [r4, #4]
 8001e56:	4919      	ldr	r1, [pc, #100]	@ (8001ebc <pvPortMalloc+0xf4>)
 8001e58:	680b      	ldr	r3, [r1, #0]
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e5e:	4919      	ldr	r1, [pc, #100]	@ (8001ec4 <pvPortMalloc+0xfc>)
 8001e60:	6809      	ldr	r1, [r1, #0]
 8001e62:	428b      	cmp	r3, r1
 8001e64:	d201      	bcs.n	8001e6a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e66:	4917      	ldr	r1, [pc, #92]	@ (8001ec4 <pvPortMalloc+0xfc>)
 8001e68:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <pvPortMalloc+0xf0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8001e76:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <pvPortMalloc+0x100>)
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e002      	b.n	8001e86 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8001e80:	2500      	movs	r5, #0
 8001e82:	e000      	b.n	8001e86 <pvPortMalloc+0xbe>
 8001e84:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8001e86:	f007 ffa9 	bl	8009ddc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e8a:	f015 0f07 	tst.w	r5, #7
 8001e8e:	d00e      	beq.n	8001eae <pvPortMalloc+0xe6>
 8001e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e94:	f383 8811 	msr	BASEPRI, r3
 8001e98:	f3bf 8f6f 	isb	sy
 8001e9c:	f3bf 8f4f 	dsb	sy
 8001ea0:	e7fe      	b.n	8001ea0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	e7ef      	b.n	8001e86 <pvPortMalloc+0xbe>
 8001ea6:	2500      	movs	r5, #0
 8001ea8:	e7ed      	b.n	8001e86 <pvPortMalloc+0xbe>
 8001eaa:	2500      	movs	r5, #0
 8001eac:	e7eb      	b.n	8001e86 <pvPortMalloc+0xbe>
}
 8001eae:	4628      	mov	r0, r5
 8001eb0:	bd38      	pop	{r3, r4, r5, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20007244 	.word	0x20007244
 8001eb8:	20007230 	.word	0x20007230
 8001ebc:	20007240 	.word	0x20007240
 8001ec0:	20007248 	.word	0x20007248
 8001ec4:	2000723c 	.word	0x2000723c
 8001ec8:	20007238 	.word	0x20007238

08001ecc <vPortFree>:
	if( pv != NULL )
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d034      	beq.n	8001f3a <vPortFree+0x6e>
{
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001ed4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001ed8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001edc:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <vPortFree+0x70>)
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4213      	tst	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <vPortFree+0x2a>
 8001ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	e7fe      	b.n	8001ef4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ef6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001efa:	b141      	cbz	r1, 8001f0e <vPortFree+0x42>
 8001efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	e7fe      	b.n	8001f0c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001f0e:	ea23 0302 	bic.w	r3, r3, r2
 8001f12:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001f16:	f007 fec7 	bl	8009ca8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001f1a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <vPortFree+0x74>)
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	440b      	add	r3, r1
 8001f24:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f26:	4628      	mov	r0, r5
 8001f28:	f7ff ff1c 	bl	8001d64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001f2c:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <vPortFree+0x78>)
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8001f34:	f007 ff52 	bl	8009ddc <xTaskResumeAll>
}
 8001f38:	bd38      	pop	{r3, r4, r5, pc}
 8001f3a:	4770      	bx	lr
 8001f3c:	20007230 	.word	0x20007230
 8001f40:	20007240 	.word	0x20007240
 8001f44:	20007234 	.word	0x20007234

08001f48 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f48:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f4a:	4812      	ldr	r0, [pc, #72]	@ (8001f94 <MX_I2C1_Init+0x4c>)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_I2C1_Init+0x50>)
 8001f4e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_I2C1_Init+0x54>)
 8001f52:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f5c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f60:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f62:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f64:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f66:	f002 fc53 	bl	8004810 <HAL_I2C_Init>
 8001f6a:	b950      	cbnz	r0, 8001f82 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4809      	ldr	r0, [pc, #36]	@ (8001f94 <MX_I2C1_Init+0x4c>)
 8001f70:	f003 f86c 	bl	800504c <HAL_I2CEx_ConfigAnalogFilter>
 8001f74:	b940      	cbnz	r0, 8001f88 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <MX_I2C1_Init+0x4c>)
 8001f7a:	f003 f8b7 	bl	80050ec <HAL_I2CEx_ConfigDigitalFilter>
 8001f7e:	b930      	cbnz	r0, 8001f8e <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f82:	f000 f97b 	bl	800227c <Error_Handler>
 8001f86:	e7f1      	b.n	8001f6c <MX_I2C1_Init+0x24>
    Error_Handler();
 8001f88:	f000 f978 	bl	800227c <Error_Handler>
 8001f8c:	e7f3      	b.n	8001f76 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8001f8e:	f000 f975 	bl	800227c <Error_Handler>
}
 8001f92:	e7f5      	b.n	8001f80 <MX_I2C1_Init+0x38>
 8001f94:	20007e98 	.word	0x20007e98
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	10d19ce4 	.word	0x10d19ce4

08001fa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	b0a2      	sub	sp, #136	@ 0x88
 8001fa4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	911d      	str	r1, [sp, #116]	@ 0x74
 8001faa:	911e      	str	r1, [sp, #120]	@ 0x78
 8001fac:	911f      	str	r1, [sp, #124]	@ 0x7c
 8001fae:	9120      	str	r1, [sp, #128]	@ 0x80
 8001fb0:	9121      	str	r1, [sp, #132]	@ 0x84
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb2:	2268      	movs	r2, #104	@ 0x68
 8001fb4:	a803      	add	r0, sp, #12
 8001fb6:	f018 fe8a 	bl	801acce <memset>
  if(i2cHandle->Instance==I2C1)
 8001fba:	6822      	ldr	r2, [r4, #0]
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80020a8 <HAL_I2C_MspInit+0x108>)
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fc2:	b022      	add	sp, #136	@ 0x88
 8001fc4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fc6:	2340      	movs	r3, #64	@ 0x40
 8001fc8:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fca:	a803      	add	r0, sp, #12
 8001fcc:	f004 f88e 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d15f      	bne.n	8002094 <HAL_I2C_MspInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4e35      	ldr	r6, [pc, #212]	@ (80020ac <HAL_I2C_MspInit+0x10c>)
 8001fd6:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001fde:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fe8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fec:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fee:	2312      	movs	r3, #18
 8001ff0:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	951f      	str	r5, [sp, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	9320      	str	r3, [sp, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	9321      	str	r3, [sp, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	a91d      	add	r1, sp, #116	@ 0x74
 8002000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002004:	f002 fa24 	bl	8004450 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002008:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 800200a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800200e:	65b3      	str	r3, [r6, #88]	@ 0x58
 8002010:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8002012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 800201a:	4825      	ldr	r0, [pc, #148]	@ (80020b0 <HAL_I2C_MspInit+0x110>)
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_I2C_MspInit+0x114>)
 800201e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8002020:	2305      	movs	r3, #5
 8002022:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002024:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002026:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	6103      	str	r3, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202c:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800202e:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002030:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002032:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002036:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002038:	f001 fffe 	bl	8004038 <HAL_DMA_Init>
 800203c:	bb68      	cbnz	r0, 800209a <HAL_I2C_MspInit+0xfa>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <HAL_I2C_MspInit+0x110>)
 8002040:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002042:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_i2c1_tx.Instance = DMA2_Channel7;
 8002044:	481c      	ldr	r0, [pc, #112]	@ (80020b8 <HAL_I2C_MspInit+0x118>)
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_I2C_MspInit+0x11c>)
 8002048:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_5;
 800204a:	2305      	movs	r3, #5
 800204c:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800204e:	2310      	movs	r3, #16
 8002050:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002056:	2280      	movs	r2, #128	@ 0x80
 8002058:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800205a:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800205c:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800205e:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002060:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002064:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002066:	f001 ffe7 	bl	8004038 <HAL_DMA_Init>
 800206a:	b9c8      	cbnz	r0, 80020a0 <HAL_I2C_MspInit+0x100>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_I2C_MspInit+0x118>)
 800206e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002070:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2105      	movs	r1, #5
 8002076:	201f      	movs	r0, #31
 8002078:	f001 ff92 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800207c:	201f      	movs	r0, #31
 800207e:	f001 ffb3 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2105      	movs	r1, #5
 8002086:	2020      	movs	r0, #32
 8002088:	f001 ff8a 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800208c:	2020      	movs	r0, #32
 800208e:	f001 ffab 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
}
 8002092:	e796      	b.n	8001fc2 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002094:	f000 f8f2 	bl	800227c <Error_Handler>
 8002098:	e79c      	b.n	8001fd4 <HAL_I2C_MspInit+0x34>
      Error_Handler();
 800209a:	f000 f8ef 	bl	800227c <Error_Handler>
 800209e:	e7ce      	b.n	800203e <HAL_I2C_MspInit+0x9e>
      Error_Handler();
 80020a0:	f000 f8ec 	bl	800227c <Error_Handler>
 80020a4:	e7e2      	b.n	800206c <HAL_I2C_MspInit+0xcc>
 80020a6:	bf00      	nop
 80020a8:	40005400 	.word	0x40005400
 80020ac:	40021000 	.word	0x40021000
 80020b0:	20007e50 	.word	0x20007e50
 80020b4:	4002046c 	.word	0x4002046c
 80020b8:	20007e08 	.word	0x20007e08
 80020bc:	40020480 	.word	0x40020480

080020c0 <HAL_GPIO_EXTI_Callback>:

/*
 * GPIO external interrupt
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020c0:	b508      	push	{r3, lr}

  // Handle encoder ext interrupts
  if (GPIO_Pin == encoder_1.gpio_a_pin) {
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80020c4:	889b      	ldrh	r3, [r3, #4]
 80020c6:	4283      	cmp	r3, r0
 80020c8:	d004      	beq.n	80020d4 <HAL_GPIO_EXTI_Callback+0x14>
    encoder_handle_interrupt(&encoder_1);
  } else if (GPIO_Pin == encoder_2.gpio_a_pin) {
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	4283      	cmp	r3, r0
 80020d0:	d004      	beq.n	80020dc <HAL_GPIO_EXTI_Callback+0x1c>
    encoder_handle_interrupt(&encoder_2);
  } 
}
 80020d2:	bd08      	pop	{r3, pc}
    encoder_handle_interrupt(&encoder_1);
 80020d4:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80020d6:	f7ff f98e 	bl	80013f6 <encoder_handle_interrupt>
 80020da:	e7fa      	b.n	80020d2 <HAL_GPIO_EXTI_Callback+0x12>
    encoder_handle_interrupt(&encoder_2);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80020de:	f7ff f98a 	bl	80013f6 <encoder_handle_interrupt>
}
 80020e2:	e7f6      	b.n	80020d2 <HAL_GPIO_EXTI_Callback+0x12>
 80020e4:	20007ff4 	.word	0x20007ff4
 80020e8:	20007fe0 	.word	0x20007fe0

080020ec <HAL_TIM_IC_CaptureCallback>:
// void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {}

/*
 * Input Capture Callback
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80020ec:	b508      	push	{r3, lr}
  if (htim->Channel == ultra_1.active_channel && htim == ultra_1.htim) { // US 1
 80020ee:	7f02      	ldrb	r2, [r0, #28]
 80020f0:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x68>)
 80020f2:	799b      	ldrb	r3, [r3, #6]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d00c      	beq.n	8002112 <HAL_TIM_IC_CaptureCallback+0x26>
    hcsr04_handle_capture_complete(&ultra_1);
  } else if (htim->Channel == ultra_2.active_channel && htim == ultra_2.htim) { // US 2
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80020fa:	799b      	ldrb	r3, [r3, #6]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d010      	beq.n	8002122 <HAL_TIM_IC_CaptureCallback+0x36>
    hcsr04_handle_capture_complete(&ultra_2);
  } else if (htim->Channel == ultra_3.active_channel && htim == ultra_3.htim) { // US 3
 8002100:	4b16      	ldr	r3, [pc, #88]	@ (800215c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002102:	799b      	ldrb	r3, [r3, #6]
 8002104:	429a      	cmp	r2, r3
 8002106:	d014      	beq.n	8002132 <HAL_TIM_IC_CaptureCallback+0x46>
    hcsr04_handle_capture_complete(&ultra_3);
  } else if (htim->Channel == ultra_4.active_channel && htim == ultra_4.htim) { // US 4
 8002108:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_TIM_IC_CaptureCallback+0x74>)
 800210a:	799b      	ldrb	r3, [r3, #6]
 800210c:	429a      	cmp	r2, r3
 800210e:	d018      	beq.n	8002142 <HAL_TIM_IC_CaptureCallback+0x56>
    hcsr04_handle_capture_complete(&ultra_4);
  }
 8002110:	bd08      	pop	{r3, pc}
  if (htim->Channel == ultra_1.active_channel && htim == ultra_1.htim) { // US 1
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4283      	cmp	r3, r0
 8002118:	d1ee      	bne.n	80020f8 <HAL_TIM_IC_CaptureCallback+0xc>
    hcsr04_handle_capture_complete(&ultra_1);
 800211a:	480e      	ldr	r0, [pc, #56]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x68>)
 800211c:	f7ff fd08 	bl	8001b30 <hcsr04_handle_capture_complete>
 8002120:	e7f6      	b.n	8002110 <HAL_TIM_IC_CaptureCallback+0x24>
  } else if (htim->Channel == ultra_2.active_channel && htim == ultra_2.htim) { // US 2
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4283      	cmp	r3, r0
 8002128:	d1ea      	bne.n	8002100 <HAL_TIM_IC_CaptureCallback+0x14>
    hcsr04_handle_capture_complete(&ultra_2);
 800212a:	480b      	ldr	r0, [pc, #44]	@ (8002158 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800212c:	f7ff fd00 	bl	8001b30 <hcsr04_handle_capture_complete>
 8002130:	e7ee      	b.n	8002110 <HAL_TIM_IC_CaptureCallback+0x24>
  } else if (htim->Channel == ultra_3.active_channel && htim == ultra_3.htim) { // US 3
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4283      	cmp	r3, r0
 8002138:	d1e6      	bne.n	8002108 <HAL_TIM_IC_CaptureCallback+0x1c>
    hcsr04_handle_capture_complete(&ultra_3);
 800213a:	4808      	ldr	r0, [pc, #32]	@ (800215c <HAL_TIM_IC_CaptureCallback+0x70>)
 800213c:	f7ff fcf8 	bl	8001b30 <hcsr04_handle_capture_complete>
 8002140:	e7e6      	b.n	8002110 <HAL_TIM_IC_CaptureCallback+0x24>
  } else if (htim->Channel == ultra_4.active_channel && htim == ultra_4.htim) { // US 4
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4283      	cmp	r3, r0
 8002148:	d1e2      	bne.n	8002110 <HAL_TIM_IC_CaptureCallback+0x24>
    hcsr04_handle_capture_complete(&ultra_4);
 800214a:	4805      	ldr	r0, [pc, #20]	@ (8002160 <HAL_TIM_IC_CaptureCallback+0x74>)
 800214c:	f7ff fcf0 	bl	8001b30 <hcsr04_handle_capture_complete>
 8002150:	e7de      	b.n	8002110 <HAL_TIM_IC_CaptureCallback+0x24>
 8002152:	bf00      	nop
 8002154:	20007fb4 	.word	0x20007fb4
 8002158:	20007f88 	.word	0x20007f88
 800215c:	20007f5c 	.word	0x20007f5c
 8002160:	20007f30 	.word	0x20007f30

08002164 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002164:	f100 0308 	add.w	r3, r0, #8
 8002168:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216a:	f04f 32ff 	mov.w	r2, #4294967295
 800216e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002170:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002172:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002178:	4770      	bx	lr

0800217a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800217e:	4770      	bx	lr

08002180 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002180:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002182:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002188:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800218a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800218c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800218e:	6803      	ldr	r3, [r0, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	6003      	str	r3, [r0, #0]
}
 8002194:	4770      	bx	lr

08002196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002196:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002198:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800219a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800219e:	d011      	beq.n	80021c4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021a0:	f100 0308 	add.w	r3, r0, #8
 80021a4:	461c      	mov	r4, r3
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	42aa      	cmp	r2, r5
 80021ac:	d9fa      	bls.n	80021a4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021ae:	6863      	ldr	r3, [r4, #4]
 80021b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021b2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021b4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80021b6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80021ba:	6803      	ldr	r3, [r0, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	6003      	str	r3, [r0, #0]
}
 80021c0:	bc30      	pop	{r4, r5}
 80021c2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80021c4:	6904      	ldr	r4, [r0, #16]
 80021c6:	e7f2      	b.n	80021ae <vListInsert+0x18>

080021c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ca:	6841      	ldr	r1, [r0, #4]
 80021cc:	6882      	ldr	r2, [r0, #8]
 80021ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021d0:	6841      	ldr	r1, [r0, #4]
 80021d2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4282      	cmp	r2, r0
 80021d8:	d006      	beq.n	80021e8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021da:	2200      	movs	r2, #0
 80021dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	3a01      	subs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021e4:	6818      	ldr	r0, [r3, #0]
}
 80021e6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021e8:	6882      	ldr	r2, [r0, #8]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	e7f5      	b.n	80021da <uxListRemove+0x12>
	...

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b510      	push	{r4, lr}
 80021f2:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80021f4:	6802      	ldr	r2, [r0, #0]
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d011      	beq.n	8002220 <HAL_TIM_PeriodElapsedCallback+0x30>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Channel == ultra_1.active_channel && htim == ultra_1.htim) { // US 1
 80021fc:	7f23      	ldrb	r3, [r4, #28]
 80021fe:	4a1b      	ldr	r2, [pc, #108]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002200:	7992      	ldrb	r2, [r2, #6]
 8002202:	4293      	cmp	r3, r2
 8002204:	d00f      	beq.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x36>
    hcsr04_handle_period_elapsed_interrupt(&ultra_1);
  } else if (htim->Channel == ultra_2.active_channel && htim == ultra_2.htim) { // US 2
 8002206:	4a1a      	ldr	r2, [pc, #104]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002208:	7992      	ldrb	r2, [r2, #6]
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x46>
    hcsr04_handle_period_elapsed_interrupt(&ultra_2);
  } else if (htim->Channel == ultra_3.active_channel && htim == ultra_3.htim) { // US 3
 800220e:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002210:	7992      	ldrb	r2, [r2, #6]
 8002212:	4293      	cmp	r3, r2
 8002214:	d017      	beq.n	8002246 <HAL_TIM_PeriodElapsedCallback+0x56>
    hcsr04_handle_period_elapsed_interrupt(&ultra_3);
  } else if (htim->Channel == ultra_4.active_channel && htim == ultra_4.htim) { // US 4
 8002216:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002218:	7992      	ldrb	r2, [r2, #6]
 800221a:	4293      	cmp	r3, r2
 800221c:	d01b      	beq.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x66>
    hcsr04_handle_period_elapsed_interrupt(&ultra_4);
  }
  /* USER CODE END Callback 1 */
}
 800221e:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8002220:	f001 f81e 	bl	8003260 <HAL_IncTick>
 8002224:	e7ea      	b.n	80021fc <HAL_TIM_PeriodElapsedCallback+0xc>
  if (htim->Channel == ultra_1.active_channel && htim == ultra_1.htim) { // US 1
 8002226:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	42a2      	cmp	r2, r4
 800222c:	d1eb      	bne.n	8002206 <HAL_TIM_PeriodElapsedCallback+0x16>
    hcsr04_handle_period_elapsed_interrupt(&ultra_1);
 800222e:	480f      	ldr	r0, [pc, #60]	@ (800226c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002230:	f7ff fd3e 	bl	8001cb0 <hcsr04_handle_period_elapsed_interrupt>
 8002234:	e7f3      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0x2e>
  } else if (htim->Channel == ultra_2.active_channel && htim == ultra_2.htim) { // US 2
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	42a2      	cmp	r2, r4
 800223c:	d1e7      	bne.n	800220e <HAL_TIM_PeriodElapsedCallback+0x1e>
    hcsr04_handle_period_elapsed_interrupt(&ultra_2);
 800223e:	480c      	ldr	r0, [pc, #48]	@ (8002270 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002240:	f7ff fd36 	bl	8001cb0 <hcsr04_handle_period_elapsed_interrupt>
 8002244:	e7eb      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0x2e>
  } else if (htim->Channel == ultra_3.active_channel && htim == ultra_3.htim) { // US 3
 8002246:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	42a2      	cmp	r2, r4
 800224c:	d1e3      	bne.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x26>
    hcsr04_handle_period_elapsed_interrupt(&ultra_3);
 800224e:	4809      	ldr	r0, [pc, #36]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002250:	f7ff fd2e 	bl	8001cb0 <hcsr04_handle_period_elapsed_interrupt>
 8002254:	e7e3      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0x2e>
  } else if (htim->Channel == ultra_4.active_channel && htim == ultra_4.htim) { // US 4
 8002256:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	42a3      	cmp	r3, r4
 800225c:	d1df      	bne.n	800221e <HAL_TIM_PeriodElapsedCallback+0x2e>
    hcsr04_handle_period_elapsed_interrupt(&ultra_4);
 800225e:	4806      	ldr	r0, [pc, #24]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002260:	f7ff fd26 	bl	8001cb0 <hcsr04_handle_period_elapsed_interrupt>
}
 8002264:	e7db      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0x2e>
 8002266:	bf00      	nop
 8002268:	40014400 	.word	0x40014400
 800226c:	20007fb4 	.word	0x20007fb4
 8002270:	20007f88 	.word	0x20007f88
 8002274:	20007f5c 	.word	0x20007f5c
 8002278:	20007f30 	.word	0x20007f30

0800227c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800227e:	e7fe      	b.n	800227e <Error_Handler+0x2>

08002280 <SystemClock_Config>:
{
 8002280:	b500      	push	{lr}
 8002282:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002284:	2244      	movs	r2, #68	@ 0x44
 8002286:	2100      	movs	r1, #0
 8002288:	a805      	add	r0, sp, #20
 800228a:	f018 fd20 	bl	801acce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228e:	2300      	movs	r3, #0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	9303      	str	r3, [sp, #12]
 8002298:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800229a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800229e:	f002 ff99 	bl	80051d4 <HAL_PWREx_ControlVoltageScaling>
 80022a2:	bb20      	cbnz	r0, 80022ee <SystemClock_Config+0x6e>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a4:	2302      	movs	r3, #2
 80022a6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ac:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80022ae:	2240      	movs	r2, #64	@ 0x40
 80022b0:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b2:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b4:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022b6:	2201      	movs	r2, #1
 80022b8:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022ba:	220a      	movs	r2, #10
 80022bc:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022be:	2207      	movs	r2, #7
 80022c0:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022c2:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022c4:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c6:	a805      	add	r0, sp, #20
 80022c8:	f003 f872 	bl	80053b0 <HAL_RCC_OscConfig>
 80022cc:	b988      	cbnz	r0, 80022f2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ce:	230f      	movs	r3, #15
 80022d0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d2:	2303      	movs	r3, #3
 80022d4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022da:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022dc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022de:	2104      	movs	r1, #4
 80022e0:	4668      	mov	r0, sp
 80022e2:	f003 fc73 	bl	8005bcc <HAL_RCC_ClockConfig>
 80022e6:	b930      	cbnz	r0, 80022f6 <SystemClock_Config+0x76>
}
 80022e8:	b017      	add	sp, #92	@ 0x5c
 80022ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80022ee:	f7ff ffc5 	bl	800227c <Error_Handler>
    Error_Handler();
 80022f2:	f7ff ffc3 	bl	800227c <Error_Handler>
    Error_Handler();
 80022f6:	f7ff ffc1 	bl	800227c <Error_Handler>
	...

080022fc <main>:
{
 80022fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002300:	b085      	sub	sp, #20
  HAL_Init();
 8002302:	f000 ff9d 	bl	8003240 <HAL_Init>
  SystemClock_Config();
 8002306:	f7ff ffbb 	bl	8002280 <SystemClock_Config>
  MX_GPIO_Init();
 800230a:	f7ff fb11 	bl	8001930 <MX_GPIO_Init>
  MX_DMA_Init();
 800230e:	f7fe ffc5 	bl	800129c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002312:	f008 fc51 	bl	800abb8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002316:	f008 f913 	bl	800a540 <MX_TIM2_Init>
  MX_TIM1_Init();
 800231a:	f008 f895 	bl	800a448 <MX_TIM1_Init>
  MX_TIM3_Init();
 800231e:	f008 f997 	bl	800a650 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002322:	f7ff fe11 	bl	8001f48 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002326:	f7fe fd11 	bl	8000d4c <MX_ADC1_Init>
  HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, GPIO_PIN_SET);
 800232a:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 800245c <main+0x160>
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002334:	4640      	mov	r0, r8
 8002336:	f002 f9fb 	bl	8004730 <HAL_GPIO_WritePin>
  motor_left.timer = &htim1;
 800233a:	483c      	ldr	r0, [pc, #240]	@ (800242c <main+0x130>)
 800233c:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <main+0x134>)
 800233e:	6003      	str	r3, [r0, #0]
  motor_left.pwm_channel = TIM_CHANNEL_3;
 8002340:	2408      	movs	r4, #8
 8002342:	6044      	str	r4, [r0, #4]
  motor_left.dir_gpio_port = MA_DIR_GPIO_Port;
 8002344:	f04f 4a90 	mov.w	sl, #1207959552	@ 0x48000000
 8002348:	f8c0 a008 	str.w	sl, [r0, #8]
  motor_left.dir_gpio_pin = MA_DIR_Pin;
 800234c:	f44f 7b80 	mov.w	fp, #256	@ 0x100
 8002350:	f8a0 b00c 	strh.w	fp, [r0, #12]
  motor_right.timer = &htim2;
 8002354:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 8002460 <main+0x164>
 8002358:	4f36      	ldr	r7, [pc, #216]	@ (8002434 <main+0x138>)
 800235a:	f8c9 7000 	str.w	r7, [r9]
  motor_right.pwm_channel = TIM_CHANNEL_2;
 800235e:	2504      	movs	r5, #4
 8002360:	f8c9 5004 	str.w	r5, [r9, #4]
  motor_right.dir_gpio_port = MD_DIR_GPIO_Port;
 8002364:	4e34      	ldr	r6, [pc, #208]	@ (8002438 <main+0x13c>)
 8002366:	f8c9 6008 	str.w	r6, [r9, #8]
  motor_right.dir_gpio_pin = MD_DIR_Pin;
 800236a:	f8a9 400c 	strh.w	r4, [r9, #12]
  Motor_Init(&motor_left);
 800236e:	f000 f9a7 	bl	80026c0 <Motor_Init>
  Motor_Init(&motor_right);
 8002372:	4648      	mov	r0, r9
 8002374:	f000 f9a4 	bl	80026c0 <Motor_Init>
  steering_servo.timer = &htim3;  // Example: TIM3 for servo
 8002378:	4830      	ldr	r0, [pc, #192]	@ (800243c <main+0x140>)
 800237a:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 8002464 <main+0x168>
 800237e:	f8c0 9000 	str.w	r9, [r0]
  steering_servo.channel = TIM_CHANNEL_3;
 8002382:	6044      	str	r4, [r0, #4]
  Servo_Init(&steering_servo);
 8002384:	f000 ff4e 	bl	8003224 <Servo_Init>
  InitMotionControl(&motion_state);
 8002388:	482d      	ldr	r0, [pc, #180]	@ (8002440 <main+0x144>)
 800238a:	f000 f921 	bl	80025d0 <InitMotionControl>
  encoder_init(&encoder_1, MA_ENCA_GPIO_Port, MA_ENCA_Pin, MA_ENCB_GPIO_Port, MA_ENCB_Pin);
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4633      	mov	r3, r6
 8002394:	2240      	movs	r2, #64	@ 0x40
 8002396:	4641      	mov	r1, r8
 8002398:	482a      	ldr	r0, [pc, #168]	@ (8002444 <main+0x148>)
 800239a:	f7ff f823 	bl	80013e4 <encoder_init>
  encoder_init(&encoder_2, MD_ENCA_GPIO_Port, MD_ENCA_Pin, MD_ENCB_GPIO_Port, MD_ENCB_Pin);
 800239e:	2301      	movs	r3, #1
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	4633      	mov	r3, r6
 80023a4:	2202      	movs	r2, #2
 80023a6:	4631      	mov	r1, r6
 80023a8:	4827      	ldr	r0, [pc, #156]	@ (8002448 <main+0x14c>)
 80023aa:	f7ff f81b 	bl	80013e4 <encoder_init>
  hcsr04_init(&ultra_1, &htim2, TIM_CHANNEL_4, HAL_TIM_ACTIVE_CHANNEL_4, TIM_IT_CC4, Ultra_1_Trig_GPIO_Port, Ultra_1_Trig_Pin);
 80023ae:	2302      	movs	r3, #2
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	f8cd a004 	str.w	sl, [sp, #4]
 80023b6:	2310      	movs	r3, #16
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4623      	mov	r3, r4
 80023bc:	220c      	movs	r2, #12
 80023be:	4639      	mov	r1, r7
 80023c0:	4822      	ldr	r0, [pc, #136]	@ (800244c <main+0x150>)
 80023c2:	f7ff fb77 	bl	8001ab4 <hcsr04_init>
  hcsr04_init(&ultra_2, &htim2, TIM_CHANNEL_3, HAL_TIM_ACTIVE_CHANNEL_3, TIM_IT_CC3, Ultra_2_Echo_GPIO_Port, Ultra_2_Echo_Pin);
 80023c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ca:	9302      	str	r3, [sp, #8]
 80023cc:	f8cd 8004 	str.w	r8, [sp, #4]
 80023d0:	9400      	str	r4, [sp, #0]
 80023d2:	462b      	mov	r3, r5
 80023d4:	4622      	mov	r2, r4
 80023d6:	4639      	mov	r1, r7
 80023d8:	481d      	ldr	r0, [pc, #116]	@ (8002450 <main+0x154>)
 80023da:	f7ff fb6b 	bl	8001ab4 <hcsr04_init>
  hcsr04_init(&ultra_3, &htim3, TIM_CHANNEL_4, HAL_TIM_ACTIVE_CHANNEL_4, TIM_IT_CC4, Ultra_3_Trig_GPIO_Port, Ultra_3_Trig_Pin);
 80023de:	9502      	str	r5, [sp, #8]
 80023e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80023e4:	2310      	movs	r3, #16
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4623      	mov	r3, r4
 80023ea:	220c      	movs	r2, #12
 80023ec:	4649      	mov	r1, r9
 80023ee:	4819      	ldr	r0, [pc, #100]	@ (8002454 <main+0x158>)
 80023f0:	f7ff fb60 	bl	8001ab4 <hcsr04_init>
  hcsr04_init(&ultra_4, &htim2, TIM_CHANNEL_2, HAL_TIM_ACTIVE_CHANNEL_2, TIM_IT_CC2, Ultra_4_Trig_GPIO_Port, Ultra_4_Trig_Pin);
 80023f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	9601      	str	r6, [sp, #4]
 80023fc:	9500      	str	r5, [sp, #0]
 80023fe:	2302      	movs	r3, #2
 8002400:	462a      	mov	r2, r5
 8002402:	4639      	mov	r1, r7
 8002404:	4814      	ldr	r0, [pc, #80]	@ (8002458 <main+0x15c>)
 8002406:	f7ff fb55 	bl	8001ab4 <hcsr04_init>
  HAL_GPIO_WritePin(MA_DIR_GPIO_Port, MA_DIR_Pin, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	4659      	mov	r1, fp
 800240e:	4650      	mov	r0, sl
 8002410:	f002 f98e 	bl	8004730 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002414:	4621      	mov	r1, r4
 8002416:	4648      	mov	r0, r9
 8002418:	f005 fbd8 	bl	8007bcc <HAL_TIM_PWM_Start>
  osKernelInitialize();
 800241c:	f7fe fd36 	bl	8000e8c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002420:	f7ff fa76 	bl	8001910 <MX_FREERTOS_Init>
  osKernelStart();
 8002424:	f7fe fd44 	bl	8000eb0 <osKernelStart>
  while (1)
 8002428:	e7fe      	b.n	8002428 <main+0x12c>
 800242a:	bf00      	nop
 800242c:	20007f20 	.word	0x20007f20
 8002430:	20008648 	.word	0x20008648
 8002434:	200085fc 	.word	0x200085fc
 8002438:	48000800 	.word	0x48000800
 800243c:	20007eec 	.word	0x20007eec
 8002440:	20007ef8 	.word	0x20007ef8
 8002444:	20007ff4 	.word	0x20007ff4
 8002448:	20007fe0 	.word	0x20007fe0
 800244c:	20007fb4 	.word	0x20007fb4
 8002450:	20007f88 	.word	0x20007f88
 8002454:	20007f5c 	.word	0x20007f5c
 8002458:	20007f30 	.word	0x20007f30
 800245c:	48000400 	.word	0x48000400
 8002460:	20007f10 	.word	0x20007f10
 8002464:	200085b0 	.word	0x200085b0

08002468 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002468:	4770      	bx	lr
	...

0800246c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800246c:	b508      	push	{r3, lr}
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800246e:	4905      	ldr	r1, [pc, #20]	@ (8002484 <microros_allocate+0x18>)
 8002470:	680a      	ldr	r2, [r1, #0]
 8002472:	4402      	add	r2, r0
 8002474:	600a      	str	r2, [r1, #0]
  usedMemory += size;
 8002476:	4904      	ldr	r1, [pc, #16]	@ (8002488 <microros_allocate+0x1c>)
 8002478:	680a      	ldr	r2, [r1, #0]
 800247a:	4402      	add	r2, r0
 800247c:	600a      	str	r2, [r1, #0]
  return pvPortMallocMicroROS(size);
 800247e:	f7fe fe19 	bl	80010b4 <pvPortMallocMicroROS>
}
 8002482:	bd08      	pop	{r3, pc}
 8002484:	2000800c 	.word	0x2000800c
 8002488:	20008008 	.word	0x20008008

0800248c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800248c:	b158      	cbz	r0, 80024a6 <microros_deallocate+0x1a>
void microros_deallocate(void * pointer, void * state){
 800248e:	b510      	push	{r4, lr}
 8002490:	4604      	mov	r4, r0
    usedMemory -= getBlockSize(pointer);
 8002492:	f7fe fec3 	bl	800121c <getBlockSize>
 8002496:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <microros_deallocate+0x1c>)
 8002498:	6813      	ldr	r3, [r2, #0]
 800249a:	1a1b      	subs	r3, r3, r0
 800249c:	6013      	str	r3, [r2, #0]
    vPortFreeMicroROS(pointer);
 800249e:	4620      	mov	r0, r4
 80024a0:	f7fe fe84 	bl	80011ac <vPortFreeMicroROS>
  }
}
 80024a4:	bd10      	pop	{r4, pc}
 80024a6:	4770      	bx	lr
 80024a8:	20008008 	.word	0x20008008

080024ac <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	460c      	mov	r4, r1
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80024b0:	4a0c      	ldr	r2, [pc, #48]	@ (80024e4 <microros_reallocate+0x38>)
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	440b      	add	r3, r1
 80024b6:	6013      	str	r3, [r2, #0]
  usedMemory += size;
 80024b8:	4a0b      	ldr	r2, [pc, #44]	@ (80024e8 <microros_reallocate+0x3c>)
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	440b      	add	r3, r1
 80024be:	6013      	str	r3, [r2, #0]
  if (NULL == pointer){
 80024c0:	b158      	cbz	r0, 80024da <microros_reallocate+0x2e>
 80024c2:	4605      	mov	r5, r0
    return pvPortMallocMicroROS(size);
  } else {
    usedMemory -= getBlockSize(pointer);
 80024c4:	f7fe feaa 	bl	800121c <getBlockSize>
 80024c8:	4a07      	ldr	r2, [pc, #28]	@ (80024e8 <microros_reallocate+0x3c>)
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	1a1b      	subs	r3, r3, r0
 80024ce:	6013      	str	r3, [r2, #0]
    return pvPortReallocMicroROS(pointer,size);
 80024d0:	4621      	mov	r1, r4
 80024d2:	4628      	mov	r0, r5
 80024d4:	f7fe feac 	bl	8001230 <pvPortReallocMicroROS>
  }
}
 80024d8:	bd38      	pop	{r3, r4, r5, pc}
    return pvPortMallocMicroROS(size);
 80024da:	4608      	mov	r0, r1
 80024dc:	f7fe fdea 	bl	80010b4 <pvPortMallocMicroROS>
 80024e0:	e7fa      	b.n	80024d8 <microros_reallocate+0x2c>
 80024e2:	bf00      	nop
 80024e4:	2000800c 	.word	0x2000800c
 80024e8:	20008008 	.word	0x20008008

080024ec <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80024ec:	b510      	push	{r4, lr}
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80024ee:	fb01 f300 	mul.w	r3, r1, r0
 80024f2:	4c05      	ldr	r4, [pc, #20]	@ (8002508 <microros_zero_allocate+0x1c>)
 80024f4:	6822      	ldr	r2, [r4, #0]
 80024f6:	441a      	add	r2, r3
 80024f8:	6022      	str	r2, [r4, #0]
  usedMemory += number_of_elements*size_of_element;
 80024fa:	4c04      	ldr	r4, [pc, #16]	@ (800250c <microros_zero_allocate+0x20>)
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	441a      	add	r2, r3
 8002500:	6022      	str	r2, [r4, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002502:	f7fe feb3 	bl	800126c <pvPortCallocMicroROS>
 8002506:	bd10      	pop	{r4, pc}
 8002508:	2000800c 	.word	0x2000800c
 800250c:	20008008 	.word	0x20008008

08002510 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002514:	4607      	mov	r7, r0
 8002516:	460e      	mov	r6, r1
 8002518:	4614      	mov	r4, r2
    long lCarrySec = 0;

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800251a:	a315      	add	r3, pc, #84	@ (adr r3, 8002570 <UTILS_NanosecondsToTimespec+0x60>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fe fb8a 	bl	8000c38 <__aeabi_ldivmod>
 8002524:	460d      	mov	r5, r1
 8002526:	4680      	mov	r8, r0
 8002528:	6020      	str	r0, [r4, #0]
 800252a:	6061      	str	r1, [r4, #4]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800252c:	a310      	add	r3, pc, #64	@ (adr r3, 8002570 <UTILS_NanosecondsToTimespec+0x60>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	4638      	mov	r0, r7
 8002534:	4631      	mov	r1, r6
 8002536:	f7fe fb7f 	bl	8000c38 <__aeabi_ldivmod>
 800253a:	60a2      	str	r2, [r4, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800253c:	2a00      	cmp	r2, #0
 800253e:	db01      	blt.n	8002544 <UTILS_NanosecondsToTimespec+0x34>
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
    }
}
 8002540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002544:	4908      	ldr	r1, [pc, #32]	@ (8002568 <UTILS_NanosecondsToTimespec+0x58>)
 8002546:	fb81 3102 	smull	r3, r1, r1, r2
 800254a:	17d3      	asrs	r3, r2, #31
 800254c:	ebc3 7321 	rsb	r3, r3, r1, asr #28
 8002550:	3301      	adds	r3, #1
        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002552:	ebb8 0103 	subs.w	r1, r8, r3
 8002556:	eb65 75e3 	sbc.w	r5, r5, r3, asr #31
 800255a:	6021      	str	r1, [r4, #0]
 800255c:	6065      	str	r5, [r4, #4]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800255e:	4903      	ldr	r1, [pc, #12]	@ (800256c <UTILS_NanosecondsToTimespec+0x5c>)
 8002560:	fb01 2203 	mla	r2, r1, r3, r2
 8002564:	60a2      	str	r2, [r4, #8]
}
 8002566:	e7eb      	b.n	8002540 <UTILS_NanosecondsToTimespec+0x30>
 8002568:	44b82fa1 	.word	0x44b82fa1
 800256c:	3b9aca00 	.word	0x3b9aca00
 8002570:	3b9aca00 	.word	0x3b9aca00
 8002574:	00000000 	.word	0x00000000

08002578 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	460d      	mov	r5, r1
    TimeOut_t xCurrentTime = { 0 };
 800257e:	4668      	mov	r0, sp
 8002580:	2400      	movs	r4, #0
 8002582:	9400      	str	r4, [sp, #0]
 8002584:	9401      	str	r4, [sp, #4]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002586:	f007 fd91 	bl	800a0ac <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800258a:	9e00      	ldr	r6, [sp, #0]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800258c:	9a01      	ldr	r2, [sp, #4]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800258e:	ea4f 1c46 	mov.w	ip, r6, lsl #5
 8002592:	ea4c 6cd2 	orr.w	ip, ip, r2, lsr #27
 8002596:	0153      	lsls	r3, r2, #5
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	eb6c 0c06 	sbc.w	ip, ip, r6
 800259e:	ea4f 2c4c 	mov.w	ip, ip, lsl #9
 80025a2:	ea4c 5cd3 	orr.w	ip, ip, r3, lsr #23
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	eb46 0c0c 	adc.w	ip, r6, ip
 80025ae:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80025b2:	ea41 6193 	orr.w	r1, r1, r3, lsr #26
 80025b6:	0198      	lsls	r0, r3, #6
 80025b8:	1ac0      	subs	r0, r0, r3
 80025ba:	eb61 010c 	sbc.w	r1, r1, ip
 80025be:	1880      	adds	r0, r0, r2
 80025c0:	462a      	mov	r2, r5
 80025c2:	eb46 0101 	adc.w	r1, r6, r1
 80025c6:	f7ff ffa3 	bl	8002510 <UTILS_NanosecondsToTimespec>

    return 0;
 80025ca:	4620      	mov	r0, r4
 80025cc:	b002      	add	sp, #8
 80025ce:	bd70      	pop	{r4, r5, r6, pc}

080025d0 <InitMotionControl>:
#include "motion_control.h"
#include "robot_config.h"
#include <math.h>
#include "main.h"

void InitMotionControl(MotionState* state) {
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4604      	mov	r4, r0
    state->current_speed = 0.0f;
 80025d4:	2300      	movs	r3, #0
 80025d6:	6003      	str	r3, [r0, #0]
    state->target_speed = 0.0f;
 80025d8:	6043      	str	r3, [r0, #4]
    state->current_acceleration = 0.0f;
 80025da:	6083      	str	r3, [r0, #8]
    state->current_steering = 0.0f;
 80025dc:	60c3      	str	r3, [r0, #12]
    state->target_steering = 0.0f;
 80025de:	6103      	str	r3, [r0, #16]
    state->last_update = HAL_GetTick();
 80025e0:	f000 fe4a 	bl	8003278 <HAL_GetTick>
 80025e4:	6160      	str	r0, [r4, #20]
}
 80025e6:	bd10      	pop	{r4, pc}

080025e8 <UpdateMotionControl>:

void UpdateMotionControl(MotionState* state, float dt) {
    // Handle zero dt
    if(dt <= 0) return;
 80025e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	d962      	bls.n	80026b8 <UpdateMotionControl+0xd0>
void UpdateMotionControl(MotionState* state, float dt) {
 80025f2:	b510      	push	{r4, lr}
 80025f4:	ed2d 8b02 	vpush	{d8}
 80025f8:	4604      	mov	r4, r0
 80025fa:	eeb0 8a40 	vmov.f32	s16, s0

    // 1. Speed control with jerk limitation
    float req_acceleration = (state->target_speed - state->current_speed) / dt;
 80025fe:	ed90 0a01 	vldr	s0, [r0, #4]
 8002602:	edd0 8a00 	vldr	s17, [r0]
 8002606:	ee30 0a68 	vsub.f32	s0, s0, s17
    req_acceleration = fmaxf(fminf(req_acceleration, MAX_LINEAR_ACCEL), -MAX_LINEAR_ACCEL);
 800260a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800260e:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8002612:	f01a fb85 	bl	801cd20 <fminf>
 8002616:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 800261a:	f01a fb59 	bl	801ccd0 <fmaxf>
    
    float jerk = (req_acceleration - state->current_acceleration) / dt;
 800261e:	ed94 7a02 	vldr	s14, [r4, #8]
 8002622:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002626:	eec7 6a88 	vdiv.f32	s13, s15, s16
    if(fabsf(jerk) > MAX_LINEAR_JERK) {
 800262a:	eeb0 6ae6 	vabs.f32	s12, s13
 800262e:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 8002632:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	dd09      	ble.n	8002650 <UpdateMotionControl+0x68>
        jerk = copysignf(MAX_LINEAR_JERK, jerk);
 800263c:	ee16 3a90 	vmov	r3, s13
 8002640:	2b00      	cmp	r3, #0
 8002642:	da01      	bge.n	8002648 <UpdateMotionControl+0x60>
 8002644:	eef9 7a04 	vmov.f32	s15, #148	@ 0xc0a00000 -5.0
        req_acceleration = state->current_acceleration + jerk * dt;
 8002648:	ee28 0a27 	vmul.f32	s0, s16, s15
 800264c:	ee37 0a00 	vadd.f32	s0, s14, s0
    }

    state->current_acceleration = req_acceleration;
 8002650:	ed84 0a02 	vstr	s0, [r4, #8]
    state->current_speed += state->current_acceleration * dt;
 8002654:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002658:	ee38 0a80 	vadd.f32	s0, s17, s0
 800265c:	ed84 0a00 	vstr	s0, [r4]
    state->current_speed = fmaxf(fminf(state->current_speed, MAX_LINEAR_SPEED), -MAX_LINEAR_SPEED);
 8002660:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002664:	f01a fb5c 	bl	801cd20 <fminf>
 8002668:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800266c:	f01a fb30 	bl	801ccd0 <fmaxf>
 8002670:	ed84 0a00 	vstr	s0, [r4]

    // 2. Steering rate limitation
    float steering_error = state->target_steering - state->current_steering;
 8002674:	ed94 0a04 	vldr	s0, [r4, #16]
 8002678:	edd4 8a03 	vldr	s17, [r4, #12]
 800267c:	ee30 0a68 	vsub.f32	s0, s0, s17
    if (fabsf(steering_error) > STEERING_DEADBAND){
 8002680:	eeb0 7ac0 	vabs.f32	s14, s0
 8002684:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8002688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	dd0f      	ble.n	80026b2 <UpdateMotionControl+0xca>
        float max_steering_change = STEERING_RATE * dt;
 8002692:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80026bc <UpdateMotionControl+0xd4>
 8002696:	ee28 8a27 	vmul.f32	s16, s16, s15
        steering_error = fmaxf(fminf(steering_error, max_steering_change), -max_steering_change);
 800269a:	eef0 0a48 	vmov.f32	s1, s16
 800269e:	f01a fb3f 	bl	801cd20 <fminf>
 80026a2:	eef1 0a48 	vneg.f32	s1, s16
 80026a6:	f01a fb13 	bl	801ccd0 <fmaxf>
        state->current_steering += steering_error;
 80026aa:	ee78 8a80 	vadd.f32	s17, s17, s0
 80026ae:	edc4 8a03 	vstr	s17, [r4, #12]
    }
}
 80026b2:	ecbd 8b02 	vpop	{d8}
 80026b6:	bd10      	pop	{r4, pc}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	42b40000 	.word	0x42b40000

080026c0 <Motor_Init>:
#include "motor_control.h"
#include "main.h"
#include <stdbool.h>    
#include "robot_config.h"

void Motor_Init(Motor_HandleTypeDef* motor) {
 80026c0:	b510      	push	{r4, lr}
 80026c2:	4604      	mov	r4, r0

switch (motor->pwm_channel){
 80026c4:	6841      	ldr	r1, [r0, #4]
 80026c6:	2904      	cmp	r1, #4
 80026c8:	d009      	beq.n	80026de <Motor_Init+0x1e>
 80026ca:	2908      	cmp	r1, #8
 80026cc:	d10e      	bne.n	80026ec <Motor_Init+0x2c>
    case TIM_CHANNEL_2:
        HAL_TIM_PWM_Stop(motor->timer, motor->pwm_channel);
        motor->timer->Instance->CCR2 = 0;
        break;
    case TIM_CHANNEL_3:
        HAL_TIMEx_PWMN_Stop(motor->timer, motor->pwm_channel);
 80026ce:	6800      	ldr	r0, [r0, #0]
 80026d0:	f005 fdea 	bl	80082a8 <HAL_TIMEx_PWMN_Stop>
        motor->timer->Instance->CCR3 = 0;
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026dc:	e006      	b.n	80026ec <Motor_Init+0x2c>
        HAL_TIM_PWM_Stop(motor->timer, motor->pwm_channel);
 80026de:	6800      	ldr	r0, [r0, #0]
 80026e0:	f005 fb84 	bl	8007dec <HAL_TIM_PWM_Stop>
        motor->timer->Instance->CCR2 = 0;
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	639a      	str	r2, [r3, #56]	@ 0x38
}



    switch(motor->pwm_channel){
 80026ec:	6861      	ldr	r1, [r4, #4]
 80026ee:	2904      	cmp	r1, #4
 80026f0:	d011      	beq.n	8002716 <Motor_Init+0x56>
 80026f2:	2908      	cmp	r1, #8
 80026f4:	d11e      	bne.n	8002734 <Motor_Init+0x74>
        case TIM_CHANNEL_2:
            HAL_TIM_PWM_Start(motor->timer, motor->pwm_channel);
            motor->timer->Instance->CCER &= ~(TIM_CCER_CC1E << (4*(motor->pwm_channel-1)));
            break;
        case TIM_CHANNEL_3:
            HAL_TIMEx_PWMN_Start(motor->timer, motor->pwm_channel);
 80026f6:	6820      	ldr	r0, [r4, #0]
 80026f8:	f005 fd46 	bl	8008188 <HAL_TIMEx_PWMN_Start>
            motor->timer->Instance->CCER &= ~(TIM_CCER_CC1E << (4*(motor->pwm_channel-1)));
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	6a02      	ldr	r2, [r0, #32]
 8002702:	6863      	ldr	r3, [r4, #4]
 8002704:	3b01      	subs	r3, #1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	ea22 0303 	bic.w	r3, r2, r3
 8002712:	6203      	str	r3, [r0, #32]
            break;
    }
}
 8002714:	e00e      	b.n	8002734 <Motor_Init+0x74>
            HAL_TIM_PWM_Start(motor->timer, motor->pwm_channel);
 8002716:	6820      	ldr	r0, [r4, #0]
 8002718:	f005 fa58 	bl	8007bcc <HAL_TIM_PWM_Start>
            motor->timer->Instance->CCER &= ~(TIM_CCER_CC1E << (4*(motor->pwm_channel-1)));
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	6a02      	ldr	r2, [r0, #32]
 8002722:	6863      	ldr	r3, [r4, #4]
 8002724:	3b01      	subs	r3, #1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	2101      	movs	r1, #1
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	ea22 0303 	bic.w	r3, r2, r3
 8002732:	6203      	str	r3, [r0, #32]
}
 8002734:	bd10      	pop	{r4, pc}

08002736 <SetMotorDirection>:

void SetMotorDirection(Motor_HandleTypeDef* motor, bool forward) {
 8002736:	b508      	push	{r3, lr}
 8002738:	460a      	mov	r2, r1
    HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, forward ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800273a:	8981      	ldrh	r1, [r0, #12]
 800273c:	6880      	ldr	r0, [r0, #8]
 800273e:	f001 fff7 	bl	8004730 <HAL_GPIO_WritePin>
}
 8002742:	bd08      	pop	{r3, pc}

08002744 <SetMotorSpeed>:

void SetMotorSpeed(Motor_HandleTypeDef* motor, uint16_t speed) {
 8002744:	b410      	push	{r4}
    
    speed = (speed > 100) ? 100 : speed;
 8002746:	2964      	cmp	r1, #100	@ 0x64
 8002748:	bf28      	it	cs
 800274a:	2164      	movcs	r1, #100	@ 0x64
    uint32_t arr = motor->timer->Instance->ARR;
 800274c:	6803      	ldr	r3, [r0, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
    switch(motor->pwm_channel) {
 8002752:	6842      	ldr	r2, [r0, #4]
 8002754:	2a04      	cmp	r2, #4
 8002756:	d009      	beq.n	800276c <SetMotorSpeed+0x28>
 8002758:	2a08      	cmp	r2, #8
 800275a:	d10e      	bne.n	800277a <SetMotorSpeed+0x36>
        case TIM_CHANNEL_2:
            motor->timer->Instance->CCR2 = (speed * (arr+1)) / 100;
            break;
        case TIM_CHANNEL_3:
            motor->timer->Instance->CCR3 = (speed * (arr+1)) / 100;
 800275c:	fb04 1101 	mla	r1, r4, r1, r1
 8002760:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <SetMotorSpeed+0x3c>)
 8002762:	fba2 2101 	umull	r2, r1, r2, r1
 8002766:	0949      	lsrs	r1, r1, #5
 8002768:	63d9      	str	r1, [r3, #60]	@ 0x3c
            break;
    }
}
 800276a:	e006      	b.n	800277a <SetMotorSpeed+0x36>
            motor->timer->Instance->CCR2 = (speed * (arr+1)) / 100;
 800276c:	fb04 1101 	mla	r1, r4, r1, r1
 8002770:	4a03      	ldr	r2, [pc, #12]	@ (8002780 <SetMotorSpeed+0x3c>)
 8002772:	fba2 2101 	umull	r2, r1, r2, r1
 8002776:	0949      	lsrs	r1, r1, #5
 8002778:	6399      	str	r1, [r3, #56]	@ 0x38
}
 800277a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	51eb851f 	.word	0x51eb851f

08002784 <EnableMotorOutputs>:

void EnableMotorOutputs(Motor_HandleTypeDef* motor) {
 8002784:	b410      	push	{r4}
    motor->timer->Instance->CCER |= (TIM_CCER_CC1E << (4 * (motor->pwm_channel - 1)));
 8002786:	6803      	ldr	r3, [r0, #0]
 8002788:	681c      	ldr	r4, [r3, #0]
 800278a:	6a22      	ldr	r2, [r4, #32]
 800278c:	6843      	ldr	r3, [r0, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	6223      	str	r3, [r4, #32]
 800279c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027a4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027aa:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <prvTaskExitError+0x3c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d008      	beq.n	80027c6 <prvTaskExitError+0x22>
 80027b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	e7fe      	b.n	80027c4 <prvTaskExitError+0x20>
 80027c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0fc      	beq.n	80027d6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027dc:	b002      	add	sp, #8
 80027de:	4770      	bx	lr
 80027e0:	20000004 	.word	0x20000004

080027e4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027e4:	4808      	ldr	r0, [pc, #32]	@ (8002808 <prvPortStartFirstTask+0x24>)
 80027e6:	6800      	ldr	r0, [r0, #0]
 80027e8:	6800      	ldr	r0, [r0, #0]
 80027ea:	f380 8808 	msr	MSP, r0
 80027ee:	f04f 0000 	mov.w	r0, #0
 80027f2:	f380 8814 	msr	CONTROL, r0
 80027f6:	b662      	cpsie	i
 80027f8:	b661      	cpsie	f
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	df00      	svc	0
 8002804:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002806:	0000      	.short	0x0000
 8002808:	e000ed08 	.word	0xe000ed08

0800280c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800280c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800281c <vPortEnableVFP+0x10>
 8002810:	6801      	ldr	r1, [r0, #0]
 8002812:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002816:	6001      	str	r1, [r0, #0]
 8002818:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800281a:	0000      	.short	0x0000
 800281c:	e000ed88 	.word	0xe000ed88

08002820 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002820:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002824:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002828:	f021 0101 	bic.w	r1, r1, #1
 800282c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <pxPortInitialiseStack+0x28>)
 8002832:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002836:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800283a:	f06f 0302 	mvn.w	r3, #2
 800283e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002842:	3844      	subs	r0, #68	@ 0x44
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	080027a5 	.word	0x080027a5
 800284c:	00000000 	.word	0x00000000

08002850 <SVC_Handler>:
	__asm volatile (
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <pxCurrentTCBConst2>)
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	6808      	ldr	r0, [r1, #0]
 8002856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285a:	f380 8809 	msr	PSP, r0
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f380 8811 	msr	BASEPRI, r0
 800286a:	4770      	bx	lr
 800286c:	f3af 8000 	nop.w

08002870 <pxCurrentTCBConst2>:
 8002870:	200085ac 	.word	0x200085ac

08002874 <vPortEnterCritical>:
 8002874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002884:	4a0b      	ldr	r2, [pc, #44]	@ (80028b4 <vPortEnterCritical+0x40>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800288c:	2b01      	cmp	r3, #1
 800288e:	d000      	beq.n	8002892 <vPortEnterCritical+0x1e>
}
 8002890:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002892:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002896:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800289a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800289e:	d0f7      	beq.n	8002890 <vPortEnterCritical+0x1c>
 80028a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	e7fe      	b.n	80028b0 <vPortEnterCritical+0x3c>
 80028b2:	bf00      	nop
 80028b4:	20000004 	.word	0x20000004

080028b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80028b8:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <vPortExitCritical+0x28>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b943      	cbnz	r3, 80028d0 <vPortExitCritical+0x18>
 80028be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	e7fe      	b.n	80028ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a03      	ldr	r2, [pc, #12]	@ (80028e0 <vPortExitCritical+0x28>)
 80028d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028d6:	b90b      	cbnz	r3, 80028dc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028d8:	f383 8811 	msr	BASEPRI, r3
}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000004 	.word	0x20000004
	...

080028f0 <PendSV_Handler>:
	__asm volatile
 80028f0:	f3ef 8009 	mrs	r0, PSP
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <pxCurrentTCBConst>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f01e 0f10 	tst.w	lr, #16
 8002900:	bf08      	it	eq
 8002902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290a:	6010      	str	r0, [r2, #0]
 800290c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002910:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002914:	f380 8811 	msr	BASEPRI, r0
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f007 fafe 	bl	8009f20 <vTaskSwitchContext>
 8002924:	f04f 0000 	mov.w	r0, #0
 8002928:	f380 8811 	msr	BASEPRI, r0
 800292c:	bc09      	pop	{r0, r3}
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	6808      	ldr	r0, [r1, #0]
 8002932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002936:	f01e 0f10 	tst.w	lr, #16
 800293a:	bf08      	it	eq
 800293c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002940:	f380 8809 	msr	PSP, r0
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w

08002950 <pxCurrentTCBConst>:
 8002950:	200085ac 	.word	0x200085ac

08002954 <xPortSysTickHandler>:
{
 8002954:	b508      	push	{r3, lr}
	__asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002966:	f007 f9ad 	bl	8009cc4 <xTaskIncrementTick>
 800296a:	b128      	cbz	r0, 8002978 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800296c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002974:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8002978:	2300      	movs	r3, #0
 800297a:	f383 8811 	msr	BASEPRI, r3
}
 800297e:	bd08      	pop	{r3, pc}

08002980 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002980:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002984:	2300      	movs	r3, #0
 8002986:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002988:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <vPortSetupTimerInterrupt+0x20>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4905      	ldr	r1, [pc, #20]	@ (80029a4 <vPortSetupTimerInterrupt+0x24>)
 8002990:	fba1 1303 	umull	r1, r3, r1, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	3b01      	subs	r3, #1
 8002998:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800299a:	2307      	movs	r3, #7
 800299c:	6113      	str	r3, [r2, #16]
}
 800299e:	4770      	bx	lr
 80029a0:	20000014 	.word	0x20000014
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80029ac:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80029b0:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <xPortStartScheduler+0x100>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d01c      	beq.n	80029f0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80029ba:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <xPortStartScheduler+0x104>)
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d01e      	beq.n	8002a02 <xPortStartScheduler+0x5a>
{
 80029c4:	b530      	push	{r4, r5, lr}
 80029c6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029c8:	4b39      	ldr	r3, [pc, #228]	@ (8002ab0 <xPortStartScheduler+0x108>)
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029d0:	22ff      	movs	r2, #255	@ 0xff
 80029d2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80029e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029e4:	4a33      	ldr	r2, [pc, #204]	@ (8002ab4 <xPortStartScheduler+0x10c>)
 80029e6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029e8:	4b33      	ldr	r3, [pc, #204]	@ (8002ab8 <xPortStartScheduler+0x110>)
 80029ea:	2207      	movs	r2, #7
 80029ec:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029ee:	e01b      	b.n	8002a28 <xPortStartScheduler+0x80>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a00:	e7fe      	b.n	8002a00 <xPortStartScheduler+0x58>
 8002a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a12:	e7fe      	b.n	8002a12 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8002a14:	4a28      	ldr	r2, [pc, #160]	@ (8002ab8 <xPortStartScheduler+0x110>)
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a28:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a30:	d1f0      	bne.n	8002a14 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a32:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <xPortStartScheduler+0x110>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d008      	beq.n	8002a4c <xPortStartScheduler+0xa4>
 8002a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	e7fe      	b.n	8002a4a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <xPortStartScheduler+0x110>)
 8002a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a52:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a56:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a58:	9b01      	ldr	r3, [sp, #4]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	4a14      	ldr	r2, [pc, #80]	@ (8002ab0 <xPortStartScheduler+0x108>)
 8002a5e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a60:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8002a64:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a6c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a70:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8002a74:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002a78:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8002a7c:	f7ff ff80 	bl	8002980 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a80:	2500      	movs	r5, #0
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <xPortStartScheduler+0x114>)
 8002a84:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8002a86:	f7ff fec1 	bl	800280c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a8a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8002a8e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002a92:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8002a96:	f7ff fea5 	bl	80027e4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002a9a:	f007 fa41 	bl	8009f20 <vTaskSwitchContext>
	prvTaskExitError();
 8002a9e:	f7ff fe81 	bl	80027a4 <prvTaskExitError>
}
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	b003      	add	sp, #12
 8002aa6:	bd30      	pop	{r4, r5, pc}
 8002aa8:	410fc271 	.word	0x410fc271
 8002aac:	410fc270 	.word	0x410fc270
 8002ab0:	e000e400 	.word	0xe000e400
 8002ab4:	20008014 	.word	0x20008014
 8002ab8:	20008010 	.word	0x20008010
 8002abc:	20000004 	.word	0x20000004

08002ac0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002ac0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d90e      	bls.n	8002ae6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002ac8:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <vPortValidateInterruptPriority+0x50>)
 8002aca:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <vPortValidateInterruptPriority+0x54>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d208      	bcs.n	8002ae6 <vPortValidateInterruptPriority+0x26>
 8002ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	e7fe      	b.n	8002ae4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ae6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002aea:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8002aee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <vPortValidateInterruptPriority+0x58>)
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d908      	bls.n	8002b0c <vPortValidateInterruptPriority+0x4c>
 8002afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	e7fe      	b.n	8002b0a <vPortValidateInterruptPriority+0x4a>
	}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e3f0 	.word	0xe000e3f0
 8002b14:	20008014 	.word	0x20008014
 8002b18:	20008010 	.word	0x20008010

08002b1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b20:	f7ff fea8 	bl	8002874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b24:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002b26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d004      	beq.n	8002b36 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002b2c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002b2e:	f7ff fec3 	bl	80028b8 <vPortExitCritical>

	return xReturn;
}
 8002b32:	4620      	mov	r0, r4
 8002b34:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002b36:	2401      	movs	r4, #1
 8002b38:	e7f9      	b.n	8002b2e <prvIsQueueFull+0x12>

08002b3a <prvIsQueueEmpty>:
{
 8002b3a:	b510      	push	{r4, lr}
 8002b3c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002b3e:	f7ff fe99 	bl	8002874 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b42:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002b44:	b923      	cbnz	r3, 8002b50 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8002b46:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8002b48:	f7ff feb6 	bl	80028b8 <vPortExitCritical>
}
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8002b50:	2400      	movs	r4, #0
 8002b52:	e7f9      	b.n	8002b48 <prvIsQueueEmpty+0xe>

08002b54 <prvCopyDataToQueue>:
{
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4604      	mov	r4, r0
 8002b58:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b5a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b5c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002b5e:	b95a      	cbnz	r2, 8002b78 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b60:	6803      	ldr	r3, [r0, #0]
 8002b62:	b11b      	cbz	r3, 8002b6c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8002b64:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b66:	3601      	adds	r6, #1
 8002b68:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b6c:	6880      	ldr	r0, [r0, #8]
 8002b6e:	f007 fb1f 	bl	800a1b0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60a3      	str	r3, [r4, #8]
 8002b76:	e7f6      	b.n	8002b66 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8002b78:	b96d      	cbnz	r5, 8002b96 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b7a:	6840      	ldr	r0, [r0, #4]
 8002b7c:	f018 f987 	bl	801ae8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b80:	6863      	ldr	r3, [r4, #4]
 8002b82:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002b84:	4413      	add	r3, r2
 8002b86:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b88:	68a2      	ldr	r2, [r4, #8]
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d319      	bcc.n	8002bc2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002b92:	4628      	mov	r0, r5
 8002b94:	e7e7      	b.n	8002b66 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b96:	68c0      	ldr	r0, [r0, #12]
 8002b98:	f018 f979 	bl	801ae8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b9c:	68e3      	ldr	r3, [r4, #12]
 8002b9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002ba0:	4251      	negs	r1, r2
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d202      	bcs.n	8002bb2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002bac:	68a3      	ldr	r3, [r4, #8]
 8002bae:	440b      	add	r3, r1
 8002bb0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002bb2:	2d02      	cmp	r5, #2
 8002bb4:	d001      	beq.n	8002bba <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e7d5      	b.n	8002b66 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bba:	b126      	cbz	r6, 8002bc6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002bbc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e7d1      	b.n	8002b66 <prvCopyDataToQueue+0x12>
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	e7cf      	b.n	8002b66 <prvCopyDataToQueue+0x12>
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e7cd      	b.n	8002b66 <prvCopyDataToQueue+0x12>

08002bca <prvCopyDataFromQueue>:
{
 8002bca:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bcc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002bce:	b16a      	cbz	r2, 8002bec <prvCopyDataFromQueue+0x22>
{
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bd4:	68d9      	ldr	r1, [r3, #12]
 8002bd6:	4411      	add	r1, r2
 8002bd8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bda:	689c      	ldr	r4, [r3, #8]
 8002bdc:	42a1      	cmp	r1, r4
 8002bde:	d301      	bcc.n	8002be4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002be4:	68d9      	ldr	r1, [r3, #12]
 8002be6:	f018 f952 	bl	801ae8e <memcpy>
}
 8002bea:	bd10      	pop	{r4, pc}
 8002bec:	4770      	bx	lr

08002bee <prvUnlockQueue>:
{
 8002bee:	b538      	push	{r3, r4, r5, lr}
 8002bf0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002bf2:	f7ff fe3f 	bl	8002874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002bf6:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8002bfa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bfc:	e001      	b.n	8002c02 <prvUnlockQueue+0x14>
			--cTxLock;
 8002bfe:	3c01      	subs	r4, #1
 8002c00:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c02:	2c00      	cmp	r4, #0
 8002c04:	dd0a      	ble.n	8002c1c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c06:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002c08:	b143      	cbz	r3, 8002c1c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c0a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8002c0e:	f007 fa07 	bl	800a020 <xTaskRemoveFromEventList>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d0f3      	beq.n	8002bfe <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002c16:	f007 fab5 	bl	800a184 <vTaskMissedYield>
 8002c1a:	e7f0      	b.n	8002bfe <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002c1c:	23ff      	movs	r3, #255	@ 0xff
 8002c1e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8002c22:	f7ff fe49 	bl	80028b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002c26:	f7ff fe25 	bl	8002874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002c2a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8002c2e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c30:	e001      	b.n	8002c36 <prvUnlockQueue+0x48>
				--cRxLock;
 8002c32:	3c01      	subs	r4, #1
 8002c34:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c36:	2c00      	cmp	r4, #0
 8002c38:	dd0a      	ble.n	8002c50 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c3a:	692b      	ldr	r3, [r5, #16]
 8002c3c:	b143      	cbz	r3, 8002c50 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c3e:	f105 0010 	add.w	r0, r5, #16
 8002c42:	f007 f9ed 	bl	800a020 <xTaskRemoveFromEventList>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d0f3      	beq.n	8002c32 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002c4a:	f007 fa9b 	bl	800a184 <vTaskMissedYield>
 8002c4e:	e7f0      	b.n	8002c32 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002c50:	23ff      	movs	r3, #255	@ 0xff
 8002c52:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8002c56:	f7ff fe2f 	bl	80028b8 <vPortExitCritical>
}
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}

08002c5c <xQueueGenericReset>:
{
 8002c5c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002c5e:	b1e0      	cbz	r0, 8002c9a <xQueueGenericReset+0x3e>
 8002c60:	460d      	mov	r5, r1
 8002c62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002c64:	f7ff fe06 	bl	8002874 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002c6c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002c6e:	fb01 3002 	mla	r0, r1, r2, r3
 8002c72:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c74:	2000      	movs	r0, #0
 8002c76:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c78:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	fb02 3301 	mla	r3, r2, r1, r3
 8002c80:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c82:	23ff      	movs	r3, #255	@ 0xff
 8002c84:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c88:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8002c8c:	b9fd      	cbnz	r5, 8002cce <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	b963      	cbnz	r3, 8002cac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002c92:	f7ff fe11 	bl	80028b8 <vPortExitCritical>
}
 8002c96:	2001      	movs	r0, #1
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
 8002c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002caa:	e7fe      	b.n	8002caa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cac:	f104 0010 	add.w	r0, r4, #16
 8002cb0:	f007 f9b6 	bl	800a020 <xTaskRemoveFromEventList>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d0ec      	beq.n	8002c92 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8002cb8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	e7e1      	b.n	8002c92 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cce:	f104 0010 	add.w	r0, r4, #16
 8002cd2:	f7ff fa47 	bl	8002164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cd6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002cda:	f7ff fa43 	bl	8002164 <vListInitialise>
 8002cde:	e7d8      	b.n	8002c92 <xQueueGenericReset+0x36>

08002ce0 <prvInitialiseNewQueue>:
{
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	461d      	mov	r5, r3
 8002ce4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	b949      	cbnz	r1, 8002cfe <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cea:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002cec:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cee:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff ffb2 	bl	8002c5c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002cf8:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8002cfc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cfe:	6022      	str	r2, [r4, #0]
 8002d00:	e7f4      	b.n	8002cec <prvInitialiseNewQueue+0xc>

08002d02 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d02:	b940      	cbnz	r0, 8002d16 <xQueueGenericCreateStatic+0x14>
 8002d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	e7fe      	b.n	8002d14 <xQueueGenericCreateStatic+0x12>
	{
 8002d16:	b510      	push	{r4, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8002d1e:	b153      	cbz	r3, 8002d36 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d20:	b192      	cbz	r2, 8002d48 <xQueueGenericCreateStatic+0x46>
 8002d22:	b989      	cbnz	r1, 8002d48 <xQueueGenericCreateStatic+0x46>
 8002d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	e7fe      	b.n	8002d34 <xQueueGenericCreateStatic+0x32>
 8002d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8002d46:	e7fe      	b.n	8002d46 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d48:	b16a      	cbz	r2, 8002d66 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d4a:	2350      	movs	r3, #80	@ 0x50
 8002d4c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d4e:	9b03      	ldr	r3, [sp, #12]
 8002d50:	2b50      	cmp	r3, #80	@ 0x50
 8002d52:	d013      	beq.n	8002d7c <xQueueGenericCreateStatic+0x7a>
 8002d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	e7fe      	b.n	8002d64 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d0ef      	beq.n	8002d4a <xQueueGenericCreateStatic+0x48>
 8002d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	e7fe      	b.n	8002d7a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d7c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d84:	9400      	str	r4, [sp, #0]
 8002d86:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002d8a:	4660      	mov	r0, ip
 8002d8c:	f7ff ffa8 	bl	8002ce0 <prvInitialiseNewQueue>
	}
 8002d90:	4620      	mov	r0, r4
 8002d92:	b004      	add	sp, #16
 8002d94:	bd10      	pop	{r4, pc}

08002d96 <xQueueGenericSend>:
{
 8002d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002d9c:	b188      	cbz	r0, 8002dc2 <xQueueGenericSend+0x2c>
 8002d9e:	460f      	mov	r7, r1
 8002da0:	461d      	mov	r5, r3
 8002da2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da4:	b1b1      	cbz	r1, 8002dd4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002da6:	2d02      	cmp	r5, #2
 8002da8:	d120      	bne.n	8002dec <xQueueGenericSend+0x56>
 8002daa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d01d      	beq.n	8002dec <xQueueGenericSend+0x56>
 8002db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSend+0x2a>
 8002dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002dd2:	e7fe      	b.n	8002dd2 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dd4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0e5      	beq.n	8002da6 <xQueueGenericSend+0x10>
 8002dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dec:	f007 f9d0 	bl	800a190 <xTaskGetSchedulerState>
 8002df0:	4606      	mov	r6, r0
 8002df2:	b958      	cbnz	r0, 8002e0c <xQueueGenericSend+0x76>
 8002df4:	9b01      	ldr	r3, [sp, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d048      	beq.n	8002e8c <xQueueGenericSend+0xf6>
 8002dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	e7fe      	b.n	8002e0a <xQueueGenericSend+0x74>
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	e03d      	b.n	8002e8c <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e10:	462a      	mov	r2, r5
 8002e12:	4639      	mov	r1, r7
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff fe9d 	bl	8002b54 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e1c:	b97b      	cbnz	r3, 8002e3e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8002e1e:	b148      	cbz	r0, 8002e34 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8002e20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002e34:	f7ff fd40 	bl	80028b8 <vPortExitCritical>
				return pdPASS;
 8002e38:	2001      	movs	r0, #1
}
 8002e3a:	b005      	add	sp, #20
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e3e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002e42:	f007 f8ed 	bl	800a020 <xTaskRemoveFromEventList>
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d0f4      	beq.n	8002e34 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8002e4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e52:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	e7e9      	b.n	8002e34 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8002e60:	f7ff fd2a 	bl	80028b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e7e8      	b.n	8002e3a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e68:	a802      	add	r0, sp, #8
 8002e6a:	f007 f93b 	bl	800a0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e6e:	2601      	movs	r6, #1
 8002e70:	e019      	b.n	8002ea6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8002e72:	2300      	movs	r3, #0
 8002e74:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002e78:	e021      	b.n	8002ebe <xQueueGenericSend+0x128>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002e80:	e023      	b.n	8002eca <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff feb3 	bl	8002bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e88:	f006 ffa8 	bl	8009ddc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002e8c:	f7ff fcf2 	bl	8002874 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e90:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002e92:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3bb      	bcc.n	8002e10 <xQueueGenericSend+0x7a>
 8002e98:	2d02      	cmp	r5, #2
 8002e9a:	d0b9      	beq.n	8002e10 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0de      	beq.n	8002e60 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8002ea2:	2e00      	cmp	r6, #0
 8002ea4:	d0e0      	beq.n	8002e68 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8002ea6:	f7ff fd07 	bl	80028b8 <vPortExitCritical>
		vTaskSuspendAll();
 8002eaa:	f006 fefd 	bl	8009ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eae:	f7ff fce1 	bl	8002874 <vPortEnterCritical>
 8002eb2:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8002eb6:	b252      	sxtb	r2, r2
 8002eb8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002ebc:	d0d9      	beq.n	8002e72 <xQueueGenericSend+0xdc>
 8002ebe:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8002ec2:	b252      	sxtb	r2, r2
 8002ec4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002ec8:	d0d7      	beq.n	8002e7a <xQueueGenericSend+0xe4>
 8002eca:	f7ff fcf5 	bl	80028b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ece:	a901      	add	r1, sp, #4
 8002ed0:	a802      	add	r0, sp, #8
 8002ed2:	f007 f913 	bl	800a0fc <xTaskCheckForTimeOut>
 8002ed6:	b9d8      	cbnz	r0, 8002f10 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f7ff fe1f 	bl	8002b1c <prvIsQueueFull>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d0cf      	beq.n	8002e82 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ee2:	9901      	ldr	r1, [sp, #4]
 8002ee4:	f104 0010 	add.w	r0, r4, #16
 8002ee8:	f007 f866 	bl	8009fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7ff fe7e 	bl	8002bee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ef2:	f006 ff73 	bl	8009ddc <xTaskResumeAll>
 8002ef6:	2800      	cmp	r0, #0
 8002ef8:	d1c8      	bne.n	8002e8c <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8002efa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f02:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	e7bd      	b.n	8002e8c <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff fe6c 	bl	8002bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f16:	f006 ff61 	bl	8009ddc <xTaskResumeAll>
			return errQUEUE_FULL;
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	e78d      	b.n	8002e3a <xQueueGenericSend+0xa4>

08002f1e <xQueueGenericSendFromISR>:
{
 8002f1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002f22:	b190      	cbz	r0, 8002f4a <xQueueGenericSendFromISR+0x2c>
 8002f24:	460f      	mov	r7, r1
 8002f26:	4616      	mov	r6, r2
 8002f28:	461c      	mov	r4, r3
 8002f2a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f2c:	b1b1      	cbz	r1, 8002f5c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f2e:	2c02      	cmp	r4, #2
 8002f30:	d120      	bne.n	8002f74 <xQueueGenericSendFromISR+0x56>
 8002f32:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d01d      	beq.n	8002f74 <xQueueGenericSendFromISR+0x56>
 8002f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericSendFromISR+0x2a>
 8002f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002f5a:	e7fe      	b.n	8002f5a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0e5      	beq.n	8002f2e <xQueueGenericSendFromISR+0x10>
 8002f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	e7fe      	b.n	8002f72 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f74:	f7ff fda4 	bl	8002ac0 <vPortValidateInterruptPriority>
	__asm volatile
 8002f78:	f3ef 8811 	mrs	r8, BASEPRI
 8002f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f8c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8002f8e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d306      	bcc.n	8002fa2 <xQueueGenericSendFromISR+0x84>
 8002f94:	2c02      	cmp	r4, #2
 8002f96:	d004      	beq.n	8002fa2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8002f98:	2000      	movs	r0, #0
	__asm volatile
 8002f9a:	f388 8811 	msr	BASEPRI, r8
}
 8002f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fa2:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8002fa6:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002faa:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fac:	4622      	mov	r2, r4
 8002fae:	4639      	mov	r1, r7
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	f7ff fdcf 	bl	8002b54 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002fb6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002fba:	d006      	beq.n	8002fca <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fbc:	f109 0301 	add.w	r3, r9, #1
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	e7e7      	b.n	8002f9a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fca:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002fcc:	b90b      	cbnz	r3, 8002fd2 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8002fce:	2001      	movs	r0, #1
 8002fd0:	e7e3      	b.n	8002f9a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8002fd6:	f007 f823 	bl	800a020 <xTaskRemoveFromEventList>
 8002fda:	b118      	cbz	r0, 8002fe4 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002fdc:	b126      	cbz	r6, 8002fe8 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fde:	2001      	movs	r0, #1
 8002fe0:	6030      	str	r0, [r6, #0]
 8002fe2:	e7da      	b.n	8002f9a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	e7d8      	b.n	8002f9a <xQueueGenericSendFromISR+0x7c>
 8002fe8:	2001      	movs	r0, #1
 8002fea:	e7d6      	b.n	8002f9a <xQueueGenericSendFromISR+0x7c>

08002fec <xQueueReceive>:
{
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002ff2:	b190      	cbz	r0, 800301a <xQueueReceive+0x2e>
 8002ff4:	460f      	mov	r7, r1
 8002ff6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff8:	b1c1      	cbz	r1, 800302c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ffa:	f007 f8c9 	bl	800a190 <xTaskGetSchedulerState>
 8002ffe:	4606      	mov	r6, r0
 8003000:	bb00      	cbnz	r0, 8003044 <xQueueReceive+0x58>
 8003002:	9b01      	ldr	r3, [sp, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d05e      	beq.n	80030c6 <xQueueReceive+0xda>
	__asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	e7fe      	b.n	8003018 <xQueueReceive+0x2c>
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800302a:	e7fe      	b.n	800302a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800302c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0e3      	beq.n	8002ffa <xQueueReceive+0xe>
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	e7fe      	b.n	8003042 <xQueueReceive+0x56>
 8003044:	2600      	movs	r6, #0
 8003046:	e03e      	b.n	80030c6 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003048:	4639      	mov	r1, r7
 800304a:	4620      	mov	r0, r4
 800304c:	f7ff fdbd 	bl	8002bca <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003050:	3d01      	subs	r5, #1
 8003052:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	b923      	cbnz	r3, 8003062 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8003058:	f7ff fc2e 	bl	80028b8 <vPortExitCritical>
				return pdPASS;
 800305c:	2001      	movs	r0, #1
}
 800305e:	b005      	add	sp, #20
 8003060:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003062:	f104 0010 	add.w	r0, r4, #16
 8003066:	f006 ffdb 	bl	800a020 <xTaskRemoveFromEventList>
 800306a:	2800      	cmp	r0, #0
 800306c:	d0f4      	beq.n	8003058 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800306e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003076:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	e7e9      	b.n	8003058 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8003084:	f7ff fc18 	bl	80028b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003088:	2000      	movs	r0, #0
 800308a:	e7e8      	b.n	800305e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800308c:	a802      	add	r0, sp, #8
 800308e:	f007 f829 	bl	800a0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003092:	2601      	movs	r6, #1
 8003094:	e021      	b.n	80030da <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8003096:	2300      	movs	r3, #0
 8003098:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800309c:	e029      	b.n	80030f2 <xQueueReceive+0x106>
 800309e:	2300      	movs	r3, #0
 80030a0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80030a4:	e02b      	b.n	80030fe <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff fda1 	bl	8002bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ac:	f006 fe96 	bl	8009ddc <xTaskResumeAll>
 80030b0:	e009      	b.n	80030c6 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80030b2:	4620      	mov	r0, r4
 80030b4:	f7ff fd9b 	bl	8002bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030b8:	f006 fe90 	bl	8009ddc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030bc:	4620      	mov	r0, r4
 80030be:	f7ff fd3c 	bl	8002b3a <prvIsQueueEmpty>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d13f      	bne.n	8003146 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80030c6:	f7ff fbd5 	bl	8002874 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ca:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	d1bb      	bne.n	8003048 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d0:	9b01      	ldr	r3, [sp, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0d6      	beq.n	8003084 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80030d6:	2e00      	cmp	r6, #0
 80030d8:	d0d8      	beq.n	800308c <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80030da:	f7ff fbed 	bl	80028b8 <vPortExitCritical>
		vTaskSuspendAll();
 80030de:	f006 fde3 	bl	8009ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030e2:	f7ff fbc7 	bl	8002874 <vPortEnterCritical>
 80030e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d0d1      	beq.n	8003096 <xQueueReceive+0xaa>
 80030f2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80030f6:	b25b      	sxtb	r3, r3
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d0cf      	beq.n	800309e <xQueueReceive+0xb2>
 80030fe:	f7ff fbdb 	bl	80028b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003102:	a901      	add	r1, sp, #4
 8003104:	a802      	add	r0, sp, #8
 8003106:	f006 fff9 	bl	800a0fc <xTaskCheckForTimeOut>
 800310a:	2800      	cmp	r0, #0
 800310c:	d1d1      	bne.n	80030b2 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff fd13 	bl	8002b3a <prvIsQueueEmpty>
 8003114:	2800      	cmp	r0, #0
 8003116:	d0c6      	beq.n	80030a6 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003118:	9901      	ldr	r1, [sp, #4]
 800311a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800311e:	f006 ff4b 	bl	8009fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff fd63 	bl	8002bee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003128:	f006 fe58 	bl	8009ddc <xTaskResumeAll>
 800312c:	2800      	cmp	r0, #0
 800312e:	d1ca      	bne.n	80030c6 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8003130:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003138:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	e7bf      	b.n	80030c6 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8003146:	2000      	movs	r0, #0
 8003148:	e789      	b.n	800305e <xQueueReceive+0x72>
	...

0800314c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800314c:	2300      	movs	r3, #0
 800314e:	2b07      	cmp	r3, #7
 8003150:	d80c      	bhi.n	800316c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003152:	4a07      	ldr	r2, [pc, #28]	@ (8003170 <vQueueAddToRegistry+0x24>)
 8003154:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003158:	b10a      	cbz	r2, 800315e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800315a:	3301      	adds	r3, #1
 800315c:	e7f7      	b.n	800314e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800315e:	4a04      	ldr	r2, [pc, #16]	@ (8003170 <vQueueAddToRegistry+0x24>)
 8003160:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003164:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003168:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800316a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20008018 	.word	0x20008018

08003174 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4604      	mov	r4, r0
 8003178:	460d      	mov	r5, r1
 800317a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800317c:	f7ff fb7a 	bl	8002874 <vPortEnterCritical>
 8003180:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003184:	b25b      	sxtb	r3, r3
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d00d      	beq.n	80031a8 <vQueueWaitForMessageRestricted+0x34>
 800318c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003190:	b25b      	sxtb	r3, r3
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d00b      	beq.n	80031b0 <vQueueWaitForMessageRestricted+0x3c>
 8003198:	f7ff fb8e 	bl	80028b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800319c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800319e:	b15b      	cbz	r3, 80031b8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031a0:	4620      	mov	r0, r4
 80031a2:	f7ff fd24 	bl	8002bee <prvUnlockQueue>
	}
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80031a8:	2300      	movs	r3, #0
 80031aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80031ae:	e7ed      	b.n	800318c <vQueueWaitForMessageRestricted+0x18>
 80031b0:	2300      	movs	r3, #0
 80031b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80031b6:	e7ef      	b.n	8003198 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031b8:	4632      	mov	r2, r6
 80031ba:	4629      	mov	r1, r5
 80031bc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80031c0:	f006 ff12 	bl	8009fe8 <vTaskPlaceOnEventListRestricted>
 80031c4:	e7ec      	b.n	80031a0 <vQueueWaitForMessageRestricted+0x2c>
	...

080031c8 <SetSteeringAngle>:
void Servo_Init(Servo_HandleTypeDef* servo) {
    HAL_TIM_PWM_Start(servo->timer, servo->channel);
    SetSteeringAngle(servo, CENTER_STEERING_ANGLE);  // Center steering
}

void SetSteeringAngle(Servo_HandleTypeDef* servo, float angle) {
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4604      	mov	r4, r0
    // Constrain input angle
    angle = fmaxf(fminf(angle, SERVO_MAX_ANGLE), SERVO_MIN_ANGLE);
 80031cc:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8003210 <SetSteeringAngle+0x48>
 80031d0:	f019 fda6 	bl	801cd20 <fminf>
 80031d4:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8003214 <SetSteeringAngle+0x4c>
 80031d8:	f019 fd7a 	bl	801ccd0 <fmaxf>

    // Map angle to PWM pulse width
    float pulse_width = SERVO_PWM_MIN + 
                       ((angle / 180.0f) * 
 80031dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003218 <SetSteeringAngle+0x50>
 80031e0:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80031e4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800321c <SetSteeringAngle+0x54>
 80031e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    float pulse_width = SERVO_PWM_MIN + 
 80031ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003220 <SetSteeringAngle+0x58>
 80031f0:	ee77 7a87 	vadd.f32	s15, s15, s14
                       (SERVO_PWM_MAX - SERVO_PWM_MIN));
                       
    
    // Set PWM compare value
    switch(servo->channel) {
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d002      	beq.n	8003200 <SetSteeringAngle+0x38>
        case TIM_CHANNEL_3:
            servo->timer->Instance->CCR3 = (uint32_t)pulse_width;
            break;
        // Add other channels as needed
    }
    servo->current_angle = angle;
 80031fa:	ed84 0a02 	vstr	s0, [r4, #8]
}
 80031fe:	bd10      	pop	{r4, pc}
            servo->timer->Instance->CCR3 = (uint32_t)pulse_width;
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003208:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            break;
 800320c:	e7f5      	b.n	80031fa <SetSteeringAngle+0x32>
 800320e:	bf00      	nop
 8003210:	42f00000 	.word	0x42f00000
 8003214:	42700000 	.word	0x42700000
 8003218:	43340000 	.word	0x43340000
 800321c:	44fa0000 	.word	0x44fa0000
 8003220:	43fa0000 	.word	0x43fa0000

08003224 <Servo_Init>:
void Servo_Init(Servo_HandleTypeDef* servo) {
 8003224:	b510      	push	{r4, lr}
 8003226:	4604      	mov	r4, r0
    HAL_TIM_PWM_Start(servo->timer, servo->channel);
 8003228:	6841      	ldr	r1, [r0, #4]
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	f004 fcce 	bl	8007bcc <HAL_TIM_PWM_Start>
    SetSteeringAngle(servo, CENTER_STEERING_ANGLE);  // Center steering
 8003230:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800323c <Servo_Init+0x18>
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ffc7 	bl	80031c8 <SetSteeringAngle>
}
 800323a:	bd10      	pop	{r4, pc}
 800323c:	42b40000 	.word	0x42b40000

08003240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003240:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003242:	2003      	movs	r0, #3
 8003244:	f000 fe8e 	bl	8003f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003248:	200f      	movs	r0, #15
 800324a:	f005 fa17 	bl	800867c <HAL_InitTick>
 800324e:	b110      	cbz	r0, 8003256 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8003250:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003252:	4620      	mov	r0, r4
 8003254:	bd10      	pop	{r4, pc}
 8003256:	4604      	mov	r4, r0
    HAL_MspInit();
 8003258:	f001 ff94 	bl	8005184 <HAL_MspInit>
 800325c:	e7f9      	b.n	8003252 <HAL_Init+0x12>
	...

08003260 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <HAL_IncTick+0x10>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4a03      	ldr	r2, [pc, #12]	@ (8003274 <HAL_IncTick+0x14>)
 8003266:	6811      	ldr	r1, [r2, #0]
 8003268:	440b      	add	r3, r1
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000008 	.word	0x20000008
 8003274:	20008058 	.word	0x20008058

08003278 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003278:	4b01      	ldr	r3, [pc, #4]	@ (8003280 <HAL_GetTick+0x8>)
 800327a:	6818      	ldr	r0, [r3, #0]
}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20008058 	.word	0x20008058

08003284 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003284:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003286:	3030      	adds	r0, #48	@ 0x30
 8003288:	0a0b      	lsrs	r3, r1, #8
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003290:	58c4      	ldr	r4, [r0, r3]
 8003292:	f001 011f 	and.w	r1, r1, #31
 8003296:	f04f 0c1f 	mov.w	ip, #31
 800329a:	fa0c fc01 	lsl.w	ip, ip, r1
 800329e:	ea24 0c0c 	bic.w	ip, r4, ip
 80032a2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80032a6:	408a      	lsls	r2, r1
 80032a8:	ea4c 0202 	orr.w	r2, ip, r2
 80032ac:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032b4:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80032b6:	3014      	adds	r0, #20
 80032b8:	0e4b      	lsrs	r3, r1, #25
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032c0:	58c4      	ldr	r4, [r0, r3]
 80032c2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80032c6:	f04f 0c07 	mov.w	ip, #7
 80032ca:	fa0c fc01 	lsl.w	ip, ip, r1
 80032ce:	ea24 0c0c 	bic.w	ip, r4, ip
 80032d2:	408a      	lsls	r2, r1
 80032d4:	ea4c 0202 	orr.w	r2, ip, r2
 80032d8:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032e0:	b530      	push	{r4, r5, lr}
 80032e2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80032e8:	2800      	cmp	r0, #0
 80032ea:	f000 8257 	beq.w	800379c <HAL_ADC_Init+0x4bc>
 80032ee:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80032f0:	6802      	ldr	r2, [r0, #0]
 80032f2:	4ba2      	ldr	r3, [pc, #648]	@ (800357c <HAL_ADC_Init+0x29c>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d004      	beq.n	8003302 <HAL_ADC_Init+0x22>
 80032f8:	f240 1199 	movw	r1, #409	@ 0x199
 80032fc:	48a0      	ldr	r0, [pc, #640]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 80032fe:	f7ff f8b3 	bl	8002468 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003308:	d028      	beq.n	800335c <HAL_ADC_Init+0x7c>
 800330a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800330e:	d025      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003314:	d022      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003316:	b30b      	cbz	r3, 800335c <HAL_ADC_Init+0x7c>
 8003318:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800331c:	d01e      	beq.n	800335c <HAL_ADC_Init+0x7c>
 800331e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003322:	d01b      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003324:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003328:	d018      	beq.n	800335c <HAL_ADC_Init+0x7c>
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332e:	d015      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003330:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003334:	d012      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003336:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800333a:	d00f      	beq.n	800335c <HAL_ADC_Init+0x7c>
 800333c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003340:	d00c      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003346:	d009      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003348:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800334c:	d006      	beq.n	800335c <HAL_ADC_Init+0x7c>
 800334e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003352:	d003      	beq.n	800335c <HAL_ADC_Init+0x7c>
 8003354:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003358:	f040 80b6 	bne.w	80034c8 <HAL_ADC_Init+0x1e8>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800335c:	68a3      	ldr	r3, [r4, #8]
 800335e:	b14b      	cbz	r3, 8003374 <HAL_ADC_Init+0x94>
 8003360:	2b18      	cmp	r3, #24
 8003362:	f200 80b7 	bhi.w	80034d4 <HAL_ADC_Init+0x1f4>
 8003366:	4a87      	ldr	r2, [pc, #540]	@ (8003584 <HAL_ADC_Init+0x2a4>)
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
 800336c:	f013 0f01 	tst.w	r3, #1
 8003370:	f000 80b0 	beq.w	80034d4 <HAL_ADC_Init+0x1f4>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
 8003374:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003376:	b113      	cbz	r3, 800337e <HAL_ADC_Init+0x9e>
 8003378:	2b04      	cmp	r3, #4
 800337a:	f040 80b1 	bne.w	80034e0 <HAL_ADC_Init+0x200>
#endif /* DFSDM */
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800337e:	68e3      	ldr	r3, [r4, #12]
 8003380:	b113      	cbz	r3, 8003388 <HAL_ADC_Init+0xa8>
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 80b2 	bne.w	80034ec <HAL_ADC_Init+0x20c>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8003388:	6923      	ldr	r3, [r4, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f200 80b4 	bhi.w	80034f8 <HAL_ADC_Init+0x218>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003390:	7e63      	ldrb	r3, [r4, #25]
 8003392:	2b01      	cmp	r3, #1
 8003394:	f200 80b6 	bhi.w	8003504 <HAL_ADC_Init+0x224>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003398:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800339a:	b14b      	cbz	r3, 80033b0 <HAL_ADC_Init+0xd0>
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a0:	d006      	beq.n	80033b0 <HAL_ADC_Init+0xd0>
 80033a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033a6:	d003      	beq.n	80033b0 <HAL_ADC_Init+0xd0>
 80033a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033ac:	f040 80b0 	bne.w	8003510 <HAL_ADC_Init+0x230>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 80033b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b6:	d02f      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033b8:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 80033bc:	d02c      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033be:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80033c2:	d029      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033c4:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 80033c8:	d026      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033ca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80033ce:	d023      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033d0:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 80033d4:	d020      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033d6:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80033da:	d01d      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033dc:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 80033e0:	d01a      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033e2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033e6:	d017      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033e8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80033ec:	d014      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033ee:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80033f2:	d011      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033f4:	f5b3 6fd8 	cmp.w	r3, #1728	@ 0x6c0
 80033f8:	d00e      	beq.n	8003418 <HAL_ADC_Init+0x138>
 80033fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033fe:	d00b      	beq.n	8003418 <HAL_ADC_Init+0x138>
 8003400:	f5b3 6fe8 	cmp.w	r3, #1856	@ 0x740
 8003404:	d008      	beq.n	8003418 <HAL_ADC_Init+0x138>
 8003406:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 800340a:	d005      	beq.n	8003418 <HAL_ADC_Init+0x138>
 800340c:	f5b3 6ff8 	cmp.w	r3, #1984	@ 0x7c0
 8003410:	d002      	beq.n	8003418 <HAL_ADC_Init+0x138>
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8082 	bne.w	800351c <HAL_ADC_Init+0x23c>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003418:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800341c:	2b01      	cmp	r3, #1
 800341e:	f200 8083 	bhi.w	8003528 <HAL_ADC_Init+0x248>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8003422:	6963      	ldr	r3, [r4, #20]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d002      	beq.n	800342e <HAL_ADC_Init+0x14e>
 8003428:	2b08      	cmp	r3, #8
 800342a:	f040 8083 	bne.w	8003534 <HAL_ADC_Init+0x254>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 800342e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003430:	b11b      	cbz	r3, 800343a <HAL_ADC_Init+0x15a>
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	f040 8083 	bne.w	8003540 <HAL_ADC_Init+0x260>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800343a:	7e23      	ldrb	r3, [r4, #24]
 800343c:	2b01      	cmp	r3, #1
 800343e:	f200 8085 	bhi.w	800354c <HAL_ADC_Init+0x26c>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8003442:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003446:	2b01      	cmp	r3, #1
 8003448:	f200 8086 	bhi.w	8003558 <HAL_ADC_Init+0x278>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800344c:	6923      	ldr	r3, [r4, #16]
 800344e:	b173      	cbz	r3, 800346e <HAL_ADC_Init+0x18e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003450:	69e3      	ldr	r3, [r4, #28]
 8003452:	3b01      	subs	r3, #1
 8003454:	2b0f      	cmp	r3, #15
 8003456:	f200 8085 	bhi.w	8003564 <HAL_ADC_Init+0x284>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800345a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800345e:	2b01      	cmp	r3, #1
 8003460:	f200 8086 	bhi.w	8003570 <HAL_ADC_Init+0x290>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003464:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003468:	2b01      	cmp	r3, #1
 800346a:	f000 8091 	beq.w	8003590 <HAL_ADC_Init+0x2b0>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 800346e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003472:	2b01      	cmp	r3, #1
 8003474:	f000 8097 	beq.w	80035a6 <HAL_ADC_Init+0x2c6>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003478:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 809d 	beq.w	80035ba <HAL_ADC_Init+0x2da>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003480:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8003488:	d005      	beq.n	8003496 <HAL_ADC_Init+0x1b6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8003490:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003494:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003496:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003498:	6893      	ldr	r3, [r2, #8]
 800349a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800349e:	f040 809a 	bne.w	80035d6 <HAL_ADC_Init+0x2f6>
  MODIFY_REG(ADCx->CR,
 80034a2:	6893      	ldr	r3, [r2, #8]
 80034a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80034a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b2:	4b35      	ldr	r3, [pc, #212]	@ (8003588 <HAL_ADC_Init+0x2a8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	4a34      	ldr	r2, [pc, #208]	@ (800358c <HAL_ADC_Init+0x2ac>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	099b      	lsrs	r3, r3, #6
 80034c0:	3301      	adds	r3, #1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80034c6:	e083      	b.n	80035d0 <HAL_ADC_Init+0x2f0>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80034c8:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 80034cc:	482c      	ldr	r0, [pc, #176]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 80034ce:	f7fe ffcb 	bl	8002468 <assert_failed>
 80034d2:	e743      	b.n	800335c <HAL_ADC_Init+0x7c>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80034d4:	f240 119b 	movw	r1, #411	@ 0x19b
 80034d8:	4829      	ldr	r0, [pc, #164]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 80034da:	f7fe ffc5 	bl	8002468 <assert_failed>
 80034de:	e749      	b.n	8003374 <HAL_ADC_Init+0x94>
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
 80034e0:	f240 119d 	movw	r1, #413	@ 0x19d
 80034e4:	4826      	ldr	r0, [pc, #152]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 80034e6:	f7fe ffbf 	bl	8002468 <assert_failed>
 80034ea:	e748      	b.n	800337e <HAL_ADC_Init+0x9e>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80034ec:	f240 119f 	movw	r1, #415	@ 0x19f
 80034f0:	4823      	ldr	r0, [pc, #140]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 80034f2:	f7fe ffb9 	bl	8002468 <assert_failed>
 80034f6:	e747      	b.n	8003388 <HAL_ADC_Init+0xa8>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80034f8:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80034fc:	4820      	ldr	r0, [pc, #128]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 80034fe:	f7fe ffb3 	bl	8002468 <assert_failed>
 8003502:	e745      	b.n	8003390 <HAL_ADC_Init+0xb0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003504:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8003508:	481d      	ldr	r0, [pc, #116]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 800350a:	f7fe ffad 	bl	8002468 <assert_failed>
 800350e:	e743      	b.n	8003398 <HAL_ADC_Init+0xb8>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003510:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8003514:	481a      	ldr	r0, [pc, #104]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 8003516:	f7fe ffa7 	bl	8002468 <assert_failed>
 800351a:	e749      	b.n	80033b0 <HAL_ADC_Init+0xd0>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 800351c:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8003520:	4817      	ldr	r0, [pc, #92]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 8003522:	f7fe ffa1 	bl	8002468 <assert_failed>
 8003526:	e777      	b.n	8003418 <HAL_ADC_Init+0x138>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003528:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800352c:	4814      	ldr	r0, [pc, #80]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 800352e:	f7fe ff9b 	bl	8002468 <assert_failed>
 8003532:	e776      	b.n	8003422 <HAL_ADC_Init+0x142>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8003534:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8003538:	4811      	ldr	r0, [pc, #68]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 800353a:	f7fe ff95 	bl	8002468 <assert_failed>
 800353e:	e776      	b.n	800342e <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8003540:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8003544:	480e      	ldr	r0, [pc, #56]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 8003546:	f7fe ff8f 	bl	8002468 <assert_failed>
 800354a:	e776      	b.n	800343a <HAL_ADC_Init+0x15a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800354c:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8003550:	480b      	ldr	r0, [pc, #44]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 8003552:	f7fe ff89 	bl	8002468 <assert_failed>
 8003556:	e774      	b.n	8003442 <HAL_ADC_Init+0x162>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8003558:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 800355c:	4808      	ldr	r0, [pc, #32]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 800355e:	f7fe ff83 	bl	8002468 <assert_failed>
 8003562:	e773      	b.n	800344c <HAL_ADC_Init+0x16c>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8003564:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8003568:	4805      	ldr	r0, [pc, #20]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 800356a:	f7fe ff7d 	bl	8002468 <assert_failed>
 800356e:	e774      	b.n	800345a <HAL_ADC_Init+0x17a>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003570:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003574:	4802      	ldr	r0, [pc, #8]	@ (8003580 <HAL_ADC_Init+0x2a0>)
 8003576:	f7fe ff77 	bl	8002468 <assert_failed>
 800357a:	e773      	b.n	8003464 <HAL_ADC_Init+0x184>
 800357c:	50040000 	.word	0x50040000
 8003580:	0801d4c0 	.word	0x0801d4c0
 8003584:	01010100 	.word	0x01010100
 8003588:	20000014 	.word	0x20000014
 800358c:	053e2d63 	.word	0x053e2d63
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003590:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003592:	3b01      	subs	r3, #1
 8003594:	2b07      	cmp	r3, #7
 8003596:	f67f af6a 	bls.w	800346e <HAL_ADC_Init+0x18e>
 800359a:	f240 11b1 	movw	r1, #433	@ 0x1b1
 800359e:	4880      	ldr	r0, [pc, #512]	@ (80037a0 <HAL_ADC_Init+0x4c0>)
 80035a0:	f7fe ff62 	bl	8002468 <assert_failed>
 80035a4:	e763      	b.n	800346e <HAL_ADC_Init+0x18e>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 80035a6:	7e63      	ldrb	r3, [r4, #25]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	f47f af65 	bne.w	8003478 <HAL_ADC_Init+0x198>
 80035ae:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 80035b2:	487b      	ldr	r0, [pc, #492]	@ (80037a0 <HAL_ADC_Init+0x4c0>)
 80035b4:	f7fe ff58 	bl	8002468 <assert_failed>
 80035b8:	e75e      	b.n	8003478 <HAL_ADC_Init+0x198>
    HAL_ADC_MspInit(hadc);
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7fd fc08 	bl	8000dd0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80035c0:	2300      	movs	r3, #0
 80035c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80035c4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80035c8:	e75a      	b.n	8003480 <HAL_ADC_Init+0x1a0>
    {
      wait_loop_index--;
 80035ca:	9b01      	ldr	r3, [sp, #4]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80035d0:	9b01      	ldr	r3, [sp, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f9      	bne.n	80035ca <HAL_ADC_Init+0x2ea>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035d6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035d8:	6893      	ldr	r3, [r2, #8]
 80035da:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80035de:	d174      	bne.n	80036ca <HAL_ADC_Init+0x3ea>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035e2:	f043 0310 	orr.w	r3, r3, #16
 80035e6:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035f0:	2501      	movs	r5, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035f2:	6893      	ldr	r3, [r2, #8]
 80035f4:	f013 0304 	ands.w	r3, r3, #4
 80035f8:	d000      	beq.n	80035fc <HAL_ADC_Init+0x31c>
 80035fa:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035fc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80035fe:	f011 0f10 	tst.w	r1, #16
 8003602:	f040 80c3 	bne.w	800378c <HAL_ADC_Init+0x4ac>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 80c0 	bne.w	800378c <HAL_ADC_Init+0x4ac>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800360e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003618:	6893      	ldr	r3, [r2, #8]
 800361a:	f013 0f01 	tst.w	r3, #1
 800361e:	d10b      	bne.n	8003638 <HAL_ADC_Init+0x358>
 8003620:	4b60      	ldr	r3, [pc, #384]	@ (80037a4 <HAL_ADC_Init+0x4c4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f013 0f01 	tst.w	r3, #1
 8003628:	d106      	bne.n	8003638 <HAL_ADC_Init+0x358>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800362a:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800362c:	495e      	ldr	r1, [pc, #376]	@ (80037a8 <HAL_ADC_Init+0x4c8>)
 800362e:	688a      	ldr	r2, [r1, #8]
 8003630:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003638:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 800363a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800363c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8003640:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 8003642:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8003644:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8003646:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003648:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800364c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003650:	2a01      	cmp	r2, #1
 8003652:	d03c      	beq.n	80036ce <HAL_ADC_Init+0x3ee>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003654:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003656:	b122      	cbz	r2, 8003662 <HAL_ADC_Init+0x382>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003658:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800365c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800365e:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003660:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003662:	6821      	ldr	r1, [r4, #0]
 8003664:	68c8      	ldr	r0, [r1, #12]
 8003666:	4a51      	ldr	r2, [pc, #324]	@ (80037ac <HAL_ADC_Init+0x4cc>)
 8003668:	4002      	ands	r2, r0
 800366a:	431a      	orrs	r2, r3
 800366c:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800366e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003670:	6893      	ldr	r3, [r2, #8]
 8003672:	f013 0308 	ands.w	r3, r3, #8
 8003676:	d000      	beq.n	800367a <HAL_ADC_Init+0x39a>
 8003678:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800367a:	b9bb      	cbnz	r3, 80036ac <HAL_ADC_Init+0x3cc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800367c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800367e:	7e21      	ldrb	r1, [r4, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003680:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003684:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003688:	ea43 0141 	orr.w	r1, r3, r1, lsl #1

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800368c:	68d3      	ldr	r3, [r2, #12]
 800368e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003692:	f023 0306 	bic.w	r3, r3, #6
 8003696:	430b      	orrs	r3, r1
 8003698:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800369a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d01a      	beq.n	80036d8 <HAL_ADC_Init+0x3f8>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	6913      	ldr	r3, [r2, #16]
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d063      	beq.n	800377a <HAL_ADC_Init+0x49a>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80036b6:	f023 030f 	bic.w	r3, r3, #15
 80036ba:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80036c8:	e065      	b.n	8003796 <HAL_ADC_Init+0x4b6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ca:	2500      	movs	r5, #0
 80036cc:	e791      	b.n	80035f2 <HAL_ADC_Init+0x312>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036ce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80036d0:	3a01      	subs	r2, #1
 80036d2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80036d6:	e7bd      	b.n	8003654 <HAL_ADC_Init+0x374>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 80036d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80036da:	b13b      	cbz	r3, 80036ec <HAL_ADC_Init+0x40c>
 80036dc:	2b1c      	cmp	r3, #28
 80036de:	d834      	bhi.n	800374a <HAL_ADC_Init+0x46a>
 80036e0:	4a33      	ldr	r2, [pc, #204]	@ (80037b0 <HAL_ADC_Init+0x4d0>)
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	f013 0f01 	tst.w	r3, #1
 80036ea:	d02e      	beq.n	800374a <HAL_ADC_Init+0x46a>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 80036ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036ee:	b183      	cbz	r3, 8003712 <HAL_ADC_Init+0x432>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d00e      	beq.n	8003712 <HAL_ADC_Init+0x432>
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d00c      	beq.n	8003712 <HAL_ADC_Init+0x432>
 80036f8:	2b60      	cmp	r3, #96	@ 0x60
 80036fa:	d00a      	beq.n	8003712 <HAL_ADC_Init+0x432>
 80036fc:	2b80      	cmp	r3, #128	@ 0x80
 80036fe:	d008      	beq.n	8003712 <HAL_ADC_Init+0x432>
 8003700:	2ba0      	cmp	r3, #160	@ 0xa0
 8003702:	d006      	beq.n	8003712 <HAL_ADC_Init+0x432>
 8003704:	2bc0      	cmp	r3, #192	@ 0xc0
 8003706:	d004      	beq.n	8003712 <HAL_ADC_Init+0x432>
 8003708:	2be0      	cmp	r3, #224	@ 0xe0
 800370a:	d002      	beq.n	8003712 <HAL_ADC_Init+0x432>
 800370c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003710:	d121      	bne.n	8003756 <HAL_ADC_Init+0x476>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8003712:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003714:	b113      	cbz	r3, 800371c <HAL_ADC_Init+0x43c>
 8003716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800371a:	d122      	bne.n	8003762 <HAL_ADC_Init+0x482>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800371c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800371e:	2b01      	cmp	r3, #1
 8003720:	d003      	beq.n	800372a <HAL_ADC_Init+0x44a>
 8003722:	f240 4201 	movw	r2, #1025	@ 0x401
 8003726:	4293      	cmp	r3, r2
 8003728:	d121      	bne.n	800376e <HAL_ADC_Init+0x48e>
        MODIFY_REG(hadc->Instance->CFGR2,
 800372a:	6821      	ldr	r1, [r4, #0]
 800372c:	690b      	ldr	r3, [r1, #16]
 800372e:	f36f 038a 	bfc	r3, #2, #9
 8003732:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003734:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003736:	4302      	orrs	r2, r0
 8003738:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800373a:	4302      	orrs	r2, r0
 800373c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800373e:	4302      	orrs	r2, r0
 8003740:	4313      	orrs	r3, r2
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	610b      	str	r3, [r1, #16]
 8003748:	e7b0      	b.n	80036ac <HAL_ADC_Init+0x3cc>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 800374a:	f240 2166 	movw	r1, #614	@ 0x266
 800374e:	4814      	ldr	r0, [pc, #80]	@ (80037a0 <HAL_ADC_Init+0x4c0>)
 8003750:	f7fe fe8a 	bl	8002468 <assert_failed>
 8003754:	e7ca      	b.n	80036ec <HAL_ADC_Init+0x40c>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8003756:	f240 2167 	movw	r1, #615	@ 0x267
 800375a:	4811      	ldr	r0, [pc, #68]	@ (80037a0 <HAL_ADC_Init+0x4c0>)
 800375c:	f7fe fe84 	bl	8002468 <assert_failed>
 8003760:	e7d7      	b.n	8003712 <HAL_ADC_Init+0x432>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8003762:	f44f 711a 	mov.w	r1, #616	@ 0x268
 8003766:	480e      	ldr	r0, [pc, #56]	@ (80037a0 <HAL_ADC_Init+0x4c0>)
 8003768:	f7fe fe7e 	bl	8002468 <assert_failed>
 800376c:	e7d6      	b.n	800371c <HAL_ADC_Init+0x43c>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800376e:	f240 2169 	movw	r1, #617	@ 0x269
 8003772:	480b      	ldr	r0, [pc, #44]	@ (80037a0 <HAL_ADC_Init+0x4c0>)
 8003774:	f7fe fe78 	bl	8002468 <assert_failed>
 8003778:	e7d7      	b.n	800372a <HAL_ADC_Init+0x44a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800377a:	6821      	ldr	r1, [r4, #0]
 800377c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800377e:	f023 030f 	bic.w	r3, r3, #15
 8003782:	69e2      	ldr	r2, [r4, #28]
 8003784:	3a01      	subs	r2, #1
 8003786:	4313      	orrs	r3, r2
 8003788:	630b      	str	r3, [r1, #48]	@ 0x30
 800378a:	e797      	b.n	80036bc <HAL_ADC_Init+0x3dc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800378e:	f043 0310 	orr.w	r3, r3, #16
 8003792:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003794:	2501      	movs	r5, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003796:	4628      	mov	r0, r5
 8003798:	b003      	add	sp, #12
 800379a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800379c:	2501      	movs	r5, #1
 800379e:	e7fa      	b.n	8003796 <HAL_ADC_Init+0x4b6>
 80037a0:	0801d4c0 	.word	0x0801d4c0
 80037a4:	50040000 	.word	0x50040000
 80037a8:	50040300 	.word	0x50040300
 80037ac:	fff0c007 	.word	0xfff0c007
 80037b0:	11111110 	.word	0x11111110

080037b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	b083      	sub	sp, #12
 80037b8:	4605      	mov	r5, r0
 80037ba:	460c      	mov	r4, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037bc:	2300      	movs	r3, #0
 80037be:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80037c0:	6802      	ldr	r2, [r0, #0]
 80037c2:	4b85      	ldr	r3, [pc, #532]	@ (80039d8 <HAL_ADC_ConfigChannel+0x224>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0x1e>
 80037c8:	f640 2197 	movw	r1, #2711	@ 0xa97
 80037cc:	4883      	ldr	r0, [pc, #524]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 80037ce:	f7fe fe4b 	bl	8002468 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 80037d2:	6863      	ldr	r3, [r4, #4]
 80037d4:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80037d8:	d866      	bhi.n	80038a8 <HAL_ADC_ConfigChannel+0xf4>
 80037da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037de:	d20a      	bcs.n	80037f6 <HAL_ADC_ConfigChannel+0x42>
 80037e0:	2b18      	cmp	r3, #24
 80037e2:	d810      	bhi.n	8003806 <HAL_ADC_ConfigChannel+0x52>
 80037e4:	2b06      	cmp	r3, #6
 80037e6:	d30e      	bcc.n	8003806 <HAL_ADC_ConfigChannel+0x52>
 80037e8:	4a7d      	ldr	r2, [pc, #500]	@ (80039e0 <HAL_ADC_ConfigChannel+0x22c>)
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	f013 0f01 	tst.w	r3, #1
 80037f2:	d10d      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x5c>
 80037f4:	e007      	b.n	8003806 <HAL_ADC_ConfigChannel+0x52>
 80037f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037fa:	4a7a      	ldr	r2, [pc, #488]	@ (80039e4 <HAL_ADC_ConfigChannel+0x230>)
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	f013 0f01 	tst.w	r3, #1
 8003804:	d104      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x5c>
 8003806:	f640 2198 	movw	r1, #2712	@ 0xa98
 800380a:	4874      	ldr	r0, [pc, #464]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 800380c:	f7fe fe2c 	bl	8002468 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 8003810:	68a3      	ldr	r3, [r4, #8]
 8003812:	b11b      	cbz	r3, 800381c <HAL_ADC_ConfigChannel+0x68>
 8003814:	2b07      	cmp	r3, #7
 8003816:	d85e      	bhi.n	80038d6 <HAL_ADC_ConfigChannel+0x122>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05f      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x128>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 800381c:	68e3      	ldr	r3, [r4, #12]
 800381e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003820:	d002      	beq.n	8003828 <HAL_ADC_ConfigChannel+0x74>
 8003822:	4a71      	ldr	r2, [pc, #452]	@ (80039e8 <HAL_ADC_ConfigChannel+0x234>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d15f      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x134>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 8003828:	6923      	ldr	r3, [r4, #16]
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_ADC_ConfigChannel+0x82>
 800382e:	b113      	cbz	r3, 8003836 <HAL_ADC_ConfigChannel+0x82>
 8003830:	3b01      	subs	r3, #1
 8003832:	2b02      	cmp	r3, #2
 8003834:	d85e      	bhi.n	80038f4 <HAL_ADC_ConfigChannel+0x140>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 8003836:	6961      	ldr	r1, [r4, #20]
 8003838:	682b      	ldr	r3, [r5, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	f003 0306 	and.w	r3, r3, #6
 8003842:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4299      	cmp	r1, r3
 800384c:	d858      	bhi.n	8003900 <HAL_ADC_ConfigChannel+0x14c>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	2b04      	cmp	r3, #4
 8003852:	d003      	beq.n	800385c <HAL_ADC_ConfigChannel+0xa8>
 8003854:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
 8003858:	2b01      	cmp	r3, #1
 800385a:	d057      	beq.n	800390c <HAL_ADC_ConfigChannel+0x158>

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800385c:	68e2      	ldr	r2, [r4, #12]
 800385e:	4b62      	ldr	r3, [pc, #392]	@ (80039e8 <HAL_ADC_ConfigChannel+0x234>)
 8003860:	429a      	cmp	r2, r3
 8003862:	f000 80e7 	beq.w	8003a34 <HAL_ADC_ConfigChannel+0x280>
  {
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 8003866:	682a      	ldr	r2, [r5, #0]
 8003868:	4b5b      	ldr	r3, [pc, #364]	@ (80039d8 <HAL_ADC_ConfigChannel+0x224>)
 800386a:	429a      	cmp	r2, r3
 800386c:	d054      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x164>
 800386e:	f640 21a5 	movw	r1, #2725	@ 0xaa5
 8003872:	485a      	ldr	r0, [pc, #360]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 8003874:	f7fe fdf8 	bl	8002468 <assert_failed>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003878:	f895 3054 	ldrb.w	r3, [r5, #84]	@ 0x54
 800387c:	2b01      	cmp	r3, #1
 800387e:	f000 8324 	beq.w	8003eca <HAL_ADC_ConfigChannel+0x716>
 8003882:	2301      	movs	r3, #1
 8003884:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003888:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800388a:	6883      	ldr	r3, [r0, #8]
 800388c:	f013 0f04 	tst.w	r3, #4
 8003890:	f000 8120 	beq.w	8003ad4 <HAL_ADC_ConfigChannel+0x320>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003894:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	65ab      	str	r3, [r5, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800389c:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800389e:	2300      	movs	r3, #0
 80038a0:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80038a4:	b003      	add	sp, #12
 80038a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a8:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80038ac:	d80b      	bhi.n	80038c6 <HAL_ADC_ConfigChannel+0x112>
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b2:	d3a8      	bcc.n	8003806 <HAL_ADC_ConfigChannel+0x52>
 80038b4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80038b8:	4a4a      	ldr	r2, [pc, #296]	@ (80039e4 <HAL_ADC_ConfigChannel+0x230>)
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	f013 0f01 	tst.w	r3, #1
 80038c2:	d1a5      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x5c>
 80038c4:	e79f      	b.n	8003806 <HAL_ADC_ConfigChannel+0x52>
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ca:	d0a1      	beq.n	8003810 <HAL_ADC_ConfigChannel+0x5c>
 80038cc:	f240 3206 	movw	r2, #774	@ 0x306
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d09d      	beq.n	8003810 <HAL_ADC_ConfigChannel+0x5c>
 80038d4:	e797      	b.n	8003806 <HAL_ADC_ConfigChannel+0x52>
 80038d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038da:	d09f      	beq.n	800381c <HAL_ADC_ConfigChannel+0x68>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 80038dc:	f640 2199 	movw	r1, #2713	@ 0xa99
 80038e0:	483e      	ldr	r0, [pc, #248]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 80038e2:	f7fe fdc1 	bl	8002468 <assert_failed>
 80038e6:	e799      	b.n	800381c <HAL_ADC_ConfigChannel+0x68>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 80038e8:	f640 219a 	movw	r1, #2714	@ 0xa9a
 80038ec:	483b      	ldr	r0, [pc, #236]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 80038ee:	f7fe fdbb 	bl	8002468 <assert_failed>
 80038f2:	e799      	b.n	8003828 <HAL_ADC_ConfigChannel+0x74>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 80038f4:	f640 219b 	movw	r1, #2715	@ 0xa9b
 80038f8:	4838      	ldr	r0, [pc, #224]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 80038fa:	f7fe fdb5 	bl	8002468 <assert_failed>
 80038fe:	e79a      	b.n	8003836 <HAL_ADC_ConfigChannel+0x82>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 8003900:	f640 219c 	movw	r1, #2716	@ 0xa9c
 8003904:	4835      	ldr	r0, [pc, #212]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 8003906:	f7fe fdaf 	bl	8002468 <assert_failed>
 800390a:	e7a0      	b.n	800384e <HAL_ADC_ConfigChannel+0x9a>
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800390c:	f44f 612a 	mov.w	r1, #2720	@ 0xaa0
 8003910:	4832      	ldr	r0, [pc, #200]	@ (80039dc <HAL_ADC_ConfigChannel+0x228>)
 8003912:	f7fe fda9 	bl	8002468 <assert_failed>
 8003916:	e7a1      	b.n	800385c <HAL_ADC_ConfigChannel+0xa8>
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	4a34      	ldr	r2, [pc, #208]	@ (80039ec <HAL_ADC_ConfigChannel+0x238>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d0ab      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003920:	4a33      	ldr	r2, [pc, #204]	@ (80039f0 <HAL_ADC_ConfigChannel+0x23c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d0a8      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003926:	4a33      	ldr	r2, [pc, #204]	@ (80039f4 <HAL_ADC_ConfigChannel+0x240>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d0a5      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 800392c:	4a32      	ldr	r2, [pc, #200]	@ (80039f8 <HAL_ADC_ConfigChannel+0x244>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d0a2      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003932:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003936:	3210      	adds	r2, #16
 8003938:	4293      	cmp	r3, r2
 800393a:	d09d      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 800393c:	4a2f      	ldr	r2, [pc, #188]	@ (80039fc <HAL_ADC_ConfigChannel+0x248>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d09a      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003942:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003946:	3240      	adds	r2, #64	@ 0x40
 8003948:	4293      	cmp	r3, r2
 800394a:	d095      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 800394c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a00 <HAL_ADC_ConfigChannel+0x24c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d092      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003952:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003956:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800395a:	4293      	cmp	r3, r2
 800395c:	d08c      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 800395e:	4a29      	ldr	r2, [pc, #164]	@ (8003a04 <HAL_ADC_ConfigChannel+0x250>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d089      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003964:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8003968:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 800396c:	4293      	cmp	r3, r2
 800396e:	d083      	beq.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003970:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003978:	4293      	cmp	r3, r2
 800397a:	f43f af7d 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 800397e:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <HAL_ADC_ConfigChannel+0x254>)
 8003980:	4293      	cmp	r3, r2
 8003982:	f43f af79 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003986:	4a21      	ldr	r2, [pc, #132]	@ (8003a0c <HAL_ADC_ConfigChannel+0x258>)
 8003988:	4293      	cmp	r3, r2
 800398a:	f43f af75 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 800398e:	4a20      	ldr	r2, [pc, #128]	@ (8003a10 <HAL_ADC_ConfigChannel+0x25c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	f43f af71 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003996:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <HAL_ADC_ConfigChannel+0x260>)
 8003998:	4293      	cmp	r3, r2
 800399a:	f43f af6d 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 800399e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a18 <HAL_ADC_ConfigChannel+0x264>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	f43f af69 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 80039a6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_ADC_ConfigChannel+0x268>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f43f af65 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 80039ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <HAL_ADC_ConfigChannel+0x26c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	f43f af61 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 80039b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <HAL_ADC_ConfigChannel+0x270>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	f43f af5d 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 80039be:	4a1a      	ldr	r2, [pc, #104]	@ (8003a28 <HAL_ADC_ConfigChannel+0x274>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	f43f af59 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 80039c6:	4a19      	ldr	r2, [pc, #100]	@ (8003a2c <HAL_ADC_ConfigChannel+0x278>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	f43f af55 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 80039ce:	4a18      	ldr	r2, [pc, #96]	@ (8003a30 <HAL_ADC_ConfigChannel+0x27c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f47f af4c 	bne.w	800386e <HAL_ADC_ConfigChannel+0xba>
 80039d6:	e74f      	b.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
 80039d8:	50040000 	.word	0x50040000
 80039dc:	0801d4c0 	.word	0x0801d4c0
 80039e0:	01041040 	.word	0x01041040
 80039e4:	01041041 	.word	0x01041041
 80039e8:	407f0000 	.word	0x407f0000
 80039ec:	04300002 	.word	0x04300002
 80039f0:	08600004 	.word	0x08600004
 80039f4:	0c900008 	.word	0x0c900008
 80039f8:	10c00010 	.word	0x10c00010
 80039fc:	19200040 	.word	0x19200040
 8003a00:	21800100 	.word	0x21800100
 8003a04:	2a000400 	.word	0x2a000400
 8003a08:	36902000 	.word	0x36902000
 8003a0c:	3ac04000 	.word	0x3ac04000
 8003a10:	3ef08000 	.word	0x3ef08000
 8003a14:	43210000 	.word	0x43210000
 8003a18:	47520000 	.word	0x47520000
 8003a1c:	4b840000 	.word	0x4b840000
 8003a20:	80000001 	.word	0x80000001
 8003a24:	c7520000 	.word	0xc7520000
 8003a28:	cb840000 	.word	0xcb840000
 8003a2c:	c75a0000 	.word	0xc75a0000
 8003a30:	cb8c0000 	.word	0xcb8c0000
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	4a94      	ldr	r2, [pc, #592]	@ (8003c88 <HAL_ADC_ConfigChannel+0x4d4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f43f af1d 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a3e:	4a93      	ldr	r2, [pc, #588]	@ (8003c8c <HAL_ADC_ConfigChannel+0x4d8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	f43f af19 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a46:	4a92      	ldr	r2, [pc, #584]	@ (8003c90 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f43f af15 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a4e:	4a91      	ldr	r2, [pc, #580]	@ (8003c94 <HAL_ADC_ConfigChannel+0x4e0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	f43f af11 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a56:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003a5a:	3210      	adds	r2, #16
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	f43f af0b 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a62:	4a8d      	ldr	r2, [pc, #564]	@ (8003c98 <HAL_ADC_ConfigChannel+0x4e4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	f43f af07 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a6a:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003a6e:	3240      	adds	r2, #64	@ 0x40
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f43f af01 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a76:	4a89      	ldr	r2, [pc, #548]	@ (8003c9c <HAL_ADC_ConfigChannel+0x4e8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f43f aefd 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a7e:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003a82:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003a86:	4293      	cmp	r3, r2
 8003a88:	f43f aef6 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a8c:	4a84      	ldr	r2, [pc, #528]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x4ec>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f43f aef2 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003a94:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8003a98:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	f43f aeeb 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003aa2:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8003aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f43f aee4 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003ab0:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x4f0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	f43f aee0 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003ab8:	4a7b      	ldr	r2, [pc, #492]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x4f4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	f43f aedc 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8003cac <HAL_ADC_ConfigChannel+0x4f8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f43f aed8 	beq.w	8003878 <HAL_ADC_ConfigChannel+0xc4>
 8003ac8:	f640 21a9 	movw	r1, #2729	@ 0xaa9
 8003acc:	4878      	ldr	r0, [pc, #480]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x4fc>)
 8003ace:	f7fe fccb 	bl	8002468 <assert_failed>
 8003ad2:	e6d1      	b.n	8003878 <HAL_ADC_ConfigChannel+0xc4>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	6861      	ldr	r1, [r4, #4]
 8003ad8:	f7ff fbd4 	bl	8003284 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003adc:	6828      	ldr	r0, [r5, #0]
 8003ade:	6883      	ldr	r3, [r0, #8]
 8003ae0:	f013 0304 	ands.w	r3, r3, #4
 8003ae4:	d000      	beq.n	8003ae8 <HAL_ADC_ConfigChannel+0x334>
 8003ae6:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ae8:	6882      	ldr	r2, [r0, #8]
 8003aea:	f012 0208 	ands.w	r2, r2, #8
 8003aee:	d000      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x33e>
 8003af0:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003af2:	bb23      	cbnz	r3, 8003b3e <HAL_ADC_ConfigChannel+0x38a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003af4:	bb1a      	cbnz	r2, 8003b3e <HAL_ADC_ConfigChannel+0x38a>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003af6:	68a2      	ldr	r2, [r4, #8]
 8003af8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003afc:	d053      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x3f2>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003afe:	6821      	ldr	r1, [r4, #0]
 8003b00:	f7ff fbd8 	bl	80032b4 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b04:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b06:	6953      	ldr	r3, [r2, #20]
 8003b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b0c:	6153      	str	r3, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b0e:	6961      	ldr	r1, [r4, #20]
 8003b10:	682a      	ldr	r2, [r5, #0]
 8003b12:	68d3      	ldr	r3, [r2, #12]
 8003b14:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b1c:	6920      	ldr	r0, [r4, #16]
 8003b1e:	2804      	cmp	r0, #4
 8003b20:	d04b      	beq.n	8003bba <HAL_ADC_ConfigChannel+0x406>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b22:	6826      	ldr	r6, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b24:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8003b26:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 8003b2a:	4b62      	ldr	r3, [pc, #392]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x500>)
 8003b2c:	403b      	ands	r3, r7
 8003b2e:	f006 46f8 	and.w	r6, r6, #2080374784	@ 0x7c000000
 8003b32:	4331      	orrs	r1, r6
 8003b34:	430b      	orrs	r3, r1
 8003b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b3a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b3e:	682a      	ldr	r2, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b40:	6893      	ldr	r3, [r2, #8]
 8003b42:	f013 0f01 	tst.w	r3, #1
 8003b46:	d117      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x3c4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003b4c:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 8003b50:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003b54:	ea21 0106 	bic.w	r1, r1, r6
 8003b58:	f000 0c18 	and.w	ip, r0, #24
 8003b5c:	4856      	ldr	r0, [pc, #344]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x504>)
 8003b5e:	fa20 f00c 	lsr.w	r0, r0, ip
 8003b62:	4003      	ands	r3, r0
 8003b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b6e:	68e2      	ldr	r2, [r4, #12]
 8003b70:	4b52      	ldr	r3, [pc, #328]	@ (8003cbc <HAL_ADC_ConfigChannel+0x508>)
 8003b72:	429a      	cmp	r2, r3
 8003b74:	f000 80ae 	beq.w	8003cd4 <HAL_ADC_ConfigChannel+0x520>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	4a51      	ldr	r2, [pc, #324]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x50c>)
 8003b7c:	4213      	tst	r3, r2
 8003b7e:	f000 81a0 	beq.w	8003ec2 <HAL_ADC_ConfigChannel+0x70e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b82:	4a50      	ldr	r2, [pc, #320]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x510>)
 8003b84:	6892      	ldr	r2, [r2, #8]
 8003b86:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b8a:	494f      	ldr	r1, [pc, #316]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x514>)
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	f000 814a 	beq.w	8003e26 <HAL_ADC_ConfigChannel+0x672>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b92:	494e      	ldr	r1, [pc, #312]	@ (8003ccc <HAL_ADC_ConfigChannel+0x518>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	f000 816d 	beq.w	8003e74 <HAL_ADC_ConfigChannel+0x6c0>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b9a:	494d      	ldr	r1, [pc, #308]	@ (8003cd0 <HAL_ADC_ConfigChannel+0x51c>)
 8003b9c:	428b      	cmp	r3, r1
 8003b9e:	f000 817d 	beq.w	8003e9c <HAL_ADC_ConfigChannel+0x6e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e67b      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	6821      	ldr	r1, [r4, #0]
 8003baa:	f7ff fb83 	bl	80032b4 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bae:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bb0:	6953      	ldr	r3, [r2, #20]
 8003bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bb6:	6153      	str	r3, [r2, #20]
}
 8003bb8:	e7a9      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x35a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bba:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003bbc:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bbe:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8003bc8:	bb78      	cbnz	r0, 8003c2a <HAL_ADC_ConfigChannel+0x476>
 8003bca:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bce:	4299      	cmp	r1, r3
 8003bd0:	d033      	beq.n	8003c3a <HAL_ADC_ConfigChannel+0x486>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bd2:	6829      	ldr	r1, [r5, #0]
 8003bd4:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8003bd6:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 8003bd8:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8003be2:	bb78      	cbnz	r0, 8003c44 <HAL_ADC_ConfigChannel+0x490>
 8003be4:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d033      	beq.n	8003c54 <HAL_ADC_ConfigChannel+0x4a0>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003bec:	6829      	ldr	r1, [r5, #0]
 8003bee:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8003bf0:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 8003bf2:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8003bfc:	bb78      	cbnz	r0, 8003c5e <HAL_ADC_ConfigChannel+0x4aa>
 8003bfe:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d033      	beq.n	8003c6e <HAL_ADC_ConfigChannel+0x4ba>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c06:	6829      	ldr	r1, [r5, #0]
 8003c08:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8003c0a:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 8003c0c:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8003c16:	bb78      	cbnz	r0, 8003c78 <HAL_ADC_ConfigChannel+0x4c4>
 8003c18:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d18e      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x38a>
  MODIFY_REG(*preg,
 8003c20:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8003c22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c26:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 8003c28:	e789      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x38a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c2e:	b113      	cbz	r3, 8003c36 <HAL_ADC_ConfigChannel+0x482>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	e7cb      	b.n	8003bce <HAL_ADC_ConfigChannel+0x41a>
    return 32U;
 8003c36:	2320      	movs	r3, #32
 8003c38:	e7c9      	b.n	8003bce <HAL_ADC_ConfigChannel+0x41a>
  MODIFY_REG(*preg,
 8003c3a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c40:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8003c42:	e7c6      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x41e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003c48:	b113      	cbz	r3, 8003c50 <HAL_ADC_ConfigChannel+0x49c>
  return __builtin_clz(value);
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	e7cb      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003c50:	2320      	movs	r3, #32
 8003c52:	e7c9      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x434>
  MODIFY_REG(*preg,
 8003c54:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8003c56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c5a:	664b      	str	r3, [r1, #100]	@ 0x64
}
 8003c5c:	e7c6      	b.n	8003bec <HAL_ADC_ConfigChannel+0x438>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003c62:	b113      	cbz	r3, 8003c6a <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	e7cb      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x44e>
    return 32U;
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	e7c9      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x44e>
  MODIFY_REG(*preg,
 8003c6e:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 8003c70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c74:	668b      	str	r3, [r1, #104]	@ 0x68
}
 8003c76:	e7c6      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x452>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003c7c:	b113      	cbz	r3, 8003c84 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	e7cb      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x468>
    return 32U;
 8003c84:	2320      	movs	r3, #32
 8003c86:	e7c9      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x468>
 8003c88:	04300002 	.word	0x04300002
 8003c8c:	08600004 	.word	0x08600004
 8003c90:	0c900008 	.word	0x0c900008
 8003c94:	10c00010 	.word	0x10c00010
 8003c98:	19200040 	.word	0x19200040
 8003c9c:	21800100 	.word	0x21800100
 8003ca0:	2a000400 	.word	0x2a000400
 8003ca4:	36902000 	.word	0x36902000
 8003ca8:	3ac04000 	.word	0x3ac04000
 8003cac:	3ef08000 	.word	0x3ef08000
 8003cb0:	0801d4c0 	.word	0x0801d4c0
 8003cb4:	03fff000 	.word	0x03fff000
 8003cb8:	0007ffff 	.word	0x0007ffff
 8003cbc:	407f0000 	.word	0x407f0000
 8003cc0:	80080000 	.word	0x80080000
 8003cc4:	50040300 	.word	0x50040300
 8003cc8:	c7520000 	.word	0xc7520000
 8003ccc:	cb840000 	.word	0xcb840000
 8003cd0:	80000001 	.word	0x80000001
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cd4:	6828      	ldr	r0, [r5, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003cdc:	bb26      	cbnz	r6, 8003d28 <HAL_ADC_ConfigChannel+0x574>
 8003cde:	0e9a      	lsrs	r2, r3, #26
 8003ce0:	3201      	adds	r2, #1
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2a09      	cmp	r2, #9
 8003ce8:	bf8c      	ite	hi
 8003cea:	2200      	movhi	r2, #0
 8003cec:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cee:	2a00      	cmp	r2, #0
 8003cf0:	d052      	beq.n	8003d98 <HAL_ADC_ConfigChannel+0x5e4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cf2:	bb46      	cbnz	r6, 8003d46 <HAL_ADC_ConfigChannel+0x592>
 8003cf4:	0e99      	lsrs	r1, r3, #26
 8003cf6:	3101      	adds	r1, #1
 8003cf8:	0689      	lsls	r1, r1, #26
 8003cfa:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003cfe:	bb76      	cbnz	r6, 8003d5e <HAL_ADC_ConfigChannel+0x5aa>
 8003d00:	0e9f      	lsrs	r7, r3, #26
 8003d02:	3701      	adds	r7, #1
 8003d04:	f007 071f 	and.w	r7, r7, #31
 8003d08:	2201      	movs	r2, #1
 8003d0a:	40ba      	lsls	r2, r7
 8003d0c:	4311      	orrs	r1, r2
 8003d0e:	bbae      	cbnz	r6, 8003d7c <HAL_ADC_ConfigChannel+0x5c8>
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	3301      	adds	r3, #1
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d1c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d1e:	4319      	orrs	r1, r3
 8003d20:	68a2      	ldr	r2, [r4, #8]
 8003d22:	f7ff fac7 	bl	80032b4 <LL_ADC_SetChannelSamplingTime>
 8003d26:	e727      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x3c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003d2c:	b14a      	cbz	r2, 8003d42 <HAL_ADC_ConfigChannel+0x58e>
  return __builtin_clz(value);
 8003d2e:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d32:	3201      	adds	r2, #1
 8003d34:	f002 021f 	and.w	r2, r2, #31
 8003d38:	2a09      	cmp	r2, #9
 8003d3a:	bf8c      	ite	hi
 8003d3c:	2200      	movhi	r2, #0
 8003d3e:	2201      	movls	r2, #1
 8003d40:	e7d5      	b.n	8003cee <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003d42:	2220      	movs	r2, #32
 8003d44:	e7f5      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x57e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003d4a:	b131      	cbz	r1, 8003d5a <HAL_ADC_ConfigChannel+0x5a6>
  return __builtin_clz(value);
 8003d4c:	fab1 f181 	clz	r1, r1
 8003d50:	3101      	adds	r1, #1
 8003d52:	0689      	lsls	r1, r1, #26
 8003d54:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003d58:	e7d1      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x54a>
    return 32U;
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	e7f8      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x59c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003d62:	b14a      	cbz	r2, 8003d78 <HAL_ADC_ConfigChannel+0x5c4>
  return __builtin_clz(value);
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	3201      	adds	r2, #1
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	f04f 0c01 	mov.w	ip, #1
 8003d72:	fa0c f202 	lsl.w	r2, ip, r2
 8003d76:	e7c9      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x558>
    return 32U;
 8003d78:	2220      	movs	r2, #32
 8003d7a:	e7f5      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x5b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003d80:	b143      	cbz	r3, 8003d94 <HAL_ADC_ConfigChannel+0x5e0>
  return __builtin_clz(value);
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d90:	051b      	lsls	r3, r3, #20
 8003d92:	e7c4      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x56a>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e7f6      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x5d2>
 8003d98:	b9ce      	cbnz	r6, 8003dce <HAL_ADC_ConfigChannel+0x61a>
 8003d9a:	0e99      	lsrs	r1, r3, #26
 8003d9c:	3101      	adds	r1, #1
 8003d9e:	0689      	lsls	r1, r1, #26
 8003da0:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003da4:	b9fe      	cbnz	r6, 8003de6 <HAL_ADC_ConfigChannel+0x632>
 8003da6:	0e9f      	lsrs	r7, r3, #26
 8003da8:	3701      	adds	r7, #1
 8003daa:	f007 071f 	and.w	r7, r7, #31
 8003dae:	2201      	movs	r2, #1
 8003db0:	40ba      	lsls	r2, r7
 8003db2:	4311      	orrs	r1, r2
 8003db4:	bb36      	cbnz	r6, 8003e04 <HAL_ADC_ConfigChannel+0x650>
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003dc2:	3b1e      	subs	r3, #30
 8003dc4:	051b      	lsls	r3, r3, #20
 8003dc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dca:	4319      	orrs	r1, r3
 8003dcc:	e7a8      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x56c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003dd2:	b131      	cbz	r1, 8003de2 <HAL_ADC_ConfigChannel+0x62e>
  return __builtin_clz(value);
 8003dd4:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dd8:	3101      	adds	r1, #1
 8003dda:	0689      	lsls	r1, r1, #26
 8003ddc:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003de0:	e7e0      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x5f0>
    return 32U;
 8003de2:	2120      	movs	r1, #32
 8003de4:	e7f8      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x624>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003dea:	b14a      	cbz	r2, 8003e00 <HAL_ADC_ConfigChannel+0x64c>
  return __builtin_clz(value);
 8003dec:	fab2 f282 	clz	r2, r2
 8003df0:	3201      	adds	r2, #1
 8003df2:	f002 021f 	and.w	r2, r2, #31
 8003df6:	f04f 0c01 	mov.w	ip, #1
 8003dfa:	fa0c f202 	lsl.w	r2, ip, r2
 8003dfe:	e7d8      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003e00:	2220      	movs	r2, #32
 8003e02:	e7f5      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x63c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003e08:	b15b      	cbz	r3, 8003e22 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e18:	3b1e      	subs	r3, #30
 8003e1a:	051b      	lsls	r3, r3, #20
 8003e1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e20:	e7d3      	b.n	8003dca <HAL_ADC_ConfigChannel+0x616>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e7f3      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x65a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e26:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 8003e2a:	f47f aeb2 	bne.w	8003b92 <HAL_ADC_ConfigChannel+0x3de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e2e:	682a      	ldr	r2, [r5, #0]
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x71c>)
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d001      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x686>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e36:	2000      	movs	r0, #0
 8003e38:	e531      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e3a:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e3e:	4925      	ldr	r1, [pc, #148]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x720>)
 8003e40:	688a      	ldr	r2, [r1, #8]
 8003e42:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x724>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	4a22      	ldr	r2, [pc, #136]	@ (8003edc <HAL_ADC_ConfigChannel+0x728>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	3301      	adds	r3, #1
 8003e5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e62:	e002      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x6b6>
            wait_loop_index--;
 8003e64:	9b01      	ldr	r3, [sp, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e6a:	9b01      	ldr	r3, [sp, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f9      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x6b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e70:	2000      	movs	r0, #0
 8003e72:	e514      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e74:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8003e78:	f47f ae8f 	bne.w	8003b9a <HAL_ADC_ConfigChannel+0x3e6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e7c:	682a      	ldr	r2, [r5, #0]
 8003e7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x71c>)
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x6d4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e84:	2000      	movs	r0, #0
 8003e86:	e50a      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e88:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 8003e8c:	4911      	ldr	r1, [pc, #68]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x720>)
 8003e8e:	688a      	ldr	r2, [r1, #8]
 8003e90:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e98:	2000      	movs	r0, #0
}
 8003e9a:	e500      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e9c:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8003ea0:	d111      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x712>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ea2:	682a      	ldr	r2, [r5, #0]
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x71c>)
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d001      	beq.n	8003eae <HAL_ADC_ConfigChannel+0x6fa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e4f7      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eae:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003eb2:	4908      	ldr	r1, [pc, #32]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x720>)
 8003eb4:	688a      	ldr	r2, [r1, #8]
 8003eb6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ebe:	2000      	movs	r0, #0
}
 8003ec0:	e4ed      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e4eb      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e4e9      	b.n	800389e <HAL_ADC_ConfigChannel+0xea>
  __HAL_LOCK(hadc);
 8003eca:	2002      	movs	r0, #2
 8003ecc:	e4ea      	b.n	80038a4 <HAL_ADC_ConfigChannel+0xf0>
 8003ece:	bf00      	nop
 8003ed0:	50040000 	.word	0x50040000
 8003ed4:	50040300 	.word	0x50040300
 8003ed8:	20000014 	.word	0x20000014
 8003edc:	053e2d63 	.word	0x053e2d63

08003ee0 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	db07      	blt.n	8003ef4 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ee4:	f000 021f 	and.w	r2, r0, #31
 8003ee8:	0940      	lsrs	r0, r0, #5
 8003eea:	2301      	movs	r3, #1
 8003eec:	4093      	lsls	r3, r2
 8003eee:	4a02      	ldr	r2, [pc, #8]	@ (8003ef8 <__NVIC_EnableIRQ+0x18>)
 8003ef0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000e100 	.word	0xe000e100

08003efc <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8003efc:	2800      	cmp	r0, #0
 8003efe:	db08      	blt.n	8003f12 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f00:	0109      	lsls	r1, r1, #4
 8003f02:	b2c9      	uxtb	r1, r1
 8003f04:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003f08:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003f0c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003f10:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	f000 000f 	and.w	r0, r0, #15
 8003f16:	0109      	lsls	r1, r1, #4
 8003f18:	b2c9      	uxtb	r1, r1
 8003f1a:	4b01      	ldr	r3, [pc, #4]	@ (8003f20 <__NVIC_SetPriority+0x24>)
 8003f1c:	5419      	strb	r1, [r3, r0]
  }
}
 8003f1e:	4770      	bx	lr
 8003f20:	e000ed14 	.word	0xe000ed14

08003f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f24:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f26:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f2a:	f1c0 0c07 	rsb	ip, r0, #7
 8003f2e:	f1bc 0f04 	cmp.w	ip, #4
 8003f32:	bf28      	it	cs
 8003f34:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f38:	1d03      	adds	r3, r0, #4
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d90f      	bls.n	8003f5e <NVIC_EncodePriority+0x3a>
 8003f3e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	f04f 3eff 	mov.w	lr, #4294967295
 8003f44:	fa0e f00c 	lsl.w	r0, lr, ip
 8003f48:	ea21 0100 	bic.w	r1, r1, r0
 8003f4c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f4e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f52:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8003f56:	ea41 0002 	orr.w	r0, r1, r2
 8003f5a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e7ee      	b.n	8003f40 <NVIC_EncodePriority+0x1c>
	...

08003f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003f68:	1ec3      	subs	r3, r0, #3
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d80f      	bhi.n	8003f8e <HAL_NVIC_SetPriorityGrouping+0x2a>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f98 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8003f70:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f7a:	0224      	lsls	r4, r4, #8
 8003f7c:	f404 64e0 	and.w	r4, r4, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f80:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8003f82:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003f8a:	60d3      	str	r3, [r2, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f8c:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003f8e:	21a6      	movs	r1, #166	@ 0xa6
 8003f90:	4802      	ldr	r0, [pc, #8]	@ (8003f9c <HAL_NVIC_SetPriorityGrouping+0x38>)
 8003f92:	f7fe fa69 	bl	8002468 <assert_failed>
 8003f96:	e7ea      	b.n	8003f6e <HAL_NVIC_SetPriorityGrouping+0xa>
 8003f98:	e000ed00 	.word	0xe000ed00
 8003f9c:	0801d4f8 	.word	0x0801d4f8

08003fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	4615      	mov	r5, r2
  uint32_t prioritygroup = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003fa8:	2a0f      	cmp	r2, #15
 8003faa:	d80e      	bhi.n	8003fca <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003fac:	2c0f      	cmp	r4, #15
 8003fae:	d811      	bhi.n	8003fd4 <HAL_NVIC_SetPriority+0x34>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_NVIC_SetPriority+0x40>)
 8003fb2:	68d8      	ldr	r0, [r3, #12]

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb4:	462a      	mov	r2, r5
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003fbc:	f7ff ffb2 	bl	8003f24 <NVIC_EncodePriority>
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff ff9a 	bl	8003efc <__NVIC_SetPriority>
}
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003fca:	21be      	movs	r1, #190	@ 0xbe
 8003fcc:	4805      	ldr	r0, [pc, #20]	@ (8003fe4 <HAL_NVIC_SetPriority+0x44>)
 8003fce:	f7fe fa4b 	bl	8002468 <assert_failed>
 8003fd2:	e7eb      	b.n	8003fac <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003fd4:	21bf      	movs	r1, #191	@ 0xbf
 8003fd6:	4803      	ldr	r0, [pc, #12]	@ (8003fe4 <HAL_NVIC_SetPriority+0x44>)
 8003fd8:	f7fe fa46 	bl	8002468 <assert_failed>
 8003fdc:	e7e8      	b.n	8003fb0 <HAL_NVIC_SetPriority+0x10>
 8003fde:	bf00      	nop
 8003fe0:	e000ed00 	.word	0xe000ed00
 8003fe4:	0801d4f8 	.word	0x0801d4f8

08003fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003fea:	1e04      	subs	r4, r0, #0
 8003fec:	db03      	blt.n	8003ff6 <HAL_NVIC_EnableIRQ+0xe>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff ff76 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 8003ff4:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003ff6:	21d2      	movs	r1, #210	@ 0xd2
 8003ff8:	4801      	ldr	r0, [pc, #4]	@ (8004000 <HAL_NVIC_EnableIRQ+0x18>)
 8003ffa:	f7fe fa35 	bl	8002468 <assert_failed>
 8003ffe:	e7f6      	b.n	8003fee <HAL_NVIC_EnableIRQ+0x6>
 8004000:	0801d4f8 	.word	0x0801d4f8

08004004 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004004:	b430      	push	{r4, r5}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004006:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004008:	f004 0c1c 	and.w	ip, r4, #28
 800400c:	2401      	movs	r4, #1
 800400e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004012:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004014:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004016:	6804      	ldr	r4, [r0, #0]
 8004018:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800401a:	6883      	ldr	r3, [r0, #8]
 800401c:	2b10      	cmp	r3, #16
 800401e:	d005      	beq.n	800402c <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004020:	6803      	ldr	r3, [r0, #0]
 8004022:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004024:	6803      	ldr	r3, [r0, #0]
 8004026:	60da      	str	r2, [r3, #12]
  }
}
 8004028:	bc30      	pop	{r4, r5}
 800402a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800402c:	6803      	ldr	r3, [r0, #0]
 800402e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004030:	6803      	ldr	r3, [r0, #0]
 8004032:	60d9      	str	r1, [r3, #12]
 8004034:	e7f8      	b.n	8004028 <DMA_SetConfig+0x24>
	...

08004038 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004038:	2800      	cmp	r0, #0
 800403a:	f000 80f7 	beq.w	800422c <HAL_DMA_Init+0x1f4>
{
 800403e:	b510      	push	{r4, lr}
 8004040:	4604      	mov	r4, r0
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8004042:	6803      	ldr	r3, [r0, #0]
 8004044:	4a7a      	ldr	r2, [pc, #488]	@ (8004230 <HAL_DMA_Init+0x1f8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02b      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 800404a:	3214      	adds	r2, #20
 800404c:	4293      	cmp	r3, r2
 800404e:	d028      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004050:	3214      	adds	r2, #20
 8004052:	4293      	cmp	r3, r2
 8004054:	d025      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004056:	3214      	adds	r2, #20
 8004058:	4293      	cmp	r3, r2
 800405a:	d022      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 800405c:	3214      	adds	r2, #20
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004062:	3214      	adds	r2, #20
 8004064:	4293      	cmp	r3, r2
 8004066:	d01c      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004068:	3214      	adds	r2, #20
 800406a:	4293      	cmp	r3, r2
 800406c:	d019      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 800406e:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8004072:	4293      	cmp	r3, r2
 8004074:	d015      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004076:	3214      	adds	r2, #20
 8004078:	4293      	cmp	r3, r2
 800407a:	d012      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 800407c:	3214      	adds	r2, #20
 800407e:	4293      	cmp	r3, r2
 8004080:	d00f      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004082:	3214      	adds	r2, #20
 8004084:	4293      	cmp	r3, r2
 8004086:	d00c      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004088:	3214      	adds	r2, #20
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 800408e:	3214      	adds	r2, #20
 8004090:	4293      	cmp	r3, r2
 8004092:	d006      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 8004094:	3214      	adds	r2, #20
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <HAL_DMA_Init+0x6a>
 800409a:	21a5      	movs	r1, #165	@ 0xa5
 800409c:	4865      	ldr	r0, [pc, #404]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 800409e:	f7fe f9e3 	bl	8002468 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	b123      	cbz	r3, 80040b0 <HAL_DMA_Init+0x78>
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d002      	beq.n	80040b0 <HAL_DMA_Init+0x78>
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ae:	d174      	bne.n	800419a <HAL_DMA_Init+0x162>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80040b0:	68e3      	ldr	r3, [r4, #12]
 80040b2:	2b40      	cmp	r3, #64	@ 0x40
 80040b4:	d001      	beq.n	80040ba <HAL_DMA_Init+0x82>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d174      	bne.n	80041a4 <HAL_DMA_Init+0x16c>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	2b80      	cmp	r3, #128	@ 0x80
 80040be:	d001      	beq.n	80040c4 <HAL_DMA_Init+0x8c>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d174      	bne.n	80041ae <HAL_DMA_Init+0x176>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80040c4:	6963      	ldr	r3, [r4, #20]
 80040c6:	b12b      	cbz	r3, 80040d4 <HAL_DMA_Init+0x9c>
 80040c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040cc:	d002      	beq.n	80040d4 <HAL_DMA_Init+0x9c>
 80040ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d2:	d171      	bne.n	80041b8 <HAL_DMA_Init+0x180>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80040d4:	69a3      	ldr	r3, [r4, #24]
 80040d6:	b12b      	cbz	r3, 80040e4 <HAL_DMA_Init+0xac>
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040dc:	d002      	beq.n	80040e4 <HAL_DMA_Init+0xac>
 80040de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040e2:	d16e      	bne.n	80041c2 <HAL_DMA_Init+0x18a>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80040e4:	69e3      	ldr	r3, [r4, #28]
 80040e6:	b10b      	cbz	r3, 80040ec <HAL_DMA_Init+0xb4>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d16f      	bne.n	80041cc <HAL_DMA_Init+0x194>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80040ec:	6a23      	ldr	r3, [r4, #32]
 80040ee:	b143      	cbz	r3, 8004102 <HAL_DMA_Init+0xca>
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f4:	d005      	beq.n	8004102 <HAL_DMA_Init+0xca>
 80040f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fa:	d002      	beq.n	8004102 <HAL_DMA_Init+0xca>
 80040fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004100:	d169      	bne.n	80041d6 <HAL_DMA_Init+0x19e>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	2b07      	cmp	r3, #7
 8004106:	d86b      	bhi.n	80041e0 <HAL_DMA_Init+0x1a8>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	4b4b      	ldr	r3, [pc, #300]	@ (8004238 <HAL_DMA_Init+0x200>)
 800410c:	429a      	cmp	r2, r3
 800410e:	d86c      	bhi.n	80041ea <HAL_DMA_Init+0x1b2>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004110:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_DMA_Init+0x204>)
 8004112:	4413      	add	r3, r2
 8004114:	494a      	ldr	r1, [pc, #296]	@ (8004240 <HAL_DMA_Init+0x208>)
 8004116:	fba1 1303 	umull	r1, r3, r1, r3
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	6463      	str	r3, [r4, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004120:	4b48      	ldr	r3, [pc, #288]	@ (8004244 <HAL_DMA_Init+0x20c>)
 8004122:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	2302      	movs	r3, #2
 8004126:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 800412a:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800412c:	f36f 110e 	bfc	r1, #4, #11
  tmp |=  hdma->Init.Direction        |
 8004130:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004132:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8004134:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004136:	6920      	ldr	r0, [r4, #16]
 8004138:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413a:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413e:	69a0      	ldr	r0, [r4, #24]
 8004140:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004142:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004144:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004146:	6a20      	ldr	r0, [r4, #32]
 8004148:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800414a:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800414c:	6013      	str	r3, [r2, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004154:	d019      	beq.n	800418a <HAL_DMA_Init+0x152>
    if (DMA1 == hdma->DmaBaseAddress)
 8004156:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004158:	4b3a      	ldr	r3, [pc, #232]	@ (8004244 <HAL_DMA_Init+0x20c>)
 800415a:	429a      	cmp	r2, r3
 800415c:	d050      	beq.n	8004200 <HAL_DMA_Init+0x1c8>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800415e:	4b39      	ldr	r3, [pc, #228]	@ (8004244 <HAL_DMA_Init+0x20c>)
 8004160:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	@ 0x4a8
 8004164:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004166:	f001 001c 	and.w	r0, r1, #28
 800416a:	210f      	movs	r1, #15
 800416c:	4081      	lsls	r1, r0
 800416e:	ea22 0201 	bic.w	r2, r2, r1
 8004172:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004176:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	@ 0x4a8
 800417a:	6861      	ldr	r1, [r4, #4]
 800417c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800417e:	f000 001c 	and.w	r0, r0, #28
 8004182:	4081      	lsls	r1, r0
 8004184:	430a      	orrs	r2, r1
 8004186:	f8c3 24a8 	str.w	r2, [r3, #1192]	@ 0x4a8
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800418a:	2000      	movs	r0, #0
 800418c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800418e:	2301      	movs	r3, #1
 8004190:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 8004194:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004198:	bd10      	pop	{r4, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800419a:	21a6      	movs	r1, #166	@ 0xa6
 800419c:	4825      	ldr	r0, [pc, #148]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 800419e:	f7fe f963 	bl	8002468 <assert_failed>
 80041a2:	e785      	b.n	80040b0 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80041a4:	21a7      	movs	r1, #167	@ 0xa7
 80041a6:	4823      	ldr	r0, [pc, #140]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 80041a8:	f7fe f95e 	bl	8002468 <assert_failed>
 80041ac:	e785      	b.n	80040ba <HAL_DMA_Init+0x82>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80041ae:	21a8      	movs	r1, #168	@ 0xa8
 80041b0:	4820      	ldr	r0, [pc, #128]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 80041b2:	f7fe f959 	bl	8002468 <assert_failed>
 80041b6:	e785      	b.n	80040c4 <HAL_DMA_Init+0x8c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80041b8:	21a9      	movs	r1, #169	@ 0xa9
 80041ba:	481e      	ldr	r0, [pc, #120]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 80041bc:	f7fe f954 	bl	8002468 <assert_failed>
 80041c0:	e788      	b.n	80040d4 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80041c2:	21aa      	movs	r1, #170	@ 0xaa
 80041c4:	481b      	ldr	r0, [pc, #108]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 80041c6:	f7fe f94f 	bl	8002468 <assert_failed>
 80041ca:	e78b      	b.n	80040e4 <HAL_DMA_Init+0xac>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80041cc:	21ab      	movs	r1, #171	@ 0xab
 80041ce:	4819      	ldr	r0, [pc, #100]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 80041d0:	f7fe f94a 	bl	8002468 <assert_failed>
 80041d4:	e78a      	b.n	80040ec <HAL_DMA_Init+0xb4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80041d6:	21ac      	movs	r1, #172	@ 0xac
 80041d8:	4816      	ldr	r0, [pc, #88]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 80041da:	f7fe f945 	bl	8002468 <assert_failed>
 80041de:	e790      	b.n	8004102 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80041e0:	21ae      	movs	r1, #174	@ 0xae
 80041e2:	4814      	ldr	r0, [pc, #80]	@ (8004234 <HAL_DMA_Init+0x1fc>)
 80041e4:	f7fe f940 	bl	8002468 <assert_failed>
 80041e8:	e78e      	b.n	8004108 <HAL_DMA_Init+0xd0>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ea:	4b17      	ldr	r3, [pc, #92]	@ (8004248 <HAL_DMA_Init+0x210>)
 80041ec:	4413      	add	r3, r2
 80041ee:	4914      	ldr	r1, [pc, #80]	@ (8004240 <HAL_DMA_Init+0x208>)
 80041f0:	fba1 1303 	umull	r1, r3, r1, r3
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	6463      	str	r3, [r4, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041fa:	4b14      	ldr	r3, [pc, #80]	@ (800424c <HAL_DMA_Init+0x214>)
 80041fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80041fe:	e791      	b.n	8004124 <HAL_DMA_Init+0xec>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004200:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8004204:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004206:	f001 001c 	and.w	r0, r1, #28
 800420a:	210f      	movs	r1, #15
 800420c:	4081      	lsls	r1, r0
 800420e:	ea22 0201 	bic.w	r2, r2, r1
 8004212:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004216:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800421a:	6861      	ldr	r1, [r4, #4]
 800421c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800421e:	f000 001c 	and.w	r0, r0, #28
 8004222:	4081      	lsls	r1, r0
 8004224:	430a      	orrs	r2, r1
 8004226:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800422a:	e7ae      	b.n	800418a <HAL_DMA_Init+0x152>
    return HAL_ERROR;
 800422c:	2001      	movs	r0, #1
}
 800422e:	4770      	bx	lr
 8004230:	40020008 	.word	0x40020008
 8004234:	0801d530 	.word	0x0801d530
 8004238:	40020407 	.word	0x40020407
 800423c:	bffdfff8 	.word	0xbffdfff8
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	40020000 	.word	0x40020000
 8004248:	bffdfbf8 	.word	0xbffdfbf8
 800424c:	40020400 	.word	0x40020400

08004250 <HAL_DMA_Start_IT>:
{
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	4604      	mov	r4, r0
 8004254:	460e      	mov	r6, r1
 8004256:	4617      	mov	r7, r2
 8004258:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800425a:	1e58      	subs	r0, r3, #1
 800425c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8004260:	4298      	cmp	r0, r3
 8004262:	d80f      	bhi.n	8004284 <HAL_DMA_Start_IT+0x34>
  __HAL_LOCK(hdma);
 8004264:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8004268:	2b01      	cmp	r3, #1
 800426a:	d03a      	beq.n	80042e2 <HAL_DMA_Start_IT+0x92>
 800426c:	2301      	movs	r3, #1
 800426e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8004272:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8004276:	2b01      	cmp	r3, #1
 8004278:	d00a      	beq.n	8004290 <HAL_DMA_Start_IT+0x40>
    __HAL_UNLOCK(hdma);
 800427a:	2300      	movs	r3, #0
 800427c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 8004280:	2002      	movs	r0, #2
}
 8004282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004284:	f240 11df 	movw	r1, #479	@ 0x1df
 8004288:	4817      	ldr	r0, [pc, #92]	@ (80042e8 <HAL_DMA_Start_IT+0x98>)
 800428a:	f7fe f8ed 	bl	8002468 <assert_failed>
 800428e:	e7e9      	b.n	8004264 <HAL_DMA_Start_IT+0x14>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004290:	2302      	movs	r3, #2
 8004292:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004296:	2300      	movs	r3, #0
 8004298:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	6813      	ldr	r3, [r2, #0]
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	6013      	str	r3, [r2, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042a4:	462b      	mov	r3, r5
 80042a6:	463a      	mov	r2, r7
 80042a8:	4631      	mov	r1, r6
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7ff feaa 	bl	8004004 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80042b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80042b2:	b15b      	cbz	r3, 80042cc <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	f043 030e 	orr.w	r3, r3, #14
 80042bc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2000      	movs	r0, #0
 80042ca:	e7da      	b.n	8004282 <HAL_DMA_Start_IT+0x32>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	6813      	ldr	r3, [r2, #0]
 80042da:	f043 030a 	orr.w	r3, r3, #10
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e7ed      	b.n	80042be <HAL_DMA_Start_IT+0x6e>
  __HAL_LOCK(hdma);
 80042e2:	2002      	movs	r0, #2
 80042e4:	e7cd      	b.n	8004282 <HAL_DMA_Start_IT+0x32>
 80042e6:	bf00      	nop
 80042e8:	0801d530 	.word	0x0801d530

080042ec <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042ec:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d006      	beq.n	8004302 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f4:	2304      	movs	r3, #4
 80042f6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80042f8:	2300      	movs	r3, #0
 80042fa:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 80042fe:	2001      	movs	r0, #1
 8004300:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004302:	6802      	ldr	r2, [r0, #0]
 8004304:	6813      	ldr	r3, [r2, #0]
 8004306:	f023 030e 	bic.w	r3, r3, #14
 800430a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800430c:	6802      	ldr	r2, [r0, #0]
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004316:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004318:	f003 031c 	and.w	r3, r3, #28
 800431c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800431e:	2201      	movs	r2, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004326:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800432a:	2300      	movs	r3, #0
 800432c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    return status;
 8004330:	4618      	mov	r0, r3
}
 8004332:	4770      	bx	lr

08004334 <HAL_DMA_Abort_IT>:
{
 8004334:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004336:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800433a:	2b02      	cmp	r3, #2
 800433c:	d003      	beq.n	8004346 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800433e:	2304      	movs	r3, #4
 8004340:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8004342:	2001      	movs	r0, #1
}
 8004344:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004346:	6802      	ldr	r2, [r0, #0]
 8004348:	6813      	ldr	r3, [r2, #0]
 800434a:	f023 030e 	bic.w	r3, r3, #14
 800434e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004350:	6802      	ldr	r2, [r0, #0]
 8004352:	6813      	ldr	r3, [r2, #0]
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800435a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800435c:	f003 031c 	and.w	r3, r3, #28
 8004360:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004362:	2201      	movs	r2, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800436a:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800436e:	2300      	movs	r3, #0
 8004370:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8004374:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004376:	b113      	cbz	r3, 800437e <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 8004378:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800437a:	2000      	movs	r0, #0
 800437c:	e7e2      	b.n	8004344 <HAL_DMA_Abort_IT+0x10>
 800437e:	2000      	movs	r0, #0
 8004380:	e7e0      	b.n	8004344 <HAL_DMA_Abort_IT+0x10>

08004382 <HAL_DMA_IRQHandler>:
{
 8004382:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004384:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004386:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004388:	6804      	ldr	r4, [r0, #0]
 800438a:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800438c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800438e:	f003 031c 	and.w	r3, r3, #28
 8004392:	2204      	movs	r2, #4
 8004394:	409a      	lsls	r2, r3
 8004396:	420a      	tst	r2, r1
 8004398:	d015      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x44>
 800439a:	f015 0f04 	tst.w	r5, #4
 800439e:	d012      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	f013 0f20 	tst.w	r3, #32
 80043a6:	d103      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f023 0304 	bic.w	r3, r3, #4
 80043ae:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043b0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80043b2:	f003 021c 	and.w	r2, r3, #28
 80043b6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80043b8:	2304      	movs	r3, #4
 80043ba:	4093      	lsls	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80043be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80043c0:	b103      	cbz	r3, 80043c4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 80043c2:	4798      	blx	r3
}
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043c6:	2202      	movs	r2, #2
 80043c8:	409a      	lsls	r2, r3
 80043ca:	420a      	tst	r2, r1
 80043cc:	d01c      	beq.n	8004408 <HAL_DMA_IRQHandler+0x86>
 80043ce:	f015 0f02 	tst.w	r5, #2
 80043d2:	d019      	beq.n	8004408 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	f013 0f20 	tst.w	r3, #32
 80043da:	d106      	bne.n	80043ea <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	f023 030a 	bic.w	r3, r3, #10
 80043e2:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043ea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80043ec:	f003 021c 	and.w	r2, r3, #28
 80043f0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80043f2:	2302      	movs	r3, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80043f8:	2300      	movs	r3, #0
 80043fa:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 80043fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0df      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004404:	4798      	blx	r3
 8004406:	e7dd      	b.n	80043c4 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004408:	2208      	movs	r2, #8
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	420b      	tst	r3, r1
 8004410:	d0d8      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x42>
 8004412:	f015 0f08 	tst.w	r5, #8
 8004416:	d0d5      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	f023 030e 	bic.w	r3, r3, #14
 800441e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004420:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004422:	f003 031c 	and.w	r3, r3, #28
 8004426:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004428:	2201      	movs	r2, #1
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004430:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004432:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004436:	2300      	movs	r3, #0
 8004438:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 800443c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0c0      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004442:	4798      	blx	r3
  return;
 8004444:	e7be      	b.n	80043c4 <HAL_DMA_IRQHandler+0x42>

08004446 <HAL_DMA_GetState>:
  return hdma->State;
 8004446:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
}
 800444a:	4770      	bx	lr

0800444c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800444c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
}
 800444e:	4770      	bx	lr

08004450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	4680      	mov	r8, r0
 8004458:	460c      	mov	r4, r1
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800445a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800445e:	d016      	beq.n	800448e <HAL_GPIO_Init+0x3e>
 8004460:	4ba3      	ldr	r3, [pc, #652]	@ (80046f0 <HAL_GPIO_Init+0x2a0>)
 8004462:	4298      	cmp	r0, r3
 8004464:	d013      	beq.n	800448e <HAL_GPIO_Init+0x3e>
 8004466:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800446a:	4298      	cmp	r0, r3
 800446c:	d00f      	beq.n	800448e <HAL_GPIO_Init+0x3e>
 800446e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004472:	4298      	cmp	r0, r3
 8004474:	d00b      	beq.n	800448e <HAL_GPIO_Init+0x3e>
 8004476:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800447a:	4298      	cmp	r0, r3
 800447c:	d007      	beq.n	800448e <HAL_GPIO_Init+0x3e>
 800447e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004482:	4298      	cmp	r0, r3
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x3e>
 8004486:	21aa      	movs	r1, #170	@ 0xaa
 8004488:	489a      	ldr	r0, [pc, #616]	@ (80046f4 <HAL_GPIO_Init+0x2a4>)
 800448a:	f7fd ffed 	bl	8002468 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	b29a      	uxth	r2, r3
 8004492:	b112      	cbz	r2, 800449a <HAL_GPIO_Init+0x4a>
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004498:	d303      	bcc.n	80044a2 <HAL_GPIO_Init+0x52>
 800449a:	21ab      	movs	r1, #171	@ 0xab
 800449c:	4895      	ldr	r0, [pc, #596]	@ (80046f4 <HAL_GPIO_Init+0x2a4>)
 800449e:	f7fd ffe3 	bl	8002468 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80044a8:	d01f      	beq.n	80044ea <HAL_GPIO_Init+0x9a>
 80044aa:	d80c      	bhi.n	80044c6 <HAL_GPIO_Init+0x76>
 80044ac:	2b12      	cmp	r3, #18
 80044ae:	d806      	bhi.n	80044be <HAL_GPIO_Init+0x6e>
 80044b0:	4a91      	ldr	r2, [pc, #580]	@ (80046f8 <HAL_GPIO_Init+0x2a8>)
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	f013 0f01 	tst.w	r3, #1
 80044ba:	d116      	bne.n	80044ea <HAL_GPIO_Init+0x9a>
 80044bc:	e011      	b.n	80044e2 <HAL_GPIO_Init+0x92>
 80044be:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80044c2:	d012      	beq.n	80044ea <HAL_GPIO_Init+0x9a>
 80044c4:	e00d      	b.n	80044e2 <HAL_GPIO_Init+0x92>
 80044c6:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80044ca:	d00e      	beq.n	80044ea <HAL_GPIO_Init+0x9a>
 80044cc:	d806      	bhi.n	80044dc <HAL_GPIO_Init+0x8c>
 80044ce:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80044d2:	d00a      	beq.n	80044ea <HAL_GPIO_Init+0x9a>
 80044d4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80044d8:	d103      	bne.n	80044e2 <HAL_GPIO_Init+0x92>
 80044da:	e006      	b.n	80044ea <HAL_GPIO_Init+0x9a>
 80044dc:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80044e0:	d003      	beq.n	80044ea <HAL_GPIO_Init+0x9a>
 80044e2:	21ac      	movs	r1, #172	@ 0xac
 80044e4:	4883      	ldr	r0, [pc, #524]	@ (80046f4 <HAL_GPIO_Init+0x2a4>)
 80044e6:	f7fd ffbf 	bl	8002468 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ea:	2500      	movs	r5, #0
 80044ec:	e08e      	b.n	800460c <HAL_GPIO_Init+0x1bc>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80044ee:	68e3      	ldr	r3, [r4, #12]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d817      	bhi.n	8004524 <HAL_GPIO_Init+0xd4>
        temp = GPIOx->OSPEEDR;
 80044f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044f8:	0069      	lsls	r1, r5, #1
 80044fa:	2303      	movs	r3, #3
 80044fc:	408b      	lsls	r3, r1
 80044fe:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004502:	68e3      	ldr	r3, [r4, #12]
 8004504:	408b      	lsls	r3, r1
 8004506:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8004508:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 800450c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004510:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004514:	6863      	ldr	r3, [r4, #4]
 8004516:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800451a:	40ab      	lsls	r3, r5
 800451c:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 800451e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004522:	e082      	b.n	800462a <HAL_GPIO_Init+0x1da>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004524:	21bb      	movs	r1, #187	@ 0xbb
 8004526:	4873      	ldr	r0, [pc, #460]	@ (80046f4 <HAL_GPIO_Init+0x2a4>)
 8004528:	f7fd ff9e 	bl	8002468 <assert_failed>
 800452c:	e7e2      	b.n	80044f4 <HAL_GPIO_Init+0xa4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800452e:	21dc      	movs	r1, #220	@ 0xdc
 8004530:	4870      	ldr	r0, [pc, #448]	@ (80046f4 <HAL_GPIO_Init+0x2a4>)
 8004532:	f7fd ff99 	bl	8002468 <assert_failed>
 8004536:	e081      	b.n	800463c <HAL_GPIO_Init+0x1ec>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004538:	f1b8 4f90 	cmp.w	r8, #1207959552	@ 0x48000000
 800453c:	d016      	beq.n	800456c <HAL_GPIO_Init+0x11c>
 800453e:	4b6c      	ldr	r3, [pc, #432]	@ (80046f0 <HAL_GPIO_Init+0x2a0>)
 8004540:	4598      	cmp	r8, r3
 8004542:	d013      	beq.n	800456c <HAL_GPIO_Init+0x11c>
 8004544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004548:	4598      	cmp	r8, r3
 800454a:	d00f      	beq.n	800456c <HAL_GPIO_Init+0x11c>
 800454c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004550:	4598      	cmp	r8, r3
 8004552:	d00b      	beq.n	800456c <HAL_GPIO_Init+0x11c>
 8004554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004558:	4598      	cmp	r8, r3
 800455a:	d007      	beq.n	800456c <HAL_GPIO_Init+0x11c>
 800455c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004560:	4598      	cmp	r8, r3
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x11c>
 8004564:	21e8      	movs	r1, #232	@ 0xe8
 8004566:	4863      	ldr	r0, [pc, #396]	@ (80046f4 <HAL_GPIO_Init+0x2a4>)
 8004568:	f7fd ff7e 	bl	8002468 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	2b0f      	cmp	r3, #15
 8004570:	d810      	bhi.n	8004594 <HAL_GPIO_Init+0x144>
        temp = GPIOx->AFR[position >> 3u];
 8004572:	08ea      	lsrs	r2, r5, #3
 8004574:	3208      	adds	r2, #8
 8004576:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800457a:	f005 0107 	and.w	r1, r5, #7
 800457e:	0089      	lsls	r1, r1, #2
 8004580:	230f      	movs	r3, #15
 8004582:	408b      	lsls	r3, r1
 8004584:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004588:	6923      	ldr	r3, [r4, #16]
 800458a:	408b      	lsls	r3, r1
 800458c:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
 800458e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 8004592:	e065      	b.n	8004660 <HAL_GPIO_Init+0x210>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004594:	21e9      	movs	r1, #233	@ 0xe9
 8004596:	4857      	ldr	r0, [pc, #348]	@ (80046f4 <HAL_GPIO_Init+0x2a4>)
 8004598:	f7fd ff66 	bl	8002468 <assert_failed>
 800459c:	e7e9      	b.n	8004572 <HAL_GPIO_Init+0x122>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800459e:	2304      	movs	r3, #4
 80045a0:	e000      	b.n	80045a4 <HAL_GPIO_Init+0x154>
 80045a2:	2300      	movs	r3, #0
 80045a4:	408b      	lsls	r3, r1
 80045a6:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045a8:	3202      	adds	r2, #2
 80045aa:	4954      	ldr	r1, [pc, #336]	@ (80046fc <HAL_GPIO_Init+0x2ac>)
 80045ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045b0:	4b53      	ldr	r3, [pc, #332]	@ (8004700 <HAL_GPIO_Init+0x2b0>)
 80045b2:	689a      	ldr	r2, [r3, #8]
        temp &= ~(iocurrent);
 80045b4:	43f3      	mvns	r3, r6
 80045b6:	ea22 0106 	bic.w	r1, r2, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ba:	6860      	ldr	r0, [r4, #4]
 80045bc:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 80045c0:	d001      	beq.n	80045c6 <HAL_GPIO_Init+0x176>
        {
          temp |= iocurrent;
 80045c2:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->RTSR1 = temp;
 80045c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004700 <HAL_GPIO_Init+0x2b0>)
 80045c8:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR1;
 80045ca:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
 80045cc:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045d0:	6860      	ldr	r0, [r4, #4]
 80045d2:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80045d6:	d001      	beq.n	80045dc <HAL_GPIO_Init+0x18c>
        {
          temp |= iocurrent;
 80045d8:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->FTSR1 = temp;
 80045dc:	4a48      	ldr	r2, [pc, #288]	@ (8004700 <HAL_GPIO_Init+0x2b0>)
 80045de:	60d1      	str	r1, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045e0:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 80045e2:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045e6:	6860      	ldr	r0, [r4, #4]
 80045e8:	f410 3f00 	tst.w	r0, #131072	@ 0x20000
 80045ec:	d001      	beq.n	80045f2 <HAL_GPIO_Init+0x1a2>
        {
          temp |= iocurrent;
 80045ee:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->EMR1 = temp;
 80045f2:	4a43      	ldr	r2, [pc, #268]	@ (8004700 <HAL_GPIO_Init+0x2b0>)
 80045f4:	6051      	str	r1, [r2, #4]

        temp = EXTI->IMR1;
 80045f6:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 80045f8:	4013      	ands	r3, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045fa:	6861      	ldr	r1, [r4, #4]
 80045fc:	f411 3f80 	tst.w	r1, #65536	@ 0x10000
 8004600:	d001      	beq.n	8004606 <HAL_GPIO_Init+0x1b6>
        {
          temp |= iocurrent;
 8004602:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI->IMR1 = temp;
 8004606:	4a3e      	ldr	r2, [pc, #248]	@ (8004700 <HAL_GPIO_Init+0x2b0>)
 8004608:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800460a:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800460c:	6826      	ldr	r6, [r4, #0]
 800460e:	fa36 f205 	lsrs.w	r2, r6, r5
 8004612:	d069      	beq.n	80046e8 <HAL_GPIO_Init+0x298>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004614:	2701      	movs	r7, #1
 8004616:	40af      	lsls	r7, r5
    if (iocurrent != 0x00u)
 8004618:	403e      	ands	r6, r7
 800461a:	d0f6      	beq.n	800460a <HAL_GPIO_Init+0x1ba>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	3b01      	subs	r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	f67f af62 	bls.w	80044ee <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800462a:	6863      	ldr	r3, [r4, #4]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b03      	cmp	r3, #3
 8004632:	d00f      	beq.n	8004654 <HAL_GPIO_Init+0x204>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004634:	68a3      	ldr	r3, [r4, #8]
 8004636:	2b02      	cmp	r3, #2
 8004638:	f63f af79 	bhi.w	800452e <HAL_GPIO_Init+0xde>
        temp = GPIOx->PUPDR;
 800463c:	f8d8 200c 	ldr.w	r2, [r8, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004640:	0069      	lsls	r1, r5, #1
 8004642:	2303      	movs	r3, #3
 8004644:	408b      	lsls	r3, r1
 8004646:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800464a:	68a3      	ldr	r3, [r4, #8]
 800464c:	408b      	lsls	r3, r1
 800464e:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
 8004650:	f8c8 300c 	str.w	r3, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004654:	6863      	ldr	r3, [r4, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b02      	cmp	r3, #2
 800465c:	f43f af6c 	beq.w	8004538 <HAL_GPIO_Init+0xe8>
      temp = GPIOx->MODER;
 8004660:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004664:	0069      	lsls	r1, r5, #1
 8004666:	2303      	movs	r3, #3
 8004668:	408b      	lsls	r3, r1
 800466a:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	408b      	lsls	r3, r1
 8004676:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8004678:	f8c8 3000 	str.w	r3, [r8]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800467c:	6863      	ldr	r3, [r4, #4]
 800467e:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8004682:	d0c2      	beq.n	800460a <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004684:	4b1f      	ldr	r3, [pc, #124]	@ (8004704 <HAL_GPIO_Init+0x2b4>)
 8004686:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	661a      	str	r2, [r3, #96]	@ 0x60
 800468e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004698:	08aa      	lsrs	r2, r5, #2
 800469a:	1c91      	adds	r1, r2, #2
 800469c:	4b17      	ldr	r3, [pc, #92]	@ (80046fc <HAL_GPIO_Init+0x2ac>)
 800469e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046a2:	f005 0103 	and.w	r1, r5, #3
 80046a6:	0089      	lsls	r1, r1, #2
 80046a8:	230f      	movs	r3, #15
 80046aa:	408b      	lsls	r3, r1
 80046ac:	ea20 0003 	bic.w	r0, r0, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046b0:	f1b8 4f90 	cmp.w	r8, #1207959552	@ 0x48000000
 80046b4:	f43f af75 	beq.w	80045a2 <HAL_GPIO_Init+0x152>
 80046b8:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <HAL_GPIO_Init+0x2a0>)
 80046ba:	4598      	cmp	r8, r3
 80046bc:	d00e      	beq.n	80046dc <HAL_GPIO_Init+0x28c>
 80046be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046c2:	4598      	cmp	r8, r3
 80046c4:	d00c      	beq.n	80046e0 <HAL_GPIO_Init+0x290>
 80046c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046ca:	4598      	cmp	r8, r3
 80046cc:	d00a      	beq.n	80046e4 <HAL_GPIO_Init+0x294>
 80046ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046d2:	4598      	cmp	r8, r3
 80046d4:	f43f af63 	beq.w	800459e <HAL_GPIO_Init+0x14e>
 80046d8:	2307      	movs	r3, #7
 80046da:	e763      	b.n	80045a4 <HAL_GPIO_Init+0x154>
 80046dc:	2301      	movs	r3, #1
 80046de:	e761      	b.n	80045a4 <HAL_GPIO_Init+0x154>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e75f      	b.n	80045a4 <HAL_GPIO_Init+0x154>
 80046e4:	2303      	movs	r3, #3
 80046e6:	e75d      	b.n	80045a4 <HAL_GPIO_Init+0x154>
  }
}
 80046e8:	b002      	add	sp, #8
 80046ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ee:	bf00      	nop
 80046f0:	48000400 	.word	0x48000400
 80046f4:	0801d568 	.word	0x0801d568
 80046f8:	0006080f 	.word	0x0006080f
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010400 	.word	0x40010400
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4604      	mov	r4, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800470c:	460d      	mov	r5, r1
 800470e:	b121      	cbz	r1, 800471a <HAL_GPIO_ReadPin+0x12>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	421d      	tst	r5, r3
 8004714:	d007      	beq.n	8004726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004716:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004718:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800471a:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 800471e:	4803      	ldr	r0, [pc, #12]	@ (800472c <HAL_GPIO_ReadPin+0x24>)
 8004720:	f7fd fea2 	bl	8002468 <assert_failed>
 8004724:	e7f4      	b.n	8004710 <HAL_GPIO_ReadPin+0x8>
    bitstatus = GPIO_PIN_RESET;
 8004726:	2000      	movs	r0, #0
 8004728:	e7f6      	b.n	8004718 <HAL_GPIO_ReadPin+0x10>
 800472a:	bf00      	nop
 800472c:	0801d568 	.word	0x0801d568

08004730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4605      	mov	r5, r0
 8004734:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004736:	460e      	mov	r6, r1
 8004738:	b121      	cbz	r1, 8004744 <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800473a:	2c01      	cmp	r4, #1
 800473c:	d808      	bhi.n	8004750 <HAL_GPIO_WritePin+0x20>

  if(PinState != GPIO_PIN_RESET)
 800473e:	b16c      	cbz	r4, 800475c <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004740:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004742:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004744:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8004748:	4805      	ldr	r0, [pc, #20]	@ (8004760 <HAL_GPIO_WritePin+0x30>)
 800474a:	f7fd fe8d 	bl	8002468 <assert_failed>
 800474e:	e7f4      	b.n	800473a <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004750:	f240 11af 	movw	r1, #431	@ 0x1af
 8004754:	4802      	ldr	r0, [pc, #8]	@ (8004760 <HAL_GPIO_WritePin+0x30>)
 8004756:	f7fd fe87 	bl	8002468 <assert_failed>
 800475a:	e7f0      	b.n	800473e <HAL_GPIO_WritePin+0xe>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800475c:	62ae      	str	r6, [r5, #40]	@ 0x28
}
 800475e:	e7f0      	b.n	8004742 <HAL_GPIO_WritePin+0x12>
 8004760:	0801d568 	.word	0x0801d568

08004764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004764:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004766:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	4203      	tst	r3, r0
 800476c:	d100      	bne.n	8004770 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800476e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004770:	4b02      	ldr	r3, [pc, #8]	@ (800477c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004772:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004774:	f7fd fca4 	bl	80020c0 <HAL_GPIO_EXTI_Callback>
}
 8004778:	e7f9      	b.n	800476e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800477a:	bf00      	nop
 800477c:	40010400 	.word	0x40010400

08004780 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004780:	6803      	ldr	r3, [r0, #0]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	f012 0f02 	tst.w	r2, #2
 8004788:	d001      	beq.n	800478e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800478a:	2200      	movs	r2, #0
 800478c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800478e:	6803      	ldr	r3, [r0, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	f012 0f01 	tst.w	r2, #1
 8004796:	d103      	bne.n	80047a0 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	619a      	str	r2, [r3, #24]
  }
}
 80047a0:	4770      	bx	lr

080047a2 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047a2:	f011 0f01 	tst.w	r1, #1
 80047a6:	d009      	beq.n	80047bc <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80047ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047b0:	2b28      	cmp	r3, #40	@ 0x28
 80047b2:	d001      	beq.n	80047b8 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047b4:	23f2      	movs	r3, #242	@ 0xf2
 80047b6:	e002      	b.n	80047be <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80047b8:	2342      	movs	r3, #66	@ 0x42
 80047ba:	e000      	b.n	80047be <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 80047bc:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047be:	f011 0f02 	tst.w	r1, #2
 80047c2:	d009      	beq.n	80047d8 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047c4:	f043 0c44 	orr.w	ip, r3, #68	@ 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047c8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80047cc:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80047d0:	2a28      	cmp	r2, #40	@ 0x28
 80047d2:	d009      	beq.n	80047e8 <I2C_Disable_IRQ+0x46>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047d4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047d8:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80047dc:	d106      	bne.n	80047ec <I2C_Disable_IRQ+0x4a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047de:	2910      	cmp	r1, #16
 80047e0:	d106      	bne.n	80047f0 <I2C_Disable_IRQ+0x4e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047e2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047e6:	e005      	b.n	80047f4 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047e8:	4663      	mov	r3, ip
 80047ea:	e7f5      	b.n	80047d8 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047ec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047f0:	2920      	cmp	r1, #32
 80047f2:	d007      	beq.n	8004804 <I2C_Disable_IRQ+0x62>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047f4:	2940      	cmp	r1, #64	@ 0x40
 80047f6:	d008      	beq.n	800480a <I2C_Disable_IRQ+0x68>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80047f8:	6801      	ldr	r1, [r0, #0]
 80047fa:	680a      	ldr	r2, [r1, #0]
 80047fc:	ea22 0303 	bic.w	r3, r2, r3
 8004800:	600b      	str	r3, [r1, #0]
}
 8004802:	4770      	bx	lr
    tmpisr |= I2C_IT_STOPI;
 8004804:	f043 0320 	orr.w	r3, r3, #32
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004808:	e7f6      	b.n	80047f8 <I2C_Disable_IRQ+0x56>
    tmpisr |= I2C_IT_TCI;
 800480a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800480e:	e7f3      	b.n	80047f8 <I2C_Disable_IRQ+0x56>

08004810 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004810:	2800      	cmp	r0, #0
 8004812:	f000 80bd 	beq.w	8004990 <HAL_I2C_Init+0x180>
{
 8004816:	b510      	push	{r4, lr}
 8004818:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800481a:	6803      	ldr	r3, [r0, #0]
 800481c:	4a5d      	ldr	r2, [pc, #372]	@ (8004994 <HAL_I2C_Init+0x184>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d010      	beq.n	8004844 <HAL_I2C_Init+0x34>
 8004822:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004826:	4293      	cmp	r3, r2
 8004828:	d00c      	beq.n	8004844 <HAL_I2C_Init+0x34>
 800482a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800482e:	4293      	cmp	r3, r2
 8004830:	d008      	beq.n	8004844 <HAL_I2C_Init+0x34>
 8004832:	f502 5220 	add.w	r2, r2, #10240	@ 0x2800
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_I2C_Init+0x34>
 800483a:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800483e:	4856      	ldr	r0, [pc, #344]	@ (8004998 <HAL_I2C_Init+0x188>)
 8004840:	f7fd fe12 	bl	8002468 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004844:	68a3      	ldr	r3, [r4, #8]
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d265      	bcs.n	8004918 <HAL_I2C_Init+0x108>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800484c:	68e3      	ldr	r3, [r4, #12]
 800484e:	3b01      	subs	r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d867      	bhi.n	8004924 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	b113      	cbz	r3, 800485e <HAL_I2C_Init+0x4e>
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800485c:	d168      	bne.n	8004930 <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800485e:	6963      	ldr	r3, [r4, #20]
 8004860:	2bff      	cmp	r3, #255	@ 0xff
 8004862:	d86b      	bhi.n	800493c <HAL_I2C_Init+0x12c>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004864:	69a3      	ldr	r3, [r4, #24]
 8004866:	2b07      	cmp	r3, #7
 8004868:	d86e      	bhi.n	8004948 <HAL_I2C_Init+0x138>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800486a:	69e3      	ldr	r3, [r4, #28]
 800486c:	b113      	cbz	r3, 8004874 <HAL_I2C_Init+0x64>
 800486e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004872:	d16f      	bne.n	8004954 <HAL_I2C_Init+0x144>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004874:	6a23      	ldr	r3, [r4, #32]
 8004876:	b113      	cbz	r3, 800487e <HAL_I2C_Init+0x6e>
 8004878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800487c:	d170      	bne.n	8004960 <HAL_I2C_Init+0x150>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800487e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004882:	2b00      	cmp	r3, #0
 8004884:	d072      	beq.n	800496c <HAL_I2C_Init+0x15c>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004886:	2324      	movs	r3, #36	@ 0x24
 8004888:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004896:	6863      	ldr	r3, [r4, #4]
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800489e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	6893      	ldr	r3, [r2, #8]
 80048a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048a8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048aa:	68e3      	ldr	r3, [r4, #12]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d063      	beq.n	8004978 <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048b0:	68a3      	ldr	r3, [r4, #8]
 80048b2:	6822      	ldr	r2, [r4, #0]
 80048b4:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80048b8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d061      	beq.n	8004984 <HAL_I2C_Init+0x174>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	6853      	ldr	r3, [r2, #4]
 80048c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048c8:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	6853      	ldr	r3, [r2, #4]
 80048ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	68d3      	ldr	r3, [r2, #12]
 80048dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048e0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	6962      	ldr	r2, [r4, #20]
 80048e6:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048e8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80048f0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048f2:	69e3      	ldr	r3, [r4, #28]
 80048f4:	6a21      	ldr	r1, [r4, #32]
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004906:	2000      	movs	r0, #0
 8004908:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800490a:	2320      	movs	r3, #32
 800490c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004910:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8004916:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004918:	f240 2121 	movw	r1, #545	@ 0x221
 800491c:	481e      	ldr	r0, [pc, #120]	@ (8004998 <HAL_I2C_Init+0x188>)
 800491e:	f7fd fda3 	bl	8002468 <assert_failed>
 8004922:	e793      	b.n	800484c <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004924:	f240 2122 	movw	r1, #546	@ 0x222
 8004928:	481b      	ldr	r0, [pc, #108]	@ (8004998 <HAL_I2C_Init+0x188>)
 800492a:	f7fd fd9d 	bl	8002468 <assert_failed>
 800492e:	e791      	b.n	8004854 <HAL_I2C_Init+0x44>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004930:	f240 2123 	movw	r1, #547	@ 0x223
 8004934:	4818      	ldr	r0, [pc, #96]	@ (8004998 <HAL_I2C_Init+0x188>)
 8004936:	f7fd fd97 	bl	8002468 <assert_failed>
 800493a:	e790      	b.n	800485e <HAL_I2C_Init+0x4e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800493c:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8004940:	4815      	ldr	r0, [pc, #84]	@ (8004998 <HAL_I2C_Init+0x188>)
 8004942:	f7fd fd91 	bl	8002468 <assert_failed>
 8004946:	e78d      	b.n	8004864 <HAL_I2C_Init+0x54>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004948:	f240 2125 	movw	r1, #549	@ 0x225
 800494c:	4812      	ldr	r0, [pc, #72]	@ (8004998 <HAL_I2C_Init+0x188>)
 800494e:	f7fd fd8b 	bl	8002468 <assert_failed>
 8004952:	e78a      	b.n	800486a <HAL_I2C_Init+0x5a>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004954:	f240 2126 	movw	r1, #550	@ 0x226
 8004958:	480f      	ldr	r0, [pc, #60]	@ (8004998 <HAL_I2C_Init+0x188>)
 800495a:	f7fd fd85 	bl	8002468 <assert_failed>
 800495e:	e789      	b.n	8004874 <HAL_I2C_Init+0x64>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004960:	f240 2127 	movw	r1, #551	@ 0x227
 8004964:	480c      	ldr	r0, [pc, #48]	@ (8004998 <HAL_I2C_Init+0x188>)
 8004966:	f7fd fd7f 	bl	8002468 <assert_failed>
 800496a:	e788      	b.n	800487e <HAL_I2C_Init+0x6e>
    hi2c->Lock = HAL_UNLOCKED;
 800496c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8004970:	4620      	mov	r0, r4
 8004972:	f7fd fb15 	bl	8001fa0 <HAL_I2C_MspInit>
 8004976:	e786      	b.n	8004886 <HAL_I2C_Init+0x76>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004978:	68a3      	ldr	r3, [r4, #8]
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004980:	6093      	str	r3, [r2, #8]
 8004982:	e79a      	b.n	80048ba <HAL_I2C_Init+0xaa>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	6853      	ldr	r3, [r2, #4]
 8004988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800498c:	6053      	str	r3, [r2, #4]
 800498e:	e79c      	b.n	80048ca <HAL_I2C_Init+0xba>
    return HAL_ERROR;
 8004990:	2001      	movs	r0, #1
}
 8004992:	4770      	bx	lr
 8004994:	40005400 	.word	0x40005400
 8004998:	0801d5a0 	.word	0x0801d5a0

0800499c <HAL_I2C_EV_IRQHandler>:
{
 800499c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800499e:	6803      	ldr	r3, [r0, #0]
 80049a0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80049a2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80049a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80049a6:	b103      	cbz	r3, 80049aa <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80049a8:	4798      	blx	r3
}
 80049aa:	bd08      	pop	{r3, pc}

080049ac <HAL_I2C_SlaveTxCpltCallback>:
}
 80049ac:	4770      	bx	lr

080049ae <HAL_I2C_SlaveRxCpltCallback>:
}
 80049ae:	4770      	bx	lr

080049b0 <I2C_ITSlaveSeqCplt>:
{
 80049b0:	b510      	push	{r4, lr}
 80049b2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049b4:	6803      	ldr	r3, [r0, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	2100      	movs	r1, #0
 80049ba:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049be:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80049c2:	d00c      	beq.n	80049de <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049ca:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049cc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80049d0:	2b29      	cmp	r3, #41	@ 0x29
 80049d2:	d00c      	beq.n	80049ee <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049d4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80049d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049da:	d018      	beq.n	8004a0e <I2C_ITSlaveSeqCplt+0x5e>
}
 80049dc:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049de:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80049e2:	d0f3      	beq.n	80049cc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e7ee      	b.n	80049cc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049ee:	2328      	movs	r3, #40	@ 0x28
 80049f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049f4:	2321      	movs	r3, #33	@ 0x21
 80049f6:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049f8:	2101      	movs	r1, #1
 80049fa:	4620      	mov	r0, r4
 80049fc:	f7ff fed1 	bl	80047a2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a00:	2300      	movs	r3, #0
 8004a02:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7ff ffd0 	bl	80049ac <HAL_I2C_SlaveTxCpltCallback>
 8004a0c:	e7e6      	b.n	80049dc <I2C_ITSlaveSeqCplt+0x2c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a0e:	2328      	movs	r3, #40	@ 0x28
 8004a10:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a14:	2322      	movs	r3, #34	@ 0x22
 8004a16:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7ff fec1 	bl	80047a2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a20:	2300      	movs	r3, #0
 8004a22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff ffc1 	bl	80049ae <HAL_I2C_SlaveRxCpltCallback>
}
 8004a2c:	e7d6      	b.n	80049dc <I2C_ITSlaveSeqCplt+0x2c>

08004a2e <HAL_I2C_AddrCallback>:
}
 8004a2e:	4770      	bx	lr

08004a30 <I2C_ITAddrCplt>:
{
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a34:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004a38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a3c:	2b28      	cmp	r3, #40	@ 0x28
 8004a3e:	d006      	beq.n	8004a4e <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a40:	6803      	ldr	r3, [r0, #0]
 8004a42:	2208      	movs	r2, #8
 8004a44:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 8004a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004a4e:	6803      	ldr	r3, [r0, #0]
 8004a50:	699e      	ldr	r6, [r3, #24]
 8004a52:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	0c12      	lsrs	r2, r2, #16
 8004a5a:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a64:	68df      	ldr	r7, [r3, #12]
 8004a66:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a6a:	68c1      	ldr	r1, [r0, #12]
 8004a6c:	2902      	cmp	r1, #2
 8004a6e:	d122      	bne.n	8004ab6 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a70:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004a74:	f015 0f06 	tst.w	r5, #6
 8004a78:	d110      	bne.n	8004a9c <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004a7a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004a7c:	3101      	adds	r1, #1
 8004a7e:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a80:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004a82:	2902      	cmp	r1, #2
 8004a84:	d1e2      	bne.n	8004a4c <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004a86:	2100      	movs	r1, #0
 8004a88:	6481      	str	r1, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a8a:	2008      	movs	r0, #8
 8004a8c:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004a8e:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a92:	4631      	mov	r1, r6
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7ff ffca 	bl	8004a2e <HAL_I2C_AddrCallback>
 8004a9a:	e7d7      	b.n	8004a4c <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004aa0:	f7ff fe7f 	bl	80047a2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004aaa:	463a      	mov	r2, r7
 8004aac:	4631      	mov	r1, r6
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff ffbd 	bl	8004a2e <HAL_I2C_AddrCallback>
 8004ab4:	e7ca      	b.n	8004a4c <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ab6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004aba:	f7ff fe72 	bl	80047a2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ac4:	462a      	mov	r2, r5
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff ffb0 	bl	8004a2e <HAL_I2C_AddrCallback>
 8004ace:	e7bd      	b.n	8004a4c <I2C_ITAddrCplt+0x1c>

08004ad0 <HAL_I2C_ListenCpltCallback>:
}
 8004ad0:	4770      	bx	lr
	...

08004ad4 <I2C_ITListenCplt>:
{
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad8:	4b17      	ldr	r3, [pc, #92]	@ (8004b38 <I2C_ITListenCplt+0x64>)
 8004ada:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004aea:	6343      	str	r3, [r0, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004aec:	f011 0f04 	tst.w	r1, #4
 8004af0:	d013      	beq.n	8004b1a <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004af2:	6803      	ldr	r3, [r0, #0]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004af8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004afa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004afc:	3301      	adds	r3, #1
 8004afe:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8004b00:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8004b02:	b153      	cbz	r3, 8004b1a <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8004b04:	3b01      	subs	r3, #1
 8004b06:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 8004b08:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b12:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004b14:	f043 0304 	orr.w	r3, r3, #4
 8004b18:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b1a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fe3f 	bl	80047a2 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	2210      	movs	r2, #16
 8004b28:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff ffcd 	bl	8004ad0 <HAL_I2C_ListenCpltCallback>
}
 8004b36:	bd10      	pop	{r4, pc}
 8004b38:	ffff0000 	.word	0xffff0000

08004b3c <HAL_I2C_ErrorCallback>:
}
 8004b3c:	4770      	bx	lr

08004b3e <HAL_I2C_AbortCpltCallback>:
}
 8004b3e:	4770      	bx	lr

08004b40 <I2C_TreatErrorCallback>:
{
 8004b40:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b42:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004b46:	2b60      	cmp	r3, #96	@ 0x60
 8004b48:	d006      	beq.n	8004b58 <I2C_TreatErrorCallback+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b4e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b52:	f7ff fff3 	bl	8004b3c <HAL_I2C_ErrorCallback>
}
 8004b56:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	2320      	movs	r3, #32
 8004b5a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b62:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b66:	f7ff ffea 	bl	8004b3e <HAL_I2C_AbortCpltCallback>
 8004b6a:	e7f4      	b.n	8004b56 <I2C_TreatErrorCallback+0x16>

08004b6c <I2C_ITError>:
{
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b70:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b74:	2200      	movs	r2, #0
 8004b76:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b7a:	4845      	ldr	r0, [pc, #276]	@ (8004c90 <I2C_ITError+0x124>)
 8004b7c:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004b7e:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004b80:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004b82:	430a      	orrs	r2, r1
 8004b84:	6462      	str	r2, [r4, #68]	@ 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b86:	3b28      	subs	r3, #40	@ 0x28
 8004b88:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d819      	bhi.n	8004bc2 <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b8e:	2103      	movs	r1, #3
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7ff fe06 	bl	80047a2 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b96:	2328      	movs	r3, #40	@ 0x28
 8004b98:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c94 <I2C_ITError+0x128>)
 8004b9e:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004ba0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004ba2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004ba4:	b11a      	cbz	r2, 8004bae <I2C_ITError+0x42>
 8004ba6:	2b11      	cmp	r3, #17
 8004ba8:	d02f      	beq.n	8004c0a <I2C_ITError+0x9e>
 8004baa:	2b21      	cmp	r3, #33	@ 0x21
 8004bac:	d02d      	beq.n	8004c0a <I2C_ITError+0x9e>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004bae:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004bb0:	b11a      	cbz	r2, 8004bba <I2C_ITError+0x4e>
 8004bb2:	2b12      	cmp	r3, #18
 8004bb4:	d04a      	beq.n	8004c4c <I2C_ITError+0xe0>
 8004bb6:	2b22      	cmp	r3, #34	@ 0x22
 8004bb8:	d048      	beq.n	8004c4c <I2C_ITError+0xe0>
    I2C_TreatErrorCallback(hi2c);
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7ff ffc0 	bl	8004b40 <I2C_TreatErrorCallback>
}
 8004bc0:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bc2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7ff fdeb 	bl	80047a2 <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7ff fdd7 	bl	8004780 <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004bd2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004bd6:	2b60      	cmp	r3, #96	@ 0x60
 8004bd8:	d014      	beq.n	8004c04 <I2C_ITError+0x98>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004bda:	2320      	movs	r3, #32
 8004bdc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	f012 0f20 	tst.w	r2, #32
 8004be8:	d00c      	beq.n	8004c04 <I2C_ITError+0x98>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	f012 0f10 	tst.w	r2, #16
 8004bf0:	d005      	beq.n	8004bfe <I2C_ITError+0x92>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bf6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004bf8:	f043 0304 	orr.w	r3, r3, #4
 8004bfc:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	2220      	movs	r2, #32
 8004c02:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c08:	e7ca      	b.n	8004ba0 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8004c12:	d003      	beq.n	8004c1c <I2C_ITError+0xb0>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c1a:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c1c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004c1e:	f7ff fc12 	bl	8004446 <HAL_DMA_GetState>
 8004c22:	2801      	cmp	r0, #1
 8004c24:	d00e      	beq.n	8004c44 <I2C_ITError+0xd8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004c28:	4a1b      	ldr	r2, [pc, #108]	@ (8004c98 <I2C_ITError+0x12c>)
 8004c2a:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c32:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004c34:	f7ff fb7e 	bl	8004334 <HAL_DMA_Abort_IT>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d0c1      	beq.n	8004bc0 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c3c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004c3e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004c40:	4798      	blx	r3
 8004c42:	e7bd      	b.n	8004bc0 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff ff7b 	bl	8004b40 <I2C_TreatErrorCallback>
 8004c4a:	e7b9      	b.n	8004bc0 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004c54:	d003      	beq.n	8004c5e <I2C_ITError+0xf2>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c5c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c5e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c60:	f7ff fbf1 	bl	8004446 <HAL_DMA_GetState>
 8004c64:	2801      	cmp	r0, #1
 8004c66:	d00e      	beq.n	8004c86 <I2C_ITError+0x11a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c98 <I2C_ITError+0x12c>)
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c74:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c76:	f7ff fb5d 	bl	8004334 <HAL_DMA_Abort_IT>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d0a0      	beq.n	8004bc0 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c7e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004c80:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004c82:	4798      	blx	r3
 8004c84:	e79c      	b.n	8004bc0 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff ff5a 	bl	8004b40 <I2C_TreatErrorCallback>
 8004c8c:	e798      	b.n	8004bc0 <I2C_ITError+0x54>
 8004c8e:	bf00      	nop
 8004c90:	ffff0000 	.word	0xffff0000
 8004c94:	08004e85 	.word	0x08004e85
 8004c98:	08005033 	.word	0x08005033

08004c9c <I2C_ITSlaveCplt>:
{
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ca2:	6802      	ldr	r2, [r0, #0]
 8004ca4:	6816      	ldr	r6, [r2, #0]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ca6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ca8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cac:	2120      	movs	r1, #32
 8004cae:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cb0:	3b21      	subs	r3, #33	@ 0x21
 8004cb2:	2b09      	cmp	r3, #9
 8004cb4:	d80c      	bhi.n	8004cd0 <I2C_ITSlaveCplt+0x34>
 8004cb6:	e8df f003 	tbb	[pc, r3]
 8004cba:	7705      	.short	0x7705
 8004cbc:	0b0b0b0b 	.word	0x0b0b0b0b
 8004cc0:	77057e0b 	.word	0x77057e0b
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004cc4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004cc8:	f7ff fd6b 	bl	80047a2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ccc:	2321      	movs	r3, #33	@ 0x21
 8004cce:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	6853      	ldr	r3, [r2, #4]
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd8:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	6853      	ldr	r3, [r2, #4]
 8004cde:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8004ce2:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8004ce6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f7ff fd45 	bl	8004780 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004cf6:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8004cfa:	d063      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x128>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cfc:	6822      	ldr	r2, [r4, #0]
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d04:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004d06:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004d08:	b11b      	cbz	r3, 8004d12 <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d12:	f015 0f04 	tst.w	r5, #4
 8004d16:	d011      	beq.n	8004d3c <I2C_ITSlaveCplt+0xa0>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d18:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004d22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004d26:	3301      	adds	r3, #1
 8004d28:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8004d2a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004d2c:	b133      	cbz	r3, 8004d3c <I2C_ITSlaveCplt+0xa0>
      hi2c->XferSize--;
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004d32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 8004d3c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b11b      	cbz	r3, 8004d4a <I2C_ITSlaveCplt+0xae>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d42:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d44:	f043 0304 	orr.w	r3, r3, #4
 8004d48:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d4a:	f015 0f10 	tst.w	r5, #16
 8004d4e:	d011      	beq.n	8004d74 <I2C_ITSlaveCplt+0xd8>
 8004d50:	f016 0f10 	tst.w	r6, #16
 8004d54:	d00e      	beq.n	8004d74 <I2C_ITSlaveCplt+0xd8>
    if (hi2c->XferCount == 0U)
 8004d56:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d157      	bne.n	8004e0e <I2C_ITSlaveCplt+0x172>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d5e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004d62:	2b28      	cmp	r3, #40	@ 0x28
 8004d64:	d03e      	beq.n	8004de4 <I2C_ITSlaveCplt+0x148>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d66:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004d6a:	2b29      	cmp	r3, #41	@ 0x29
 8004d6c:	d042      	beq.n	8004df4 <I2C_ITSlaveCplt+0x158>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	2210      	movs	r2, #16
 8004d72:	61da      	str	r2, [r3, #28]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004d7a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d155      	bne.n	8004e2e <I2C_ITSlaveCplt+0x192>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004d84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d88:	d15e      	bne.n	8004e48 <I2C_ITSlaveCplt+0x1ac>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d8a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004d8e:	2b22      	cmp	r3, #34	@ 0x22
 8004d90:	d06a      	beq.n	8004e68 <I2C_ITSlaveCplt+0x1cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	2320      	movs	r3, #32
 8004d94:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d9c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7ff fe03 	bl	80049ac <HAL_I2C_SlaveTxCpltCallback>
}
 8004da6:	e05e      	b.n	8004e66 <I2C_ITSlaveCplt+0x1ca>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004da8:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004dac:	f7ff fcf9 	bl	80047a2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004db0:	2322      	movs	r3, #34	@ 0x22
 8004db2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004db4:	e78c      	b.n	8004cd0 <I2C_ITSlaveCplt+0x34>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004db6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004dba:	f7ff fcf2 	bl	80047a2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dc2:	e785      	b.n	8004cd0 <I2C_ITSlaveCplt+0x34>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dc4:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
 8004dc8:	d0a3      	beq.n	8004d12 <I2C_ITSlaveCplt+0x76>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	6813      	ldr	r3, [r2, #0]
 8004dce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dd2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8004dd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d09b      	beq.n	8004d12 <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8004de2:	e796      	b.n	8004d12 <I2C_ITSlaveCplt+0x76>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004de4:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 8004de8:	d1bd      	bne.n	8004d66 <I2C_ITSlaveCplt+0xca>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dea:	4629      	mov	r1, r5
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7ff fe71 	bl	8004ad4 <I2C_ITListenCplt>
 8004df2:	e7bf      	b.n	8004d74 <I2C_ITSlaveCplt+0xd8>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004df4:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8004df8:	d0b9      	beq.n	8004d6e <I2C_ITSlaveCplt+0xd2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	2210      	movs	r2, #16
 8004dfe:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7ff fcbd 	bl	8004780 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7ff fdd2 	bl	80049b0 <I2C_ITSlaveSeqCplt>
 8004e0c:	e7b2      	b.n	8004d74 <I2C_ITSlaveCplt+0xd8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	2210      	movs	r2, #16
 8004e12:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e14:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e16:	f043 0304 	orr.w	r3, r3, #4
 8004e1a:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004e1c:	b117      	cbz	r7, 8004e24 <I2C_ITSlaveCplt+0x188>
 8004e1e:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8004e22:	d1a7      	bne.n	8004d74 <I2C_ITSlaveCplt+0xd8>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7ff fea0 	bl	8004b6c <I2C_ITError>
 8004e2c:	e7a2      	b.n	8004d74 <I2C_ITSlaveCplt+0xd8>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e2e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004e30:	4620      	mov	r0, r4
 8004e32:	f7ff fe9b 	bl	8004b6c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e36:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004e3a:	2b28      	cmp	r3, #40	@ 0x28
 8004e3c:	d113      	bne.n	8004e66 <I2C_ITSlaveCplt+0x1ca>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7ff fe47 	bl	8004ad4 <I2C_ITListenCplt>
 8004e46:	e00e      	b.n	8004e66 <I2C_ITSlaveCplt+0x1ca>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f7ff fdb1 	bl	80049b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <I2C_ITSlaveCplt+0x1e4>)
 8004e50:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	2320      	movs	r3, #32
 8004e54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e5c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7ff fe35 	bl	8004ad0 <HAL_I2C_ListenCpltCallback>
}
 8004e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004e68:	2320      	movs	r3, #32
 8004e6a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7ff fd99 	bl	80049ae <HAL_I2C_SlaveRxCpltCallback>
 8004e7c:	e7f3      	b.n	8004e66 <I2C_ITSlaveCplt+0x1ca>
 8004e7e:	bf00      	nop
 8004e80:	ffff0000 	.word	0xffff0000

08004e84 <I2C_Slave_ISR_IT>:
{
 8004e84:	b510      	push	{r4, lr}
 8004e86:	4604      	mov	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e88:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8004e8a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	f000 8098 	beq.w	8004fc4 <I2C_Slave_ISR_IT+0x140>
 8004e94:	2301      	movs	r3, #1
 8004e96:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e9a:	f011 0f20 	tst.w	r1, #32
 8004e9e:	d002      	beq.n	8004ea6 <I2C_Slave_ISR_IT+0x22>
 8004ea0:	f012 0f20 	tst.w	r2, #32
 8004ea4:	d114      	bne.n	8004ed0 <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ea6:	f011 0f10 	tst.w	r1, #16
 8004eaa:	d03c      	beq.n	8004f26 <I2C_Slave_ISR_IT+0xa2>
 8004eac:	f012 0f10 	tst.w	r2, #16
 8004eb0:	d039      	beq.n	8004f26 <I2C_Slave_ISR_IT+0xa2>
    if (hi2c->XferCount == 0U)
 8004eb2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	bb33      	cbnz	r3, 8004f06 <I2C_Slave_ISR_IT+0x82>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004eb8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004ebc:	2b28      	cmp	r3, #40	@ 0x28
 8004ebe:	d00e      	beq.n	8004ede <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ec0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8004ec4:	2b29      	cmp	r3, #41	@ 0x29
 8004ec6:	d011      	beq.n	8004eec <I2C_Slave_ISR_IT+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	2210      	movs	r2, #16
 8004ecc:	61da      	str	r2, [r3, #28]
 8004ece:	e002      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7ff fee3 	bl	8004c9c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8004edc:	bd10      	pop	{r4, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ede:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 8004ee2:	d1ed      	bne.n	8004ec0 <I2C_Slave_ISR_IT+0x3c>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff fdf5 	bl	8004ad4 <I2C_ITListenCplt>
 8004eea:	e7f4      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004eec:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8004ef0:	d0ea      	beq.n	8004ec8 <I2C_Slave_ISR_IT+0x44>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f7ff fc41 	bl	8004780 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7ff fd56 	bl	80049b0 <I2C_ITSlaveSeqCplt>
 8004f04:	e7e7      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	2210      	movs	r2, #16
 8004f0a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004f0e:	f043 0304 	orr.w	r3, r3, #4
 8004f12:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f14:	b110      	cbz	r0, 8004f1c <I2C_Slave_ISR_IT+0x98>
 8004f16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004f1a:	d1dc      	bne.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f7ff fe24 	bl	8004b6c <I2C_ITError>
 8004f24:	e7d7      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004f26:	f011 0f04 	tst.w	r1, #4
 8004f2a:	d01f      	beq.n	8004f6c <I2C_Slave_ISR_IT+0xe8>
 8004f2c:	f012 0f04 	tst.w	r2, #4
 8004f30:	d01c      	beq.n	8004f6c <I2C_Slave_ISR_IT+0xe8>
    if (hi2c->XferCount > 0U)
 8004f32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	b173      	cbz	r3, 8004f56 <I2C_Slave_ISR_IT+0xd2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004f3e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004f40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004f42:	3301      	adds	r3, #1
 8004f44:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004f46:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004f4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 8004f56:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1bb      	bne.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
 8004f5e:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8004f62:	d0b8      	beq.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8004f64:	4620      	mov	r0, r4
 8004f66:	f7ff fd23 	bl	80049b0 <I2C_ITSlaveSeqCplt>
 8004f6a:	e7b4      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f6c:	f011 0f08 	tst.w	r1, #8
 8004f70:	d002      	beq.n	8004f78 <I2C_Slave_ISR_IT+0xf4>
 8004f72:	f012 0f08 	tst.w	r2, #8
 8004f76:	d118      	bne.n	8004faa <I2C_Slave_ISR_IT+0x126>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f78:	f011 0f02 	tst.w	r1, #2
 8004f7c:	d0ab      	beq.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
 8004f7e:	f012 0f02 	tst.w	r2, #2
 8004f82:	d0a8      	beq.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8004f84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	b19b      	cbz	r3, 8004fb2 <I2C_Slave_ISR_IT+0x12e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f8a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004f92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004f94:	3301      	adds	r3, #1
 8004f96:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004f98:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fa2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	8523      	strh	r3, [r4, #40]	@ 0x28
 8004fa8:	e795      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7ff fd40 	bl	8004a30 <I2C_ITAddrCplt>
 8004fb0:	e791      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004fb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004fb6:	d001      	beq.n	8004fbc <I2C_Slave_ISR_IT+0x138>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d18c      	bne.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7ff fcf7 	bl	80049b0 <I2C_ITSlaveSeqCplt>
 8004fc2:	e788      	b.n	8004ed6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8004fc4:	2002      	movs	r0, #2
 8004fc6:	e789      	b.n	8004edc <I2C_Slave_ISR_IT+0x58>

08004fc8 <HAL_I2C_ER_IRQHandler>:
{
 8004fc8:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004fca:	6802      	ldr	r2, [r0, #0]
 8004fcc:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004fce:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004fd0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004fd4:	d009      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x22>
 8004fd6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004fda:	d006      	beq.n	8004fea <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004fdc:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004fde:	f044 0401 	orr.w	r4, r4, #1
 8004fe2:	6444      	str	r4, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fe4:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8004fe8:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fea:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004fee:	d00a      	beq.n	8005006 <HAL_I2C_ER_IRQHandler+0x3e>
 8004ff0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004ff4:	d007      	beq.n	8005006 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004ff6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004ff8:	f042 0208 	orr.w	r2, r2, #8
 8004ffc:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ffe:	6802      	ldr	r2, [r0, #0]
 8005000:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005004:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005006:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800500a:	d00a      	beq.n	8005022 <HAL_I2C_ER_IRQHandler+0x5a>
 800500c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005010:	d007      	beq.n	8005022 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005012:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800501a:	6803      	ldr	r3, [r0, #0]
 800501c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005020:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8005022:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005024:	f011 0f0b 	tst.w	r1, #11
 8005028:	d100      	bne.n	800502c <HAL_I2C_ER_IRQHandler+0x64>
}
 800502a:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800502c:	f7ff fd9e 	bl	8004b6c <I2C_ITError>
}
 8005030:	e7fb      	b.n	800502a <HAL_I2C_ER_IRQHandler+0x62>

08005032 <I2C_DMAAbort>:
{
 8005032:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005034:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (hi2c->hdmatx != NULL)
 8005036:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005038:	b10b      	cbz	r3, 800503e <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800503a:	2200      	movs	r2, #0
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (hi2c->hdmarx != NULL)
 800503e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005040:	b10b      	cbz	r3, 8005046 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005042:	2200      	movs	r2, #0
 8005044:	639a      	str	r2, [r3, #56]	@ 0x38
  I2C_TreatErrorCallback(hi2c);
 8005046:	f7ff fd7b 	bl	8004b40 <I2C_TreatErrorCallback>
}
 800504a:	bd08      	pop	{r3, pc}

0800504c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005052:	6803      	ldr	r3, [r0, #0]
 8005054:	4a23      	ldr	r2, [pc, #140]	@ (80050e4 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00f      	beq.n	800507a <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 800505a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800505e:	4293      	cmp	r3, r2
 8005060:	d00b      	beq.n	800507a <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 8005062:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 800506a:	f502 5220 	add.w	r2, r2, #10240	@ 0x2800
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 8005072:	2163      	movs	r1, #99	@ 0x63
 8005074:	481c      	ldr	r0, [pc, #112]	@ (80050e8 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8005076:	f7fd f9f7 	bl	8002468 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800507a:	b115      	cbz	r5, 8005082 <HAL_I2CEx_ConfigAnalogFilter+0x36>
 800507c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005080:	d127      	bne.n	80050d2 <HAL_I2CEx_ConfigAnalogFilter+0x86>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005082:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005086:	2b20      	cmp	r3, #32
 8005088:	d128      	bne.n	80050dc <HAL_I2CEx_ConfigAnalogFilter+0x90>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800508e:	2b01      	cmp	r3, #1
 8005090:	d026      	beq.n	80050e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>
 8005092:	2301      	movs	r3, #1
 8005094:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005098:	2324      	movs	r3, #36	@ 0x24
 800509a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	6813      	ldr	r3, [r2, #0]
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	6813      	ldr	r3, [r2, #0]
 80050ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	6813      	ldr	r3, [r2, #0]
 80050b6:	432b      	orrs	r3, r5
 80050b8:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	6813      	ldr	r3, [r2, #0]
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	2320      	movs	r3, #32
 80050c6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ca:	2000      	movs	r0, #0
 80050cc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80050d2:	2164      	movs	r1, #100	@ 0x64
 80050d4:	4804      	ldr	r0, [pc, #16]	@ (80050e8 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 80050d6:	f7fd f9c7 	bl	8002468 <assert_failed>
 80050da:	e7d2      	b.n	8005082 <HAL_I2CEx_ConfigAnalogFilter+0x36>
    return HAL_BUSY;
 80050dc:	2002      	movs	r0, #2
 80050de:	e7f7      	b.n	80050d0 <HAL_I2CEx_ConfigAnalogFilter+0x84>
    __HAL_LOCK(hi2c);
 80050e0:	2002      	movs	r0, #2
 80050e2:	e7f5      	b.n	80050d0 <HAL_I2CEx_ConfigAnalogFilter+0x84>
 80050e4:	40005400 	.word	0x40005400
 80050e8:	0801d5d8 	.word	0x0801d5d8

080050ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4604      	mov	r4, r0
 80050f0:	460d      	mov	r5, r1
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80050f2:	6803      	ldr	r3, [r0, #0]
 80050f4:	4a21      	ldr	r2, [pc, #132]	@ (800517c <HAL_I2CEx_ConfigDigitalFilter+0x90>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00f      	beq.n	800511a <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80050fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00b      	beq.n	800511a <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 8005102:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 800510a:	f502 5220 	add.w	r2, r2, #10240	@ 0x2800
 800510e:	4293      	cmp	r3, r2
 8005110:	d003      	beq.n	800511a <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 8005112:	2191      	movs	r1, #145	@ 0x91
 8005114:	481a      	ldr	r0, [pc, #104]	@ (8005180 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005116:	f7fd f9a7 	bl	8002468 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800511a:	2d0f      	cmp	r5, #15
 800511c:	d825      	bhi.n	800516a <HAL_I2CEx_ConfigDigitalFilter+0x7e>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005122:	2b20      	cmp	r3, #32
 8005124:	d126      	bne.n	8005174 <HAL_I2CEx_ConfigDigitalFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005126:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800512a:	2b01      	cmp	r3, #1
 800512c:	d024      	beq.n	8005178 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800512e:	2301      	movs	r3, #1
 8005130:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005134:	2324      	movs	r3, #36	@ 0x24
 8005136:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	6813      	ldr	r3, [r2, #0]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005148:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800514c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005150:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800515c:	2320      	movs	r3, #32
 800515e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005162:	2000      	movs	r0, #0
 8005164:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005168:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800516a:	2192      	movs	r1, #146	@ 0x92
 800516c:	4804      	ldr	r0, [pc, #16]	@ (8005180 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800516e:	f7fd f97b 	bl	8002468 <assert_failed>
 8005172:	e7d4      	b.n	800511e <HAL_I2CEx_ConfigDigitalFilter+0x32>
    return HAL_BUSY;
 8005174:	2002      	movs	r0, #2
 8005176:	e7f7      	b.n	8005168 <HAL_I2CEx_ConfigDigitalFilter+0x7c>
    __HAL_LOCK(hi2c);
 8005178:	2002      	movs	r0, #2
 800517a:	e7f5      	b.n	8005168 <HAL_I2CEx_ConfigDigitalFilter+0x7c>
 800517c:	40005400 	.word	0x40005400
 8005180:	0801d5d8 	.word	0x0801d5d8

08005184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005184:	b500      	push	{lr}
 8005186:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005188:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <HAL_MspInit+0x3c>)
 800518a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800518c:	f042 0201 	orr.w	r2, r2, #1
 8005190:	661a      	str	r2, [r3, #96]	@ 0x60
 8005192:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005194:	f002 0201 	and.w	r2, r2, #1
 8005198:	9200      	str	r2, [sp, #0]
 800519a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800519c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800519e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80051a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80051a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80051ae:	2200      	movs	r2, #0
 80051b0:	210f      	movs	r1, #15
 80051b2:	f06f 0001 	mvn.w	r0, #1
 80051b6:	f7fe fef3 	bl	8003fa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051ba:	b003      	add	sp, #12
 80051bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80051c0:	40021000 	.word	0x40021000

080051c4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051c4:	4b02      	ldr	r3, [pc, #8]	@ (80051d0 <HAL_PWREx_GetVoltageRange+0xc>)
 80051c6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80051c8:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40007000 	.word	0x40007000

080051d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051d4:	b508      	push	{r3, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 80051d6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80051da:	d012      	beq.n	8005202 <HAL_PWREx_ControlVoltageScaling+0x2e>
 80051dc:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80051e0:	d12a      	bne.n	8005238 <HAL_PWREx_ControlVoltageScaling+0x64>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80051e2:	4b21      	ldr	r3, [pc, #132]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ee:	d039      	beq.n	8005264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x94>)
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051fe:	2000      	movs	r0, #0
}
 8005200:	bd08      	pop	{r3, pc}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005202:	4b19      	ldr	r3, [pc, #100]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x94>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800520a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520e:	d011      	beq.n	8005234 <HAL_PWREx_ControlVoltageScaling+0x60>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005210:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x94>)
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800521c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800521e:	4b13      	ldr	r3, [pc, #76]	@ (800526c <HAL_PWREx_ControlVoltageScaling+0x98>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2232      	movs	r2, #50	@ 0x32
 8005224:	fb02 f303 	mul.w	r3, r2, r3
 8005228:	4a11      	ldr	r2, [pc, #68]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0c9b      	lsrs	r3, r3, #18
 8005230:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005232:	e007      	b.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x70>
  return HAL_OK;
 8005234:	2000      	movs	r0, #0
 8005236:	e7e3      	b.n	8005200 <HAL_PWREx_ControlVoltageScaling+0x2c>
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8005238:	21a7      	movs	r1, #167	@ 0xa7
 800523a:	480e      	ldr	r0, [pc, #56]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800523c:	f7fd f914 	bl	8002468 <assert_failed>
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005240:	e7cf      	b.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0xe>
        wait_loop_index--;
 8005242:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005244:	4a08      	ldr	r2, [pc, #32]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x94>)
 8005246:	6952      	ldr	r2, [r2, #20]
 8005248:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800524c:	d001      	beq.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x7e>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f7      	bne.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x6e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005252:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0x94>)
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800525a:	d101      	bne.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x8c>
  return HAL_OK;
 800525c:	2000      	movs	r0, #0
 800525e:	e7cf      	b.n	8005200 <HAL_PWREx_ControlVoltageScaling+0x2c>
        return HAL_TIMEOUT;
 8005260:	2003      	movs	r0, #3
 8005262:	e7cd      	b.n	8005200 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8005264:	2000      	movs	r0, #0
 8005266:	e7cb      	b.n	8005200 <HAL_PWREx_ControlVoltageScaling+0x2c>
 8005268:	40007000 	.word	0x40007000
 800526c:	20000014 	.word	0x20000014
 8005270:	431bde83 	.word	0x431bde83
 8005274:	0801d610 	.word	0x0801d610

08005278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005278:	b530      	push	{r4, r5, lr}
 800527a:	b083      	sub	sp, #12
 800527c:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800527e:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005286:	d00b      	beq.n	80052a0 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005288:	f7ff ff9c 	bl	80051c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005290:	d017      	beq.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005292:	2c80      	cmp	r4, #128	@ 0x80
 8005294:	d81f      	bhi.n	80052d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005296:	d02d      	beq.n	80052f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005298:	2c70      	cmp	r4, #112	@ 0x70
 800529a:	d02d      	beq.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800529c:	2100      	movs	r1, #0
 800529e:	e01b      	b.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80052a0:	4d17      	ldr	r5, [pc, #92]	@ (8005300 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80052a2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80052aa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80052b4:	f7ff ff86 	bl	80051c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80052b8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80052ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052be:	65ab      	str	r3, [r5, #88]	@ 0x58
 80052c0:	e7e4      	b.n	800528c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80052c2:	2c80      	cmp	r4, #128	@ 0x80
 80052c4:	d903      	bls.n	80052ce <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80052c6:	2ca0      	cmp	r4, #160	@ 0xa0
 80052c8:	d903      	bls.n	80052d2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80052ca:	2102      	movs	r1, #2
 80052cc:	e004      	b.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052ce:	2100      	movs	r1, #0
 80052d0:	e002      	b.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80052d2:	2101      	movs	r1, #1
 80052d4:	e000      	b.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80052d6:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005304 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80052da:	6813      	ldr	r3, [r2, #0]
 80052dc:	f023 0307 	bic.w	r3, r3, #7
 80052e0:	430b      	orrs	r3, r1
 80052e2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052e4:	6813      	ldr	r3, [r2, #0]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	428b      	cmp	r3, r1
 80052ec:	d106      	bne.n	80052fc <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80052ee:	2000      	movs	r0, #0
}
 80052f0:	b003      	add	sp, #12
 80052f2:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80052f4:	2102      	movs	r1, #2
 80052f6:	e7ef      	b.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80052f8:	2101      	movs	r1, #1
 80052fa:	e7ed      	b.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80052fc:	2001      	movs	r0, #1
 80052fe:	e7f7      	b.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8005300:	40021000 	.word	0x40021000
 8005304:	40022000 	.word	0x40022000

08005308 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005308:	4a25      	ldr	r2, [pc, #148]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800530a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005312:	f013 030c 	ands.w	r3, r3, #12
 8005316:	d009      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x24>
 8005318:	2b0c      	cmp	r3, #12
 800531a:	d005      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800531c:	2b04      	cmp	r3, #4
 800531e:	d03b      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005320:	2b08      	cmp	r3, #8
 8005322:	d03b      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005324:	2000      	movs	r0, #0
 8005326:	e00f      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005328:	2a01      	cmp	r2, #1
 800532a:	d1f7      	bne.n	800531c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800532c:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	f012 0f08 	tst.w	r2, #8
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005336:	4a1a      	ldr	r2, [pc, #104]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005338:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800533c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8005340:	4918      	ldr	r1, [pc, #96]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005342:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005346:	b113      	cbz	r3, 800534e <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d006      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x52>
 800534c:	2000      	movs	r0, #0
}
 800534e:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005350:	4a13      	ldr	r2, [pc, #76]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005358:	e7f2      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800535a:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005362:	2b02      	cmp	r3, #2
 8005364:	d016      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x8c>
 8005366:	2b03      	cmp	r3, #3
 8005368:	d100      	bne.n	800536c <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800536a:	480f      	ldr	r0, [pc, #60]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800536c:	490c      	ldr	r1, [pc, #48]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800536e:	68ca      	ldr	r2, [r1, #12]
 8005370:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005374:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005376:	68cb      	ldr	r3, [r1, #12]
 8005378:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800537c:	fb00 f303 	mul.w	r3, r0, r3
 8005380:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005384:	68c8      	ldr	r0, [r1, #12]
 8005386:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800538a:	3001      	adds	r0, #1
 800538c:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800538e:	fbb3 f0f0 	udiv	r0, r3, r0
 8005392:	4770      	bx	lr
    switch (pllsource)
 8005394:	4805      	ldr	r0, [pc, #20]	@ (80053ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8005396:	e7e9      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 8005398:	4804      	ldr	r0, [pc, #16]	@ (80053ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800539a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800539c:	4802      	ldr	r0, [pc, #8]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800539e:	4770      	bx	lr
 80053a0:	40021000 	.word	0x40021000
 80053a4:	0801e258 	.word	0x0801e258
 80053a8:	007a1200 	.word	0x007a1200
 80053ac:	00f42400 	.word	0x00f42400

080053b0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f000 83f1 	beq.w	8005b98 <HAL_RCC_OscConfig+0x7e8>
{
 80053b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b8:	b083      	sub	sp, #12
 80053ba:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80053bc:	6803      	ldr	r3, [r0, #0]
 80053be:	2b3f      	cmp	r3, #63	@ 0x3f
 80053c0:	d81e      	bhi.n	8005400 <HAL_RCC_OscConfig+0x50>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c2:	4b96      	ldr	r3, [pc, #600]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80053c4:	689d      	ldr	r5, [r3, #8]
 80053c6:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ca:	68de      	ldr	r6, [r3, #12]
 80053cc:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	f013 0f10 	tst.w	r3, #16
 80053d6:	f000 8096 	beq.w	8005506 <HAL_RCC_OscConfig+0x156>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80053da:	69a3      	ldr	r3, [r4, #24]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d815      	bhi.n	800540c <HAL_RCC_OscConfig+0x5c>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80053e0:	69e3      	ldr	r3, [r4, #28]
 80053e2:	2bff      	cmp	r3, #255	@ 0xff
 80053e4:	d818      	bhi.n	8005418 <HAL_RCC_OscConfig+0x68>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80053e6:	6a23      	ldr	r3, [r4, #32]
 80053e8:	b32b      	cbz	r3, 8005436 <HAL_RCC_OscConfig+0x86>
 80053ea:	2b60      	cmp	r3, #96	@ 0x60
 80053ec:	d023      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
 80053ee:	d83e      	bhi.n	800546e <HAL_RCC_OscConfig+0xbe>
 80053f0:	2b30      	cmp	r3, #48	@ 0x30
 80053f2:	d020      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
 80053f4:	d916      	bls.n	8005424 <HAL_RCC_OscConfig+0x74>
 80053f6:	2b40      	cmp	r3, #64	@ 0x40
 80053f8:	d01d      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
 80053fa:	2b50      	cmp	r3, #80	@ 0x50
 80053fc:	d116      	bne.n	800542c <HAL_RCC_OscConfig+0x7c>
 80053fe:	e01a      	b.n	8005436 <HAL_RCC_OscConfig+0x86>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005400:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8005404:	4886      	ldr	r0, [pc, #536]	@ (8005620 <HAL_RCC_OscConfig+0x270>)
 8005406:	f7fd f82f 	bl	8002468 <assert_failed>
 800540a:	e7da      	b.n	80053c2 <HAL_RCC_OscConfig+0x12>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800540c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8005410:	4883      	ldr	r0, [pc, #524]	@ (8005620 <HAL_RCC_OscConfig+0x270>)
 8005412:	f7fd f829 	bl	8002468 <assert_failed>
 8005416:	e7e3      	b.n	80053e0 <HAL_RCC_OscConfig+0x30>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005418:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800541c:	4880      	ldr	r0, [pc, #512]	@ (8005620 <HAL_RCC_OscConfig+0x270>)
 800541e:	f7fd f823 	bl	8002468 <assert_failed>
 8005422:	e7e0      	b.n	80053e6 <HAL_RCC_OscConfig+0x36>
 8005424:	2b10      	cmp	r3, #16
 8005426:	d006      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d004      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800542c:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8005430:	487b      	ldr	r0, [pc, #492]	@ (8005620 <HAL_RCC_OscConfig+0x270>)
 8005432:	f7fd f819 	bl	8002468 <assert_failed>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005436:	b34d      	cbz	r5, 800548c <HAL_RCC_OscConfig+0xdc>
 8005438:	2d0c      	cmp	r5, #12
 800543a:	d025      	beq.n	8005488 <HAL_RCC_OscConfig+0xd8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800543c:	69a3      	ldr	r3, [r4, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80d2 	beq.w	80055e8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8005444:	4a75      	ldr	r2, [pc, #468]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800544e:	f7fd ff13 	bl	8003278 <HAL_GetTick>
 8005452:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005454:	4b71      	ldr	r3, [pc, #452]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f013 0f02 	tst.w	r3, #2
 800545c:	f040 80b1 	bne.w	80055c2 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005460:	f7fd ff0a 	bl	8003278 <HAL_GetTick>
 8005464:	1bc0      	subs	r0, r0, r7
 8005466:	2802      	cmp	r0, #2
 8005468:	d9f4      	bls.n	8005454 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 800546a:	2003      	movs	r0, #3
 800546c:	e39f      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
 800546e:	2b90      	cmp	r3, #144	@ 0x90
 8005470:	d0e1      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
 8005472:	d904      	bls.n	800547e <HAL_RCC_OscConfig+0xce>
 8005474:	2ba0      	cmp	r3, #160	@ 0xa0
 8005476:	d0de      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
 8005478:	2bb0      	cmp	r3, #176	@ 0xb0
 800547a:	d1d7      	bne.n	800542c <HAL_RCC_OscConfig+0x7c>
 800547c:	e7db      	b.n	8005436 <HAL_RCC_OscConfig+0x86>
 800547e:	2b70      	cmp	r3, #112	@ 0x70
 8005480:	d0d9      	beq.n	8005436 <HAL_RCC_OscConfig+0x86>
 8005482:	2b80      	cmp	r3, #128	@ 0x80
 8005484:	d1d2      	bne.n	800542c <HAL_RCC_OscConfig+0x7c>
 8005486:	e7d6      	b.n	8005436 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005488:	2e01      	cmp	r6, #1
 800548a:	d1d7      	bne.n	800543c <HAL_RCC_OscConfig+0x8c>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800548c:	4b63      	ldr	r3, [pc, #396]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f013 0f02 	tst.w	r3, #2
 8005494:	d003      	beq.n	800549e <HAL_RCC_OscConfig+0xee>
 8005496:	69a3      	ldr	r3, [r4, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 837f 	beq.w	8005b9c <HAL_RCC_OscConfig+0x7ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800549e:	6a20      	ldr	r0, [r4, #32]
 80054a0:	4b5e      	ldr	r3, [pc, #376]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f013 0f08 	tst.w	r3, #8
 80054a8:	d065      	beq.n	8005576 <HAL_RCC_OscConfig+0x1c6>
 80054aa:	4b5c      	ldr	r3, [pc, #368]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054b2:	4298      	cmp	r0, r3
 80054b4:	d866      	bhi.n	8005584 <HAL_RCC_OscConfig+0x1d4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054b6:	4b59      	ldr	r3, [pc, #356]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	f042 0208 	orr.w	r2, r2, #8
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80054c6:	6a21      	ldr	r1, [r4, #32]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80054d2:	69e1      	ldr	r1, [r4, #28]
 80054d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054d8:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054da:	2d00      	cmp	r5, #0
 80054dc:	d06a      	beq.n	80055b4 <HAL_RCC_OscConfig+0x204>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054de:	f7ff ff13 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80054e2:	4b4e      	ldr	r3, [pc, #312]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80054ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005624 <HAL_RCC_OscConfig+0x274>)
 80054ec:	5cd3      	ldrb	r3, [r2, r3]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	40d8      	lsrs	r0, r3
 80054f4:	4b4c      	ldr	r3, [pc, #304]	@ (8005628 <HAL_RCC_OscConfig+0x278>)
 80054f6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80054f8:	4b4c      	ldr	r3, [pc, #304]	@ (800562c <HAL_RCC_OscConfig+0x27c>)
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	f003 f8be 	bl	800867c <HAL_InitTick>
        if(status != HAL_OK)
 8005500:	2800      	cmp	r0, #0
 8005502:	f040 8354 	bne.w	8005bae <HAL_RCC_OscConfig+0x7fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	f013 0f01 	tst.w	r3, #1
 800550c:	f000 809c 	beq.w	8005648 <HAL_RCC_OscConfig+0x298>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	b12b      	cbz	r3, 8005520 <HAL_RCC_OscConfig+0x170>
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	d002      	beq.n	8005520 <HAL_RCC_OscConfig+0x170>
 800551a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800551e:	d177      	bne.n	8005610 <HAL_RCC_OscConfig+0x260>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005520:	2d08      	cmp	r5, #8
 8005522:	f000 8088 	beq.w	8005636 <HAL_RCC_OscConfig+0x286>
 8005526:	2d0c      	cmp	r5, #12
 8005528:	f000 8082 	beq.w	8005630 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005532:	f000 80b0 	beq.w	8005696 <HAL_RCC_OscConfig+0x2e6>
 8005536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800553a:	f000 80b2 	beq.w	80056a2 <HAL_RCC_OscConfig+0x2f2>
 800553e:	4b37      	ldr	r3, [pc, #220]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800554e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80b2 	beq.w	80056bc <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8005558:	f7fd fe8e 	bl	8003278 <HAL_GetTick>
 800555c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800555e:	4b2f      	ldr	r3, [pc, #188]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005566:	d16f      	bne.n	8005648 <HAL_RCC_OscConfig+0x298>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005568:	f7fd fe86 	bl	8003278 <HAL_GetTick>
 800556c:	1bc0      	subs	r0, r0, r7
 800556e:	2864      	cmp	r0, #100	@ 0x64
 8005570:	d9f5      	bls.n	800555e <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8005572:	2003      	movs	r0, #3
 8005574:	e31b      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005576:	4b29      	ldr	r3, [pc, #164]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 8005578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005582:	e796      	b.n	80054b2 <HAL_RCC_OscConfig+0x102>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005584:	f7ff fe78 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 8005588:	2800      	cmp	r0, #0
 800558a:	f040 8309 	bne.w	8005ba0 <HAL_RCC_OscConfig+0x7f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558e:	4b23      	ldr	r3, [pc, #140]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	f042 0208 	orr.w	r2, r2, #8
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800559e:	6a21      	ldr	r1, [r4, #32]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80055aa:	69e1      	ldr	r1, [r4, #28]
 80055ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	e794      	b.n	80054de <HAL_RCC_OscConfig+0x12e>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055b4:	6a20      	ldr	r0, [r4, #32]
 80055b6:	f7ff fe5f 	bl	8005278 <RCC_SetFlashLatencyFromMSIRange>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d08f      	beq.n	80054de <HAL_RCC_OscConfig+0x12e>
              return HAL_ERROR;
 80055be:	2001      	movs	r0, #1
 80055c0:	e2f5      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c2:	4b16      	ldr	r3, [pc, #88]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f042 0208 	orr.w	r2, r2, #8
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80055d2:	6a21      	ldr	r1, [r4, #32]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80055de:	69e1      	ldr	r1, [r4, #28]
 80055e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	e78e      	b.n	8005506 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_MSI_DISABLE();
 80055e8:	4a0c      	ldr	r2, [pc, #48]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80055f2:	f7fd fe41 	bl	8003278 <HAL_GetTick>
 80055f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055f8:	4b08      	ldr	r3, [pc, #32]	@ (800561c <HAL_RCC_OscConfig+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f013 0f02 	tst.w	r3, #2
 8005600:	d081      	beq.n	8005506 <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005602:	f7fd fe39 	bl	8003278 <HAL_GetTick>
 8005606:	1bc0      	subs	r0, r0, r7
 8005608:	2802      	cmp	r0, #2
 800560a:	d9f5      	bls.n	80055f8 <HAL_RCC_OscConfig+0x248>
            return HAL_TIMEOUT;
 800560c:	2003      	movs	r0, #3
 800560e:	e2ce      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005610:	f240 2119 	movw	r1, #537	@ 0x219
 8005614:	4802      	ldr	r0, [pc, #8]	@ (8005620 <HAL_RCC_OscConfig+0x270>)
 8005616:	f7fc ff27 	bl	8002468 <assert_failed>
 800561a:	e781      	b.n	8005520 <HAL_RCC_OscConfig+0x170>
 800561c:	40021000 	.word	0x40021000
 8005620:	0801d648 	.word	0x0801d648
 8005624:	0801e290 	.word	0x0801e290
 8005628:	20000014 	.word	0x20000014
 800562c:	2000000c 	.word	0x2000000c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005630:	2e03      	cmp	r6, #3
 8005632:	f47f af7b 	bne.w	800552c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005636:	4bab      	ldr	r3, [pc, #684]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800563e:	d003      	beq.n	8005648 <HAL_RCC_OscConfig+0x298>
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 82ae 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x7f4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	f013 0f02 	tst.w	r3, #2
 800564e:	d063      	beq.n	8005718 <HAL_RCC_OscConfig+0x368>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005650:	68e3      	ldr	r3, [r4, #12]
 8005652:	b113      	cbz	r3, 800565a <HAL_RCC_OscConfig+0x2aa>
 8005654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005658:	d13f      	bne.n	80056da <HAL_RCC_OscConfig+0x32a>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	2b7f      	cmp	r3, #127	@ 0x7f
 800565e:	d842      	bhi.n	80056e6 <HAL_RCC_OscConfig+0x336>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005660:	2d04      	cmp	r5, #4
 8005662:	d048      	beq.n	80056f6 <HAL_RCC_OscConfig+0x346>
 8005664:	2d0c      	cmp	r5, #12
 8005666:	d044      	beq.n	80056f2 <HAL_RCC_OscConfig+0x342>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005668:	68e3      	ldr	r3, [r4, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d07e      	beq.n	800576c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_ENABLE();
 800566e:	4a9d      	ldr	r2, [pc, #628]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 8005670:	6813      	ldr	r3, [r2, #0]
 8005672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005676:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005678:	f7fd fdfe 	bl	8003278 <HAL_GetTick>
 800567c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567e:	4b99      	ldr	r3, [pc, #612]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005686:	d168      	bne.n	800575a <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005688:	f7fd fdf6 	bl	8003278 <HAL_GetTick>
 800568c:	1b80      	subs	r0, r0, r6
 800568e:	2802      	cmp	r0, #2
 8005690:	d9f5      	bls.n	800567e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8005692:	2003      	movs	r0, #3
 8005694:	e28b      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005696:	4a93      	ldr	r2, [pc, #588]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 8005698:	6813      	ldr	r3, [r2, #0]
 800569a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e756      	b.n	8005550 <HAL_RCC_OscConfig+0x1a0>
 80056a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056a6:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e749      	b.n	8005550 <HAL_RCC_OscConfig+0x1a0>
        tickstart = HAL_GetTick();
 80056bc:	f7fd fddc 	bl	8003278 <HAL_GetTick>
 80056c0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056c2:	4b88      	ldr	r3, [pc, #544]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80056ca:	d0bd      	beq.n	8005648 <HAL_RCC_OscConfig+0x298>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056cc:	f7fd fdd4 	bl	8003278 <HAL_GetTick>
 80056d0:	1bc0      	subs	r0, r0, r7
 80056d2:	2864      	cmp	r0, #100	@ 0x64
 80056d4:	d9f5      	bls.n	80056c2 <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 80056d6:	2003      	movs	r0, #3
 80056d8:	e269      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80056da:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80056de:	4882      	ldr	r0, [pc, #520]	@ (80058e8 <HAL_RCC_OscConfig+0x538>)
 80056e0:	f7fc fec2 	bl	8002468 <assert_failed>
 80056e4:	e7b9      	b.n	800565a <HAL_RCC_OscConfig+0x2aa>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80056e6:	f240 214d 	movw	r1, #589	@ 0x24d
 80056ea:	487f      	ldr	r0, [pc, #508]	@ (80058e8 <HAL_RCC_OscConfig+0x538>)
 80056ec:	f7fc febc 	bl	8002468 <assert_failed>
 80056f0:	e7b6      	b.n	8005660 <HAL_RCC_OscConfig+0x2b0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056f2:	2e02      	cmp	r6, #2
 80056f4:	d1b8      	bne.n	8005668 <HAL_RCC_OscConfig+0x2b8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f6:	4b7b      	ldr	r3, [pc, #492]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80056fe:	d003      	beq.n	8005708 <HAL_RCC_OscConfig+0x358>
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8250 	beq.w	8005ba8 <HAL_RCC_OscConfig+0x7f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005708:	4a76      	ldr	r2, [pc, #472]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 800570a:	6853      	ldr	r3, [r2, #4]
 800570c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005710:	6921      	ldr	r1, [r4, #16]
 8005712:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005716:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	f013 0f08 	tst.w	r3, #8
 800571e:	d056      	beq.n	80057ce <HAL_RCC_OscConfig+0x41e>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005720:	6963      	ldr	r3, [r4, #20]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d836      	bhi.n	8005794 <HAL_RCC_OscConfig+0x3e4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005726:	6963      	ldr	r3, [r4, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d039      	beq.n	80057a0 <HAL_RCC_OscConfig+0x3f0>
      __HAL_RCC_LSI_ENABLE();
 800572c:	4a6d      	ldr	r2, [pc, #436]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 800572e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800573a:	f7fd fd9d 	bl	8003278 <HAL_GetTick>
 800573e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005740:	4b68      	ldr	r3, [pc, #416]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 8005742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005746:	f013 0f02 	tst.w	r3, #2
 800574a:	d140      	bne.n	80057ce <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574c:	f7fd fd94 	bl	8003278 <HAL_GetTick>
 8005750:	1b80      	subs	r0, r0, r6
 8005752:	2802      	cmp	r0, #2
 8005754:	d9f4      	bls.n	8005740 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8005756:	2003      	movs	r0, #3
 8005758:	e229      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575a:	4a62      	ldr	r2, [pc, #392]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 800575c:	6853      	ldr	r3, [r2, #4]
 800575e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005762:	6921      	ldr	r1, [r4, #16]
 8005764:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005768:	6053      	str	r3, [r2, #4]
 800576a:	e7d5      	b.n	8005718 <HAL_RCC_OscConfig+0x368>
        __HAL_RCC_HSI_DISABLE();
 800576c:	4a5d      	ldr	r2, [pc, #372]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005774:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005776:	f7fd fd7f 	bl	8003278 <HAL_GetTick>
 800577a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800577c:	4b59      	ldr	r3, [pc, #356]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005784:	d0c8      	beq.n	8005718 <HAL_RCC_OscConfig+0x368>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005786:	f7fd fd77 	bl	8003278 <HAL_GetTick>
 800578a:	1b80      	subs	r0, r0, r6
 800578c:	2802      	cmp	r0, #2
 800578e:	d9f5      	bls.n	800577c <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8005790:	2003      	movs	r0, #3
 8005792:	e20c      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005794:	f240 218d 	movw	r1, #653	@ 0x28d
 8005798:	4853      	ldr	r0, [pc, #332]	@ (80058e8 <HAL_RCC_OscConfig+0x538>)
 800579a:	f7fc fe65 	bl	8002468 <assert_failed>
 800579e:	e7c2      	b.n	8005726 <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_LSI_DISABLE();
 80057a0:	4a50      	ldr	r2, [pc, #320]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80057a2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80057ae:	f7fd fd63 	bl	8003278 <HAL_GetTick>
 80057b2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b4:	4b4b      	ldr	r3, [pc, #300]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80057b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057ba:	f013 0f02 	tst.w	r3, #2
 80057be:	d006      	beq.n	80057ce <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c0:	f7fd fd5a 	bl	8003278 <HAL_GetTick>
 80057c4:	1b80      	subs	r0, r0, r6
 80057c6:	2802      	cmp	r0, #2
 80057c8:	d9f4      	bls.n	80057b4 <HAL_RCC_OscConfig+0x404>
          return HAL_TIMEOUT;
 80057ca:	2003      	movs	r0, #3
 80057cc:	e1ef      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	f013 0f04 	tst.w	r3, #4
 80057d4:	f000 808d 	beq.w	80058f2 <HAL_RCC_OscConfig+0x542>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x432>
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d13b      	bne.n	800585a <HAL_RCC_OscConfig+0x4aa>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057e2:	4b40      	ldr	r3, [pc, #256]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80057ea:	d13c      	bne.n	8005866 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ec:	4b3d      	ldr	r3, [pc, #244]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80057ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80057f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005800:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005802:	4b3a      	ldr	r3, [pc, #232]	@ (80058ec <HAL_RCC_OscConfig+0x53c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800580a:	d02e      	beq.n	800586a <HAL_RCC_OscConfig+0x4ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580c:	68a3      	ldr	r3, [r4, #8]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d03f      	beq.n	8005892 <HAL_RCC_OscConfig+0x4e2>
 8005812:	2b05      	cmp	r3, #5
 8005814:	d045      	beq.n	80058a2 <HAL_RCC_OscConfig+0x4f2>
 8005816:	4b33      	ldr	r3, [pc, #204]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 8005818:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005824:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005828:	f022 0204 	bic.w	r2, r2, #4
 800582c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d043      	beq.n	80058be <HAL_RCC_OscConfig+0x50e>
      tickstart = HAL_GetTick();
 8005836:	f7fd fd1f 	bl	8003278 <HAL_GetTick>
 800583a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800583c:	4b29      	ldr	r3, [pc, #164]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005842:	f013 0f02 	tst.w	r3, #2
 8005846:	d153      	bne.n	80058f0 <HAL_RCC_OscConfig+0x540>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005848:	f7fd fd16 	bl	8003278 <HAL_GetTick>
 800584c:	1bc0      	subs	r0, r0, r7
 800584e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005852:	4298      	cmp	r0, r3
 8005854:	d9f2      	bls.n	800583c <HAL_RCC_OscConfig+0x48c>
          return HAL_TIMEOUT;
 8005856:	2003      	movs	r0, #3
 8005858:	e1a9      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800585a:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800585e:	4822      	ldr	r0, [pc, #136]	@ (80058e8 <HAL_RCC_OscConfig+0x538>)
 8005860:	f7fc fe02 	bl	8002468 <assert_failed>
 8005864:	e7bd      	b.n	80057e2 <HAL_RCC_OscConfig+0x432>
    FlagStatus       pwrclkchanged = RESET;
 8005866:	2600      	movs	r6, #0
 8005868:	e7cb      	b.n	8005802 <HAL_RCC_OscConfig+0x452>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586a:	4a20      	ldr	r2, [pc, #128]	@ (80058ec <HAL_RCC_OscConfig+0x53c>)
 800586c:	6813      	ldr	r3, [r2, #0]
 800586e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005872:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005874:	f7fd fd00 	bl	8003278 <HAL_GetTick>
 8005878:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587a:	4b1c      	ldr	r3, [pc, #112]	@ (80058ec <HAL_RCC_OscConfig+0x53c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005882:	d1c3      	bne.n	800580c <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005884:	f7fd fcf8 	bl	8003278 <HAL_GetTick>
 8005888:	1bc0      	subs	r0, r0, r7
 800588a:	2802      	cmp	r0, #2
 800588c:	d9f5      	bls.n	800587a <HAL_RCC_OscConfig+0x4ca>
          return HAL_TIMEOUT;
 800588e:	2003      	movs	r0, #3
 8005890:	e18d      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005892:	4a14      	ldr	r2, [pc, #80]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 8005894:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058a0:	e7c6      	b.n	8005830 <HAL_RCC_OscConfig+0x480>
 80058a2:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80058a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80058a8:	f042 0204 	orr.w	r2, r2, #4
 80058ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80058b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80058bc:	e7b8      	b.n	8005830 <HAL_RCC_OscConfig+0x480>
      tickstart = HAL_GetTick();
 80058be:	f7fd fcdb 	bl	8003278 <HAL_GetTick>
 80058c2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058c4:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <HAL_RCC_OscConfig+0x534>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f013 0f02 	tst.w	r3, #2
 80058ce:	d00f      	beq.n	80058f0 <HAL_RCC_OscConfig+0x540>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7fd fcd2 	bl	8003278 <HAL_GetTick>
 80058d4:	1bc0      	subs	r0, r0, r7
 80058d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80058da:	4298      	cmp	r0, r3
 80058dc:	d9f2      	bls.n	80058c4 <HAL_RCC_OscConfig+0x514>
          return HAL_TIMEOUT;
 80058de:	2003      	movs	r0, #3
 80058e0:	e165      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000
 80058e8:	0801d648 	.word	0x0801d648
 80058ec:	40007000 	.word	0x40007000
    if(pwrclkchanged == SET)
 80058f0:	b9fe      	cbnz	r6, 8005932 <HAL_RCC_OscConfig+0x582>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f013 0f20 	tst.w	r3, #32
 80058f8:	d03e      	beq.n	8005978 <HAL_RCC_OscConfig+0x5c8>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80058fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d81e      	bhi.n	800593e <HAL_RCC_OscConfig+0x58e>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005900:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005902:	b313      	cbz	r3, 800594a <HAL_RCC_OscConfig+0x59a>
      __HAL_RCC_HSI48_ENABLE();
 8005904:	4aac      	ldr	r2, [pc, #688]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005906:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005912:	f7fd fcb1 	bl	8003278 <HAL_GetTick>
 8005916:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005918:	4ba7      	ldr	r3, [pc, #668]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 800591a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591e:	f013 0f02 	tst.w	r3, #2
 8005922:	d129      	bne.n	8005978 <HAL_RCC_OscConfig+0x5c8>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005924:	f7fd fca8 	bl	8003278 <HAL_GetTick>
 8005928:	1b80      	subs	r0, r0, r6
 800592a:	2802      	cmp	r0, #2
 800592c:	d9f4      	bls.n	8005918 <HAL_RCC_OscConfig+0x568>
          return HAL_TIMEOUT;
 800592e:	2003      	movs	r0, #3
 8005930:	e13d      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005932:	4aa1      	ldr	r2, [pc, #644]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005934:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800593a:	6593      	str	r3, [r2, #88]	@ 0x58
 800593c:	e7d9      	b.n	80058f2 <HAL_RCC_OscConfig+0x542>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800593e:	f240 3145 	movw	r1, #837	@ 0x345
 8005942:	489e      	ldr	r0, [pc, #632]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 8005944:	f7fc fd90 	bl	8002468 <assert_failed>
 8005948:	e7da      	b.n	8005900 <HAL_RCC_OscConfig+0x550>
      __HAL_RCC_HSI48_DISABLE();
 800594a:	4a9b      	ldr	r2, [pc, #620]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 800594c:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005958:	f7fd fc8e 	bl	8003278 <HAL_GetTick>
 800595c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800595e:	4b96      	ldr	r3, [pc, #600]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005960:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005964:	f013 0f02 	tst.w	r3, #2
 8005968:	d006      	beq.n	8005978 <HAL_RCC_OscConfig+0x5c8>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800596a:	f7fd fc85 	bl	8003278 <HAL_GetTick>
 800596e:	1b80      	subs	r0, r0, r6
 8005970:	2802      	cmp	r0, #2
 8005972:	d9f4      	bls.n	800595e <HAL_RCC_OscConfig+0x5ae>
          return HAL_TIMEOUT;
 8005974:	2003      	movs	r0, #3
 8005976:	e11a      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005978:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800597a:	2b02      	cmp	r3, #2
 800597c:	d81d      	bhi.n	80059ba <HAL_RCC_OscConfig+0x60a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800597e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8113 	beq.w	8005bac <HAL_RCC_OscConfig+0x7fc>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005986:	2b02      	cmp	r3, #2
 8005988:	d01d      	beq.n	80059c6 <HAL_RCC_OscConfig+0x616>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800598a:	2d0c      	cmp	r5, #12
 800598c:	f000 811c 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x818>
        __HAL_RCC_PLL_DISABLE();
 8005990:	4a89      	ldr	r2, [pc, #548]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005998:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800599a:	f7fd fc6d 	bl	8003278 <HAL_GetTick>
 800599e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059a0:	4b85      	ldr	r3, [pc, #532]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80059a8:	f000 80ef 	beq.w	8005b8a <HAL_RCC_OscConfig+0x7da>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fd fc64 	bl	8003278 <HAL_GetTick>
 80059b0:	1b00      	subs	r0, r0, r4
 80059b2:	2802      	cmp	r0, #2
 80059b4:	d9f4      	bls.n	80059a0 <HAL_RCC_OscConfig+0x5f0>
            return HAL_TIMEOUT;
 80059b6:	2003      	movs	r0, #3
 80059b8:	e0f9      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80059ba:	f240 316e 	movw	r1, #878	@ 0x36e
 80059be:	487f      	ldr	r0, [pc, #508]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 80059c0:	f7fc fd52 	bl	8002468 <assert_failed>
 80059c4:	e7db      	b.n	800597e <HAL_RCC_OscConfig+0x5ce>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80059c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d82e      	bhi.n	8005a2a <HAL_RCC_OscConfig+0x67a>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80059cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80059ce:	3b01      	subs	r3, #1
 80059d0:	2b07      	cmp	r3, #7
 80059d2:	d830      	bhi.n	8005a36 <HAL_RCC_OscConfig+0x686>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80059d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059d6:	3b08      	subs	r3, #8
 80059d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80059da:	d832      	bhi.n	8005a42 <HAL_RCC_OscConfig+0x692>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80059dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80059de:	3b02      	subs	r3, #2
 80059e0:	2b1d      	cmp	r3, #29
 80059e2:	d834      	bhi.n	8005a4e <HAL_RCC_OscConfig+0x69e>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80059e4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80059e6:	2a08      	cmp	r2, #8
 80059e8:	d837      	bhi.n	8005a5a <HAL_RCC_OscConfig+0x6aa>
 80059ea:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 80059ee:	40d3      	lsrs	r3, r2
 80059f0:	f013 0f01 	tst.w	r3, #1
 80059f4:	d031      	beq.n	8005a5a <HAL_RCC_OscConfig+0x6aa>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80059f6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80059f8:	2a08      	cmp	r2, #8
 80059fa:	d834      	bhi.n	8005a66 <HAL_RCC_OscConfig+0x6b6>
 80059fc:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8005a00:	40d3      	lsrs	r3, r2
 8005a02:	f013 0f01 	tst.w	r3, #1
 8005a06:	d02e      	beq.n	8005a66 <HAL_RCC_OscConfig+0x6b6>
      pll_config = RCC->PLLCFGR;
 8005a08:	4b6b      	ldr	r3, [pc, #428]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0c:	f003 0103 	and.w	r1, r3, #3
 8005a10:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a12:	4291      	cmp	r1, r2
 8005a14:	d02d      	beq.n	8005a72 <HAL_RCC_OscConfig+0x6c2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a16:	2d0c      	cmp	r5, #12
 8005a18:	f000 80cb 	beq.w	8005bb2 <HAL_RCC_OscConfig+0x802>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a1c:	4b66      	ldr	r3, [pc, #408]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8005a24:	d04f      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x716>
            return HAL_ERROR;
 8005a26:	2001      	movs	r0, #1
 8005a28:	e0c1      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005a2a:	f240 3176 	movw	r1, #886	@ 0x376
 8005a2e:	4863      	ldr	r0, [pc, #396]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 8005a30:	f7fc fd1a 	bl	8002468 <assert_failed>
 8005a34:	e7ca      	b.n	80059cc <HAL_RCC_OscConfig+0x61c>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005a36:	f240 3177 	movw	r1, #887	@ 0x377
 8005a3a:	4860      	ldr	r0, [pc, #384]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 8005a3c:	f7fc fd14 	bl	8002468 <assert_failed>
 8005a40:	e7c8      	b.n	80059d4 <HAL_RCC_OscConfig+0x624>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005a42:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8005a46:	485d      	ldr	r0, [pc, #372]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 8005a48:	f7fc fd0e 	bl	8002468 <assert_failed>
 8005a4c:	e7c6      	b.n	80059dc <HAL_RCC_OscConfig+0x62c>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005a4e:	f240 317a 	movw	r1, #890	@ 0x37a
 8005a52:	485a      	ldr	r0, [pc, #360]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 8005a54:	f7fc fd08 	bl	8002468 <assert_failed>
 8005a58:	e7c4      	b.n	80059e4 <HAL_RCC_OscConfig+0x634>
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005a5a:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8005a5e:	4857      	ldr	r0, [pc, #348]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 8005a60:	f7fc fd02 	bl	8002468 <assert_failed>
 8005a64:	e7c7      	b.n	80059f6 <HAL_RCC_OscConfig+0x646>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005a66:	f240 317d 	movw	r1, #893	@ 0x37d
 8005a6a:	4854      	ldr	r0, [pc, #336]	@ (8005bbc <HAL_RCC_OscConfig+0x80c>)
 8005a6c:	f7fc fcfc 	bl	8002468 <assert_failed>
 8005a70:	e7ca      	b.n	8005a08 <HAL_RCC_OscConfig+0x658>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005a76:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a78:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005a7e:	d1ca      	bne.n	8005a16 <HAL_RCC_OscConfig+0x666>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a86:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005a8a:	d1c4      	bne.n	8005a16 <HAL_RCC_OscConfig+0x666>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a92:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005a96:	d1be      	bne.n	8005a16 <HAL_RCC_OscConfig+0x666>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a98:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005a9c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005a9e:	0852      	lsrs	r2, r2, #1
 8005aa0:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aa2:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005aa6:	d1b6      	bne.n	8005a16 <HAL_RCC_OscConfig+0x666>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aa8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005aac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005aae:	0852      	lsrs	r2, r2, #1
 8005ab0:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005ab6:	d1ae      	bne.n	8005a16 <HAL_RCC_OscConfig+0x666>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005ac0:	d049      	beq.n	8005b56 <HAL_RCC_OscConfig+0x7a6>
  return HAL_OK;
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	e073      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
            __HAL_RCC_PLL_DISABLE();
 8005ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005ac8:	6813      	ldr	r3, [r2, #0]
 8005aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ace:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8005ad0:	f7fd fbd2 	bl	8003278 <HAL_GetTick>
 8005ad4:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad6:	4b38      	ldr	r3, [pc, #224]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005ade:	d006      	beq.n	8005aee <HAL_RCC_OscConfig+0x73e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fd fbca 	bl	8003278 <HAL_GetTick>
 8005ae4:	1b40      	subs	r0, r0, r5
 8005ae6:	2802      	cmp	r0, #2
 8005ae8:	d9f5      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x726>
                return HAL_TIMEOUT;
 8005aea:	2003      	movs	r0, #3
 8005aec:	e05f      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aee:	4a32      	ldr	r2, [pc, #200]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005af0:	68d3      	ldr	r3, [r2, #12]
 8005af2:	4933      	ldr	r1, [pc, #204]	@ (8005bc0 <HAL_RCC_OscConfig+0x810>)
 8005af4:	4019      	ands	r1, r3
 8005af6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005af8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005afa:	3801      	subs	r0, #1
 8005afc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005b00:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005b02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005b06:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005b08:	0840      	lsrs	r0, r0, #1
 8005b0a:	3801      	subs	r0, #1
 8005b0c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8005b10:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005b12:	0840      	lsrs	r0, r0, #1
 8005b14:	3801      	subs	r0, #1
 8005b16:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8005b1a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005b1c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8005b20:	4319      	orrs	r1, r3
 8005b22:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8005b24:	6813      	ldr	r3, [r2, #0]
 8005b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b2a:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b2c:	68d3      	ldr	r3, [r2, #12]
 8005b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b32:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8005b34:	f7fd fba0 	bl	8003278 <HAL_GetTick>
 8005b38:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005b42:	d106      	bne.n	8005b52 <HAL_RCC_OscConfig+0x7a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fd fb98 	bl	8003278 <HAL_GetTick>
 8005b48:	1b00      	subs	r0, r0, r4
 8005b4a:	2802      	cmp	r0, #2
 8005b4c:	d9f5      	bls.n	8005b3a <HAL_RCC_OscConfig+0x78a>
                return HAL_TIMEOUT;
 8005b4e:	2003      	movs	r0, #3
 8005b50:	e02d      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
  return HAL_OK;
 8005b52:	2000      	movs	r0, #0
 8005b54:	e02b      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
          __HAL_RCC_PLL_ENABLE();
 8005b56:	4b18      	ldr	r3, [pc, #96]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005b5e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005b66:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8005b68:	f7fd fb86 	bl	8003278 <HAL_GetTick>
 8005b6c:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b6e:	4b12      	ldr	r3, [pc, #72]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005b76:	d106      	bne.n	8005b86 <HAL_RCC_OscConfig+0x7d6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b78:	f7fd fb7e 	bl	8003278 <HAL_GetTick>
 8005b7c:	1b03      	subs	r3, r0, r4
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d9f5      	bls.n	8005b6e <HAL_RCC_OscConfig+0x7be>
              return HAL_TIMEOUT;
 8005b82:	2003      	movs	r0, #3
 8005b84:	e013      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
  return HAL_OK;
 8005b86:	2000      	movs	r0, #0
 8005b88:	e011      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b8a:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb8 <HAL_RCC_OscConfig+0x808>)
 8005b8c:	68d1      	ldr	r1, [r2, #12]
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <HAL_RCC_OscConfig+0x814>)
 8005b90:	400b      	ands	r3, r1
 8005b92:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005b94:	2000      	movs	r0, #0
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
    return HAL_ERROR;
 8005b98:	2001      	movs	r0, #1
}
 8005b9a:	4770      	bx	lr
        return HAL_ERROR;
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	e006      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
            return HAL_ERROR;
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	e004      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
        return HAL_ERROR;
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	e002      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
        return HAL_ERROR;
 8005ba8:	2001      	movs	r0, #1
 8005baa:	e000      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
  return HAL_OK;
 8005bac:	2000      	movs	r0, #0
}
 8005bae:	b003      	add	sp, #12
 8005bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	e7fb      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	0801d648 	.word	0x0801d648
 8005bc0:	019d808c 	.word	0x019d808c
 8005bc4:	feeefffc 	.word	0xfeeefffc
        return HAL_ERROR;
 8005bc8:	2001      	movs	r0, #1
 8005bca:	e7f0      	b.n	8005bae <HAL_RCC_OscConfig+0x7fe>

08005bcc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f000 810f 	beq.w	8005df0 <HAL_RCC_ClockConfig+0x224>
{
 8005bd2:	b570      	push	{r4, r5, r6, lr}
 8005bd4:	460d      	mov	r5, r1
 8005bd6:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005bd8:	6803      	ldr	r3, [r0, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	2b0e      	cmp	r3, #14
 8005bde:	d824      	bhi.n	8005c2a <HAL_RCC_ClockConfig+0x5e>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005be0:	2d04      	cmp	r5, #4
 8005be2:	d828      	bhi.n	8005c36 <HAL_RCC_ClockConfig+0x6a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be4:	4b86      	ldr	r3, [pc, #536]	@ (8005e00 <HAL_RCC_ClockConfig+0x234>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	d20b      	bcs.n	8005c08 <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf0:	4a83      	ldr	r2, [pc, #524]	@ (8005e00 <HAL_RCC_ClockConfig+0x234>)
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	f023 0307 	bic.w	r3, r3, #7
 8005bf8:	432b      	orrs	r3, r5
 8005bfa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfc:	6813      	ldr	r3, [r2, #0]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	f040 80f6 	bne.w	8005df4 <HAL_RCC_ClockConfig+0x228>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f013 0f02 	tst.w	r3, #2
 8005c0e:	d033      	beq.n	8005c78 <HAL_RCC_ClockConfig+0xac>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c10:	68a3      	ldr	r3, [r4, #8]
 8005c12:	b323      	cbz	r3, 8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c14:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c16:	d022      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c18:	d816      	bhi.n	8005c48 <HAL_RCC_ClockConfig+0x7c>
 8005c1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c1c:	d01f      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c1e:	d810      	bhi.n	8005c42 <HAL_RCC_ClockConfig+0x76>
 8005c20:	2b80      	cmp	r3, #128	@ 0x80
 8005c22:	d01c      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c24:	2b90      	cmp	r3, #144	@ 0x90
 8005c26:	d01a      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c28:	e014      	b.n	8005c54 <HAL_RCC_ClockConfig+0x88>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005c2a:	f240 4159 	movw	r1, #1113	@ 0x459
 8005c2e:	4875      	ldr	r0, [pc, #468]	@ (8005e04 <HAL_RCC_ClockConfig+0x238>)
 8005c30:	f7fc fc1a 	bl	8002468 <assert_failed>
 8005c34:	e7d4      	b.n	8005be0 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005c36:	f240 415a 	movw	r1, #1114	@ 0x45a
 8005c3a:	4872      	ldr	r0, [pc, #456]	@ (8005e04 <HAL_RCC_ClockConfig+0x238>)
 8005c3c:	f7fc fc14 	bl	8002468 <assert_failed>
 8005c40:	e7d0      	b.n	8005be4 <HAL_RCC_ClockConfig+0x18>
 8005c42:	2bb0      	cmp	r3, #176	@ 0xb0
 8005c44:	d00b      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c46:	e005      	b.n	8005c54 <HAL_RCC_ClockConfig+0x88>
 8005c48:	2be0      	cmp	r3, #224	@ 0xe0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c4c:	2bf0      	cmp	r3, #240	@ 0xf0
 8005c4e:	d006      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
 8005c50:	2bd0      	cmp	r3, #208	@ 0xd0
 8005c52:	d004      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x92>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c54:	f240 4172 	movw	r1, #1138	@ 0x472
 8005c58:	486a      	ldr	r0, [pc, #424]	@ (8005e04 <HAL_RCC_ClockConfig+0x238>)
 8005c5a:	f7fc fc05 	bl	8002468 <assert_failed>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c5e:	68a2      	ldr	r2, [r4, #8]
 8005c60:	4b69      	ldr	r3, [pc, #420]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d905      	bls.n	8005c78 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c6c:	4966      	ldr	r1, [pc, #408]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005c6e:	688b      	ldr	r3, [r1, #8]
 8005c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c74:	431a      	orrs	r2, r3
 8005c76:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	f013 0f01 	tst.w	r3, #1
 8005c7e:	d044      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x13e>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d80d      	bhi.n	8005ca2 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0xe2>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d02e      	beq.n	8005cee <HAL_RCC_ClockConfig+0x122>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d133      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x130>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c94:	4a5c      	ldr	r2, [pc, #368]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	f012 0f02 	tst.w	r2, #2
 8005c9c:	d10d      	bne.n	8005cba <HAL_RCC_ClockConfig+0xee>
          return HAL_ERROR;
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	e099      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005ca2:	f240 417d 	movw	r1, #1149	@ 0x47d
 8005ca6:	4857      	ldr	r0, [pc, #348]	@ (8005e04 <HAL_RCC_ClockConfig+0x238>)
 8005ca8:	f7fc fbde 	bl	8002468 <assert_failed>
 8005cac:	e7eb      	b.n	8005c86 <HAL_RCC_ClockConfig+0xba>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cae:	4a56      	ldr	r2, [pc, #344]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005cb6:	f000 809f 	beq.w	8005df8 <HAL_RCC_ClockConfig+0x22c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cba:	4953      	ldr	r1, [pc, #332]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005cbc:	688a      	ldr	r2, [r1, #8]
 8005cbe:	f022 0203 	bic.w	r2, r2, #3
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005cc6:	f7fd fad7 	bl	8003278 <HAL_GetTick>
 8005cca:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 030c 	and.w	r3, r3, #12
 8005cd4:	6862      	ldr	r2, [r4, #4]
 8005cd6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005cda:	d016      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x13e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cdc:	f7fd facc 	bl	8003278 <HAL_GetTick>
 8005ce0:	1b80      	subs	r0, r0, r6
 8005ce2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	d9f0      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x100>
        return HAL_TIMEOUT;
 8005cea:	2003      	movs	r0, #3
 8005cec:	e073      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cee:	4a46      	ldr	r2, [pc, #280]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005cf6:	d1e0      	bne.n	8005cba <HAL_RCC_ClockConfig+0xee>
          return HAL_ERROR;
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	e06c      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cfc:	4a42      	ldr	r2, [pc, #264]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8005d04:	d1d9      	bne.n	8005cba <HAL_RCC_ClockConfig+0xee>
          return HAL_ERROR;
 8005d06:	2001      	movs	r0, #1
 8005d08:	e065      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f013 0f02 	tst.w	r3, #2
 8005d10:	d00c      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x160>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d12:	68a2      	ldr	r2, [r4, #8]
 8005d14:	4b3c      	ldr	r3, [pc, #240]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d205      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x160>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d20:	4939      	ldr	r1, [pc, #228]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005d22:	688b      	ldr	r3, [r1, #8]
 8005d24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d2c:	4b34      	ldr	r3, [pc, #208]	@ (8005e00 <HAL_RCC_ClockConfig+0x234>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	42ab      	cmp	r3, r5
 8005d36:	d90a      	bls.n	8005d4e <HAL_RCC_ClockConfig+0x182>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d38:	4a31      	ldr	r2, [pc, #196]	@ (8005e00 <HAL_RCC_ClockConfig+0x234>)
 8005d3a:	6813      	ldr	r3, [r2, #0]
 8005d3c:	f023 0307 	bic.w	r3, r3, #7
 8005d40:	432b      	orrs	r3, r5
 8005d42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d44:	6813      	ldr	r3, [r2, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	42ab      	cmp	r3, r5
 8005d4c:	d156      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x230>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	f013 0f04 	tst.w	r3, #4
 8005d54:	d014      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x1b4>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005d56:	68e3      	ldr	r3, [r4, #12]
 8005d58:	b15b      	cbz	r3, 8005d72 <HAL_RCC_ClockConfig+0x1a6>
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5e:	d008      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
 8005d60:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005d64:	d005      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
 8005d66:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d6a:	d002      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
 8005d6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d70:	d132      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x20c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d72:	4a25      	ldr	r2, [pc, #148]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005d74:	6893      	ldr	r3, [r2, #8]
 8005d76:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005d7a:	68e1      	ldr	r1, [r4, #12]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	f013 0f08 	tst.w	r3, #8
 8005d86:	d015      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x1e8>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	b15b      	cbz	r3, 8005da4 <HAL_RCC_ClockConfig+0x1d8>
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d90:	d008      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x1d8>
 8005d92:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x1d8>
 8005d98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d9c:	d002      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x1d8>
 8005d9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005da2:	d11f      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x218>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da4:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005da6:	6893      	ldr	r3, [r2, #8]
 8005da8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005dac:	6921      	ldr	r1, [r4, #16]
 8005dae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005db2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005db4:	f7ff faa8 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8005db8:	4b13      	ldr	r3, [pc, #76]	@ (8005e08 <HAL_RCC_ClockConfig+0x23c>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005dc0:	4a12      	ldr	r2, [pc, #72]	@ (8005e0c <HAL_RCC_ClockConfig+0x240>)
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	40d8      	lsrs	r0, r3
 8005dca:	4b11      	ldr	r3, [pc, #68]	@ (8005e10 <HAL_RCC_ClockConfig+0x244>)
 8005dcc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005dce:	4b11      	ldr	r3, [pc, #68]	@ (8005e14 <HAL_RCC_ClockConfig+0x248>)
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	f002 fc53 	bl	800867c <HAL_InitTick>
}
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005dd8:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8005ddc:	4809      	ldr	r0, [pc, #36]	@ (8005e04 <HAL_RCC_ClockConfig+0x238>)
 8005dde:	f7fc fb43 	bl	8002468 <assert_failed>
 8005de2:	e7c6      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a6>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005de4:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8005de8:	4806      	ldr	r0, [pc, #24]	@ (8005e04 <HAL_RCC_ClockConfig+0x238>)
 8005dea:	f7fc fb3d 	bl	8002468 <assert_failed>
 8005dee:	e7d9      	b.n	8005da4 <HAL_RCC_ClockConfig+0x1d8>
    return HAL_ERROR;
 8005df0:	2001      	movs	r0, #1
}
 8005df2:	4770      	bx	lr
      return HAL_ERROR;
 8005df4:	2001      	movs	r0, #1
 8005df6:	e7ee      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
        return HAL_ERROR;
 8005df8:	2001      	movs	r0, #1
 8005dfa:	e7ec      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
      return HAL_ERROR;
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	e7ea      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
 8005e00:	40022000 	.word	0x40022000
 8005e04:	0801d648 	.word	0x0801d648
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	0801e290 	.word	0x0801e290
 8005e10:	20000014 	.word	0x20000014
 8005e14:	2000000c 	.word	0x2000000c

08005e18 <HAL_RCC_GetHCLKFreq>:
}
 8005e18:	4b01      	ldr	r3, [pc, #4]	@ (8005e20 <HAL_RCC_GetHCLKFreq+0x8>)
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000014 	.word	0x20000014

08005e24 <HAL_RCC_GetPCLK1Freq>:
{
 8005e24:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e26:	f7ff fff7 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e2a:	4b05      	ldr	r3, [pc, #20]	@ (8005e40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005e32:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e34:	5cd3      	ldrb	r3, [r2, r3]
 8005e36:	f003 031f 	and.w	r3, r3, #31
}
 8005e3a:	40d8      	lsrs	r0, r3
 8005e3c:	bd08      	pop	{r3, pc}
 8005e3e:	bf00      	nop
 8005e40:	40021000 	.word	0x40021000
 8005e44:	0801e288 	.word	0x0801e288

08005e48 <HAL_RCC_GetPCLK2Freq>:
{
 8005e48:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e4a:	f7ff ffe5 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e4e:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005e56:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e58:	5cd3      	ldrb	r3, [r2, r3]
 8005e5a:	f003 031f 	and.w	r3, r3, #31
}
 8005e5e:	40d8      	lsrs	r0, r3
 8005e60:	bd08      	pop	{r3, pc}
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000
 8005e68:	0801e288 	.word	0x0801e288

08005e6c <HAL_RCC_GetClockConfig>:
{
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	460d      	mov	r5, r1
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8005e70:	4604      	mov	r4, r0
 8005e72:	b1d0      	cbz	r0, 8005eaa <HAL_RCC_GetClockConfig+0x3e>
  assert_param(pFLatency != (void *)NULL);
 8005e74:	b1fd      	cbz	r5, 8005eb6 <HAL_RCC_GetClockConfig+0x4a>
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e76:	230f      	movs	r3, #15
 8005e78:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005e7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ec4 <HAL_RCC_GetClockConfig+0x58>)
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	f002 0203 	and.w	r2, r2, #3
 8005e82:	6062      	str	r2, [r4, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005e8a:	60a2      	str	r2, [r4, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005e92:	60e2      	str	r2, [r4, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e9c:	6123      	str	r3, [r4, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	602b      	str	r3, [r5, #0]
}
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8005eaa:	f240 6194 	movw	r1, #1684	@ 0x694
 8005eae:	4807      	ldr	r0, [pc, #28]	@ (8005ecc <HAL_RCC_GetClockConfig+0x60>)
 8005eb0:	f7fc fada 	bl	8002468 <assert_failed>
 8005eb4:	e7de      	b.n	8005e74 <HAL_RCC_GetClockConfig+0x8>
  assert_param(pFLatency != (void *)NULL);
 8005eb6:	f240 6195 	movw	r1, #1685	@ 0x695
 8005eba:	4804      	ldr	r0, [pc, #16]	@ (8005ecc <HAL_RCC_GetClockConfig+0x60>)
 8005ebc:	f7fc fad4 	bl	8002468 <assert_failed>
 8005ec0:	e7d9      	b.n	8005e76 <HAL_RCC_GetClockConfig+0xa>
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40022000 	.word	0x40022000
 8005ecc:	0801d648 	.word	0x0801d648

08005ed0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	460d      	mov	r5, r1
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8005ed6:	6803      	ldr	r3, [r0, #0]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d824      	bhi.n	8005f26 <RCCEx_PLLSAI1_Config+0x56>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	2b07      	cmp	r3, #7
 8005ee2:	d826      	bhi.n	8005f32 <RCCEx_PLLSAI1_Config+0x62>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8005ee4:	68a3      	ldr	r3, [r4, #8]
 8005ee6:	3b08      	subs	r3, #8
 8005ee8:	2b4e      	cmp	r3, #78	@ 0x4e
 8005eea:	d828      	bhi.n	8005f3e <RCCEx_PLLSAI1_Config+0x6e>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8005eec:	69a3      	ldr	r3, [r4, #24]
 8005eee:	4a7c      	ldr	r2, [pc, #496]	@ (80060e0 <RCCEx_PLLSAI1_Config+0x210>)
 8005ef0:	4213      	tst	r3, r2
 8005ef2:	d004      	beq.n	8005efe <RCCEx_PLLSAI1_Config+0x2e>
 8005ef4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005efc:	b123      	cbz	r3, 8005f08 <RCCEx_PLLSAI1_Config+0x38>
 8005efe:	f640 3165 	movw	r1, #2917	@ 0xb65
 8005f02:	4878      	ldr	r0, [pc, #480]	@ (80060e4 <RCCEx_PLLSAI1_Config+0x214>)
 8005f04:	f7fc fab0 	bl	8002468 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f08:	4b77      	ldr	r3, [pc, #476]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f013 0f03 	tst.w	r3, #3
 8005f10:	d02a      	beq.n	8005f68 <RCCEx_PLLSAI1_Config+0x98>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f12:	4b75      	ldr	r3, [pc, #468]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d014      	beq.n	8005f4a <RCCEx_PLLSAI1_Config+0x7a>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f20:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8005f22:	4630      	mov	r0, r6
 8005f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8005f26:	f640 3162 	movw	r1, #2914	@ 0xb62
 8005f2a:	486e      	ldr	r0, [pc, #440]	@ (80060e4 <RCCEx_PLLSAI1_Config+0x214>)
 8005f2c:	f7fc fa9c 	bl	8002468 <assert_failed>
 8005f30:	e7d4      	b.n	8005edc <RCCEx_PLLSAI1_Config+0xc>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005f32:	f640 3163 	movw	r1, #2915	@ 0xb63
 8005f36:	486b      	ldr	r0, [pc, #428]	@ (80060e4 <RCCEx_PLLSAI1_Config+0x214>)
 8005f38:	f7fc fa96 	bl	8002468 <assert_failed>
 8005f3c:	e7d2      	b.n	8005ee4 <RCCEx_PLLSAI1_Config+0x14>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8005f3e:	f640 3164 	movw	r1, #2916	@ 0xb64
 8005f42:	4868      	ldr	r0, [pc, #416]	@ (80060e4 <RCCEx_PLLSAI1_Config+0x214>)
 8005f44:	f7fc fa90 	bl	8002468 <assert_failed>
 8005f48:	e7d0      	b.n	8005eec <RCCEx_PLLSAI1_Config+0x1c>
       ||
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	f000 80c4 	beq.w	80060d8 <RCCEx_PLLSAI1_Config+0x208>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f50:	4b65      	ldr	r3, [pc, #404]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005f58:	3301      	adds	r3, #1
 8005f5a:	6862      	ldr	r2, [r4, #4]
       ||
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d001      	beq.n	8005f64 <RCCEx_PLLSAI1_Config+0x94>
      status = HAL_ERROR;
 8005f60:	2601      	movs	r6, #1
 8005f62:	e7de      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2600      	movs	r6, #0
 8005f66:	e019      	b.n	8005f9c <RCCEx_PLLSAI1_Config+0xcc>
    switch(PllSai1->PLLSAI1Source)
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d059      	beq.n	8006022 <RCCEx_PLLSAI1_Config+0x152>
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d05e      	beq.n	8006030 <RCCEx_PLLSAI1_Config+0x160>
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	f040 80b2 	bne.w	80060dc <RCCEx_PLLSAI1_Config+0x20c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f78:	4a5b      	ldr	r2, [pc, #364]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	f012 0f02 	tst.w	r2, #2
 8005f80:	d062      	beq.n	8006048 <RCCEx_PLLSAI1_Config+0x178>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f82:	4859      	ldr	r0, [pc, #356]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005f84:	68c2      	ldr	r2, [r0, #12]
 8005f86:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8005f8a:	6861      	ldr	r1, [r4, #4]
 8005f8c:	3901      	subs	r1, #1
 8005f8e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60c3      	str	r3, [r0, #12]
 8005f96:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8005f98:	2e00      	cmp	r6, #0
 8005f9a:	d1c2      	bne.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f9c:	4a52      	ldr	r2, [pc, #328]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005f9e:	6813      	ldr	r3, [r2, #0]
 8005fa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005fa4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005fa6:	f7fd f967 	bl	8003278 <HAL_GetTick>
 8005faa:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fac:	4b4e      	ldr	r3, [pc, #312]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8005fb4:	d005      	beq.n	8005fc2 <RCCEx_PLLSAI1_Config+0xf2>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb6:	f7fd f95f 	bl	8003278 <HAL_GetTick>
 8005fba:	1bc0      	subs	r0, r0, r7
 8005fbc:	2802      	cmp	r0, #2
 8005fbe:	d9f5      	bls.n	8005fac <RCCEx_PLLSAI1_Config+0xdc>
        status = HAL_TIMEOUT;
 8005fc0:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d1ad      	bne.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
      if(Divider == DIVIDER_P_UPDATE)
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	d146      	bne.n	8006058 <RCCEx_PLLSAI1_Config+0x188>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	3b02      	subs	r3, #2
 8005fce:	2b1d      	cmp	r3, #29
 8005fd0:	d83c      	bhi.n	800604c <RCCEx_PLLSAI1_Config+0x17c>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fd2:	4945      	ldr	r1, [pc, #276]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005fd4:	690b      	ldr	r3, [r1, #16]
 8005fd6:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005fda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fde:	68a0      	ldr	r0, [r4, #8]
 8005fe0:	68e2      	ldr	r2, [r4, #12]
 8005fe2:	06d2      	lsls	r2, r2, #27
 8005fe4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fec:	4a3e      	ldr	r2, [pc, #248]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005fee:	6813      	ldr	r3, [r2, #0]
 8005ff0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ff4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005ff6:	f7fd f93f 	bl	8003278 <HAL_GetTick>
 8005ffa:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006004:	d105      	bne.n	8006012 <RCCEx_PLLSAI1_Config+0x142>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006006:	f7fd f937 	bl	8003278 <HAL_GetTick>
 800600a:	1b40      	subs	r0, r0, r5
 800600c:	2802      	cmp	r0, #2
 800600e:	d9f5      	bls.n	8005ffc <RCCEx_PLLSAI1_Config+0x12c>
          status = HAL_TIMEOUT;
 8006010:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8006012:	2e00      	cmp	r6, #0
 8006014:	d185      	bne.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006016:	4a34      	ldr	r2, [pc, #208]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8006018:	6913      	ldr	r3, [r2, #16]
 800601a:	69a1      	ldr	r1, [r4, #24]
 800601c:	430b      	orrs	r3, r1
 800601e:	6113      	str	r3, [r2, #16]
 8006020:	e77f      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006022:	4a31      	ldr	r2, [pc, #196]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800602a:	d1aa      	bne.n	8005f82 <RCCEx_PLLSAI1_Config+0xb2>
 800602c:	2601      	movs	r6, #1
 800602e:	e778      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006030:	4a2d      	ldr	r2, [pc, #180]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8006032:	6812      	ldr	r2, [r2, #0]
 8006034:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8006038:	d1a3      	bne.n	8005f82 <RCCEx_PLLSAI1_Config+0xb2>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800603a:	4a2b      	ldr	r2, [pc, #172]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8006042:	d19e      	bne.n	8005f82 <RCCEx_PLLSAI1_Config+0xb2>
 8006044:	2601      	movs	r6, #1
 8006046:	e76c      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8006048:	2601      	movs	r6, #1
 800604a:	e7a5      	b.n	8005f98 <RCCEx_PLLSAI1_Config+0xc8>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 800604c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8006050:	4824      	ldr	r0, [pc, #144]	@ (80060e4 <RCCEx_PLLSAI1_Config+0x214>)
 8006052:	f7fc fa09 	bl	8002468 <assert_failed>
 8006056:	e7bc      	b.n	8005fd2 <RCCEx_PLLSAI1_Config+0x102>
      else if(Divider == DIVIDER_Q_UPDATE)
 8006058:	2d01      	cmp	r5, #1
 800605a:	d018      	beq.n	800608e <RCCEx_PLLSAI1_Config+0x1be>
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 800605c:	6962      	ldr	r2, [r4, #20]
 800605e:	2a08      	cmp	r2, #8
 8006060:	d834      	bhi.n	80060cc <RCCEx_PLLSAI1_Config+0x1fc>
 8006062:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8006066:	40d3      	lsrs	r3, r2
 8006068:	f013 0f01 	tst.w	r3, #1
 800606c:	d02e      	beq.n	80060cc <RCCEx_PLLSAI1_Config+0x1fc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800606e:	481e      	ldr	r0, [pc, #120]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 8006070:	6902      	ldr	r2, [r0, #16]
 8006072:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8006076:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800607a:	68a1      	ldr	r1, [r4, #8]
 800607c:	6963      	ldr	r3, [r4, #20]
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	065b      	lsls	r3, r3, #25
 8006084:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006088:	431a      	orrs	r2, r3
 800608a:	6102      	str	r2, [r0, #16]
 800608c:	e7ae      	b.n	8005fec <RCCEx_PLLSAI1_Config+0x11c>
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800608e:	6922      	ldr	r2, [r4, #16]
 8006090:	2a08      	cmp	r2, #8
 8006092:	d815      	bhi.n	80060c0 <RCCEx_PLLSAI1_Config+0x1f0>
 8006094:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8006098:	40d3      	lsrs	r3, r2
 800609a:	f013 0f01 	tst.w	r3, #1
 800609e:	d00f      	beq.n	80060c0 <RCCEx_PLLSAI1_Config+0x1f0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060a0:	4811      	ldr	r0, [pc, #68]	@ (80060e8 <RCCEx_PLLSAI1_Config+0x218>)
 80060a2:	6902      	ldr	r2, [r0, #16]
 80060a4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80060a8:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80060ac:	68a1      	ldr	r1, [r4, #8]
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	3b01      	subs	r3, #1
 80060b4:	055b      	lsls	r3, r3, #21
 80060b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80060ba:	431a      	orrs	r2, r3
 80060bc:	6102      	str	r2, [r0, #16]
 80060be:	e795      	b.n	8005fec <RCCEx_PLLSAI1_Config+0x11c>
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 80060c0:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 80060c4:	4807      	ldr	r0, [pc, #28]	@ (80060e4 <RCCEx_PLLSAI1_Config+0x214>)
 80060c6:	f7fc f9cf 	bl	8002468 <assert_failed>
 80060ca:	e7e9      	b.n	80060a0 <RCCEx_PLLSAI1_Config+0x1d0>
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 80060cc:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80060d0:	4804      	ldr	r0, [pc, #16]	@ (80060e4 <RCCEx_PLLSAI1_Config+0x214>)
 80060d2:	f7fc f9c9 	bl	8002468 <assert_failed>
 80060d6:	e7ca      	b.n	800606e <RCCEx_PLLSAI1_Config+0x19e>
      status = HAL_ERROR;
 80060d8:	2601      	movs	r6, #1
 80060da:	e722      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
    switch(PllSai1->PLLSAI1Source)
 80060dc:	2601      	movs	r6, #1
 80060de:	e720      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0x52>
 80060e0:	01110000 	.word	0x01110000
 80060e4:	0801d680 	.word	0x0801d680
 80060e8:	40021000 	.word	0x40021000

080060ec <HAL_RCCEx_PeriphCLKConfig>:
{
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80060f4:	6802      	ldr	r2, [r0, #0]
 80060f6:	4b60      	ldr	r3, [pc, #384]	@ (8006278 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80060f8:	421a      	tst	r2, r3
 80060fa:	d002      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x16>
 80060fc:	4b5f      	ldr	r3, [pc, #380]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80060fe:	4013      	ands	r3, r2
 8006100:	b11b      	cbz	r3, 800610a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006102:	21c9      	movs	r1, #201	@ 0xc9
 8006104:	485e      	ldr	r0, [pc, #376]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006106:	f7fc f9af 	bl	8002468 <assert_failed>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006110:	d033      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8006112:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006114:	b12b      	cbz	r3, 8006122 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8006116:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800611a:	d002      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800611c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006120:	d10a      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006122:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006128:	d00b      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800612a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800612e:	d022      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8006130:	b1c3      	cbz	r3, 8006164 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006132:	2601      	movs	r6, #1
 8006134:	4637      	mov	r7, r6
 8006136:	e022      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x92>
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8006138:	21d1      	movs	r1, #209	@ 0xd1
 800613a:	4851      	ldr	r0, [pc, #324]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800613c:	f7fc f994 	bl	8002468 <assert_failed>
 8006140:	e7ef      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x36>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006142:	4a50      	ldr	r2, [pc, #320]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006144:	68d3      	ldr	r3, [r2, #12]
 8006146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800614a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800614c:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800614e:	4a4d      	ldr	r2, [pc, #308]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006150:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006154:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8006158:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800615a:	430b      	orrs	r3, r1
 800615c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006160:	2600      	movs	r6, #0
 8006162:	e00c      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006164:	2100      	movs	r1, #0
 8006166:	1d20      	adds	r0, r4, #4
 8006168:	f7ff feb2 	bl	8005ed0 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800616c:	4607      	mov	r7, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	d0ed      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x62>
      status = ret;
 8006172:	4606      	mov	r6, r0
 8006174:	e003      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006176:	2700      	movs	r7, #0
 8006178:	e7e9      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x62>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800617a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800617c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006184:	f000 8087 	beq.w	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006188:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800618a:	b143      	cbz	r3, 800619e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800618c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006190:	d005      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8006192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006196:	d002      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8006198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800619c:	d151      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x156>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800619e:	4b39      	ldr	r3, [pc, #228]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80061a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80061a6:	d152      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x162>
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a8:	4b36      	ldr	r3, [pc, #216]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80061aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80061ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80061b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80061b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80061bc:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c0:	4a31      	ldr	r2, [pc, #196]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80061c2:	6813      	ldr	r3, [r2, #0]
 80061c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80061ca:	f7fd f855 	bl	8003278 <HAL_GetTick>
 80061ce:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80061d8:	d105      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061da:	f7fd f84d 	bl	8003278 <HAL_GetTick>
 80061de:	1b40      	subs	r0, r0, r5
 80061e0:	2802      	cmp	r0, #2
 80061e2:	d9f5      	bls.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        ret = HAL_TIMEOUT;
 80061e4:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 80061e6:	2f00      	cmp	r7, #0
 80061e8:	d150      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061ea:	4b26      	ldr	r3, [pc, #152]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061f0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80061f4:	d018      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80061f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d012      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x136>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061fc:	4a21      	ldr	r2, [pc, #132]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80061fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006206:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800620a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800620e:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006212:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8006216:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800621a:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800621e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006222:	f013 0f01 	tst.w	r3, #1
 8006226:	d115      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x168>
      if(ret == HAL_OK)
 8006228:	2f00      	cmp	r7, #0
 800622a:	f040 81c5 	bne.w	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800622e:	4a15      	ldr	r2, [pc, #84]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006230:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006238:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800623a:	430b      	orrs	r3, r1
 800623c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006240:	e025      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006242:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8006246:	480e      	ldr	r0, [pc, #56]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006248:	f7fc f90e 	bl	8002468 <assert_failed>
 800624c:	e7a7      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    FlagStatus       pwrclkchanged = RESET;
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	e7b5      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8006254:	f7fd f810 	bl	8003278 <HAL_GetTick>
 8006258:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800625a:	4b0a      	ldr	r3, [pc, #40]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006260:	f013 0f02 	tst.w	r3, #2
 8006264:	d1e0      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006266:	f7fd f807 	bl	8003278 <HAL_GetTick>
 800626a:	1b40      	subs	r0, r0, r5
 800626c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006270:	4298      	cmp	r0, r3
 8006272:	d9f2      	bls.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x16e>
            ret = HAL_TIMEOUT;
 8006274:	2703      	movs	r7, #3
 8006276:	e7d7      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006278:	001f6fef 	.word	0x001f6fef
 800627c:	ffe09010 	.word	0xffe09010
 8006280:	0801d680 	.word	0x0801d680
 8006284:	40021000 	.word	0x40021000
 8006288:	40007000 	.word	0x40007000
      status = ret;
 800628c:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800628e:	f1b8 0f00 	cmp.w	r8, #0
 8006292:	f040 8193 	bne.w	80065bc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	f013 0f01 	tst.w	r3, #1
 800629c:	d00c      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800629e:	6a23      	ldr	r3, [r4, #32]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	f200 8191 	bhi.w	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062a6:	4aa6      	ldr	r2, [pc, #664]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80062a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80062ac:	f023 0303 	bic.w	r3, r3, #3
 80062b0:	6a21      	ldr	r1, [r4, #32]
 80062b2:	430b      	orrs	r3, r1
 80062b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	f013 0f02 	tst.w	r3, #2
 80062be:	d016      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x202>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80062c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062c2:	b15b      	cbz	r3, 80062dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80062c4:	3b04      	subs	r3, #4
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	f200 8184 	bhi.w	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 80062cc:	f240 1211 	movw	r2, #273	@ 0x111
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
 80062d4:	f013 0f01 	tst.w	r3, #1
 80062d8:	f000 817c 	beq.w	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062dc:	4a98      	ldr	r2, [pc, #608]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80062de:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80062e2:	f023 030c 	bic.w	r3, r3, #12
 80062e6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80062e8:	430b      	orrs	r3, r1
 80062ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f013 0f04 	tst.w	r3, #4
 80062f4:	d011      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x22e>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80062f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80062f8:	b133      	cbz	r3, 8006308 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d004      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80062fe:	2b30      	cmp	r3, #48	@ 0x30
 8006300:	d002      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006302:	2b20      	cmp	r3, #32
 8006304:	f040 816c 	bne.w	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006308:	4a8d      	ldr	r2, [pc, #564]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800630a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800630e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006312:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006314:	430b      	orrs	r3, r1
 8006316:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	f013 0f08 	tst.w	r3, #8
 8006320:	d011      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006322:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006324:	b133      	cbz	r3, 8006334 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8006326:	2b40      	cmp	r3, #64	@ 0x40
 8006328:	d004      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800632a:	2bc0      	cmp	r3, #192	@ 0xc0
 800632c:	d002      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800632e:	2b80      	cmp	r3, #128	@ 0x80
 8006330:	f040 815c 	bne.w	80065ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006334:	4a82      	ldr	r2, [pc, #520]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006336:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800633a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800633e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006340:	430b      	orrs	r3, r1
 8006342:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	f013 0f20 	tst.w	r3, #32
 800634c:	d014      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800634e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006350:	b14b      	cbz	r3, 8006366 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006356:	d006      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006358:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800635c:	d003      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800635e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006362:	f040 8149 	bne.w	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006366:	4a76      	ldr	r2, [pc, #472]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006368:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800636c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006370:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006372:	430b      	orrs	r3, r1
 8006374:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800637e:	d014      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006380:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006382:	b14b      	cbz	r3, 8006398 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006384:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006388:	d006      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800638a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800638e:	d003      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006390:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006394:	f040 8136 	bne.w	8006604 <HAL_RCCEx_PeriphCLKConfig+0x518>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006398:	4a69      	ldr	r2, [pc, #420]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800639a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800639e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80063a2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80063a4:	430b      	orrs	r3, r1
 80063a6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80063b0:	d014      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80063b2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80063b4:	b14b      	cbz	r3, 80063ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80063b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ba:	d006      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80063bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063c0:	d003      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80063c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063c6:	f040 8123 	bne.w	8006610 <HAL_RCCEx_PeriphCLKConfig+0x524>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063ca:	4a5d      	ldr	r2, [pc, #372]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80063cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80063d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063d4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80063d6:	430b      	orrs	r3, r1
 80063d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80063e2:	d011      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80063e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063e6:	b133      	cbz	r3, 80063f6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ec:	d003      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f2:	f040 8113 	bne.w	800661c <HAL_RCCEx_PeriphCLKConfig+0x530>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f6:	4a52      	ldr	r2, [pc, #328]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80063f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80063fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006402:	430b      	orrs	r3, r1
 8006404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800640e:	d011      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x348>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006410:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006412:	b133      	cbz	r3, 8006422 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006418:	d003      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800641a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800641e:	f040 8103 	bne.w	8006628 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006422:	4a47      	ldr	r2, [pc, #284]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006424:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006428:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800642c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800642e:	430b      	orrs	r3, r1
 8006430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800643a:	d011      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x374>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800643c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800643e:	b133      	cbz	r3, 800644e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006444:	d003      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800644a:	f040 80f3 	bne.w	8006634 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800644e:	4a3c      	ldr	r2, [pc, #240]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006450:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006454:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006458:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800645a:	430b      	orrs	r3, r1
 800645c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006466:	d00c      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800646a:	2b02      	cmp	r3, #2
 800646c:	f200 80e8 	bhi.w	8006640 <HAL_RCCEx_PeriphCLKConfig+0x554>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006470:	4a33      	ldr	r2, [pc, #204]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006472:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800647c:	430b      	orrs	r3, r1
 800647e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006488:	d01d      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800648a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800648c:	b14b      	cbz	r3, 80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800648e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006492:	d006      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006498:	d003      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800649a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800649e:	f040 80d5 	bne.w	800664c <HAL_RCCEx_PeriphCLKConfig+0x560>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064a2:	4a27      	ldr	r2, [pc, #156]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80064a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80064a8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80064ac:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80064ae:	430b      	orrs	r3, r1
 80064b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80064b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064ba:	f000 80cd 	beq.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064c2:	f000 80ce 	beq.w	8006662 <HAL_RCCEx_PeriphCLKConfig+0x576>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80064cc:	d01d      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80064ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80064d0:	b14b      	cbz	r3, 80064e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80064d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d6:	d006      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80064d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064dc:	d003      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80064de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80064e2:	f040 80c7 	bne.w	8006674 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064e6:	4a16      	ldr	r2, [pc, #88]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80064e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80064ec:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80064f0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80064f2:	430b      	orrs	r3, r1
 80064f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80064fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064fe:	f000 80bf 	beq.w	8006680 <HAL_RCCEx_PeriphCLKConfig+0x594>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006506:	f000 80c0 	beq.w	800668a <HAL_RCCEx_PeriphCLKConfig+0x59e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006510:	d020      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x468>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8006512:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006514:	b14b      	cbz	r3, 800652a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800651a:	d006      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800651c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006520:	d003      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006522:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006526:	f040 80b9 	bne.w	800669c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800652a:	4a05      	ldr	r2, [pc, #20]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800652c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006530:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8006534:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006536:	430b      	orrs	r3, r1
 8006538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800653c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800653e:	e001      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006540:	40021000 	.word	0x40021000
 8006544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006548:	f000 80ae 	beq.w	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800654c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006550:	f000 80af 	beq.w	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800655a:	d016      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x49e>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800655c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800655e:	b133      	cbz	r3, 800656e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006566:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800656a:	f040 80ab 	bne.w	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800656e:	4a60      	ldr	r2, [pc, #384]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8006570:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006574:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006578:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800657a:	430b      	orrs	r3, r1
 800657c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006580:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006586:	f000 80a3 	beq.w	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006590:	d00e      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8006592:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006594:	b11b      	cbz	r3, 800659e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800659a:	f040 80a2 	bne.w	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800659e:	4a54      	ldr	r2, [pc, #336]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80065a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80065a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065a8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80065aa:	430b      	orrs	r3, r1
 80065ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80065b0:	4630      	mov	r0, r6
 80065b2:	b002      	add	sp, #8
 80065b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80065b8:	463e      	mov	r6, r7
 80065ba:	e668      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80065bc:	4a4c      	ldr	r2, [pc, #304]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80065be:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80065c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c6:	e666      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80065c8:	f240 1199 	movw	r1, #409	@ 0x199
 80065cc:	4849      	ldr	r0, [pc, #292]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80065ce:	f7fb ff4b 	bl	8002468 <assert_failed>
 80065d2:	e668      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80065d4:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80065d8:	4846      	ldr	r0, [pc, #280]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80065da:	f7fb ff45 	bl	8002468 <assert_failed>
 80065de:	e67d      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80065e0:	f240 11af 	movw	r1, #431	@ 0x1af
 80065e4:	4843      	ldr	r0, [pc, #268]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80065e6:	f7fb ff3f 	bl	8002468 <assert_failed>
 80065ea:	e68d      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80065ec:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80065f0:	4840      	ldr	r0, [pc, #256]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80065f2:	f7fb ff39 	bl	8002468 <assert_failed>
 80065f6:	e69d      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x248>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80065f8:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80065fc:	483d      	ldr	r0, [pc, #244]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80065fe:	f7fb ff33 	bl	8002468 <assert_failed>
 8006602:	e6b0      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8006604:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006608:	483a      	ldr	r0, [pc, #232]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800660a:	f7fb ff2d 	bl	8002468 <assert_failed>
 800660e:	e6c3      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8006610:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8006614:	4837      	ldr	r0, [pc, #220]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8006616:	f7fb ff27 	bl	8002468 <assert_failed>
 800661a:	e6d6      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800661c:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8006620:	4834      	ldr	r0, [pc, #208]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8006622:	f7fb ff21 	bl	8002468 <assert_failed>
 8006626:	e6e6      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006628:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800662c:	4831      	ldr	r0, [pc, #196]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800662e:	f7fb ff1b 	bl	8002468 <assert_failed>
 8006632:	e6f6      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x336>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006634:	f240 2107 	movw	r1, #519	@ 0x207
 8006638:	482e      	ldr	r0, [pc, #184]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800663a:	f7fb ff15 	bl	8002468 <assert_failed>
 800663e:	e706      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x362>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006640:	f240 2113 	movw	r1, #531	@ 0x213
 8006644:	482b      	ldr	r0, [pc, #172]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8006646:	f7fb ff0f 	bl	8002468 <assert_failed>
 800664a:	e711      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x384>
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800664c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8006650:	4828      	ldr	r0, [pc, #160]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8006652:	f7fb ff09 	bl	8002468 <assert_failed>
 8006656:	e724      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006658:	68d3      	ldr	r3, [r2, #12]
 800665a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800665e:	60d3      	str	r3, [r2, #12]
 8006660:	e731      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006662:	2101      	movs	r1, #1
 8006664:	1d20      	adds	r0, r4, #4
 8006666:	f7ff fc33 	bl	8005ed0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800666a:	2800      	cmp	r0, #0
 800666c:	f43f af2b 	beq.w	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
          status = ret;
 8006670:	4606      	mov	r6, r0
 8006672:	e728      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8006674:	f240 2141 	movw	r1, #577	@ 0x241
 8006678:	481e      	ldr	r0, [pc, #120]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800667a:	f7fb fef5 	bl	8002468 <assert_failed>
 800667e:	e732      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006680:	68d3      	ldr	r3, [r2, #12]
 8006682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006686:	60d3      	str	r3, [r2, #12]
 8006688:	e73f      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800668a:	2101      	movs	r1, #1
 800668c:	1d20      	adds	r0, r4, #4
 800668e:	f7ff fc1f 	bl	8005ed0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006692:	2800      	cmp	r0, #0
 8006694:	f43f af39 	beq.w	800650a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        status = ret;
 8006698:	4606      	mov	r6, r0
 800669a:	e736      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800669c:	f240 2166 	movw	r1, #614	@ 0x266
 80066a0:	4814      	ldr	r0, [pc, #80]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80066a2:	f7fb fee1 	bl	8002468 <assert_failed>
 80066a6:	e740      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x43e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a8:	68d3      	ldr	r3, [r2, #12]
 80066aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ae:	60d3      	str	r3, [r2, #12]
 80066b0:	e750      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066b2:	2101      	movs	r1, #1
 80066b4:	1d20      	adds	r0, r4, #4
 80066b6:	f7ff fc0b 	bl	8005ed0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80066ba:	2800      	cmp	r0, #0
 80066bc:	f43f af4a 	beq.w	8006554 <HAL_RCCEx_PeriphCLKConfig+0x468>
        status = ret;
 80066c0:	4606      	mov	r6, r0
 80066c2:	e747      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x468>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80066c4:	f240 2186 	movw	r1, #646	@ 0x286
 80066c8:	480a      	ldr	r0, [pc, #40]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80066ca:	f7fb fecd 	bl	8002468 <assert_failed>
 80066ce:	e74e      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x482>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066d0:	2102      	movs	r1, #2
 80066d2:	1d20      	adds	r0, r4, #4
 80066d4:	f7ff fbfc 	bl	8005ed0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80066d8:	2800      	cmp	r0, #0
 80066da:	f43f af56 	beq.w	800658a <HAL_RCCEx_PeriphCLKConfig+0x49e>
        status = ret;
 80066de:	4606      	mov	r6, r0
 80066e0:	e753      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x49e>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80066e2:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80066e6:	4803      	ldr	r0, [pc, #12]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80066e8:	f7fb febe 	bl	8002468 <assert_failed>
 80066ec:	e757      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80066ee:	bf00      	nop
 80066f0:	40021000 	.word	0x40021000
 80066f4:	0801d680 	.word	0x0801d680

080066f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066fc:	6a02      	ldr	r2, [r0, #32]
 80066fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006702:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006706:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006708:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800670c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006710:	680d      	ldr	r5, [r1, #0]
 8006712:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006714:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006718:	688d      	ldr	r5, [r1, #8]
 800671a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	4d0b      	ldr	r5, [pc, #44]	@ (800674c <TIM_OC5_SetConfig+0x54>)
 8006720:	42a8      	cmp	r0, r5
 8006722:	d007      	beq.n	8006734 <TIM_OC5_SetConfig+0x3c>
 8006724:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8006728:	42a8      	cmp	r0, r5
 800672a:	d003      	beq.n	8006734 <TIM_OC5_SetConfig+0x3c>
 800672c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006730:	42a8      	cmp	r0, r5
 8006732:	d104      	bne.n	800673e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006734:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006738:	694d      	ldr	r5, [r1, #20]
 800673a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006740:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006742:	684a      	ldr	r2, [r1, #4]
 8006744:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006746:	6203      	str	r3, [r0, #32]
}
 8006748:	bc30      	pop	{r4, r5}
 800674a:	4770      	bx	lr
 800674c:	40012c00 	.word	0x40012c00

08006750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	6a02      	ldr	r2, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006754:	6a03      	ldr	r3, [r0, #32]
 8006756:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800675a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800675e:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006768:	680d      	ldr	r5, [r1, #0]
 800676a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800676e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006772:	688d      	ldr	r5, [r1, #8]
 8006774:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	4d0b      	ldr	r5, [pc, #44]	@ (80067a8 <TIM_OC6_SetConfig+0x58>)
 800677a:	42a8      	cmp	r0, r5
 800677c:	d007      	beq.n	800678e <TIM_OC6_SetConfig+0x3e>
 800677e:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8006782:	42a8      	cmp	r0, r5
 8006784:	d003      	beq.n	800678e <TIM_OC6_SetConfig+0x3e>
 8006786:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800678a:	42a8      	cmp	r0, r5
 800678c:	d104      	bne.n	8006798 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800678e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006792:	694d      	ldr	r5, [r1, #20]
 8006794:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006798:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800679a:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800679c:	684b      	ldr	r3, [r1, #4]
 800679e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a0:	6202      	str	r2, [r0, #32]
}
 80067a2:	bc30      	pop	{r4, r5}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00

080067ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ac:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b0:	6a04      	ldr	r4, [r0, #32]
 80067b2:	f024 0401 	bic.w	r4, r4, #1
 80067b6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067ba:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067be:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067c2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80067c6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067c8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80067ca:	6203      	str	r3, [r0, #32]
}
 80067cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067d2:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067d4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067d6:	6a04      	ldr	r4, [r0, #32]
 80067d8:	f024 0410 	bic.w	r4, r4, #16
 80067dc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067de:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067e0:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067e4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067e8:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067ec:	031b      	lsls	r3, r3, #12
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067f4:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067f8:	0109      	lsls	r1, r1, #4
 80067fa:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 80067fe:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006800:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006802:	6201      	str	r1, [r0, #32]
}
 8006804:	bc30      	pop	{r4, r5}
 8006806:	4770      	bx	lr

08006808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006808:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800680a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680c:	6a04      	ldr	r4, [r0, #32]
 800680e:	f024 0410 	bic.w	r4, r4, #16
 8006812:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006814:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006816:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800681a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800681e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006822:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006826:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006828:	6203      	str	r3, [r0, #32]
}
 800682a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006830:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006832:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006834:	6a04      	ldr	r4, [r0, #32]
 8006836:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 800683a:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800683c:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800683e:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8006842:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006846:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	b2db      	uxtb	r3, r3
 800684e:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006852:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006856:	0209      	lsls	r1, r1, #8
 8006858:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 800685c:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800685e:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8006860:	6201      	str	r1, [r0, #32]
}
 8006862:	bc30      	pop	{r4, r5}
 8006864:	4770      	bx	lr

08006866 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006866:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006868:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800686a:	6a04      	ldr	r4, [r0, #32]
 800686c:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8006870:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006872:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006874:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006878:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800687c:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006880:	031b      	lsls	r3, r3, #12
 8006882:	b29b      	uxth	r3, r3
 8006884:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006888:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800688c:	0309      	lsls	r1, r1, #12
 800688e:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 8006892:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006894:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8006896:	6201      	str	r1, [r0, #32]
}
 8006898:	bc30      	pop	{r4, r5}
 800689a:	4770      	bx	lr

0800689c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800689c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800689e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068a2:	430b      	orrs	r3, r1
 80068a4:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a8:	6083      	str	r3, [r0, #8]
}
 80068aa:	4770      	bx	lr

080068ac <TIM_OC1_SetConfig>:
{
 80068ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b0:	4604      	mov	r4, r0
 80068b2:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 80068b4:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b6:	6a03      	ldr	r3, [r0, #32]
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80068be:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80068c0:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c6:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80068ca:	6809      	ldr	r1, [r1, #0]
 80068cc:	ea41 0803 	orr.w	r8, r1, r3
  tmpccer &= ~TIM_CCER_CC1P;
 80068d0:	f022 0302 	bic.w	r3, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80068d4:	68ae      	ldr	r6, [r5, #8]
 80068d6:	431e      	orrs	r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068d8:	4b24      	ldr	r3, [pc, #144]	@ (800696c <TIM_OC1_SetConfig+0xc0>)
 80068da:	4298      	cmp	r0, r3
 80068dc:	d007      	beq.n	80068ee <TIM_OC1_SetConfig+0x42>
 80068de:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 80068e2:	4298      	cmp	r0, r3
 80068e4:	d003      	beq.n	80068ee <TIM_OC1_SetConfig+0x42>
 80068e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068ea:	4298      	cmp	r0, r3
 80068ec:	d109      	bne.n	8006902 <TIM_OC1_SetConfig+0x56>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80068ee:	68eb      	ldr	r3, [r5, #12]
 80068f0:	b10b      	cbz	r3, 80068f6 <TIM_OC1_SetConfig+0x4a>
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d128      	bne.n	8006948 <TIM_OC1_SetConfig+0x9c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80068f6:	f026 0608 	bic.w	r6, r6, #8
    tmpccer |= OC_Config->OCNPolarity;
 80068fa:	68eb      	ldr	r3, [r5, #12]
 80068fc:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80068fe:	f023 0604 	bic.w	r6, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006902:	4b1a      	ldr	r3, [pc, #104]	@ (800696c <TIM_OC1_SetConfig+0xc0>)
 8006904:	429c      	cmp	r4, r3
 8006906:	d007      	beq.n	8006918 <TIM_OC1_SetConfig+0x6c>
 8006908:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800690c:	429c      	cmp	r4, r3
 800690e:	d003      	beq.n	8006918 <TIM_OC1_SetConfig+0x6c>
 8006910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006914:	429c      	cmp	r4, r3
 8006916:	d10f      	bne.n	8006938 <TIM_OC1_SetConfig+0x8c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006918:	69ab      	ldr	r3, [r5, #24]
 800691a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691e:	d000      	beq.n	8006922 <TIM_OC1_SetConfig+0x76>
 8006920:	b9c3      	cbnz	r3, 8006954 <TIM_OC1_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006922:	696b      	ldr	r3, [r5, #20]
 8006924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006928:	d000      	beq.n	800692c <TIM_OC1_SetConfig+0x80>
 800692a:	b9cb      	cbnz	r3, 8006960 <TIM_OC1_SetConfig+0xb4>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800692c:	f427 7740 	bic.w	r7, r7, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8006930:	696b      	ldr	r3, [r5, #20]
 8006932:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8006934:	69af      	ldr	r7, [r5, #24]
 8006936:	431f      	orrs	r7, r3
  TIMx->CR2 = tmpcr2;
 8006938:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800693a:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800693e:	686b      	ldr	r3, [r5, #4]
 8006940:	6363      	str	r3, [r4, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8006942:	6226      	str	r6, [r4, #32]
}
 8006944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006948:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800694c:	4808      	ldr	r0, [pc, #32]	@ (8006970 <TIM_OC1_SetConfig+0xc4>)
 800694e:	f7fb fd8b 	bl	8002468 <assert_failed>
 8006952:	e7d0      	b.n	80068f6 <TIM_OC1_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006954:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 8006958:	4805      	ldr	r0, [pc, #20]	@ (8006970 <TIM_OC1_SetConfig+0xc4>)
 800695a:	f7fb fd85 	bl	8002468 <assert_failed>
 800695e:	e7e0      	b.n	8006922 <TIM_OC1_SetConfig+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006960:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 8006964:	4802      	ldr	r0, [pc, #8]	@ (8006970 <TIM_OC1_SetConfig+0xc4>)
 8006966:	f7fb fd7f 	bl	8002468 <assert_failed>
 800696a:	e7df      	b.n	800692c <TIM_OC1_SetConfig+0x80>
 800696c:	40012c00 	.word	0x40012c00
 8006970:	0801d6b8 	.word	0x0801d6b8

08006974 <TIM_OC3_SetConfig>:
{
 8006974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006978:	4604      	mov	r4, r0
 800697a:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800697c:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800697e:	6a03      	ldr	r3, [r0, #32]
 8006980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006984:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006986:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006988:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800698a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800698e:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006992:	680a      	ldr	r2, [r1, #0]
 8006994:	ea42 0803 	orr.w	r8, r2, r3
  tmpccer &= ~TIM_CCER_CC3P;
 8006998:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800699c:	688b      	ldr	r3, [r1, #8]
 800699e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069a2:	4b21      	ldr	r3, [pc, #132]	@ (8006a28 <TIM_OC3_SetConfig+0xb4>)
 80069a4:	4298      	cmp	r0, r3
 80069a6:	d007      	beq.n	80069b8 <TIM_OC3_SetConfig+0x44>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a8:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 80069ac:	4298      	cmp	r0, r3
 80069ae:	d00e      	beq.n	80069ce <TIM_OC3_SetConfig+0x5a>
 80069b0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a2c <TIM_OC3_SetConfig+0xb8>)
 80069b2:	4298      	cmp	r0, r3
 80069b4:	d11d      	bne.n	80069f2 <TIM_OC3_SetConfig+0x7e>
 80069b6:	e00a      	b.n	80069ce <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80069b8:	68cb      	ldr	r3, [r1, #12]
 80069ba:	b10b      	cbz	r3, 80069c0 <TIM_OC3_SetConfig+0x4c>
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d120      	bne.n	8006a02 <TIM_OC3_SetConfig+0x8e>
    tmpccer &= ~TIM_CCER_CC3NP;
 80069c0:	f426 6600 	bic.w	r6, r6, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069c4:	68eb      	ldr	r3, [r5, #12]
 80069c6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ca:	f426 6680 	bic.w	r6, r6, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80069ce:	69ab      	ldr	r3, [r5, #24]
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d4:	d000      	beq.n	80069d8 <TIM_OC3_SetConfig+0x64>
 80069d6:	b9d3      	cbnz	r3, 8006a0e <TIM_OC3_SetConfig+0x9a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80069d8:	696b      	ldr	r3, [r5, #20]
 80069da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069de:	d000      	beq.n	80069e2 <TIM_OC3_SetConfig+0x6e>
 80069e0:	b9db      	cbnz	r3, 8006a1a <TIM_OC3_SetConfig+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069e2:	f427 5740 	bic.w	r7, r7, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e6:	696b      	ldr	r3, [r5, #20]
 80069e8:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ec:	69ab      	ldr	r3, [r5, #24]
 80069ee:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
  TIMx->CR2 = tmpcr2;
 80069f2:	6067      	str	r7, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 80069f4:	f8c4 801c 	str.w	r8, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80069f8:	686b      	ldr	r3, [r5, #4]
 80069fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80069fc:	6226      	str	r6, [r4, #32]
}
 80069fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006a02:	f641 4105 	movw	r1, #7173	@ 0x1c05
 8006a06:	480a      	ldr	r0, [pc, #40]	@ (8006a30 <TIM_OC3_SetConfig+0xbc>)
 8006a08:	f7fb fd2e 	bl	8002468 <assert_failed>
 8006a0c:	e7d8      	b.n	80069c0 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a0e:	f641 4112 	movw	r1, #7186	@ 0x1c12
 8006a12:	4807      	ldr	r0, [pc, #28]	@ (8006a30 <TIM_OC3_SetConfig+0xbc>)
 8006a14:	f7fb fd28 	bl	8002468 <assert_failed>
 8006a18:	e7de      	b.n	80069d8 <TIM_OC3_SetConfig+0x64>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a1a:	f641 4113 	movw	r1, #7187	@ 0x1c13
 8006a1e:	4804      	ldr	r0, [pc, #16]	@ (8006a30 <TIM_OC3_SetConfig+0xbc>)
 8006a20:	f7fb fd22 	bl	8002468 <assert_failed>
 8006a24:	e7dd      	b.n	80069e2 <TIM_OC3_SetConfig+0x6e>
 8006a26:	bf00      	nop
 8006a28:	40012c00 	.word	0x40012c00
 8006a2c:	40014400 	.word	0x40014400
 8006a30:	0801d6b8 	.word	0x0801d6b8

08006a34 <TIM_OC4_SetConfig>:
{
 8006a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460f      	mov	r7, r1
  tmpccer = TIMx->CCER;
 8006a3c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a3e:	6a03      	ldr	r3, [r0, #32]
 8006a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a44:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006a46:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006a4a:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a50:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a54:	680a      	ldr	r2, [r1, #0]
 8006a56:	ea43 2602 	orr.w	r6, r3, r2, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 8006a5a:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a5e:	688b      	ldr	r3, [r1, #8]
 8006a60:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a64:	4b11      	ldr	r3, [pc, #68]	@ (8006aac <TIM_OC4_SetConfig+0x78>)
 8006a66:	4298      	cmp	r0, r3
 8006a68:	d007      	beq.n	8006a7a <TIM_OC4_SetConfig+0x46>
 8006a6a:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	d003      	beq.n	8006a7a <TIM_OC4_SetConfig+0x46>
 8006a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a76:	4298      	cmp	r0, r3
 8006a78:	d109      	bne.n	8006a8e <TIM_OC4_SetConfig+0x5a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a80:	d000      	beq.n	8006a84 <TIM_OC4_SetConfig+0x50>
 8006a82:	b963      	cbnz	r3, 8006a9e <TIM_OC4_SetConfig+0x6a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a84:	f428 4880 	bic.w	r8, r8, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
  TIMx->CR2 = tmpcr2;
 8006a8e:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a92:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6423      	str	r3, [r4, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006a98:	6225      	str	r5, [r4, #32]
}
 8006a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a9e:	f641 4152 	movw	r1, #7250	@ 0x1c52
 8006aa2:	4803      	ldr	r0, [pc, #12]	@ (8006ab0 <TIM_OC4_SetConfig+0x7c>)
 8006aa4:	f7fb fce0 	bl	8002468 <assert_failed>
 8006aa8:	e7ec      	b.n	8006a84 <TIM_OC4_SetConfig+0x50>
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	0801d6b8 	.word	0x0801d6b8

08006ab4 <HAL_TIM_Base_Start_IT>:
{
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ab8:	6803      	ldr	r3, [r0, #0]
 8006aba:	4a28      	ldr	r2, [pc, #160]	@ (8006b5c <HAL_TIM_Base_Start_IT+0xa8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d017      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x3c>
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac4:	d014      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x3c>
 8006ac6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d010      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x3c>
 8006ace:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00c      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x3c>
 8006ad6:	f502 3298 	add.w	r2, r2, #77824	@ 0x13000
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d008      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x3c>
 8006ade:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x3c>
 8006ae6:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8006aea:	481d      	ldr	r0, [pc, #116]	@ (8006b60 <HAL_TIM_Base_Start_IT+0xac>)
 8006aec:	f7fb fcbc 	bl	8002468 <assert_failed>
  if (htim->State != HAL_TIM_STATE_READY)
 8006af0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d12a      	bne.n	8006b4e <HAL_TIM_Base_Start_IT+0x9a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	2302      	movs	r3, #2
 8006afa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	68d3      	ldr	r3, [r2, #12]
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	4a14      	ldr	r2, [pc, #80]	@ (8006b5c <HAL_TIM_Base_Start_IT+0xa8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d010      	beq.n	8006b32 <HAL_TIM_Base_Start_IT+0x7e>
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b14:	d00d      	beq.n	8006b32 <HAL_TIM_Base_Start_IT+0x7e>
 8006b16:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_TIM_Base_Start_IT+0x7e>
 8006b1e:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d005      	beq.n	8006b32 <HAL_TIM_Base_Start_IT+0x7e>
    __HAL_TIM_ENABLE(htim);
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	f042 0201 	orr.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006b2e:	2000      	movs	r0, #0
 8006b30:	e00e      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0x9c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b32:	6899      	ldr	r1, [r3, #8]
 8006b34:	4a0b      	ldr	r2, [pc, #44]	@ (8006b64 <HAL_TIM_Base_Start_IT+0xb0>)
 8006b36:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b38:	2a06      	cmp	r2, #6
 8006b3a:	d00a      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0x9e>
 8006b3c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006b40:	d009      	beq.n	8006b56 <HAL_TIM_Base_Start_IT+0xa2>
      __HAL_TIM_ENABLE(htim);
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	f042 0201 	orr.w	r2, r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e000      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0x9c>
    return HAL_ERROR;
 8006b4e:	2001      	movs	r0, #1
}
 8006b50:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8006b52:	2000      	movs	r0, #0
 8006b54:	e7fc      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0x9c>
 8006b56:	2000      	movs	r0, #0
 8006b58:	e7fa      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0x9c>
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	0801d6b8 	.word	0x0801d6b8
 8006b64:	00010007 	.word	0x00010007

08006b68 <HAL_TIM_PWM_MspInit>:
}
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_IC_MspInit>:
}
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIM_ReadCapturedValue>:
{
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4604      	mov	r4, r0
  switch (Channel)
 8006b70:	290c      	cmp	r1, #12
 8006b72:	d860      	bhi.n	8006c36 <HAL_TIM_ReadCapturedValue+0xca>
 8006b74:	e8df f001 	tbb	[pc, r1]
 8006b78:	5f5f5f07 	.word	0x5f5f5f07
 8006b7c:	5f5f5f22 	.word	0x5f5f5f22
 8006b80:	5f5f5f39 	.word	0x5f5f5f39
 8006b84:	4c          	.byte	0x4c
 8006b85:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006b86:	6803      	ldr	r3, [r0, #0]
 8006b88:	4a2c      	ldr	r2, [pc, #176]	@ (8006c3c <HAL_TIM_ReadCapturedValue+0xd0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <HAL_TIM_ReadCapturedValue+0x4a>
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	d010      	beq.n	8006bb6 <HAL_TIM_ReadCapturedValue+0x4a>
 8006b94:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00c      	beq.n	8006bb6 <HAL_TIM_ReadCapturedValue+0x4a>
 8006b9c:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d008      	beq.n	8006bb6 <HAL_TIM_ReadCapturedValue+0x4a>
 8006ba4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <HAL_TIM_ReadCapturedValue+0x4a>
 8006bac:	f241 6161 	movw	r1, #5729	@ 0x1661
 8006bb0:	4823      	ldr	r0, [pc, #140]	@ (8006c40 <HAL_TIM_ReadCapturedValue+0xd4>)
 8006bb2:	f7fb fc59 	bl	8002468 <assert_failed>
      tmpreg =  htim->Instance->CCR1;
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8006bba:	e03d      	b.n	8006c38 <HAL_TIM_ReadCapturedValue+0xcc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006bbc:	6803      	ldr	r3, [r0, #0]
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006c3c <HAL_TIM_ReadCapturedValue+0xd0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00f      	beq.n	8006be4 <HAL_TIM_ReadCapturedValue+0x78>
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc8:	d00c      	beq.n	8006be4 <HAL_TIM_ReadCapturedValue+0x78>
 8006bca:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d008      	beq.n	8006be4 <HAL_TIM_ReadCapturedValue+0x78>
 8006bd2:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_ReadCapturedValue+0x78>
 8006bda:	f241 616b 	movw	r1, #5739	@ 0x166b
 8006bde:	4818      	ldr	r0, [pc, #96]	@ (8006c40 <HAL_TIM_ReadCapturedValue+0xd4>)
 8006be0:	f7fb fc42 	bl	8002468 <assert_failed>
      tmpreg =   htim->Instance->CCR2;
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8006be8:	e026      	b.n	8006c38 <HAL_TIM_ReadCapturedValue+0xcc>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006bea:	6803      	ldr	r3, [r0, #0]
 8006bec:	4a13      	ldr	r2, [pc, #76]	@ (8006c3c <HAL_TIM_ReadCapturedValue+0xd0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <HAL_TIM_ReadCapturedValue+0x9e>
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf6:	d008      	beq.n	8006c0a <HAL_TIM_ReadCapturedValue+0x9e>
 8006bf8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIM_ReadCapturedValue+0x9e>
 8006c00:	f241 6176 	movw	r1, #5750	@ 0x1676
 8006c04:	480e      	ldr	r0, [pc, #56]	@ (8006c40 <HAL_TIM_ReadCapturedValue+0xd4>)
 8006c06:	f7fb fc2f 	bl	8002468 <assert_failed>
      tmpreg =   htim->Instance->CCR3;
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8006c0e:	e013      	b.n	8006c38 <HAL_TIM_ReadCapturedValue+0xcc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006c10:	6803      	ldr	r3, [r0, #0]
 8006c12:	4a0a      	ldr	r2, [pc, #40]	@ (8006c3c <HAL_TIM_ReadCapturedValue+0xd0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00b      	beq.n	8006c30 <HAL_TIM_ReadCapturedValue+0xc4>
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c1c:	d008      	beq.n	8006c30 <HAL_TIM_ReadCapturedValue+0xc4>
 8006c1e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIM_ReadCapturedValue+0xc4>
 8006c26:	f241 6181 	movw	r1, #5761	@ 0x1681
 8006c2a:	4805      	ldr	r0, [pc, #20]	@ (8006c40 <HAL_TIM_ReadCapturedValue+0xd4>)
 8006c2c:	f7fb fc1c 	bl	8002468 <assert_failed>
      tmpreg =   htim->Instance->CCR4;
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8006c34:	e000      	b.n	8006c38 <HAL_TIM_ReadCapturedValue+0xcc>
  switch (Channel)
 8006c36:	2000      	movs	r0, #0
}
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00
 8006c40:	0801d6b8 	.word	0x0801d6b8

08006c44 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006c44:	4770      	bx	lr

08006c46 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_TriggerCallback>:
}
 8006c48:	4770      	bx	lr

08006c4a <HAL_TIM_IRQHandler>:
{
 8006c4a:	b570      	push	{r4, r5, r6, lr}
 8006c4c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8006c4e:	6803      	ldr	r3, [r0, #0]
 8006c50:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c52:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c54:	f015 0f02 	tst.w	r5, #2
 8006c58:	d010      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c5a:	f016 0f02 	tst.w	r6, #2
 8006c5e:	d00d      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c60:	f06f 0202 	mvn.w	r2, #2
 8006c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c66:	2301      	movs	r3, #1
 8006c68:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c6a:	6803      	ldr	r3, [r0, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f013 0f03 	tst.w	r3, #3
 8006c72:	d064      	beq.n	8006d3e <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 8006c74:	f7fb fa3a 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c7c:	f015 0f04 	tst.w	r5, #4
 8006c80:	d012      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c82:	f016 0f04 	tst.w	r6, #4
 8006c86:	d00f      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	f06f 0204 	mvn.w	r2, #4
 8006c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c90:	2302      	movs	r3, #2
 8006c92:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006c9c:	d055      	beq.n	8006d4a <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7fb fa24 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ca8:	f015 0f08 	tst.w	r5, #8
 8006cac:	d012      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cae:	f016 0f08 	tst.w	r6, #8
 8006cb2:	d00f      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	f06f 0208 	mvn.w	r2, #8
 8006cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f013 0f03 	tst.w	r3, #3
 8006cc8:	d046      	beq.n	8006d58 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7fb fa0e 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cd4:	f015 0f10 	tst.w	r5, #16
 8006cd8:	d012      	beq.n	8006d00 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cda:	f016 0f10 	tst.w	r6, #16
 8006cde:	d00f      	beq.n	8006d00 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	f06f 0210 	mvn.w	r2, #16
 8006ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ce8:	2308      	movs	r3, #8
 8006cea:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006cf4:	d037      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7fb f9f8 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d00:	f015 0f01 	tst.w	r5, #1
 8006d04:	d002      	beq.n	8006d0c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d06:	f016 0f01 	tst.w	r6, #1
 8006d0a:	d133      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x12a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d0c:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 8006d10:	d002      	beq.n	8006d18 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d12:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006d16:	d135      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d18:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8006d1c:	d002      	beq.n	8006d24 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d1e:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006d22:	d137      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d24:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8006d28:	d002      	beq.n	8006d30 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d2a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8006d2e:	d139      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d30:	f015 0f20 	tst.w	r5, #32
 8006d34:	d002      	beq.n	8006d3c <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d36:	f016 0f20 	tst.w	r6, #32
 8006d3a:	d13b      	bne.n	8006db4 <HAL_TIM_IRQHandler+0x16a>
}
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	f7ff ff81 	bl	8006c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d42:	4620      	mov	r0, r4
 8006d44:	f7ff ff7f 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d48:	e796      	b.n	8006c78 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7ff ff7a 	bl	8006c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d50:	4620      	mov	r0, r4
 8006d52:	f7ff ff78 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d56:	e7a5      	b.n	8006ca4 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f7ff ff73 	bl	8006c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7ff ff71 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d64:	e7b4      	b.n	8006cd0 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7ff ff6c 	bl	8006c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f7ff ff6a 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d72:	e7c3      	b.n	8006cfc <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f06f 0201 	mvn.w	r2, #1
 8006d7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7fb fa37 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
 8006d82:	e7c3      	b.n	8006d0c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d8a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f001 fc72 	bl	8008676 <HAL_TIMEx_BreakCallback>
 8006d92:	e7c1      	b.n	8006d18 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f001 fc6b 	bl	8008678 <HAL_TIMEx_Break2Callback>
 8006da2:	e7bf      	b.n	8006d24 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006daa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7ff ff4b 	bl	8006c48 <HAL_TIM_TriggerCallback>
 8006db2:	e7bd      	b.n	8006d30 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	f06f 0220 	mvn.w	r2, #32
 8006dba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f001 fc59 	bl	8008674 <HAL_TIMEx_CommutCallback>
}
 8006dc2:	e7bb      	b.n	8006d3c <HAL_TIM_IRQHandler+0xf2>

08006dc4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006dc4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc6:	4a22      	ldr	r2, [pc, #136]	@ (8006e50 <TIM_Base_SetConfig+0x8c>)
 8006dc8:	4290      	cmp	r0, r2
 8006dca:	d006      	beq.n	8006dda <TIM_Base_SetConfig+0x16>
 8006dcc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006dd0:	d003      	beq.n	8006dda <TIM_Base_SetConfig+0x16>
 8006dd2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006dd6:	4290      	cmp	r0, r2
 8006dd8:	d103      	bne.n	8006de2 <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006dde:	684a      	ldr	r2, [r1, #4]
 8006de0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006de2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e50 <TIM_Base_SetConfig+0x8c>)
 8006de4:	4290      	cmp	r0, r2
 8006de6:	d00e      	beq.n	8006e06 <TIM_Base_SetConfig+0x42>
 8006de8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0x42>
 8006dee:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006df2:	4290      	cmp	r0, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0x42>
 8006df6:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8006dfa:	4290      	cmp	r0, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0x42>
 8006dfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e02:	4290      	cmp	r0, r2
 8006e04:	d103      	bne.n	8006e0e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0a:	68ca      	ldr	r2, [r1, #12]
 8006e0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e12:	694a      	ldr	r2, [r1, #20]
 8006e14:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006e16:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e18:	688b      	ldr	r3, [r1, #8]
 8006e1a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e1c:	680b      	ldr	r3, [r1, #0]
 8006e1e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e20:	4b0b      	ldr	r3, [pc, #44]	@ (8006e50 <TIM_Base_SetConfig+0x8c>)
 8006e22:	4298      	cmp	r0, r3
 8006e24:	d007      	beq.n	8006e36 <TIM_Base_SetConfig+0x72>
 8006e26:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8006e2a:	4298      	cmp	r0, r3
 8006e2c:	d003      	beq.n	8006e36 <TIM_Base_SetConfig+0x72>
 8006e2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e32:	4298      	cmp	r0, r3
 8006e34:	d101      	bne.n	8006e3a <TIM_Base_SetConfig+0x76>
    TIMx->RCR = Structure->RepetitionCounter;
 8006e36:	690b      	ldr	r3, [r1, #16]
 8006e38:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e3e:	6903      	ldr	r3, [r0, #16]
 8006e40:	f013 0f01 	tst.w	r3, #1
 8006e44:	d003      	beq.n	8006e4e <TIM_Base_SetConfig+0x8a>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e46:	6903      	ldr	r3, [r0, #16]
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	6103      	str	r3, [r0, #16]
}
 8006e4e:	4770      	bx	lr
 8006e50:	40012c00 	.word	0x40012c00

08006e54 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006e54:	2800      	cmp	r0, #0
 8006e56:	f000 808c 	beq.w	8006f72 <HAL_TIM_Base_Init+0x11e>
{
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e5e:	6803      	ldr	r3, [r0, #0]
 8006e60:	4a45      	ldr	r2, [pc, #276]	@ (8006f78 <HAL_TIM_Base_Init+0x124>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d017      	beq.n	8006e96 <HAL_TIM_Base_Init+0x42>
 8006e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e6a:	d014      	beq.n	8006e96 <HAL_TIM_Base_Init+0x42>
 8006e6c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d010      	beq.n	8006e96 <HAL_TIM_Base_Init+0x42>
 8006e74:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00c      	beq.n	8006e96 <HAL_TIM_Base_Init+0x42>
 8006e7c:	f502 3298 	add.w	r2, r2, #77824	@ 0x13000
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d008      	beq.n	8006e96 <HAL_TIM_Base_Init+0x42>
 8006e84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_TIM_Base_Init+0x42>
 8006e8c:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006e90:	483a      	ldr	r0, [pc, #232]	@ (8006f7c <HAL_TIM_Base_Init+0x128>)
 8006e92:	f7fb fae9 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	b13b      	cbz	r3, 8006eaa <HAL_TIM_Base_Init+0x56>
 8006e9a:	2b10      	cmp	r3, #16
 8006e9c:	d005      	beq.n	8006eaa <HAL_TIM_Base_Init+0x56>
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_Base_Init+0x56>
 8006ea2:	2b40      	cmp	r3, #64	@ 0x40
 8006ea4:	d001      	beq.n	8006eaa <HAL_TIM_Base_Init+0x56>
 8006ea6:	2b60      	cmp	r3, #96	@ 0x60
 8006ea8:	d140      	bne.n	8006f2c <HAL_TIM_Base_Init+0xd8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	b12b      	cbz	r3, 8006eba <HAL_TIM_Base_Init+0x66>
 8006eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb2:	d002      	beq.n	8006eba <HAL_TIM_Base_Init+0x66>
 8006eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb8:	d13e      	bne.n	8006f38 <HAL_TIM_Base_Init+0xe4>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec0:	d040      	beq.n	8006f44 <HAL_TIM_Base_Init+0xf0>
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	bf8c      	ite	hi
 8006ece:	2300      	movhi	r3, #0
 8006ed0:	2301      	movls	r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d03b      	beq.n	8006f4e <HAL_TIM_Base_Init+0xfa>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006ed6:	69a3      	ldr	r3, [r4, #24]
 8006ed8:	b10b      	cbz	r3, 8006ede <HAL_TIM_Base_Init+0x8a>
 8006eda:	2b80      	cmp	r3, #128	@ 0x80
 8006edc:	d13d      	bne.n	8006f5a <HAL_TIM_Base_Init+0x106>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ede:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d03f      	beq.n	8006f66 <HAL_TIM_Base_Init+0x112>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eec:	4621      	mov	r1, r4
 8006eee:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ef2:	f7ff ff67 	bl	8006dc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006f00:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006f04:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006f08:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f14:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006f18:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006f1c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006f20:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006f28:	2000      	movs	r0, #0
}
 8006f2a:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006f2c:	f240 1117 	movw	r1, #279	@ 0x117
 8006f30:	4812      	ldr	r0, [pc, #72]	@ (8006f7c <HAL_TIM_Base_Init+0x128>)
 8006f32:	f7fb fa99 	bl	8002468 <assert_failed>
 8006f36:	e7b8      	b.n	8006eaa <HAL_TIM_Base_Init+0x56>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006f38:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006f3c:	480f      	ldr	r0, [pc, #60]	@ (8006f7c <HAL_TIM_Base_Init+0x128>)
 8006f3e:	f7fb fa93 	bl	8002468 <assert_failed>
 8006f42:	e7ba      	b.n	8006eba <HAL_TIM_Base_Init+0x66>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006f44:	68e3      	ldr	r3, [r4, #12]
 8006f46:	3b00      	subs	r3, #0
 8006f48:	bf18      	it	ne
 8006f4a:	2301      	movne	r3, #1
 8006f4c:	e7c1      	b.n	8006ed2 <HAL_TIM_Base_Init+0x7e>
 8006f4e:	f240 1119 	movw	r1, #281	@ 0x119
 8006f52:	480a      	ldr	r0, [pc, #40]	@ (8006f7c <HAL_TIM_Base_Init+0x128>)
 8006f54:	f7fb fa88 	bl	8002468 <assert_failed>
 8006f58:	e7bd      	b.n	8006ed6 <HAL_TIM_Base_Init+0x82>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f5a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006f5e:	4807      	ldr	r0, [pc, #28]	@ (8006f7c <HAL_TIM_Base_Init+0x128>)
 8006f60:	f7fb fa82 	bl	8002468 <assert_failed>
 8006f64:	e7bb      	b.n	8006ede <HAL_TIM_Base_Init+0x8a>
    htim->Lock = HAL_UNLOCKED;
 8006f66:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f003 f968 	bl	800a240 <HAL_TIM_Base_MspInit>
 8006f70:	e7b9      	b.n	8006ee6 <HAL_TIM_Base_Init+0x92>
    return HAL_ERROR;
 8006f72:	2001      	movs	r0, #1
}
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	0801d6b8 	.word	0x0801d6b8

08006f80 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f000 808c 	beq.w	800709e <HAL_TIM_PWM_Init+0x11e>
{
 8006f86:	b510      	push	{r4, lr}
 8006f88:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f8a:	6803      	ldr	r3, [r0, #0]
 8006f8c:	4a45      	ldr	r2, [pc, #276]	@ (80070a4 <HAL_TIM_PWM_Init+0x124>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d017      	beq.n	8006fc2 <HAL_TIM_PWM_Init+0x42>
 8006f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f96:	d014      	beq.n	8006fc2 <HAL_TIM_PWM_Init+0x42>
 8006f98:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d010      	beq.n	8006fc2 <HAL_TIM_PWM_Init+0x42>
 8006fa0:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00c      	beq.n	8006fc2 <HAL_TIM_PWM_Init+0x42>
 8006fa8:	f502 3298 	add.w	r2, r2, #77824	@ 0x13000
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d008      	beq.n	8006fc2 <HAL_TIM_PWM_Init+0x42>
 8006fb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_TIM_PWM_Init+0x42>
 8006fb8:	f240 5133 	movw	r1, #1331	@ 0x533
 8006fbc:	483a      	ldr	r0, [pc, #232]	@ (80070a8 <HAL_TIM_PWM_Init+0x128>)
 8006fbe:	f7fb fa53 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006fc2:	68a3      	ldr	r3, [r4, #8]
 8006fc4:	b13b      	cbz	r3, 8006fd6 <HAL_TIM_PWM_Init+0x56>
 8006fc6:	2b10      	cmp	r3, #16
 8006fc8:	d005      	beq.n	8006fd6 <HAL_TIM_PWM_Init+0x56>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_PWM_Init+0x56>
 8006fce:	2b40      	cmp	r3, #64	@ 0x40
 8006fd0:	d001      	beq.n	8006fd6 <HAL_TIM_PWM_Init+0x56>
 8006fd2:	2b60      	cmp	r3, #96	@ 0x60
 8006fd4:	d140      	bne.n	8007058 <HAL_TIM_PWM_Init+0xd8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	b12b      	cbz	r3, 8006fe6 <HAL_TIM_PWM_Init+0x66>
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fde:	d002      	beq.n	8006fe6 <HAL_TIM_PWM_Init+0x66>
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe4:	d13e      	bne.n	8007064 <HAL_TIM_PWM_Init+0xe4>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fec:	d040      	beq.n	8007070 <HAL_TIM_PWM_Init+0xf0>
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	bf8c      	ite	hi
 8006ffa:	2300      	movhi	r3, #0
 8006ffc:	2301      	movls	r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d03b      	beq.n	800707a <HAL_TIM_PWM_Init+0xfa>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007002:	69a3      	ldr	r3, [r4, #24]
 8007004:	b10b      	cbz	r3, 800700a <HAL_TIM_PWM_Init+0x8a>
 8007006:	2b80      	cmp	r3, #128	@ 0x80
 8007008:	d13d      	bne.n	8007086 <HAL_TIM_PWM_Init+0x106>
  if (htim->State == HAL_TIM_STATE_RESET)
 800700a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800700e:	2b00      	cmp	r3, #0
 8007010:	d03f      	beq.n	8007092 <HAL_TIM_PWM_Init+0x112>
  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	2302      	movs	r3, #2
 8007014:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007018:	4621      	mov	r1, r4
 800701a:	f851 0b04 	ldr.w	r0, [r1], #4
 800701e:	f7ff fed1 	bl	8006dc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007022:	2301      	movs	r3, #1
 8007024:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800702c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007030:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007034:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800703c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007044:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007048:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800704c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007050:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007054:	2000      	movs	r0, #0
}
 8007056:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007058:	f240 5134 	movw	r1, #1332	@ 0x534
 800705c:	4812      	ldr	r0, [pc, #72]	@ (80070a8 <HAL_TIM_PWM_Init+0x128>)
 800705e:	f7fb fa03 	bl	8002468 <assert_failed>
 8007062:	e7b8      	b.n	8006fd6 <HAL_TIM_PWM_Init+0x56>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007064:	f240 5135 	movw	r1, #1333	@ 0x535
 8007068:	480f      	ldr	r0, [pc, #60]	@ (80070a8 <HAL_TIM_PWM_Init+0x128>)
 800706a:	f7fb f9fd 	bl	8002468 <assert_failed>
 800706e:	e7ba      	b.n	8006fe6 <HAL_TIM_PWM_Init+0x66>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007070:	68e3      	ldr	r3, [r4, #12]
 8007072:	3b00      	subs	r3, #0
 8007074:	bf18      	it	ne
 8007076:	2301      	movne	r3, #1
 8007078:	e7c1      	b.n	8006ffe <HAL_TIM_PWM_Init+0x7e>
 800707a:	f240 5136 	movw	r1, #1334	@ 0x536
 800707e:	480a      	ldr	r0, [pc, #40]	@ (80070a8 <HAL_TIM_PWM_Init+0x128>)
 8007080:	f7fb f9f2 	bl	8002468 <assert_failed>
 8007084:	e7bd      	b.n	8007002 <HAL_TIM_PWM_Init+0x82>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007086:	f240 5137 	movw	r1, #1335	@ 0x537
 800708a:	4807      	ldr	r0, [pc, #28]	@ (80070a8 <HAL_TIM_PWM_Init+0x128>)
 800708c:	f7fb f9ec 	bl	8002468 <assert_failed>
 8007090:	e7bb      	b.n	800700a <HAL_TIM_PWM_Init+0x8a>
    htim->Lock = HAL_UNLOCKED;
 8007092:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007096:	4620      	mov	r0, r4
 8007098:	f7ff fd66 	bl	8006b68 <HAL_TIM_PWM_MspInit>
 800709c:	e7b9      	b.n	8007012 <HAL_TIM_PWM_Init+0x92>
    return HAL_ERROR;
 800709e:	2001      	movs	r0, #1
}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	0801d6b8 	.word	0x0801d6b8

080070ac <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f000 808c 	beq.w	80071ca <HAL_TIM_IC_Init+0x11e>
{
 80070b2:	b510      	push	{r4, lr}
 80070b4:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80070b6:	6803      	ldr	r3, [r0, #0]
 80070b8:	4a45      	ldr	r2, [pc, #276]	@ (80071d0 <HAL_TIM_IC_Init+0x124>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d017      	beq.n	80070ee <HAL_TIM_IC_Init+0x42>
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c2:	d014      	beq.n	80070ee <HAL_TIM_IC_Init+0x42>
 80070c4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d010      	beq.n	80070ee <HAL_TIM_IC_Init+0x42>
 80070cc:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00c      	beq.n	80070ee <HAL_TIM_IC_Init+0x42>
 80070d4:	f502 3298 	add.w	r2, r2, #77824	@ 0x13000
 80070d8:	4293      	cmp	r3, r2
 80070da:	d008      	beq.n	80070ee <HAL_TIM_IC_Init+0x42>
 80070dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_TIM_IC_Init+0x42>
 80070e4:	f240 71cf 	movw	r1, #1999	@ 0x7cf
 80070e8:	483a      	ldr	r0, [pc, #232]	@ (80071d4 <HAL_TIM_IC_Init+0x128>)
 80070ea:	f7fb f9bd 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	b13b      	cbz	r3, 8007102 <HAL_TIM_IC_Init+0x56>
 80070f2:	2b10      	cmp	r3, #16
 80070f4:	d005      	beq.n	8007102 <HAL_TIM_IC_Init+0x56>
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IC_Init+0x56>
 80070fa:	2b40      	cmp	r3, #64	@ 0x40
 80070fc:	d001      	beq.n	8007102 <HAL_TIM_IC_Init+0x56>
 80070fe:	2b60      	cmp	r3, #96	@ 0x60
 8007100:	d140      	bne.n	8007184 <HAL_TIM_IC_Init+0xd8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	b12b      	cbz	r3, 8007112 <HAL_TIM_IC_Init+0x66>
 8007106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710a:	d002      	beq.n	8007112 <HAL_TIM_IC_Init+0x66>
 800710c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007110:	d13e      	bne.n	8007190 <HAL_TIM_IC_Init+0xe4>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007118:	d040      	beq.n	800719c <HAL_TIM_IC_Init+0xf0>
 800711a:	68e3      	ldr	r3, [r4, #12]
 800711c:	3b01      	subs	r3, #1
 800711e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007122:	4293      	cmp	r3, r2
 8007124:	bf8c      	ite	hi
 8007126:	2300      	movhi	r3, #0
 8007128:	2301      	movls	r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d03b      	beq.n	80071a6 <HAL_TIM_IC_Init+0xfa>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800712e:	69a3      	ldr	r3, [r4, #24]
 8007130:	b10b      	cbz	r3, 8007136 <HAL_TIM_IC_Init+0x8a>
 8007132:	2b80      	cmp	r3, #128	@ 0x80
 8007134:	d13d      	bne.n	80071b2 <HAL_TIM_IC_Init+0x106>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800713a:	2b00      	cmp	r3, #0
 800713c:	d03f      	beq.n	80071be <HAL_TIM_IC_Init+0x112>
  htim->State = HAL_TIM_STATE_BUSY;
 800713e:	2302      	movs	r3, #2
 8007140:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007144:	4621      	mov	r1, r4
 8007146:	f851 0b04 	ldr.w	r0, [r1], #4
 800714a:	f7ff fe3b 	bl	8006dc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800714e:	2301      	movs	r3, #1
 8007150:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007154:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007158:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800715c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007160:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800716c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007170:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007174:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007178:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800717c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007180:	2000      	movs	r0, #0
}
 8007182:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007184:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007188:	4812      	ldr	r0, [pc, #72]	@ (80071d4 <HAL_TIM_IC_Init+0x128>)
 800718a:	f7fb f96d 	bl	8002468 <assert_failed>
 800718e:	e7b8      	b.n	8007102 <HAL_TIM_IC_Init+0x56>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007190:	f240 71d1 	movw	r1, #2001	@ 0x7d1
 8007194:	480f      	ldr	r0, [pc, #60]	@ (80071d4 <HAL_TIM_IC_Init+0x128>)
 8007196:	f7fb f967 	bl	8002468 <assert_failed>
 800719a:	e7ba      	b.n	8007112 <HAL_TIM_IC_Init+0x66>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800719c:	68e3      	ldr	r3, [r4, #12]
 800719e:	3b00      	subs	r3, #0
 80071a0:	bf18      	it	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	e7c1      	b.n	800712a <HAL_TIM_IC_Init+0x7e>
 80071a6:	f240 71d2 	movw	r1, #2002	@ 0x7d2
 80071aa:	480a      	ldr	r0, [pc, #40]	@ (80071d4 <HAL_TIM_IC_Init+0x128>)
 80071ac:	f7fb f95c 	bl	8002468 <assert_failed>
 80071b0:	e7bd      	b.n	800712e <HAL_TIM_IC_Init+0x82>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80071b2:	f240 71d3 	movw	r1, #2003	@ 0x7d3
 80071b6:	4807      	ldr	r0, [pc, #28]	@ (80071d4 <HAL_TIM_IC_Init+0x128>)
 80071b8:	f7fb f956 	bl	8002468 <assert_failed>
 80071bc:	e7bb      	b.n	8007136 <HAL_TIM_IC_Init+0x8a>
    htim->Lock = HAL_UNLOCKED;
 80071be:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff fcd1 	bl	8006b6a <HAL_TIM_IC_MspInit>
 80071c8:	e7b9      	b.n	800713e <HAL_TIM_IC_Init+0x92>
    return HAL_ERROR;
 80071ca:	2001      	movs	r0, #1
}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	0801d6b8 	.word	0x0801d6b8

080071d8 <TIM_OC2_SetConfig>:
{
 80071d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 80071e0:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e2:	6a03      	ldr	r3, [r0, #32]
 80071e4:	f023 0310 	bic.w	r3, r3, #16
 80071e8:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80071ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80071ee:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071f4:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f8:	680a      	ldr	r2, [r1, #0]
 80071fa:	ea43 2702 	orr.w	r7, r3, r2, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80071fe:	f026 0620 	bic.w	r6, r6, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007202:	688b      	ldr	r3, [r1, #8]
 8007204:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007208:	4b20      	ldr	r3, [pc, #128]	@ (800728c <TIM_OC2_SetConfig+0xb4>)
 800720a:	4298      	cmp	r0, r3
 800720c:	d007      	beq.n	800721e <TIM_OC2_SetConfig+0x46>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720e:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 8007212:	4298      	cmp	r0, r3
 8007214:	d00e      	beq.n	8007234 <TIM_OC2_SetConfig+0x5c>
 8007216:	4b1e      	ldr	r3, [pc, #120]	@ (8007290 <TIM_OC2_SetConfig+0xb8>)
 8007218:	4298      	cmp	r0, r3
 800721a:	d11d      	bne.n	8007258 <TIM_OC2_SetConfig+0x80>
 800721c:	e00a      	b.n	8007234 <TIM_OC2_SetConfig+0x5c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800721e:	68cb      	ldr	r3, [r1, #12]
 8007220:	b10b      	cbz	r3, 8007226 <TIM_OC2_SetConfig+0x4e>
 8007222:	2b08      	cmp	r3, #8
 8007224:	d120      	bne.n	8007268 <TIM_OC2_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC2NP;
 8007226:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800722a:	68eb      	ldr	r3, [r5, #12]
 800722c:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007230:	f026 0640 	bic.w	r6, r6, #64	@ 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007234:	69ab      	ldr	r3, [r5, #24]
 8007236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723a:	d000      	beq.n	800723e <TIM_OC2_SetConfig+0x66>
 800723c:	b9d3      	cbnz	r3, 8007274 <TIM_OC2_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800723e:	696b      	ldr	r3, [r5, #20]
 8007240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007244:	d000      	beq.n	8007248 <TIM_OC2_SetConfig+0x70>
 8007246:	b9db      	cbnz	r3, 8007280 <TIM_OC2_SetConfig+0xa8>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007248:	f428 6840 	bic.w	r8, r8, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800724c:	696b      	ldr	r3, [r5, #20]
 800724e:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007252:	69ab      	ldr	r3, [r5, #24]
 8007254:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CR2 = tmpcr2;
 8007258:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800725c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800725e:	686b      	ldr	r3, [r5, #4]
 8007260:	63a3      	str	r3, [r4, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8007262:	6226      	str	r6, [r4, #32]
}
 8007264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007268:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800726c:	4809      	ldr	r0, [pc, #36]	@ (8007294 <TIM_OC2_SetConfig+0xbc>)
 800726e:	f7fb f8fb 	bl	8002468 <assert_failed>
 8007272:	e7d8      	b.n	8007226 <TIM_OC2_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007274:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 8007278:	4806      	ldr	r0, [pc, #24]	@ (8007294 <TIM_OC2_SetConfig+0xbc>)
 800727a:	f7fb f8f5 	bl	8002468 <assert_failed>
 800727e:	e7de      	b.n	800723e <TIM_OC2_SetConfig+0x66>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007280:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 8007284:	4803      	ldr	r0, [pc, #12]	@ (8007294 <TIM_OC2_SetConfig+0xbc>)
 8007286:	f7fb f8ef 	bl	8002468 <assert_failed>
 800728a:	e7dd      	b.n	8007248 <TIM_OC2_SetConfig+0x70>
 800728c:	40012c00 	.word	0x40012c00
 8007290:	40014400 	.word	0x40014400
 8007294:	0801d6b8 	.word	0x0801d6b8

08007298 <HAL_TIM_PWM_ConfigChannel>:
{
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4604      	mov	r4, r0
 800729c:	460e      	mov	r6, r1
 800729e:	4615      	mov	r5, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 80072a0:	2a14      	cmp	r2, #20
 80072a2:	d83f      	bhi.n	8007324 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80072a4:	4b9c      	ldr	r3, [pc, #624]	@ (8007518 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80072a6:	40d3      	lsrs	r3, r2
 80072a8:	f013 0f01 	tst.w	r3, #1
 80072ac:	d03c      	beq.n	8007328 <HAL_TIM_PWM_ConfigChannel+0x90>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80072ae:	6833      	ldr	r3, [r6, #0]
 80072b0:	4a9a      	ldr	r2, [pc, #616]	@ (800751c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00c      	beq.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80072b6:	d83d      	bhi.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x9c>
 80072b8:	2b70      	cmp	r3, #112	@ 0x70
 80072ba:	d009      	beq.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80072bc:	3a10      	subs	r2, #16
 80072be:	4293      	cmp	r3, r2
 80072c0:	d006      	beq.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80072c2:	2b60      	cmp	r3, #96	@ 0x60
 80072c4:	d004      	beq.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80072c6:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 80072ca:	4895      	ldr	r0, [pc, #596]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80072cc:	f7fb f8cc 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80072d0:	68b3      	ldr	r3, [r6, #8]
 80072d2:	b10b      	cbz	r3, 80072d8 <HAL_TIM_PWM_ConfigChannel+0x40>
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d134      	bne.n	8007342 <HAL_TIM_PWM_ConfigChannel+0xaa>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80072d8:	6933      	ldr	r3, [r6, #16]
 80072da:	b10b      	cbz	r3, 80072e0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d136      	bne.n	800734e <HAL_TIM_PWM_ConfigChannel+0xb6>
  __HAL_LOCK(htim);
 80072e0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	f000 8126 	beq.w	8007536 <HAL_TIM_PWM_ConfigChannel+0x29e>
 80072ea:	2301      	movs	r3, #1
 80072ec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 80072f0:	2d14      	cmp	r5, #20
 80072f2:	f200 811b 	bhi.w	800752c <HAL_TIM_PWM_ConfigChannel+0x294>
 80072f6:	e8df f015 	tbh	[pc, r5, lsl #1]
 80072fa:	0030      	.short	0x0030
 80072fc:	01190119 	.word	0x01190119
 8007300:	005d0119 	.word	0x005d0119
 8007304:	01190119 	.word	0x01190119
 8007308:	00870119 	.word	0x00870119
 800730c:	01190119 	.word	0x01190119
 8007310:	00ac0119 	.word	0x00ac0119
 8007314:	01190119 	.word	0x01190119
 8007318:	00d20119 	.word	0x00d20119
 800731c:	01190119 	.word	0x01190119
 8007320:	00f00119 	.word	0x00f00119
 8007324:	2a3c      	cmp	r2, #60	@ 0x3c
 8007326:	d0c2      	beq.n	80072ae <HAL_TIM_PWM_ConfigChannel+0x16>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007328:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800732c:	487c      	ldr	r0, [pc, #496]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800732e:	f7fb f89b 	bl	8002468 <assert_failed>
 8007332:	e7bc      	b.n	80072ae <HAL_TIM_PWM_ConfigChannel+0x16>
 8007334:	4a7b      	ldr	r2, [pc, #492]	@ (8007524 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d0ca      	beq.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800733a:	3210      	adds	r2, #16
 800733c:	4293      	cmp	r3, r2
 800733e:	d1c2      	bne.n	80072c6 <HAL_TIM_PWM_ConfigChannel+0x2e>
 8007340:	e7c6      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x38>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007342:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8007346:	4876      	ldr	r0, [pc, #472]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007348:	f7fb f88e 	bl	8002468 <assert_failed>
 800734c:	e7c4      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x40>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800734e:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8007352:	4873      	ldr	r0, [pc, #460]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007354:	f7fb f888 	bl	8002468 <assert_failed>
 8007358:	e7c2      	b.n	80072e0 <HAL_TIM_PWM_ConfigChannel+0x48>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	4a72      	ldr	r2, [pc, #456]	@ (8007528 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8007362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007366:	d010      	beq.n	800738a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8007368:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800736c:	4293      	cmp	r3, r2
 800736e:	d00c      	beq.n	800738a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8007370:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8007374:	4293      	cmp	r3, r2
 8007376:	d008      	beq.n	800738a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8007378:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8007380:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8007384:	4866      	ldr	r0, [pc, #408]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007386:	f7fb f86f 	bl	8002468 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800738a:	4631      	mov	r1, r6
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	f7ff fa8d 	bl	80068ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	6993      	ldr	r3, [r2, #24]
 8007396:	f043 0308 	orr.w	r3, r3, #8
 800739a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	6993      	ldr	r3, [r2, #24]
 80073a0:	f023 0304 	bic.w	r3, r3, #4
 80073a4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	6993      	ldr	r3, [r2, #24]
 80073aa:	6931      	ldr	r1, [r6, #16]
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80073b0:	2000      	movs	r0, #0
      break;
 80073b2:	e0bc      	b.n	800752e <HAL_TIM_PWM_ConfigChannel+0x296>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	4a5c      	ldr	r2, [pc, #368]	@ (8007528 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00f      	beq.n	80073dc <HAL_TIM_PWM_ConfigChannel+0x144>
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c0:	d00c      	beq.n	80073dc <HAL_TIM_PWM_ConfigChannel+0x144>
 80073c2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d008      	beq.n	80073dc <HAL_TIM_PWM_ConfigChannel+0x144>
 80073ca:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIM_PWM_ConfigChannel+0x144>
 80073d2:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 80073d6:	4852      	ldr	r0, [pc, #328]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80073d8:	f7fb f846 	bl	8002468 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073dc:	4631      	mov	r1, r6
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	f7ff fefa 	bl	80071d8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	6993      	ldr	r3, [r2, #24]
 80073e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80073ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	6993      	ldr	r3, [r2, #24]
 80073f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	6993      	ldr	r3, [r2, #24]
 80073fc:	6931      	ldr	r1, [r6, #16]
 80073fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007402:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007404:	2000      	movs	r0, #0
      break;
 8007406:	e092      	b.n	800752e <HAL_TIM_PWM_ConfigChannel+0x296>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	4a47      	ldr	r2, [pc, #284]	@ (8007528 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00b      	beq.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x190>
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007414:	d008      	beq.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x190>
 8007416:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800741a:	4293      	cmp	r3, r2
 800741c:	d004      	beq.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x190>
 800741e:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8007422:	483f      	ldr	r0, [pc, #252]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007424:	f7fb f820 	bl	8002468 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007428:	4631      	mov	r1, r6
 800742a:	6820      	ldr	r0, [r4, #0]
 800742c:	f7ff faa2 	bl	8006974 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007430:	6822      	ldr	r2, [r4, #0]
 8007432:	69d3      	ldr	r3, [r2, #28]
 8007434:	f043 0308 	orr.w	r3, r3, #8
 8007438:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800743a:	6822      	ldr	r2, [r4, #0]
 800743c:	69d3      	ldr	r3, [r2, #28]
 800743e:	f023 0304 	bic.w	r3, r3, #4
 8007442:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	69d3      	ldr	r3, [r2, #28]
 8007448:	6931      	ldr	r1, [r6, #16]
 800744a:	430b      	orrs	r3, r1
 800744c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2000      	movs	r0, #0
      break;
 8007450:	e06d      	b.n	800752e <HAL_TIM_PWM_ConfigChannel+0x296>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	4a34      	ldr	r2, [pc, #208]	@ (8007528 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00b      	beq.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800745e:	d008      	beq.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8007460:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007464:	4293      	cmp	r3, r2
 8007466:	d004      	beq.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8007468:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800746c:	482c      	ldr	r0, [pc, #176]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800746e:	f7fa fffb 	bl	8002468 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007472:	4631      	mov	r1, r6
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	f7ff fadd 	bl	8006a34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800747a:	6822      	ldr	r2, [r4, #0]
 800747c:	69d3      	ldr	r3, [r2, #28]
 800747e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007482:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007484:	6822      	ldr	r2, [r4, #0]
 8007486:	69d3      	ldr	r3, [r2, #28]
 8007488:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800748c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	69d3      	ldr	r3, [r2, #28]
 8007492:	6931      	ldr	r1, [r6, #16]
 8007494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007498:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800749a:	2000      	movs	r0, #0
      break;
 800749c:	e047      	b.n	800752e <HAL_TIM_PWM_ConfigChannel+0x296>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800749e:	6822      	ldr	r2, [r4, #0]
 80074a0:	4b21      	ldr	r3, [pc, #132]	@ (8007528 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d004      	beq.n	80074b0 <HAL_TIM_PWM_ConfigChannel+0x218>
 80074a6:	f241 1104 	movw	r1, #4356	@ 0x1104
 80074aa:	481d      	ldr	r0, [pc, #116]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80074ac:	f7fa ffdc 	bl	8002468 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074b0:	4631      	mov	r1, r6
 80074b2:	6820      	ldr	r0, [r4, #0]
 80074b4:	f7ff f920 	bl	80066f8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80074bc:	f043 0308 	orr.w	r3, r3, #8
 80074c0:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80074c6:	f023 0304 	bic.w	r3, r3, #4
 80074ca:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80074d0:	6931      	ldr	r1, [r6, #16]
 80074d2:	430b      	orrs	r3, r1
 80074d4:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80074d6:	2000      	movs	r0, #0
      break;
 80074d8:	e029      	b.n	800752e <HAL_TIM_PWM_ConfigChannel+0x296>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80074de:	429a      	cmp	r2, r3
 80074e0:	d004      	beq.n	80074ec <HAL_TIM_PWM_ConfigChannel+0x254>
 80074e2:	f241 1115 	movw	r1, #4373	@ 0x1115
 80074e6:	480e      	ldr	r0, [pc, #56]	@ (8007520 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80074e8:	f7fa ffbe 	bl	8002468 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074ec:	4631      	mov	r1, r6
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	f7ff f92e 	bl	8006750 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074f4:	6822      	ldr	r2, [r4, #0]
 80074f6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80074f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80074fc:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007502:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007506:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800750c:	6931      	ldr	r1, [r6, #16]
 800750e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007512:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007514:	2000      	movs	r0, #0
      break;
 8007516:	e00a      	b.n	800752e <HAL_TIM_PWM_ConfigChannel+0x296>
 8007518:	00111111 	.word	0x00111111
 800751c:	00010050 	.word	0x00010050
 8007520:	0801d6b8 	.word	0x0801d6b8
 8007524:	00010060 	.word	0x00010060
 8007528:	40012c00 	.word	0x40012c00
  switch (Channel)
 800752c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800752e:	2300      	movs	r3, #0
 8007530:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007534:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8007536:	2002      	movs	r0, #2
 8007538:	e7fc      	b.n	8007534 <HAL_TIM_PWM_ConfigChannel+0x29c>
 800753a:	bf00      	nop

0800753c <TIM_TI1_SetConfig>:
{
 800753c:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800753e:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007540:	6a04      	ldr	r4, [r0, #32]
 8007542:	f024 0401 	bic.w	r4, r4, #1
 8007546:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007548:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800754a:	4e11      	ldr	r6, [pc, #68]	@ (8007590 <TIM_TI1_SetConfig+0x54>)
 800754c:	42b0      	cmp	r0, r6
 800754e:	d00d      	beq.n	800756c <TIM_TI1_SetConfig+0x30>
 8007550:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007554:	d00a      	beq.n	800756c <TIM_TI1_SetConfig+0x30>
 8007556:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800755a:	42b0      	cmp	r0, r6
 800755c:	d006      	beq.n	800756c <TIM_TI1_SetConfig+0x30>
 800755e:	f506 369e 	add.w	r6, r6, #80896	@ 0x13c00
 8007562:	42b0      	cmp	r0, r6
 8007564:	d002      	beq.n	800756c <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007566:	f044 0201 	orr.w	r2, r4, #1
 800756a:	e002      	b.n	8007572 <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800756c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8007570:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007572:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	b2db      	uxtb	r3, r3
 800757a:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800757c:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007580:	f001 010a 	and.w	r1, r1, #10
 8007584:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8007586:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007588:	6201      	str	r1, [r0, #32]
}
 800758a:	bc70      	pop	{r4, r5, r6}
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40012c00 	.word	0x40012c00

08007594 <HAL_TIM_IC_ConfigChannel>:
{
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	4605      	mov	r5, r0
 8007598:	460c      	mov	r4, r1
 800759a:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800759c:	6803      	ldr	r3, [r0, #0]
 800759e:	4a70      	ldr	r2, [pc, #448]	@ (8007760 <HAL_TIM_IC_ConfigChannel+0x1cc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d013      	beq.n	80075cc <HAL_TIM_IC_ConfigChannel+0x38>
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a8:	d010      	beq.n	80075cc <HAL_TIM_IC_ConfigChannel+0x38>
 80075aa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00c      	beq.n	80075cc <HAL_TIM_IC_ConfigChannel+0x38>
 80075b2:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d008      	beq.n	80075cc <HAL_TIM_IC_ConfigChannel+0x38>
 80075ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075be:	4293      	cmp	r3, r2
 80075c0:	d004      	beq.n	80075cc <HAL_TIM_IC_ConfigChannel+0x38>
 80075c2:	f241 014c 	movw	r1, #4172	@ 0x104c
 80075c6:	4867      	ldr	r0, [pc, #412]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 80075c8:	f7fa ff4e 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	b11b      	cbz	r3, 80075d8 <HAL_TIM_IC_ConfigChannel+0x44>
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d001      	beq.n	80075d8 <HAL_TIM_IC_ConfigChannel+0x44>
 80075d4:	2b0a      	cmp	r3, #10
 80075d6:	d126      	bne.n	8007626 <HAL_TIM_IC_ConfigChannel+0x92>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80075d8:	6863      	ldr	r3, [r4, #4]
 80075da:	3b01      	subs	r3, #1
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d828      	bhi.n	8007632 <HAL_TIM_IC_ConfigChannel+0x9e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80075e0:	68a3      	ldr	r3, [r4, #8]
 80075e2:	b14b      	cbz	r3, 80075f8 <HAL_TIM_IC_ConfigChannel+0x64>
 80075e4:	3b04      	subs	r3, #4
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d829      	bhi.n	800763e <HAL_TIM_IC_ConfigChannel+0xaa>
 80075ea:	f240 1211 	movw	r2, #273	@ 0x111
 80075ee:	fa22 f303 	lsr.w	r3, r2, r3
 80075f2:	f013 0f01 	tst.w	r3, #1
 80075f6:	d022      	beq.n	800763e <HAL_TIM_IC_ConfigChannel+0xaa>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80075f8:	68e3      	ldr	r3, [r4, #12]
 80075fa:	2b0f      	cmp	r3, #15
 80075fc:	d825      	bhi.n	800764a <HAL_TIM_IC_ConfigChannel+0xb6>
  __HAL_LOCK(htim);
 80075fe:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8007602:	2b01      	cmp	r3, #1
 8007604:	f000 80aa 	beq.w	800775c <HAL_TIM_IC_ConfigChannel+0x1c8>
 8007608:	2301      	movs	r3, #1
 800760a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 800760e:	2e0c      	cmp	r6, #12
 8007610:	f200 809f 	bhi.w	8007752 <HAL_TIM_IC_ConfigChannel+0x1be>
 8007614:	e8df f006 	tbb	[pc, r6]
 8007618:	9d9d9d1f 	.word	0x9d9d9d1f
 800761c:	9d9d9d31 	.word	0x9d9d9d31
 8007620:	9d9d9d58 	.word	0x9d9d9d58
 8007624:	7a          	.byte	0x7a
 8007625:	00          	.byte	0x00
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8007626:	f241 014d 	movw	r1, #4173	@ 0x104d
 800762a:	484e      	ldr	r0, [pc, #312]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 800762c:	f7fa ff1c 	bl	8002468 <assert_failed>
 8007630:	e7d2      	b.n	80075d8 <HAL_TIM_IC_ConfigChannel+0x44>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8007632:	f241 014e 	movw	r1, #4174	@ 0x104e
 8007636:	484b      	ldr	r0, [pc, #300]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 8007638:	f7fa ff16 	bl	8002468 <assert_failed>
 800763c:	e7d0      	b.n	80075e0 <HAL_TIM_IC_ConfigChannel+0x4c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800763e:	f241 014f 	movw	r1, #4175	@ 0x104f
 8007642:	4848      	ldr	r0, [pc, #288]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 8007644:	f7fa ff10 	bl	8002468 <assert_failed>
 8007648:	e7d6      	b.n	80075f8 <HAL_TIM_IC_ConfigChannel+0x64>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800764a:	f241 0150 	movw	r1, #4176	@ 0x1050
 800764e:	4845      	ldr	r0, [pc, #276]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 8007650:	f7fa ff0a 	bl	8002468 <assert_failed>
 8007654:	e7d3      	b.n	80075fe <HAL_TIM_IC_ConfigChannel+0x6a>
    TIM_TI1_SetConfig(htim->Instance,
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	6862      	ldr	r2, [r4, #4]
 800765a:	6821      	ldr	r1, [r4, #0]
 800765c:	6828      	ldr	r0, [r5, #0]
 800765e:	f7ff ff6d 	bl	800753c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007662:	682a      	ldr	r2, [r5, #0]
 8007664:	6993      	ldr	r3, [r2, #24]
 8007666:	f023 030c 	bic.w	r3, r3, #12
 800766a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800766c:	682a      	ldr	r2, [r5, #0]
 800766e:	6993      	ldr	r3, [r2, #24]
 8007670:	68a1      	ldr	r1, [r4, #8]
 8007672:	430b      	orrs	r3, r1
 8007674:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007676:	2000      	movs	r0, #0
 8007678:	e06c      	b.n	8007754 <HAL_TIM_IC_ConfigChannel+0x1c0>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	4a38      	ldr	r2, [pc, #224]	@ (8007760 <HAL_TIM_IC_ConfigChannel+0x1cc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00f      	beq.n	80076a2 <HAL_TIM_IC_ConfigChannel+0x10e>
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007686:	d00c      	beq.n	80076a2 <HAL_TIM_IC_ConfigChannel+0x10e>
 8007688:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800768c:	4293      	cmp	r3, r2
 800768e:	d008      	beq.n	80076a2 <HAL_TIM_IC_ConfigChannel+0x10e>
 8007690:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8007694:	4293      	cmp	r3, r2
 8007696:	d004      	beq.n	80076a2 <HAL_TIM_IC_ConfigChannel+0x10e>
 8007698:	f241 0166 	movw	r1, #4198	@ 0x1066
 800769c:	4831      	ldr	r0, [pc, #196]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 800769e:	f7fa fee3 	bl	8002468 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 80076a2:	68e3      	ldr	r3, [r4, #12]
 80076a4:	6862      	ldr	r2, [r4, #4]
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	6828      	ldr	r0, [r5, #0]
 80076aa:	f7ff f892 	bl	80067d2 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076ae:	682a      	ldr	r2, [r5, #0]
 80076b0:	6993      	ldr	r3, [r2, #24]
 80076b2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80076b6:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076b8:	682a      	ldr	r2, [r5, #0]
 80076ba:	6993      	ldr	r3, [r2, #24]
 80076bc:	68a1      	ldr	r1, [r4, #8]
 80076be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076c2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80076c4:	2000      	movs	r0, #0
 80076c6:	e045      	b.n	8007754 <HAL_TIM_IC_ConfigChannel+0x1c0>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	4a25      	ldr	r2, [pc, #148]	@ (8007760 <HAL_TIM_IC_ConfigChannel+0x1cc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <HAL_TIM_IC_ConfigChannel+0x154>
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d008      	beq.n	80076e8 <HAL_TIM_IC_ConfigChannel+0x154>
 80076d6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_IC_ConfigChannel+0x154>
 80076de:	f241 0176 	movw	r1, #4214	@ 0x1076
 80076e2:	4820      	ldr	r0, [pc, #128]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 80076e4:	f7fa fec0 	bl	8002468 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 80076e8:	68e3      	ldr	r3, [r4, #12]
 80076ea:	6862      	ldr	r2, [r4, #4]
 80076ec:	6821      	ldr	r1, [r4, #0]
 80076ee:	6828      	ldr	r0, [r5, #0]
 80076f0:	f7ff f89e 	bl	8006830 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076f4:	682a      	ldr	r2, [r5, #0]
 80076f6:	69d3      	ldr	r3, [r2, #28]
 80076f8:	f023 030c 	bic.w	r3, r3, #12
 80076fc:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076fe:	682a      	ldr	r2, [r5, #0]
 8007700:	69d3      	ldr	r3, [r2, #28]
 8007702:	68a1      	ldr	r1, [r4, #8]
 8007704:	430b      	orrs	r3, r1
 8007706:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007708:	2000      	movs	r0, #0
 800770a:	e023      	b.n	8007754 <HAL_TIM_IC_ConfigChannel+0x1c0>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	4a14      	ldr	r2, [pc, #80]	@ (8007760 <HAL_TIM_IC_ConfigChannel+0x1cc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <HAL_TIM_IC_ConfigChannel+0x198>
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007718:	d008      	beq.n	800772c <HAL_TIM_IC_ConfigChannel+0x198>
 800771a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_TIM_IC_ConfigChannel+0x198>
 8007722:	f241 0186 	movw	r1, #4230	@ 0x1086
 8007726:	480f      	ldr	r0, [pc, #60]	@ (8007764 <HAL_TIM_IC_ConfigChannel+0x1d0>)
 8007728:	f7fa fe9e 	bl	8002468 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 800772c:	68e3      	ldr	r3, [r4, #12]
 800772e:	6862      	ldr	r2, [r4, #4]
 8007730:	6821      	ldr	r1, [r4, #0]
 8007732:	6828      	ldr	r0, [r5, #0]
 8007734:	f7ff f897 	bl	8006866 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007738:	682a      	ldr	r2, [r5, #0]
 800773a:	69d3      	ldr	r3, [r2, #28]
 800773c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007740:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007742:	682a      	ldr	r2, [r5, #0]
 8007744:	69d3      	ldr	r3, [r2, #28]
 8007746:	68a1      	ldr	r1, [r4, #8]
 8007748:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800774c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800774e:	2000      	movs	r0, #0
 8007750:	e000      	b.n	8007754 <HAL_TIM_IC_ConfigChannel+0x1c0>
  __HAL_LOCK(htim);
 8007752:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007754:	2300      	movs	r3, #0
 8007756:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 800775a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800775c:	2002      	movs	r0, #2
 800775e:	e7fc      	b.n	800775a <HAL_TIM_IC_ConfigChannel+0x1c6>
 8007760:	40012c00 	.word	0x40012c00
 8007764:	0801d6b8 	.word	0x0801d6b8

08007768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007768:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800776a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800776c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007770:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007774:	430a      	orrs	r2, r1
 8007776:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800777a:	6082      	str	r2, [r0, #8]
}
 800777c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007780:	4770      	bx	lr
	...

08007784 <HAL_TIM_ConfigClockSource>:
{
 8007784:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007786:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	f000 81da 	beq.w	8007b44 <HAL_TIM_ConfigClockSource+0x3c0>
 8007790:	4604      	mov	r4, r0
 8007792:	460d      	mov	r5, r1
 8007794:	2301      	movs	r3, #1
 8007796:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800779a:	2302      	movs	r3, #2
 800779c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80077a0:	680b      	ldr	r3, [r1, #0]
 80077a2:	2b70      	cmp	r3, #112	@ 0x70
 80077a4:	d019      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077a6:	d812      	bhi.n	80077ce <HAL_TIM_ConfigClockSource+0x4a>
 80077a8:	2b50      	cmp	r3, #80	@ 0x50
 80077aa:	d016      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077ac:	2b60      	cmp	r3, #96	@ 0x60
 80077ae:	d014      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077b0:	2b40      	cmp	r3, #64	@ 0x40
 80077b2:	d012      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077b4:	b18b      	cbz	r3, 80077da <HAL_TIM_ConfigClockSource+0x56>
 80077b6:	2b10      	cmp	r3, #16
 80077b8:	d00f      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d00d      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077be:	2b30      	cmp	r3, #48	@ 0x30
 80077c0:	d00b      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077c2:	f241 5156 	movw	r1, #5462	@ 0x1556
 80077c6:	489f      	ldr	r0, [pc, #636]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 80077c8:	f7fa fe4e 	bl	8002468 <assert_failed>
 80077cc:	e005      	b.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d2:	d002      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x56>
 80077d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d8:	d1ec      	bne.n	80077b4 <HAL_TIM_ConfigClockSource+0x30>
  tmpsmcr = htim->Instance->SMCR;
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077de:	4b9a      	ldr	r3, [pc, #616]	@ (8007a48 <HAL_TIM_ConfigClockSource+0x2c4>)
 80077e0:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 80077e2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	2b60      	cmp	r3, #96	@ 0x60
 80077e8:	f000 8132 	beq.w	8007a50 <HAL_TIM_ConfigClockSource+0x2cc>
 80077ec:	d85a      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x120>
 80077ee:	2b40      	cmp	r3, #64	@ 0x40
 80077f0:	f000 8165 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x33a>
 80077f4:	d825      	bhi.n	8007842 <HAL_TIM_ConfigClockSource+0xbe>
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0x7e>
 80077fa:	d81e      	bhi.n	800783a <HAL_TIM_ConfigClockSource+0xb6>
 80077fc:	b10b      	cbz	r3, 8007802 <HAL_TIM_ConfigClockSource+0x7e>
 80077fe:	2b10      	cmp	r3, #16
 8007800:	d119      	bne.n	8007836 <HAL_TIM_ConfigClockSource+0xb2>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	4a91      	ldr	r2, [pc, #580]	@ (8007a4c <HAL_TIM_ConfigClockSource+0x2c8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <HAL_TIM_ConfigClockSource+0xa6>
 800780a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780e:	d00c      	beq.n	800782a <HAL_TIM_ConfigClockSource+0xa6>
 8007810:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007814:	4293      	cmp	r3, r2
 8007816:	d008      	beq.n	800782a <HAL_TIM_ConfigClockSource+0xa6>
 8007818:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_TIM_ConfigClockSource+0xa6>
 8007820:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 8007824:	4887      	ldr	r0, [pc, #540]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007826:	f7fa fe1f 	bl	8002468 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800782a:	6829      	ldr	r1, [r5, #0]
 800782c:	6820      	ldr	r0, [r4, #0]
 800782e:	f7ff f835 	bl	800689c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007832:	2000      	movs	r0, #0
      break;
 8007834:	e075      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 8007836:	2001      	movs	r0, #1
 8007838:	e073      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 800783a:	2b30      	cmp	r3, #48	@ 0x30
 800783c:	d0e1      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0x7e>
 800783e:	2001      	movs	r0, #1
 8007840:	e06f      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 8007842:	2b50      	cmp	r3, #80	@ 0x50
 8007844:	d12c      	bne.n	80078a0 <HAL_TIM_ConfigClockSource+0x11c>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	4a80      	ldr	r2, [pc, #512]	@ (8007a4c <HAL_TIM_ConfigClockSource+0x2c8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00f      	beq.n	800786e <HAL_TIM_ConfigClockSource+0xea>
 800784e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007852:	d00c      	beq.n	800786e <HAL_TIM_ConfigClockSource+0xea>
 8007854:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007858:	4293      	cmp	r3, r2
 800785a:	d008      	beq.n	800786e <HAL_TIM_ConfigClockSource+0xea>
 800785c:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_TIM_ConfigClockSource+0xea>
 8007864:	f241 5195 	movw	r1, #5525	@ 0x1595
 8007868:	4876      	ldr	r0, [pc, #472]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 800786a:	f7fa fdfd 	bl	8002468 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800786e:	686b      	ldr	r3, [r5, #4]
 8007870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007874:	d005      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0xfe>
 8007876:	b123      	cbz	r3, 8007882 <HAL_TIM_ConfigClockSource+0xfe>
 8007878:	2b02      	cmp	r3, #2
 800787a:	d002      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0xfe>
 800787c:	2b0a      	cmp	r3, #10
 800787e:	f040 80d5 	bne.w	8007a2c <HAL_TIM_ConfigClockSource+0x2a8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007882:	68eb      	ldr	r3, [r5, #12]
 8007884:	2b0f      	cmp	r3, #15
 8007886:	f200 80d7 	bhi.w	8007a38 <HAL_TIM_ConfigClockSource+0x2b4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800788a:	68ea      	ldr	r2, [r5, #12]
 800788c:	6869      	ldr	r1, [r5, #4]
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	f7fe ff8c 	bl	80067ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007894:	2150      	movs	r1, #80	@ 0x50
 8007896:	6820      	ldr	r0, [r4, #0]
 8007898:	f7ff f800 	bl	800689c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800789c:	2000      	movs	r0, #0
      break;
 800789e:	e040      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 80078a0:	2001      	movs	r0, #1
 80078a2:	e03e      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 80078a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078a8:	d044      	beq.n	8007934 <HAL_TIM_ConfigClockSource+0x1b0>
 80078aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ae:	d077      	beq.n	80079a0 <HAL_TIM_ConfigClockSource+0x21c>
 80078b0:	2b70      	cmp	r3, #112	@ 0x70
 80078b2:	d13d      	bne.n	8007930 <HAL_TIM_ConfigClockSource+0x1ac>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	4a65      	ldr	r2, [pc, #404]	@ (8007a4c <HAL_TIM_ConfigClockSource+0x2c8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00f      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x158>
 80078bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c0:	d00c      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x158>
 80078c2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d008      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x158>
 80078ca:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x158>
 80078d2:	f241 5169 	movw	r1, #5481	@ 0x1569
 80078d6:	485b      	ldr	r0, [pc, #364]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 80078d8:	f7fa fdc6 	bl	8002468 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80078dc:	68ab      	ldr	r3, [r5, #8]
 80078de:	b143      	cbz	r3, 80078f2 <HAL_TIM_ConfigClockSource+0x16e>
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078e4:	d005      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ea:	d002      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
 80078ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80078f0:	d144      	bne.n	800797c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80078f2:	686b      	ldr	r3, [r5, #4]
 80078f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f8:	d004      	beq.n	8007904 <HAL_TIM_ConfigClockSource+0x180>
 80078fa:	b11b      	cbz	r3, 8007904 <HAL_TIM_ConfigClockSource+0x180>
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d001      	beq.n	8007904 <HAL_TIM_ConfigClockSource+0x180>
 8007900:	2b0a      	cmp	r3, #10
 8007902:	d141      	bne.n	8007988 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007904:	68eb      	ldr	r3, [r5, #12]
 8007906:	2b0f      	cmp	r3, #15
 8007908:	d844      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x210>
      TIM_ETR_SetConfig(htim->Instance,
 800790a:	68eb      	ldr	r3, [r5, #12]
 800790c:	686a      	ldr	r2, [r5, #4]
 800790e:	68a9      	ldr	r1, [r5, #8]
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	f7ff ff29 	bl	8007768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007916:	6822      	ldr	r2, [r4, #0]
 8007918:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800791a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800791e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007920:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007922:	2301      	movs	r3, #1
 8007924:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007928:	2300      	movs	r3, #0
 800792a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800792e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007930:	2001      	movs	r0, #1
 8007932:	e7f6      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	4a45      	ldr	r2, [pc, #276]	@ (8007a4c <HAL_TIM_ConfigClockSource+0x2c8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	f000 80f7 	beq.w	8007b2c <HAL_TIM_ConfigClockSource+0x3a8>
 800793e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007942:	f000 80f5 	beq.w	8007b30 <HAL_TIM_ConfigClockSource+0x3ac>
 8007946:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800794a:	4293      	cmp	r3, r2
 800794c:	f000 80f2 	beq.w	8007b34 <HAL_TIM_ConfigClockSource+0x3b0>
 8007950:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007954:	4293      	cmp	r3, r2
 8007956:	f000 80ef 	beq.w	8007b38 <HAL_TIM_ConfigClockSource+0x3b4>
 800795a:	f502 3298 	add.w	r2, r2, #77824	@ 0x13000
 800795e:	4293      	cmp	r3, r2
 8007960:	f000 80ec 	beq.w	8007b3c <HAL_TIM_ConfigClockSource+0x3b8>
 8007964:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007968:	4293      	cmp	r3, r2
 800796a:	f000 80e9 	beq.w	8007b40 <HAL_TIM_ConfigClockSource+0x3bc>
 800796e:	f241 5162 	movw	r1, #5474	@ 0x1562
 8007972:	4834      	ldr	r0, [pc, #208]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007974:	f7fa fd78 	bl	8002468 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 8007978:	2000      	movs	r0, #0
 800797a:	e7d2      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800797c:	f241 516c 	movw	r1, #5484	@ 0x156c
 8007980:	4830      	ldr	r0, [pc, #192]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007982:	f7fa fd71 	bl	8002468 <assert_failed>
 8007986:	e7b4      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x16e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007988:	f241 516d 	movw	r1, #5485	@ 0x156d
 800798c:	482d      	ldr	r0, [pc, #180]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 800798e:	f7fa fd6b 	bl	8002468 <assert_failed>
 8007992:	e7b7      	b.n	8007904 <HAL_TIM_ConfigClockSource+0x180>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007994:	f241 516e 	movw	r1, #5486	@ 0x156e
 8007998:	482a      	ldr	r0, [pc, #168]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 800799a:	f7fa fd65 	bl	8002468 <assert_failed>
 800799e:	e7b4      	b.n	800790a <HAL_TIM_ConfigClockSource+0x186>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a4c <HAL_TIM_ConfigClockSource+0x2c8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x23c>
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ac:	d008      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x23c>
 80079ae:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d004      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0x23c>
 80079b6:	f241 5181 	movw	r1, #5505	@ 0x1581
 80079ba:	4822      	ldr	r0, [pc, #136]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 80079bc:	f7fa fd54 	bl	8002468 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80079c0:	68ab      	ldr	r3, [r5, #8]
 80079c2:	b143      	cbz	r3, 80079d6 <HAL_TIM_ConfigClockSource+0x252>
 80079c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c8:	d005      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x252>
 80079ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ce:	d002      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x252>
 80079d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079d4:	d118      	bne.n	8007a08 <HAL_TIM_ConfigClockSource+0x284>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079d6:	686b      	ldr	r3, [r5, #4]
 80079d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079dc:	d004      	beq.n	80079e8 <HAL_TIM_ConfigClockSource+0x264>
 80079de:	b11b      	cbz	r3, 80079e8 <HAL_TIM_ConfigClockSource+0x264>
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d001      	beq.n	80079e8 <HAL_TIM_ConfigClockSource+0x264>
 80079e4:	2b0a      	cmp	r3, #10
 80079e6:	d115      	bne.n	8007a14 <HAL_TIM_ConfigClockSource+0x290>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079e8:	68eb      	ldr	r3, [r5, #12]
 80079ea:	2b0f      	cmp	r3, #15
 80079ec:	d818      	bhi.n	8007a20 <HAL_TIM_ConfigClockSource+0x29c>
      TIM_ETR_SetConfig(htim->Instance,
 80079ee:	68eb      	ldr	r3, [r5, #12]
 80079f0:	686a      	ldr	r2, [r5, #4]
 80079f2:	68a9      	ldr	r1, [r5, #8]
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	f7ff feb7 	bl	8007768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	6893      	ldr	r3, [r2, #8]
 80079fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a02:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007a04:	2000      	movs	r0, #0
      break;
 8007a06:	e78c      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007a08:	f241 5184 	movw	r1, #5508	@ 0x1584
 8007a0c:	480d      	ldr	r0, [pc, #52]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007a0e:	f7fa fd2b 	bl	8002468 <assert_failed>
 8007a12:	e7e0      	b.n	80079d6 <HAL_TIM_ConfigClockSource+0x252>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a14:	f241 5185 	movw	r1, #5509	@ 0x1585
 8007a18:	480a      	ldr	r0, [pc, #40]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007a1a:	f7fa fd25 	bl	8002468 <assert_failed>
 8007a1e:	e7e3      	b.n	80079e8 <HAL_TIM_ConfigClockSource+0x264>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007a20:	f241 5186 	movw	r1, #5510	@ 0x1586
 8007a24:	4807      	ldr	r0, [pc, #28]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007a26:	f7fa fd1f 	bl	8002468 <assert_failed>
 8007a2a:	e7e0      	b.n	80079ee <HAL_TIM_ConfigClockSource+0x26a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a2c:	f241 5198 	movw	r1, #5528	@ 0x1598
 8007a30:	4804      	ldr	r0, [pc, #16]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007a32:	f7fa fd19 	bl	8002468 <assert_failed>
 8007a36:	e724      	b.n	8007882 <HAL_TIM_ConfigClockSource+0xfe>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007a38:	f241 5199 	movw	r1, #5529	@ 0x1599
 8007a3c:	4801      	ldr	r0, [pc, #4]	@ (8007a44 <HAL_TIM_ConfigClockSource+0x2c0>)
 8007a3e:	f7fa fd13 	bl	8002468 <assert_failed>
 8007a42:	e722      	b.n	800788a <HAL_TIM_ConfigClockSource+0x106>
 8007a44:	0801d6b8 	.word	0x0801d6b8
 8007a48:	fffe0088 	.word	0xfffe0088
 8007a4c:	40012c00 	.word	0x40012c00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	4a3d      	ldr	r2, [pc, #244]	@ (8007b48 <HAL_TIM_ConfigClockSource+0x3c4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00f      	beq.n	8007a78 <HAL_TIM_ConfigClockSource+0x2f4>
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5c:	d00c      	beq.n	8007a78 <HAL_TIM_ConfigClockSource+0x2f4>
 8007a5e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d008      	beq.n	8007a78 <HAL_TIM_ConfigClockSource+0x2f4>
 8007a66:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d004      	beq.n	8007a78 <HAL_TIM_ConfigClockSource+0x2f4>
 8007a6e:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8007a72:	4836      	ldr	r0, [pc, #216]	@ (8007b4c <HAL_TIM_ConfigClockSource+0x3c8>)
 8007a74:	f7fa fcf8 	bl	8002468 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007a78:	686b      	ldr	r3, [r5, #4]
 8007a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a7e:	d004      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x306>
 8007a80:	b11b      	cbz	r3, 8007a8a <HAL_TIM_ConfigClockSource+0x306>
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d001      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x306>
 8007a86:	2b0a      	cmp	r3, #10
 8007a88:	d10d      	bne.n	8007aa6 <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007a8a:	68eb      	ldr	r3, [r5, #12]
 8007a8c:	2b0f      	cmp	r3, #15
 8007a8e:	d810      	bhi.n	8007ab2 <HAL_TIM_ConfigClockSource+0x32e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a90:	68ea      	ldr	r2, [r5, #12]
 8007a92:	6869      	ldr	r1, [r5, #4]
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	f7fe feb7 	bl	8006808 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a9a:	2160      	movs	r1, #96	@ 0x60
 8007a9c:	6820      	ldr	r0, [r4, #0]
 8007a9e:	f7fe fefd 	bl	800689c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007aa2:	2000      	movs	r0, #0
      break;
 8007aa4:	e73d      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007aa6:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 8007aaa:	4828      	ldr	r0, [pc, #160]	@ (8007b4c <HAL_TIM_ConfigClockSource+0x3c8>)
 8007aac:	f7fa fcdc 	bl	8002468 <assert_failed>
 8007ab0:	e7eb      	b.n	8007a8a <HAL_TIM_ConfigClockSource+0x306>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ab2:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 8007ab6:	4825      	ldr	r0, [pc, #148]	@ (8007b4c <HAL_TIM_ConfigClockSource+0x3c8>)
 8007ab8:	f7fa fcd6 	bl	8002468 <assert_failed>
 8007abc:	e7e8      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	4a21      	ldr	r2, [pc, #132]	@ (8007b48 <HAL_TIM_ConfigClockSource+0x3c4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0x362>
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aca:	d00c      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0x362>
 8007acc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d008      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0x362>
 8007ad4:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0x362>
 8007adc:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8007ae0:	481a      	ldr	r0, [pc, #104]	@ (8007b4c <HAL_TIM_ConfigClockSource+0x3c8>)
 8007ae2:	f7fa fcc1 	bl	8002468 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007ae6:	686b      	ldr	r3, [r5, #4]
 8007ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aec:	d004      	beq.n	8007af8 <HAL_TIM_ConfigClockSource+0x374>
 8007aee:	b11b      	cbz	r3, 8007af8 <HAL_TIM_ConfigClockSource+0x374>
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d001      	beq.n	8007af8 <HAL_TIM_ConfigClockSource+0x374>
 8007af4:	2b0a      	cmp	r3, #10
 8007af6:	d10d      	bne.n	8007b14 <HAL_TIM_ConfigClockSource+0x390>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007af8:	68eb      	ldr	r3, [r5, #12]
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	d810      	bhi.n	8007b20 <HAL_TIM_ConfigClockSource+0x39c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007afe:	68ea      	ldr	r2, [r5, #12]
 8007b00:	6869      	ldr	r1, [r5, #4]
 8007b02:	6820      	ldr	r0, [r4, #0]
 8007b04:	f7fe fe52 	bl	80067ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b08:	2140      	movs	r1, #64	@ 0x40
 8007b0a:	6820      	ldr	r0, [r4, #0]
 8007b0c:	f7fe fec6 	bl	800689c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007b10:	2000      	movs	r0, #0
      break;
 8007b12:	e706      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b14:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8007b18:	480c      	ldr	r0, [pc, #48]	@ (8007b4c <HAL_TIM_ConfigClockSource+0x3c8>)
 8007b1a:	f7fa fca5 	bl	8002468 <assert_failed>
 8007b1e:	e7eb      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x374>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007b20:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 8007b24:	4809      	ldr	r0, [pc, #36]	@ (8007b4c <HAL_TIM_ConfigClockSource+0x3c8>)
 8007b26:	f7fa fc9f 	bl	8002468 <assert_failed>
 8007b2a:	e7e8      	b.n	8007afe <HAL_TIM_ConfigClockSource+0x37a>
  HAL_StatusTypeDef status = HAL_OK;
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	e6f8      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 8007b30:	2000      	movs	r0, #0
 8007b32:	e6f6      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 8007b34:	2000      	movs	r0, #0
 8007b36:	e6f4      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e6f2      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e6f0      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
 8007b40:	2000      	movs	r0, #0
 8007b42:	e6ee      	b.n	8007922 <HAL_TIM_ConfigClockSource+0x19e>
  __HAL_LOCK(htim);
 8007b44:	2002      	movs	r0, #2
 8007b46:	e6f2      	b.n	800792e <HAL_TIM_ConfigClockSource+0x1aa>
 8007b48:	40012c00 	.word	0x40012c00
 8007b4c:	0801d6b8 	.word	0x0801d6b8

08007b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	4616      	mov	r6, r2
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007b58:	4b19      	ldr	r3, [pc, #100]	@ (8007bc0 <TIM_CCxChannelCmd+0x70>)
 8007b5a:	4298      	cmp	r0, r3
 8007b5c:	d013      	beq.n	8007b86 <TIM_CCxChannelCmd+0x36>
 8007b5e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007b62:	d010      	beq.n	8007b86 <TIM_CCxChannelCmd+0x36>
 8007b64:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8007b68:	4298      	cmp	r0, r3
 8007b6a:	d00c      	beq.n	8007b86 <TIM_CCxChannelCmd+0x36>
 8007b6c:	f503 339e 	add.w	r3, r3, #80896	@ 0x13c00
 8007b70:	4298      	cmp	r0, r3
 8007b72:	d008      	beq.n	8007b86 <TIM_CCxChannelCmd+0x36>
 8007b74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b78:	4298      	cmp	r0, r3
 8007b7a:	d004      	beq.n	8007b86 <TIM_CCxChannelCmd+0x36>
 8007b7c:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 8007b80:	4810      	ldr	r0, [pc, #64]	@ (8007bc4 <TIM_CCxChannelCmd+0x74>)
 8007b82:	f7fa fc71 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007b86:	2d14      	cmp	r5, #20
 8007b88:	d811      	bhi.n	8007bae <TIM_CCxChannelCmd+0x5e>
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc8 <TIM_CCxChannelCmd+0x78>)
 8007b8c:	40eb      	lsrs	r3, r5
 8007b8e:	f013 0f01 	tst.w	r3, #1
 8007b92:	d00e      	beq.n	8007bb2 <TIM_CCxChannelCmd+0x62>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b94:	f005 051f 	and.w	r5, r5, #31
 8007b98:	2201      	movs	r2, #1
 8007b9a:	40aa      	lsls	r2, r5

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b9c:	6a23      	ldr	r3, [r4, #32]
 8007b9e:	ea23 0302 	bic.w	r3, r3, r2
 8007ba2:	6223      	str	r3, [r4, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ba4:	6a23      	ldr	r3, [r4, #32]
 8007ba6:	40ae      	lsls	r6, r5
 8007ba8:	431e      	orrs	r6, r3
 8007baa:	6226      	str	r6, [r4, #32]
}
 8007bac:	bd70      	pop	{r4, r5, r6, pc}
 8007bae:	2d3c      	cmp	r5, #60	@ 0x3c
 8007bb0:	d0f0      	beq.n	8007b94 <TIM_CCxChannelCmd+0x44>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007bb2:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 8007bb6:	4803      	ldr	r0, [pc, #12]	@ (8007bc4 <TIM_CCxChannelCmd+0x74>)
 8007bb8:	f7fa fc56 	bl	8002468 <assert_failed>
 8007bbc:	e7ea      	b.n	8007b94 <TIM_CCxChannelCmd+0x44>
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	0801d6b8 	.word	0x0801d6b8
 8007bc8:	00111111 	.word	0x00111111

08007bcc <HAL_TIM_PWM_Start>:
{
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4605      	mov	r5, r0
 8007bd0:	460c      	mov	r4, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007bd2:	6803      	ldr	r3, [r0, #0]
 8007bd4:	4a7e      	ldr	r2, [pc, #504]	@ (8007dd0 <HAL_TIM_PWM_Start+0x204>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d028      	beq.n	8007c2c <HAL_TIM_PWM_Start+0x60>
 8007bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bde:	d031      	beq.n	8007c44 <HAL_TIM_PWM_Start+0x78>
 8007be0:	4a7c      	ldr	r2, [pc, #496]	@ (8007dd4 <HAL_TIM_PWM_Start+0x208>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d04e      	beq.n	8007c84 <HAL_TIM_PWM_Start+0xb8>
 8007be6:	4a7c      	ldr	r2, [pc, #496]	@ (8007dd8 <HAL_TIM_PWM_Start+0x20c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d06b      	beq.n	8007cc4 <HAL_TIM_PWM_Start+0xf8>
 8007bec:	4a7b      	ldr	r2, [pc, #492]	@ (8007ddc <HAL_TIM_PWM_Start+0x210>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d078      	beq.n	8007ce4 <HAL_TIM_PWM_Start+0x118>
 8007bf2:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8007bf6:	487a      	ldr	r0, [pc, #488]	@ (8007de0 <HAL_TIM_PWM_Start+0x214>)
 8007bf8:	f7fa fc36 	bl	8002468 <assert_failed>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	d165      	bne.n	8007ccc <HAL_TIM_PWM_Start+0x100>
 8007c00:	f895 303e 	ldrb.w	r3, [r5, #62]	@ 0x3e
 8007c04:	3b01      	subs	r3, #1
 8007c06:	bf18      	it	ne
 8007c08:	2301      	movne	r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 80da 	bne.w	8007dc4 <HAL_TIM_PWM_Start+0x1f8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c10:	2c10      	cmp	r4, #16
 8007c12:	f200 809c 	bhi.w	8007d4e <HAL_TIM_PWM_Start+0x182>
 8007c16:	e8df f004 	tbb	[pc, r4]
 8007c1a:	9a86      	.short	0x9a86
 8007c1c:	9a8a9a9a 	.word	0x9a8a9a9a
 8007c20:	9a8e9a9a 	.word	0x9a8e9a9a
 8007c24:	9a929a9a 	.word	0x9a929a9a
 8007c28:	9a9a      	.short	0x9a9a
 8007c2a:	96          	.byte	0x96
 8007c2b:	00          	.byte	0x00
 8007c2c:	2914      	cmp	r1, #20
 8007c2e:	d8d4      	bhi.n	8007bda <HAL_TIM_PWM_Start+0xe>
 8007c30:	2201      	movs	r2, #1
 8007c32:	408a      	lsls	r2, r1
 8007c34:	496b      	ldr	r1, [pc, #428]	@ (8007de4 <HAL_TIM_PWM_Start+0x218>)
 8007c36:	4011      	ands	r1, r2
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d147      	bne.n	8007ccc <HAL_TIM_PWM_Start+0x100>
 8007c3c:	f012 0f01 	tst.w	r2, #1
 8007c40:	d1de      	bne.n	8007c00 <HAL_TIM_PWM_Start+0x34>
 8007c42:	e7ca      	b.n	8007bda <HAL_TIM_PWM_Start+0xe>
 8007c44:	2c0c      	cmp	r4, #12
 8007c46:	d8cb      	bhi.n	8007be0 <HAL_TIM_PWM_Start+0x14>
 8007c48:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <HAL_TIM_PWM_Start+0x84>)
 8007c4a:	f852 f024 	ldr.w	pc, [r2, r4, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c01 	.word	0x08007c01
 8007c54:	08007be1 	.word	0x08007be1
 8007c58:	08007be1 	.word	0x08007be1
 8007c5c:	08007be1 	.word	0x08007be1
 8007c60:	08007ccd 	.word	0x08007ccd
 8007c64:	08007be1 	.word	0x08007be1
 8007c68:	08007be1 	.word	0x08007be1
 8007c6c:	08007be1 	.word	0x08007be1
 8007c70:	08007ccd 	.word	0x08007ccd
 8007c74:	08007be1 	.word	0x08007be1
 8007c78:	08007be1 	.word	0x08007be1
 8007c7c:	08007be1 	.word	0x08007be1
 8007c80:	08007ccd 	.word	0x08007ccd
 8007c84:	2c0c      	cmp	r4, #12
 8007c86:	d8ae      	bhi.n	8007be6 <HAL_TIM_PWM_Start+0x1a>
 8007c88:	a201      	add	r2, pc, #4	@ (adr r2, 8007c90 <HAL_TIM_PWM_Start+0xc4>)
 8007c8a:	f852 f024 	ldr.w	pc, [r2, r4, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007c01 	.word	0x08007c01
 8007c94:	08007be7 	.word	0x08007be7
 8007c98:	08007be7 	.word	0x08007be7
 8007c9c:	08007be7 	.word	0x08007be7
 8007ca0:	08007ccd 	.word	0x08007ccd
 8007ca4:	08007be7 	.word	0x08007be7
 8007ca8:	08007be7 	.word	0x08007be7
 8007cac:	08007be7 	.word	0x08007be7
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007be7 	.word	0x08007be7
 8007cb8:	08007be7 	.word	0x08007be7
 8007cbc:	08007be7 	.word	0x08007be7
 8007cc0:	08007ccd 	.word	0x08007ccd
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007cc4:	2c00      	cmp	r4, #0
 8007cc6:	d09b      	beq.n	8007c00 <HAL_TIM_PWM_Start+0x34>
 8007cc8:	2c04      	cmp	r4, #4
 8007cca:	d18f      	bne.n	8007bec <HAL_TIM_PWM_Start+0x20>
 8007ccc:	1f23      	subs	r3, r4, #4
 8007cce:	2b0c      	cmp	r3, #12
 8007cd0:	d823      	bhi.n	8007d1a <HAL_TIM_PWM_Start+0x14e>
 8007cd2:	e8df f003 	tbb	[pc, r3]
 8007cd6:	220a      	.short	0x220a
 8007cd8:	22102222 	.word	0x22102222
 8007cdc:	22162222 	.word	0x22162222
 8007ce0:	2222      	.short	0x2222
 8007ce2:	1c          	.byte	0x1c
 8007ce3:	00          	.byte	0x00
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	d08b      	beq.n	8007c00 <HAL_TIM_PWM_Start+0x34>
 8007ce8:	e783      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x26>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cea:	f895 303f 	ldrb.w	r3, [r5, #63]	@ 0x3f
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	bf18      	it	ne
 8007cf2:	2301      	movne	r3, #1
 8007cf4:	e789      	b.n	8007c0a <HAL_TIM_PWM_Start+0x3e>
 8007cf6:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	bf18      	it	ne
 8007cfe:	2301      	movne	r3, #1
 8007d00:	e783      	b.n	8007c0a <HAL_TIM_PWM_Start+0x3e>
 8007d02:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
 8007d06:	3b01      	subs	r3, #1
 8007d08:	bf18      	it	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	e77d      	b.n	8007c0a <HAL_TIM_PWM_Start+0x3e>
 8007d0e:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 8007d12:	3b01      	subs	r3, #1
 8007d14:	bf18      	it	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	e777      	b.n	8007c0a <HAL_TIM_PWM_Start+0x3e>
 8007d1a:	f895 3043 	ldrb.w	r3, [r5, #67]	@ 0x43
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	bf18      	it	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	e771      	b.n	8007c0a <HAL_TIM_PWM_Start+0x3e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d26:	2302      	movs	r3, #2
 8007d28:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
 8007d2c:	e012      	b.n	8007d54 <HAL_TIM_PWM_Start+0x188>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
 8007d34:	e00e      	b.n	8007d54 <HAL_TIM_PWM_Start+0x188>
 8007d36:	2302      	movs	r3, #2
 8007d38:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007d3c:	e00a      	b.n	8007d54 <HAL_TIM_PWM_Start+0x188>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
 8007d44:	e006      	b.n	8007d54 <HAL_TIM_PWM_Start+0x188>
 8007d46:	2302      	movs	r3, #2
 8007d48:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 8007d4c:	e002      	b.n	8007d54 <HAL_TIM_PWM_Start+0x188>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	f885 3043 	strb.w	r3, [r5, #67]	@ 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d54:	2201      	movs	r2, #1
 8007d56:	4621      	mov	r1, r4
 8007d58:	6828      	ldr	r0, [r5, #0]
 8007d5a:	f7ff fef9 	bl	8007b50 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	4a1b      	ldr	r2, [pc, #108]	@ (8007dd0 <HAL_TIM_PWM_Start+0x204>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d007      	beq.n	8007d76 <HAL_TIM_PWM_Start+0x1aa>
 8007d66:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_PWM_Start+0x1aa>
 8007d6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d103      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x1b2>
    __HAL_TIM_MOE_ENABLE(htim);
 8007d76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	4a13      	ldr	r2, [pc, #76]	@ (8007dd0 <HAL_TIM_PWM_Start+0x204>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d010      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x1dc>
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d8a:	d00d      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x1dc>
 8007d8c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d009      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x1dc>
 8007d94:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d005      	beq.n	8007da8 <HAL_TIM_PWM_Start+0x1dc>
    __HAL_TIM_ENABLE(htim);
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007da4:	2000      	movs	r0, #0
 8007da6:	e00e      	b.n	8007dc6 <HAL_TIM_PWM_Start+0x1fa>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007da8:	6899      	ldr	r1, [r3, #8]
 8007daa:	4a0f      	ldr	r2, [pc, #60]	@ (8007de8 <HAL_TIM_PWM_Start+0x21c>)
 8007dac:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dae:	2a06      	cmp	r2, #6
 8007db0:	d00a      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x1fc>
 8007db2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007db6:	d009      	beq.n	8007dcc <HAL_TIM_PWM_Start+0x200>
      __HAL_TIM_ENABLE(htim);
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e000      	b.n	8007dc6 <HAL_TIM_PWM_Start+0x1fa>
    return HAL_ERROR;
 8007dc4:	2001      	movs	r0, #1
}
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8007dc8:	2000      	movs	r0, #0
 8007dca:	e7fc      	b.n	8007dc6 <HAL_TIM_PWM_Start+0x1fa>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e7fa      	b.n	8007dc6 <HAL_TIM_PWM_Start+0x1fa>
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	40014000 	.word	0x40014000
 8007ddc:	40014400 	.word	0x40014400
 8007de0:	0801d6b8 	.word	0x0801d6b8
 8007de4:	00111110 	.word	0x00111110
 8007de8:	00010007 	.word	0x00010007

08007dec <HAL_TIM_PWM_Stop>:
{
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007df2:	6803      	ldr	r3, [r0, #0]
 8007df4:	4a45      	ldr	r2, [pc, #276]	@ (8007f0c <HAL_TIM_PWM_Stop+0x120>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d03d      	beq.n	8007e76 <HAL_TIM_PWM_Stop+0x8a>
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dfe:	d042      	beq.n	8007e86 <HAL_TIM_PWM_Stop+0x9a>
 8007e00:	4a43      	ldr	r2, [pc, #268]	@ (8007f10 <HAL_TIM_PWM_Stop+0x124>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d048      	beq.n	8007e98 <HAL_TIM_PWM_Stop+0xac>
 8007e06:	4a43      	ldr	r2, [pc, #268]	@ (8007f14 <HAL_TIM_PWM_Stop+0x128>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d04e      	beq.n	8007eaa <HAL_TIM_PWM_Stop+0xbe>
 8007e0c:	4a42      	ldr	r2, [pc, #264]	@ (8007f18 <HAL_TIM_PWM_Stop+0x12c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d050      	beq.n	8007eb4 <HAL_TIM_PWM_Stop+0xc8>
 8007e12:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8007e16:	4841      	ldr	r0, [pc, #260]	@ (8007f1c <HAL_TIM_PWM_Stop+0x130>)
 8007e18:	f7fa fb26 	bl	8002468 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4629      	mov	r1, r5
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	f7ff fe95 	bl	8007b50 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	4a38      	ldr	r2, [pc, #224]	@ (8007f0c <HAL_TIM_PWM_Stop+0x120>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d045      	beq.n	8007eba <HAL_TIM_PWM_Stop+0xce>
 8007e2e:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d041      	beq.n	8007eba <HAL_TIM_PWM_Stop+0xce>
 8007e36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d03d      	beq.n	8007eba <HAL_TIM_PWM_Stop+0xce>
  __HAL_TIM_DISABLE(htim);
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	6a19      	ldr	r1, [r3, #32]
 8007e42:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007e46:	4211      	tst	r1, r2
 8007e48:	d108      	bne.n	8007e5c <HAL_TIM_PWM_Stop+0x70>
 8007e4a:	6a19      	ldr	r1, [r3, #32]
 8007e4c:	f240 4244 	movw	r2, #1092	@ 0x444
 8007e50:	4211      	tst	r1, r2
 8007e52:	d103      	bne.n	8007e5c <HAL_TIM_PWM_Stop+0x70>
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	f022 0201 	bic.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e5c:	2d10      	cmp	r5, #16
 8007e5e:	d84f      	bhi.n	8007f00 <HAL_TIM_PWM_Stop+0x114>
 8007e60:	e8df f005 	tbb	[pc, r5]
 8007e64:	4e4e4e3a 	.word	0x4e4e4e3a
 8007e68:	4e4e4e3e 	.word	0x4e4e4e3e
 8007e6c:	4e4e4e42 	.word	0x4e4e4e42
 8007e70:	4e4e4e46 	.word	0x4e4e4e46
 8007e74:	4a          	.byte	0x4a
 8007e75:	00          	.byte	0x00
 8007e76:	2914      	cmp	r1, #20
 8007e78:	d8bf      	bhi.n	8007dfa <HAL_TIM_PWM_Stop+0xe>
 8007e7a:	4a29      	ldr	r2, [pc, #164]	@ (8007f20 <HAL_TIM_PWM_Stop+0x134>)
 8007e7c:	40ca      	lsrs	r2, r1
 8007e7e:	f012 0f01 	tst.w	r2, #1
 8007e82:	d1cb      	bne.n	8007e1c <HAL_TIM_PWM_Stop+0x30>
 8007e84:	e7b9      	b.n	8007dfa <HAL_TIM_PWM_Stop+0xe>
 8007e86:	2d0c      	cmp	r5, #12
 8007e88:	d8ba      	bhi.n	8007e00 <HAL_TIM_PWM_Stop+0x14>
 8007e8a:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007e8e:	40ea      	lsrs	r2, r5
 8007e90:	f012 0f01 	tst.w	r2, #1
 8007e94:	d1c2      	bne.n	8007e1c <HAL_TIM_PWM_Stop+0x30>
 8007e96:	e7b3      	b.n	8007e00 <HAL_TIM_PWM_Stop+0x14>
 8007e98:	2d0c      	cmp	r5, #12
 8007e9a:	d8b4      	bhi.n	8007e06 <HAL_TIM_PWM_Stop+0x1a>
 8007e9c:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007ea0:	40ea      	lsrs	r2, r5
 8007ea2:	f012 0f01 	tst.w	r2, #1
 8007ea6:	d1b9      	bne.n	8007e1c <HAL_TIM_PWM_Stop+0x30>
 8007ea8:	e7ad      	b.n	8007e06 <HAL_TIM_PWM_Stop+0x1a>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007eaa:	2d00      	cmp	r5, #0
 8007eac:	d0b6      	beq.n	8007e1c <HAL_TIM_PWM_Stop+0x30>
 8007eae:	2d04      	cmp	r5, #4
 8007eb0:	d1ac      	bne.n	8007e0c <HAL_TIM_PWM_Stop+0x20>
 8007eb2:	e7b3      	b.n	8007e1c <HAL_TIM_PWM_Stop+0x30>
 8007eb4:	2d00      	cmp	r5, #0
 8007eb6:	d0b1      	beq.n	8007e1c <HAL_TIM_PWM_Stop+0x30>
 8007eb8:	e7ab      	b.n	8007e12 <HAL_TIM_PWM_Stop+0x26>
    __HAL_TIM_MOE_DISABLE(htim);
 8007eba:	6a19      	ldr	r1, [r3, #32]
 8007ebc:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007ec0:	4211      	tst	r1, r2
 8007ec2:	d1bc      	bne.n	8007e3e <HAL_TIM_PWM_Stop+0x52>
 8007ec4:	6a19      	ldr	r1, [r3, #32]
 8007ec6:	f240 4244 	movw	r2, #1092	@ 0x444
 8007eca:	4211      	tst	r1, r2
 8007ecc:	d1b7      	bne.n	8007e3e <HAL_TIM_PWM_Stop+0x52>
 8007ece:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ed4:	645a      	str	r2, [r3, #68]	@ 0x44
 8007ed6:	e7b2      	b.n	8007e3e <HAL_TIM_PWM_Stop+0x52>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007ede:	e012      	b.n	8007f06 <HAL_TIM_PWM_Stop+0x11a>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007ee6:	e00e      	b.n	8007f06 <HAL_TIM_PWM_Stop+0x11a>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007eee:	e00a      	b.n	8007f06 <HAL_TIM_PWM_Stop+0x11a>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007ef6:	e006      	b.n	8007f06 <HAL_TIM_PWM_Stop+0x11a>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007efe:	e002      	b.n	8007f06 <HAL_TIM_PWM_Stop+0x11a>
 8007f00:	2301      	movs	r3, #1
 8007f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
}
 8007f06:	2000      	movs	r0, #0
 8007f08:	bd38      	pop	{r3, r4, r5, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40014400 	.word	0x40014400
 8007f1c:	0801d6b8 	.word	0x0801d6b8
 8007f20:	00111111 	.word	0x00111111

08007f24 <HAL_TIM_IC_Start_IT>:
{
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	4606      	mov	r6, r0
 8007f28:	460c      	mov	r4, r1
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f2a:	2910      	cmp	r1, #16
 8007f2c:	d821      	bhi.n	8007f72 <HAL_TIM_IC_Start_IT+0x4e>
 8007f2e:	e8df f001 	tbb	[pc, r1]
 8007f32:	2009      	.short	0x2009
 8007f34:	20102020 	.word	0x20102020
 8007f38:	20142020 	.word	0x20142020
 8007f3c:	20182020 	.word	0x20182020
 8007f40:	2020      	.short	0x2020
 8007f42:	1c          	.byte	0x1c
 8007f43:	00          	.byte	0x00
 8007f44:	f890 503e 	ldrb.w	r5, [r0, #62]	@ 0x3e
 8007f48:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f4a:	f890 7044 	ldrb.w	r7, [r0, #68]	@ 0x44
 8007f4e:	b2ff      	uxtb	r7, r7
 8007f50:	e019      	b.n	8007f86 <HAL_TIM_IC_Start_IT+0x62>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f52:	f890 503f 	ldrb.w	r5, [r0, #63]	@ 0x3f
 8007f56:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f58:	e00e      	b.n	8007f78 <HAL_TIM_IC_Start_IT+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f5a:	f890 5040 	ldrb.w	r5, [r0, #64]	@ 0x40
 8007f5e:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f60:	e00a      	b.n	8007f78 <HAL_TIM_IC_Start_IT+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f62:	f890 5041 	ldrb.w	r5, [r0, #65]	@ 0x41
 8007f66:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f68:	e006      	b.n	8007f78 <HAL_TIM_IC_Start_IT+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f6a:	f890 5042 	ldrb.w	r5, [r0, #66]	@ 0x42
 8007f6e:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f70:	e002      	b.n	8007f78 <HAL_TIM_IC_Start_IT+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f72:	f890 5043 	ldrb.w	r5, [r0, #67]	@ 0x43
 8007f76:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f78:	2c04      	cmp	r4, #4
 8007f7a:	d02c      	beq.n	8007fd6 <HAL_TIM_IC_Start_IT+0xb2>
 8007f7c:	2c08      	cmp	r4, #8
 8007f7e:	d02e      	beq.n	8007fde <HAL_TIM_IC_Start_IT+0xba>
 8007f80:	f896 7047 	ldrb.w	r7, [r6, #71]	@ 0x47
 8007f84:	b2ff      	uxtb	r7, r7
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
 8007f86:	6833      	ldr	r3, [r6, #0]
 8007f88:	4a70      	ldr	r2, [pc, #448]	@ (800814c <HAL_TIM_IC_Start_IT+0x228>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d02b      	beq.n	8007fe6 <HAL_TIM_IC_Start_IT+0xc2>
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f92:	d033      	beq.n	8007ffc <HAL_TIM_IC_Start_IT+0xd8>
 8007f94:	4a6e      	ldr	r2, [pc, #440]	@ (8008150 <HAL_TIM_IC_Start_IT+0x22c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d03b      	beq.n	8008012 <HAL_TIM_IC_Start_IT+0xee>
 8007f9a:	4a6e      	ldr	r2, [pc, #440]	@ (8008154 <HAL_TIM_IC_Start_IT+0x230>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d041      	beq.n	8008024 <HAL_TIM_IC_Start_IT+0x100>
 8007fa0:	4a6d      	ldr	r2, [pc, #436]	@ (8008158 <HAL_TIM_IC_Start_IT+0x234>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d043      	beq.n	800802e <HAL_TIM_IC_Start_IT+0x10a>
 8007fa6:	f640 01ac 	movw	r1, #2220	@ 0x8ac
 8007faa:	486c      	ldr	r0, [pc, #432]	@ (800815c <HAL_TIM_IC_Start_IT+0x238>)
 8007fac:	f7fa fa5c 	bl	8002468 <assert_failed>
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fb0:	2d01      	cmp	r5, #1
 8007fb2:	f040 80c2 	bne.w	800813a <HAL_TIM_IC_Start_IT+0x216>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fb6:	2f01      	cmp	r7, #1
 8007fb8:	f040 80c0 	bne.w	800813c <HAL_TIM_IC_Start_IT+0x218>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fbc:	2c10      	cmp	r4, #16
 8007fbe:	d854      	bhi.n	800806a <HAL_TIM_IC_Start_IT+0x146>
 8007fc0:	e8df f004 	tbb	[pc, r4]
 8007fc4:	53535338 	.word	0x53535338
 8007fc8:	53535343 	.word	0x53535343
 8007fcc:	53535347 	.word	0x53535347
 8007fd0:	5353534b 	.word	0x5353534b
 8007fd4:	4f          	.byte	0x4f
 8007fd5:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007fd6:	f896 7045 	ldrb.w	r7, [r6, #69]	@ 0x45
 8007fda:	b2ff      	uxtb	r7, r7
 8007fdc:	e7d3      	b.n	8007f86 <HAL_TIM_IC_Start_IT+0x62>
 8007fde:	f896 7046 	ldrb.w	r7, [r6, #70]	@ 0x46
 8007fe2:	b2ff      	uxtb	r7, r7
 8007fe4:	e7cf      	b.n	8007f86 <HAL_TIM_IC_Start_IT+0x62>
 8007fe6:	2c14      	cmp	r4, #20
 8007fe8:	d8d1      	bhi.n	8007f8e <HAL_TIM_IC_Start_IT+0x6a>
 8007fea:	2201      	movs	r2, #1
 8007fec:	40a2      	lsls	r2, r4
 8007fee:	495c      	ldr	r1, [pc, #368]	@ (8008160 <HAL_TIM_IC_Start_IT+0x23c>)
 8007ff0:	4011      	ands	r1, r2
 8007ff2:	b959      	cbnz	r1, 800800c <HAL_TIM_IC_Start_IT+0xe8>
 8007ff4:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8007ff8:	d1d5      	bne.n	8007fa6 <HAL_TIM_IC_Start_IT+0x82>
 8007ffa:	e7c8      	b.n	8007f8e <HAL_TIM_IC_Start_IT+0x6a>
 8007ffc:	2c0c      	cmp	r4, #12
 8007ffe:	d8c9      	bhi.n	8007f94 <HAL_TIM_IC_Start_IT+0x70>
 8008000:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008004:	40e2      	lsrs	r2, r4
 8008006:	f012 0f01 	tst.w	r2, #1
 800800a:	d0c3      	beq.n	8007f94 <HAL_TIM_IC_Start_IT+0x70>
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));
 800800c:	2c14      	cmp	r4, #20
 800800e:	d1cf      	bne.n	8007fb0 <HAL_TIM_IC_Start_IT+0x8c>
 8008010:	e7c9      	b.n	8007fa6 <HAL_TIM_IC_Start_IT+0x82>
 8008012:	2c0c      	cmp	r4, #12
 8008014:	d8c1      	bhi.n	8007f9a <HAL_TIM_IC_Start_IT+0x76>
 8008016:	f241 1211 	movw	r2, #4369	@ 0x1111
 800801a:	40e2      	lsrs	r2, r4
 800801c:	f012 0f01 	tst.w	r2, #1
 8008020:	d1f4      	bne.n	800800c <HAL_TIM_IC_Start_IT+0xe8>
 8008022:	e7ba      	b.n	8007f9a <HAL_TIM_IC_Start_IT+0x76>
 8008024:	2c00      	cmp	r4, #0
 8008026:	d0f1      	beq.n	800800c <HAL_TIM_IC_Start_IT+0xe8>
 8008028:	2c04      	cmp	r4, #4
 800802a:	d1b9      	bne.n	8007fa0 <HAL_TIM_IC_Start_IT+0x7c>
 800802c:	e7ee      	b.n	800800c <HAL_TIM_IC_Start_IT+0xe8>
 800802e:	2c00      	cmp	r4, #0
 8008030:	d1b9      	bne.n	8007fa6 <HAL_TIM_IC_Start_IT+0x82>
 8008032:	e7eb      	b.n	800800c <HAL_TIM_IC_Start_IT+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008034:	2302      	movs	r3, #2
 8008036:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800803a:	f886 3044 	strb.w	r3, [r6, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800803e:	6832      	ldr	r2, [r6, #0]
 8008040:	68d3      	ldr	r3, [r2, #12]
 8008042:	f043 0302 	orr.w	r3, r3, #2
 8008046:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008048:	e040      	b.n	80080cc <HAL_TIM_IC_Start_IT+0x1a8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800804a:	2302      	movs	r3, #2
 800804c:	f886 303f 	strb.w	r3, [r6, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008050:	e00e      	b.n	8008070 <HAL_TIM_IC_Start_IT+0x14c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008052:	2302      	movs	r3, #2
 8008054:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008058:	e00a      	b.n	8008070 <HAL_TIM_IC_Start_IT+0x14c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800805a:	2302      	movs	r3, #2
 800805c:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008060:	e006      	b.n	8008070 <HAL_TIM_IC_Start_IT+0x14c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008062:	2302      	movs	r3, #2
 8008064:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008068:	e002      	b.n	8008070 <HAL_TIM_IC_Start_IT+0x14c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800806a:	2302      	movs	r3, #2
 800806c:	f886 3043 	strb.w	r3, [r6, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008070:	2c04      	cmp	r4, #4
 8008072:	d023      	beq.n	80080bc <HAL_TIM_IC_Start_IT+0x198>
 8008074:	2c08      	cmp	r4, #8
 8008076:	d043      	beq.n	8008100 <HAL_TIM_IC_Start_IT+0x1dc>
 8008078:	2302      	movs	r3, #2
 800807a:	f886 3047 	strb.w	r3, [r6, #71]	@ 0x47
  switch (Channel)
 800807e:	2c0c      	cmp	r4, #12
 8008080:	d85e      	bhi.n	8008140 <HAL_TIM_IC_Start_IT+0x21c>
 8008082:	a301      	add	r3, pc, #4	@ (adr r3, 8008088 <HAL_TIM_IC_Start_IT+0x164>)
 8008084:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8008088:	0800803f 	.word	0x0800803f
 800808c:	08008141 	.word	0x08008141
 8008090:	08008141 	.word	0x08008141
 8008094:	08008141 	.word	0x08008141
 8008098:	080080c3 	.word	0x080080c3
 800809c:	08008141 	.word	0x08008141
 80080a0:	08008141 	.word	0x08008141
 80080a4:	08008141 	.word	0x08008141
 80080a8:	08008107 	.word	0x08008107
 80080ac:	08008141 	.word	0x08008141
 80080b0:	08008141 	.word	0x08008141
 80080b4:	08008141 	.word	0x08008141
 80080b8:	08008113 	.word	0x08008113
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080bc:	2302      	movs	r3, #2
 80080be:	f886 3045 	strb.w	r3, [r6, #69]	@ 0x45
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080c2:	6832      	ldr	r2, [r6, #0]
 80080c4:	68d3      	ldr	r3, [r2, #12]
 80080c6:	f043 0304 	orr.w	r3, r3, #4
 80080ca:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080cc:	2201      	movs	r2, #1
 80080ce:	4621      	mov	r1, r4
 80080d0:	6830      	ldr	r0, [r6, #0]
 80080d2:	f7ff fd3d 	bl	8007b50 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d6:	6833      	ldr	r3, [r6, #0]
 80080d8:	4a1c      	ldr	r2, [pc, #112]	@ (800814c <HAL_TIM_IC_Start_IT+0x228>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d01f      	beq.n	800811e <HAL_TIM_IC_Start_IT+0x1fa>
 80080de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e2:	d01c      	beq.n	800811e <HAL_TIM_IC_Start_IT+0x1fa>
 80080e4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d018      	beq.n	800811e <HAL_TIM_IC_Start_IT+0x1fa>
 80080ec:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d014      	beq.n	800811e <HAL_TIM_IC_Start_IT+0x1fa>
      __HAL_TIM_ENABLE(htim);
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	2500      	movs	r5, #0
 80080fe:	e01d      	b.n	800813c <HAL_TIM_IC_Start_IT+0x218>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008100:	2302      	movs	r3, #2
 8008102:	f886 3046 	strb.w	r3, [r6, #70]	@ 0x46
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008106:	6832      	ldr	r2, [r6, #0]
 8008108:	68d3      	ldr	r3, [r2, #12]
 800810a:	f043 0308 	orr.w	r3, r3, #8
 800810e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008110:	e7dc      	b.n	80080cc <HAL_TIM_IC_Start_IT+0x1a8>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008112:	6832      	ldr	r2, [r6, #0]
 8008114:	68d3      	ldr	r3, [r2, #12]
 8008116:	f043 0310 	orr.w	r3, r3, #16
 800811a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800811c:	e7d6      	b.n	80080cc <HAL_TIM_IC_Start_IT+0x1a8>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811e:	6899      	ldr	r1, [r3, #8]
 8008120:	4a10      	ldr	r2, [pc, #64]	@ (8008164 <HAL_TIM_IC_Start_IT+0x240>)
 8008122:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008124:	2a06      	cmp	r2, #6
 8008126:	d00d      	beq.n	8008144 <HAL_TIM_IC_Start_IT+0x220>
 8008128:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800812c:	d00c      	beq.n	8008148 <HAL_TIM_IC_Start_IT+0x224>
        __HAL_TIM_ENABLE(htim);
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	f042 0201 	orr.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	2500      	movs	r5, #0
 8008138:	e000      	b.n	800813c <HAL_TIM_IC_Start_IT+0x218>
    return HAL_ERROR;
 800813a:	2501      	movs	r5, #1
}
 800813c:	4628      	mov	r0, r5
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8008140:	463d      	mov	r5, r7
 8008142:	e7fb      	b.n	800813c <HAL_TIM_IC_Start_IT+0x218>
 8008144:	2500      	movs	r5, #0
 8008146:	e7f9      	b.n	800813c <HAL_TIM_IC_Start_IT+0x218>
 8008148:	2500      	movs	r5, #0
 800814a:	e7f7      	b.n	800813c <HAL_TIM_IC_Start_IT+0x218>
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40000400 	.word	0x40000400
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	0801d6b8 	.word	0x0801d6b8
 8008160:	00101111 	.word	0x00101111
 8008164:	00010007 	.word	0x00010007

08008168 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008168:	f001 010f 	and.w	r1, r1, #15
 800816c:	f04f 0c04 	mov.w	ip, #4
 8008170:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008174:	6a03      	ldr	r3, [r0, #32]
 8008176:	ea23 030c 	bic.w	r3, r3, ip
 800817a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800817c:	6a03      	ldr	r3, [r0, #32]
 800817e:	408a      	lsls	r2, r1
 8008180:	4313      	orrs	r3, r2
 8008182:	6203      	str	r3, [r0, #32]
}
 8008184:	4770      	bx	lr
	...

08008188 <HAL_TIMEx_PWMN_Start>:
{
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4604      	mov	r4, r0
 800818c:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 800818e:	6803      	ldr	r3, [r0, #0]
 8008190:	4a40      	ldr	r2, [pc, #256]	@ (8008294 <HAL_TIMEx_PWMN_Start+0x10c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d037      	beq.n	8008206 <HAL_TIMEx_PWMN_Start+0x7e>
 8008196:	4a40      	ldr	r2, [pc, #256]	@ (8008298 <HAL_TIMEx_PWMN_Start+0x110>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d044      	beq.n	8008226 <HAL_TIMEx_PWMN_Start+0x9e>
 800819c:	4a3f      	ldr	r2, [pc, #252]	@ (800829c <HAL_TIMEx_PWMN_Start+0x114>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d044      	beq.n	800822c <HAL_TIMEx_PWMN_Start+0xa4>
 80081a2:	f240 4151 	movw	r1, #1105	@ 0x451
 80081a6:	483e      	ldr	r0, [pc, #248]	@ (80082a0 <HAL_TIMEx_PWMN_Start+0x118>)
 80081a8:	f7fa f95e 	bl	8002468 <assert_failed>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	d130      	bne.n	8008212 <HAL_TIMEx_PWMN_Start+0x8a>
 80081b0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80081b4:	3b01      	subs	r3, #1
 80081b6:	bf18      	it	ne
 80081b8:	2301      	movne	r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d163      	bne.n	8008286 <HAL_TIMEx_PWMN_Start+0xfe>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081be:	2d00      	cmp	r5, #0
 80081c0:	d143      	bne.n	800824a <HAL_TIMEx_PWMN_Start+0xc2>
 80081c2:	2302      	movs	r3, #2
 80081c4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80081c8:	2204      	movs	r2, #4
 80081ca:	4629      	mov	r1, r5
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	f7ff ffcb 	bl	8008168 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80081d2:	6822      	ldr	r2, [r4, #0]
 80081d4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80081d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081da:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	4a2d      	ldr	r2, [pc, #180]	@ (8008294 <HAL_TIMEx_PWMN_Start+0x10c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d042      	beq.n	800826a <HAL_TIMEx_PWMN_Start+0xe2>
 80081e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e8:	d03f      	beq.n	800826a <HAL_TIMEx_PWMN_Start+0xe2>
 80081ea:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d03b      	beq.n	800826a <HAL_TIMEx_PWMN_Start+0xe2>
 80081f2:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d037      	beq.n	800826a <HAL_TIMEx_PWMN_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	f042 0201 	orr.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008202:	2000      	movs	r0, #0
 8008204:	e040      	b.n	8008288 <HAL_TIMEx_PWMN_Start+0x100>
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8008206:	2900      	cmp	r1, #0
 8008208:	d0d2      	beq.n	80081b0 <HAL_TIMEx_PWMN_Start+0x28>
 800820a:	2904      	cmp	r1, #4
 800820c:	d001      	beq.n	8008212 <HAL_TIMEx_PWMN_Start+0x8a>
 800820e:	2908      	cmp	r1, #8
 8008210:	d1c1      	bne.n	8008196 <HAL_TIMEx_PWMN_Start+0xe>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008212:	2d04      	cmp	r5, #4
 8008214:	d00d      	beq.n	8008232 <HAL_TIMEx_PWMN_Start+0xaa>
 8008216:	2d08      	cmp	r5, #8
 8008218:	d011      	beq.n	800823e <HAL_TIMEx_PWMN_Start+0xb6>
 800821a:	f894 3047 	ldrb.w	r3, [r4, #71]	@ 0x47
 800821e:	3b01      	subs	r3, #1
 8008220:	bf18      	it	ne
 8008222:	2301      	movne	r3, #1
 8008224:	e7c9      	b.n	80081ba <HAL_TIMEx_PWMN_Start+0x32>
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8008226:	2d00      	cmp	r5, #0
 8008228:	d0c2      	beq.n	80081b0 <HAL_TIMEx_PWMN_Start+0x28>
 800822a:	e7b7      	b.n	800819c <HAL_TIMEx_PWMN_Start+0x14>
 800822c:	2d00      	cmp	r5, #0
 800822e:	d0bf      	beq.n	80081b0 <HAL_TIMEx_PWMN_Start+0x28>
 8008230:	e7b7      	b.n	80081a2 <HAL_TIMEx_PWMN_Start+0x1a>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008232:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008236:	3b01      	subs	r3, #1
 8008238:	bf18      	it	ne
 800823a:	2301      	movne	r3, #1
 800823c:	e7bd      	b.n	80081ba <HAL_TIMEx_PWMN_Start+0x32>
 800823e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008242:	3b01      	subs	r3, #1
 8008244:	bf18      	it	ne
 8008246:	2301      	movne	r3, #1
 8008248:	e7b7      	b.n	80081ba <HAL_TIMEx_PWMN_Start+0x32>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800824a:	2d04      	cmp	r5, #4
 800824c:	d005      	beq.n	800825a <HAL_TIMEx_PWMN_Start+0xd2>
 800824e:	2d08      	cmp	r5, #8
 8008250:	d007      	beq.n	8008262 <HAL_TIMEx_PWMN_Start+0xda>
 8008252:	2302      	movs	r3, #2
 8008254:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 8008258:	e7b6      	b.n	80081c8 <HAL_TIMEx_PWMN_Start+0x40>
 800825a:	2302      	movs	r3, #2
 800825c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008260:	e7b2      	b.n	80081c8 <HAL_TIMEx_PWMN_Start+0x40>
 8008262:	2302      	movs	r3, #2
 8008264:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008268:	e7ae      	b.n	80081c8 <HAL_TIMEx_PWMN_Start+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800826a:	6899      	ldr	r1, [r3, #8]
 800826c:	4a0d      	ldr	r2, [pc, #52]	@ (80082a4 <HAL_TIMEx_PWMN_Start+0x11c>)
 800826e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008270:	2a06      	cmp	r2, #6
 8008272:	d00a      	beq.n	800828a <HAL_TIMEx_PWMN_Start+0x102>
 8008274:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008278:	d009      	beq.n	800828e <HAL_TIMEx_PWMN_Start+0x106>
      __HAL_TIM_ENABLE(htim);
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008282:	2000      	movs	r0, #0
 8008284:	e000      	b.n	8008288 <HAL_TIMEx_PWMN_Start+0x100>
    return HAL_ERROR;
 8008286:	2001      	movs	r0, #1
}
 8008288:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800828a:	2000      	movs	r0, #0
 800828c:	e7fc      	b.n	8008288 <HAL_TIMEx_PWMN_Start+0x100>
 800828e:	2000      	movs	r0, #0
 8008290:	e7fa      	b.n	8008288 <HAL_TIMEx_PWMN_Start+0x100>
 8008292:	bf00      	nop
 8008294:	40012c00 	.word	0x40012c00
 8008298:	40014000 	.word	0x40014000
 800829c:	40014400 	.word	0x40014400
 80082a0:	0801d6f0 	.word	0x0801d6f0
 80082a4:	00010007 	.word	0x00010007

080082a8 <HAL_TIMEx_PWMN_Stop>:
{
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4604      	mov	r4, r0
 80082ac:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 80082ae:	6803      	ldr	r3, [r0, #0]
 80082b0:	4a2a      	ldr	r2, [pc, #168]	@ (800835c <HAL_TIMEx_PWMN_Stop+0xb4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d033      	beq.n	800831e <HAL_TIMEx_PWMN_Stop+0x76>
 80082b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008360 <HAL_TIMEx_PWMN_Stop+0xb8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d039      	beq.n	8008330 <HAL_TIMEx_PWMN_Stop+0x88>
 80082bc:	4a29      	ldr	r2, [pc, #164]	@ (8008364 <HAL_TIMEx_PWMN_Stop+0xbc>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d039      	beq.n	8008336 <HAL_TIMEx_PWMN_Stop+0x8e>
 80082c2:	f240 4181 	movw	r1, #1153	@ 0x481
 80082c6:	4828      	ldr	r0, [pc, #160]	@ (8008368 <HAL_TIMEx_PWMN_Stop+0xc0>)
 80082c8:	f7fa f8ce 	bl	8002468 <assert_failed>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80082cc:	2200      	movs	r2, #0
 80082ce:	4629      	mov	r1, r5
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	f7ff ff49 	bl	8008168 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	6a19      	ldr	r1, [r3, #32]
 80082da:	f241 1211 	movw	r2, #4369	@ 0x1111
 80082de:	4211      	tst	r1, r2
 80082e0:	d108      	bne.n	80082f4 <HAL_TIMEx_PWMN_Stop+0x4c>
 80082e2:	6a19      	ldr	r1, [r3, #32]
 80082e4:	f240 4244 	movw	r2, #1092	@ 0x444
 80082e8:	4211      	tst	r1, r2
 80082ea:	d103      	bne.n	80082f4 <HAL_TIMEx_PWMN_Stop+0x4c>
 80082ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082f2:	645a      	str	r2, [r3, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	6a19      	ldr	r1, [r3, #32]
 80082f8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80082fc:	4211      	tst	r1, r2
 80082fe:	d108      	bne.n	8008312 <HAL_TIMEx_PWMN_Stop+0x6a>
 8008300:	6a19      	ldr	r1, [r3, #32]
 8008302:	f240 4244 	movw	r2, #1092	@ 0x444
 8008306:	4211      	tst	r1, r2
 8008308:	d103      	bne.n	8008312 <HAL_TIMEx_PWMN_Stop+0x6a>
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008312:	b99d      	cbnz	r5, 800833c <HAL_TIMEx_PWMN_Stop+0x94>
 8008314:	2301      	movs	r3, #1
 8008316:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800831a:	2000      	movs	r0, #0
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	2908      	cmp	r1, #8
 8008320:	d8c9      	bhi.n	80082b6 <HAL_TIMEx_PWMN_Stop+0xe>
 8008322:	f240 1211 	movw	r2, #273	@ 0x111
 8008326:	40ca      	lsrs	r2, r1
 8008328:	f012 0f01 	tst.w	r2, #1
 800832c:	d1ce      	bne.n	80082cc <HAL_TIMEx_PWMN_Stop+0x24>
 800832e:	e7c2      	b.n	80082b6 <HAL_TIMEx_PWMN_Stop+0xe>
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
 8008330:	2d00      	cmp	r5, #0
 8008332:	d0cb      	beq.n	80082cc <HAL_TIMEx_PWMN_Stop+0x24>
 8008334:	e7c2      	b.n	80082bc <HAL_TIMEx_PWMN_Stop+0x14>
 8008336:	2d00      	cmp	r5, #0
 8008338:	d0c8      	beq.n	80082cc <HAL_TIMEx_PWMN_Stop+0x24>
 800833a:	e7c2      	b.n	80082c2 <HAL_TIMEx_PWMN_Stop+0x1a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800833c:	2d04      	cmp	r5, #4
 800833e:	d005      	beq.n	800834c <HAL_TIMEx_PWMN_Stop+0xa4>
 8008340:	2d08      	cmp	r5, #8
 8008342:	d007      	beq.n	8008354 <HAL_TIMEx_PWMN_Stop+0xac>
 8008344:	2301      	movs	r3, #1
 8008346:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
 800834a:	e7e6      	b.n	800831a <HAL_TIMEx_PWMN_Stop+0x72>
 800834c:	2301      	movs	r3, #1
 800834e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008352:	e7e2      	b.n	800831a <HAL_TIMEx_PWMN_Stop+0x72>
 8008354:	2301      	movs	r3, #1
 8008356:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800835a:	e7de      	b.n	800831a <HAL_TIMEx_PWMN_Stop+0x72>
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40014000 	.word	0x40014000
 8008364:	40014400 	.word	0x40014400
 8008368:	0801d6f0 	.word	0x0801d6f0

0800836c <HAL_TIMEx_MasterConfigSynchronization>:
{
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4604      	mov	r4, r0
 8008370:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008372:	6803      	ldr	r3, [r0, #0]
 8008374:	4a52      	ldr	r2, [pc, #328]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d013      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800837a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800837e:	d010      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8008380:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008384:	4293      	cmp	r3, r2
 8008386:	d00c      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8008388:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800838c:	4293      	cmp	r3, r2
 800838e:	d008      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8008390:	f502 3298 	add.w	r2, r2, #77824	@ 0x13000
 8008394:	4293      	cmp	r3, r2
 8008396:	d004      	beq.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8008398:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800839c:	4849      	ldr	r0, [pc, #292]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800839e:	f7fa f863 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	b16b      	cbz	r3, 80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083a6:	2b40      	cmp	r3, #64	@ 0x40
 80083a8:	d00b      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083aa:	d840      	bhi.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80083ac:	2b20      	cmp	r3, #32
 80083ae:	d008      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083b0:	2b30      	cmp	r3, #48	@ 0x30
 80083b2:	d006      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d004      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80083b8:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 80083bc:	4841      	ldr	r0, [pc, #260]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80083be:	f7fa f853 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80083c2:	68ab      	ldr	r3, [r5, #8]
 80083c4:	2b80      	cmp	r3, #128	@ 0x80
 80083c6:	d001      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d137      	bne.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0xd0>
  __HAL_LOCK(htim);
 80083cc:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d073      	beq.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0x150>
 80083d4:	2301      	movs	r3, #1
 80083d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80083da:	2302      	movs	r3, #2
 80083dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	685e      	ldr	r6, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80083e4:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083e6:	4a36      	ldr	r2, [pc, #216]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d02d      	beq.n	8008448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
  tmpcr2 &= ~TIM_CR2_MMS;
 80083ec:	f026 0670 	bic.w	r6, r6, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 80083f4:	6822      	ldr	r2, [r4, #0]
 80083f6:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	4a31      	ldr	r2, [pc, #196]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00a      	beq.n	8008416 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008404:	d007      	beq.n	8008416 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008406:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800840a:	4293      	cmp	r3, r2
 800840c:	d003      	beq.n	8008416 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800840e:	f502 329e 	add.w	r2, r2, #80896	@ 0x13c00
 8008412:	4293      	cmp	r3, r2
 8008414:	d104      	bne.n	8008420 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008416:	f027 0780 	bic.w	r7, r7, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800841a:	68aa      	ldr	r2, [r5, #8]
 800841c:	433a      	orrs	r2, r7
    htim->Instance->SMCR = tmpsmcr;
 800841e:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8008420:	2301      	movs	r3, #1
 8008422:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008426:	2000      	movs	r0, #0
 8008428:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 800842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800842e:	2b60      	cmp	r3, #96	@ 0x60
 8008430:	d0c7      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008432:	2b70      	cmp	r3, #112	@ 0x70
 8008434:	d0c5      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008436:	2b50      	cmp	r3, #80	@ 0x50
 8008438:	d1be      	bne.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800843a:	e7c2      	b.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800843c:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8008440:	4820      	ldr	r0, [pc, #128]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8008442:	f7fa f811 	bl	8002468 <assert_failed>
 8008446:	e7c1      	b.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8008448:	686b      	ldr	r3, [r5, #4]
 800844a:	b363      	cbz	r3, 80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 800844c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008450:	d029      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008456:	d026      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800845c:	d023      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 800845e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008462:	d020      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008464:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008468:	d01d      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 800846a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800846e:	d01a      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008470:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8008474:	d017      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008476:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800847a:	d014      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 800847c:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8008480:	d011      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008482:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008486:	d00e      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008488:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800848c:	d00b      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 800848e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008492:	d008      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 8008494:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8008498:	d005      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 800849a:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800849e:	d002      	beq.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
 80084a0:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 80084a4:	d104      	bne.n	80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x144>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084a6:	f426 0670 	bic.w	r6, r6, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084aa:	686b      	ldr	r3, [r5, #4]
 80084ac:	431e      	orrs	r6, r3
 80084ae:	e79d      	b.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0x80>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80084b0:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 80084b4:	4803      	ldr	r0, [pc, #12]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80084b6:	f7f9 ffd7 	bl	8002468 <assert_failed>
 80084ba:	e7f4      	b.n	80084a6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
  __HAL_LOCK(htim);
 80084bc:	2002      	movs	r0, #2
 80084be:	e7b5      	b.n	800842c <HAL_TIMEx_MasterConfigSynchronization+0xc0>
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	0801d6f0 	.word	0x0801d6f0

080084c8 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4606      	mov	r6, r0
 80084cc:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80084ce:	6803      	ldr	r3, [r0, #0]
 80084d0:	4a66      	ldr	r2, [pc, #408]	@ (800866c <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00c      	beq.n	80084f0 <HAL_TIMEx_ConfigBreakDeadTime+0x28>
 80084d6:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 80084da:	4293      	cmp	r3, r2
 80084dc:	d008      	beq.n	80084f0 <HAL_TIMEx_ConfigBreakDeadTime+0x28>
 80084de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d004      	beq.n	80084f0 <HAL_TIMEx_ConfigBreakDeadTime+0x28>
 80084e6:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 80084ea:	4861      	ldr	r0, [pc, #388]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80084ec:	f7f9 ffbc 	bl	8002468 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084f6:	d001      	beq.n	80084fc <HAL_TIMEx_ConfigBreakDeadTime+0x34>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d157      	bne.n	80085ac <HAL_TIMEx_ConfigBreakDeadTime+0xe4>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80084fc:	686b      	ldr	r3, [r5, #4]
 80084fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008502:	d001      	beq.n	8008508 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d157      	bne.n	80085b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8008508:	68ab      	ldr	r3, [r5, #8]
 800850a:	b143      	cbz	r3, 800851e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800850c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008510:	d005      	beq.n	800851e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8008512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008516:	d002      	beq.n	800851e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8008518:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800851c:	d152      	bne.n	80085c4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800851e:	68eb      	ldr	r3, [r5, #12]
 8008520:	2bff      	cmp	r3, #255	@ 0xff
 8008522:	d855      	bhi.n	80085d0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008524:	692b      	ldr	r3, [r5, #16]
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852a:	d001      	beq.n	8008530 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d155      	bne.n	80085dc <HAL_TIMEx_ConfigBreakDeadTime+0x114>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8008530:	696b      	ldr	r3, [r5, #20]
 8008532:	b113      	cbz	r3, 800853a <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008538:	d156      	bne.n	80085e8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800853a:	69ab      	ldr	r3, [r5, #24]
 800853c:	2b0f      	cmp	r3, #15
 800853e:	d859      	bhi.n	80085f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008540:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8008542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008546:	d001      	beq.n	800854c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d159      	bne.n	8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
  __HAL_LOCK(htim);
 800854c:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 8008550:	2b01      	cmp	r3, #1
 8008552:	f000 8088 	beq.w	8008666 <HAL_TIMEx_ConfigBreakDeadTime+0x19e>
 8008556:	2301      	movs	r3, #1
 8008558:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800855c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800855e:	f423 7440 	bic.w	r4, r3, #768	@ 0x300
 8008562:	68ab      	ldr	r3, [r5, #8]
 8008564:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008566:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 800856a:	686b      	ldr	r3, [r5, #4]
 800856c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800856e:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008576:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 800857a:	692b      	ldr	r3, [r5, #16]
 800857c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800857e:	f424 5400 	bic.w	r4, r4, #8192	@ 0x2000
 8008582:	696b      	ldr	r3, [r5, #20]
 8008584:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008586:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
 800858a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800858c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800858e:	f424 2470 	bic.w	r4, r4, #983040	@ 0xf0000
 8008592:	69ab      	ldr	r3, [r5, #24]
 8008594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008598:	6832      	ldr	r2, [r6, #0]
 800859a:	4b34      	ldr	r3, [pc, #208]	@ (800866c <HAL_TIMEx_ConfigBreakDeadTime+0x1a4>)
 800859c:	429a      	cmp	r2, r3
 800859e:	d035      	beq.n	800860c <HAL_TIMEx_ConfigBreakDeadTime+0x144>
  htim->Instance->BDTR = tmpbdtr;
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	645c      	str	r4, [r3, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80085a4:	2000      	movs	r0, #0
 80085a6:	f886 003c 	strb.w	r0, [r6, #60]	@ 0x3c
}
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80085ac:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 80085b0:	482f      	ldr	r0, [pc, #188]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80085b2:	f7f9 ff59 	bl	8002468 <assert_failed>
 80085b6:	e7a1      	b.n	80084fc <HAL_TIMEx_ConfigBreakDeadTime+0x34>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80085b8:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 80085bc:	482c      	ldr	r0, [pc, #176]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80085be:	f7f9 ff53 	bl	8002468 <assert_failed>
 80085c2:	e7a1      	b.n	8008508 <HAL_TIMEx_ConfigBreakDeadTime+0x40>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80085c4:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 80085c8:	4829      	ldr	r0, [pc, #164]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80085ca:	f7f9 ff4d 	bl	8002468 <assert_failed>
 80085ce:	e7a6      	b.n	800851e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80085d0:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 80085d4:	4826      	ldr	r0, [pc, #152]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80085d6:	f7f9 ff47 	bl	8002468 <assert_failed>
 80085da:	e7a3      	b.n	8008524 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80085dc:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 80085e0:	4823      	ldr	r0, [pc, #140]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80085e2:	f7f9 ff41 	bl	8002468 <assert_failed>
 80085e6:	e7a3      	b.n	8008530 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80085e8:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 80085ec:	4820      	ldr	r0, [pc, #128]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80085ee:	f7f9 ff3b 	bl	8002468 <assert_failed>
 80085f2:	e7a2      	b.n	800853a <HAL_TIMEx_ConfigBreakDeadTime+0x72>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 80085f4:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 80085f8:	481d      	ldr	r0, [pc, #116]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 80085fa:	f7f9 ff35 	bl	8002468 <assert_failed>
 80085fe:	e79f      	b.n	8008540 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008600:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 8008604:	481a      	ldr	r0, [pc, #104]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 8008606:	f7f9 ff2f 	bl	8002468 <assert_failed>
 800860a:	e79f      	b.n	800854c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800860c:	69eb      	ldr	r3, [r5, #28]
 800860e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008612:	d000      	beq.n	8008616 <HAL_TIMEx_ConfigBreakDeadTime+0x14e>
 8008614:	b9ab      	cbnz	r3, 8008642 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8008616:	6a2b      	ldr	r3, [r5, #32]
 8008618:	b113      	cbz	r3, 8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x158>
 800861a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800861e:	d116      	bne.n	800864e <HAL_TIMEx_ConfigBreakDeadTime+0x186>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8008620:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8008622:	2b0f      	cmp	r3, #15
 8008624:	d819      	bhi.n	800865a <HAL_TIMEx_ConfigBreakDeadTime+0x192>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008626:	f424 0470 	bic.w	r4, r4, #15728640	@ 0xf00000
 800862a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800862c:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008630:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8008634:	69eb      	ldr	r3, [r5, #28]
 8008636:	431c      	orrs	r4, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008638:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 800863c:	6a2b      	ldr	r3, [r5, #32]
 800863e:	431c      	orrs	r4, r3
 8008640:	e7ae      	b.n	80085a0 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8008642:	f640 0112 	movw	r1, #2066	@ 0x812
 8008646:	480a      	ldr	r0, [pc, #40]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 8008648:	f7f9 ff0e 	bl	8002468 <assert_failed>
 800864c:	e7e3      	b.n	8008616 <HAL_TIMEx_ConfigBreakDeadTime+0x14e>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800864e:	f640 0113 	movw	r1, #2067	@ 0x813
 8008652:	4807      	ldr	r0, [pc, #28]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 8008654:	f7f9 ff08 	bl	8002468 <assert_failed>
 8008658:	e7e2      	b.n	8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x158>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800865a:	f640 0114 	movw	r1, #2068	@ 0x814
 800865e:	4804      	ldr	r0, [pc, #16]	@ (8008670 <HAL_TIMEx_ConfigBreakDeadTime+0x1a8>)
 8008660:	f7f9 ff02 	bl	8002468 <assert_failed>
 8008664:	e7df      	b.n	8008626 <HAL_TIMEx_ConfigBreakDeadTime+0x15e>
  __HAL_LOCK(htim);
 8008666:	2002      	movs	r0, #2
 8008668:	e79f      	b.n	80085aa <HAL_TIMEx_ConfigBreakDeadTime+0xe2>
 800866a:	bf00      	nop
 800866c:	40012c00 	.word	0x40012c00
 8008670:	0801d6f0 	.word	0x0801d6f0

08008674 <HAL_TIMEx_CommutCallback>:
}
 8008674:	4770      	bx	lr

08008676 <HAL_TIMEx_BreakCallback>:
}
 8008676:	4770      	bx	lr

08008678 <HAL_TIMEx_Break2Callback>:
}
 8008678:	4770      	bx	lr
	...

0800867c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800867c:	b530      	push	{r4, r5, lr}
 800867e:	b089      	sub	sp, #36	@ 0x24
 8008680:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8008682:	4b1e      	ldr	r3, [pc, #120]	@ (80086fc <HAL_InitTick+0x80>)
 8008684:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008686:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800868a:	661a      	str	r2, [r3, #96]	@ 0x60
 800868c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800868e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008696:	a902      	add	r1, sp, #8
 8008698:	a803      	add	r0, sp, #12
 800869a:	f7fd fbe7 	bl	8005e6c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800869e:	f7fd fbd3 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80086a2:	4a17      	ldr	r2, [pc, #92]	@ (8008700 <HAL_InitTick+0x84>)
 80086a4:	fba2 2300 	umull	r2, r3, r2, r0
 80086a8:	0c9b      	lsrs	r3, r3, #18
 80086aa:	3b01      	subs	r3, #1

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80086ac:	4815      	ldr	r0, [pc, #84]	@ (8008704 <HAL_InitTick+0x88>)
 80086ae:	4a16      	ldr	r2, [pc, #88]	@ (8008708 <HAL_InitTick+0x8c>)
 80086b0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80086b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80086b6:	60c2      	str	r2, [r0, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80086b8:	6043      	str	r3, [r0, #4]
  htim16.Init.ClockDivision = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	6103      	str	r3, [r0, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086be:	6083      	str	r3, [r0, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086c0:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80086c2:	f7fe fbc7 	bl	8006e54 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80086c6:	4605      	mov	r5, r0
 80086c8:	b110      	cbz	r0, 80086d0 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 80086ca:	4628      	mov	r0, r5
 80086cc:	b009      	add	sp, #36	@ 0x24
 80086ce:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim16);
 80086d0:	480c      	ldr	r0, [pc, #48]	@ (8008704 <HAL_InitTick+0x88>)
 80086d2:	f7fe f9ef 	bl	8006ab4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80086d6:	4605      	mov	r5, r0
 80086d8:	2800      	cmp	r0, #0
 80086da:	d1f6      	bne.n	80086ca <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80086dc:	2019      	movs	r0, #25
 80086de:	f7fb fc83 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086e2:	2c0f      	cmp	r4, #15
 80086e4:	d901      	bls.n	80086ea <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 80086e6:	2501      	movs	r5, #1
 80086e8:	e7ef      	b.n	80086ca <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80086ea:	2200      	movs	r2, #0
 80086ec:	4621      	mov	r1, r4
 80086ee:	2019      	movs	r0, #25
 80086f0:	f7fb fc56 	bl	8003fa0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80086f4:	4b05      	ldr	r3, [pc, #20]	@ (800870c <HAL_InitTick+0x90>)
 80086f6:	601c      	str	r4, [r3, #0]
 80086f8:	e7e7      	b.n	80086ca <HAL_InitTick+0x4e>
 80086fa:	bf00      	nop
 80086fc:	40021000 	.word	0x40021000
 8008700:	431bde83 	.word	0x431bde83
 8008704:	2000805c 	.word	0x2000805c
 8008708:	40014400 	.word	0x40014400
 800870c:	2000000c 	.word	0x2000000c

08008710 <UART_EndTxTransfer>:
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008710:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	e852 3f00 	ldrex	r3, [r2]
 8008716:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871a:	e842 3100 	strex	r1, r3, [r2]
 800871e:	2900      	cmp	r1, #0
 8008720:	d1f6      	bne.n	8008710 <UART_EndTxTransfer>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008722:	2320      	movs	r3, #32
 8008724:	67c3      	str	r3, [r0, #124]	@ 0x7c
}
 8008726:	4770      	bx	lr

08008728 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008728:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	e852 3f00 	ldrex	r3, [r2]
 800872e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	e842 3100 	strex	r1, r3, [r2]
 8008736:	2900      	cmp	r1, #0
 8008738:	d1f6      	bne.n	8008728 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	f102 0308 	add.w	r3, r2, #8
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	3208      	adds	r2, #8
 800874a:	e842 3100 	strex	r1, r3, [r2]
 800874e:	2900      	cmp	r1, #0
 8008750:	d1f3      	bne.n	800873a <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008752:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8008754:	2b01      	cmp	r3, #1
 8008756:	d006      	beq.n	8008766 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008758:	2320      	movs	r3, #32
 800875a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875e:	2300      	movs	r3, #0
 8008760:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008762:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8008764:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008766:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	e852 3f00 	ldrex	r3, [r2]
 800876c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	e842 3100 	strex	r1, r3, [r2]
 8008774:	2900      	cmp	r1, #0
 8008776:	d1f6      	bne.n	8008766 <UART_EndRxTransfer+0x3e>
 8008778:	e7ee      	b.n	8008758 <UART_EndRxTransfer+0x30>
	...

0800877c <HAL_UART_Transmit_DMA>:
{
 800877c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800877e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008780:	2a20      	cmp	r2, #32
 8008782:	d13b      	bne.n	80087fc <HAL_UART_Transmit_DMA+0x80>
{
 8008784:	b510      	push	{r4, lr}
 8008786:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8008788:	2900      	cmp	r1, #0
 800878a:	d039      	beq.n	8008800 <HAL_UART_Transmit_DMA+0x84>
 800878c:	2b00      	cmp	r3, #0
 800878e:	d039      	beq.n	8008804 <HAL_UART_Transmit_DMA+0x88>
    huart->pTxBuffPtr  = pData;
 8008790:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008792:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008796:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879a:	2200      	movs	r2, #0
 800879c:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087a0:	2221      	movs	r2, #33	@ 0x21
 80087a2:	67c2      	str	r2, [r0, #124]	@ 0x7c
    if (huart->hdmatx != NULL)
 80087a4:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 80087a6:	b1c2      	cbz	r2, 80087da <HAL_UART_Transmit_DMA+0x5e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80087a8:	4917      	ldr	r1, [pc, #92]	@ (8008808 <HAL_UART_Transmit_DMA+0x8c>)
 80087aa:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80087ac:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 80087ae:	4917      	ldr	r1, [pc, #92]	@ (800880c <HAL_UART_Transmit_DMA+0x90>)
 80087b0:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80087b2:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 80087b4:	4916      	ldr	r1, [pc, #88]	@ (8008810 <HAL_UART_Transmit_DMA+0x94>)
 80087b6:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80087b8:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 80087ba:	2100      	movs	r1, #0
 80087bc:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80087be:	6802      	ldr	r2, [r0, #0]
 80087c0:	3228      	adds	r2, #40	@ 0x28
 80087c2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80087c4:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 80087c6:	f7fb fd43 	bl	8004250 <HAL_DMA_Start_IT>
 80087ca:	b130      	cbz	r0, 80087da <HAL_UART_Transmit_DMA+0x5e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087cc:	2310      	movs	r3, #16
 80087ce:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        huart->gState = HAL_UART_STATE_READY;
 80087d2:	2320      	movs	r3, #32
 80087d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_ERROR;
 80087d6:	2001      	movs	r0, #1
 80087d8:	e00f      	b.n	80087fa <HAL_UART_Transmit_DMA+0x7e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	2240      	movs	r2, #64	@ 0x40
 80087de:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	f102 0308 	add.w	r3, r2, #8
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	3208      	adds	r2, #8
 80087f0:	e842 3100 	strex	r1, r3, [r2]
 80087f4:	2900      	cmp	r1, #0
 80087f6:	d1f3      	bne.n	80087e0 <HAL_UART_Transmit_DMA+0x64>
    return HAL_OK;
 80087f8:	2000      	movs	r0, #0
}
 80087fa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80087fc:	2002      	movs	r0, #2
}
 80087fe:	4770      	bx	lr
      return HAL_ERROR;
 8008800:	2001      	movs	r0, #1
 8008802:	e7fa      	b.n	80087fa <HAL_UART_Transmit_DMA+0x7e>
 8008804:	2001      	movs	r0, #1
 8008806:	e7f8      	b.n	80087fa <HAL_UART_Transmit_DMA+0x7e>
 8008808:	080088c3 	.word	0x080088c3
 800880c:	0800892f 	.word	0x0800892f
 8008810:	0800893f 	.word	0x0800893f

08008814 <HAL_UART_DMAStop>:
{
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008818:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800881a:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800881e:	6803      	ldr	r3, [r0, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008826:	d001      	beq.n	800882c <HAL_UART_DMAStop+0x18>
 8008828:	2a21      	cmp	r2, #33	@ 0x21
 800882a:	d008      	beq.n	800883e <HAL_UART_DMAStop+0x2a>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008834:	d042      	beq.n	80088bc <HAL_UART_DMAStop+0xa8>
 8008836:	2d22      	cmp	r5, #34	@ 0x22
 8008838:	d020      	beq.n	800887c <HAL_UART_DMAStop+0x68>
  return HAL_OK;
 800883a:	2000      	movs	r0, #0
 800883c:	e03f      	b.n	80088be <HAL_UART_DMAStop+0xaa>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800883e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	f102 0308 	add.w	r3, r2, #8
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	3208      	adds	r2, #8
 800884e:	e842 3100 	strex	r1, r3, [r2]
 8008852:	2900      	cmp	r1, #0
 8008854:	d1f3      	bne.n	800883e <HAL_UART_DMAStop+0x2a>
    if (huart->hdmatx != NULL)
 8008856:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8008858:	b110      	cbz	r0, 8008860 <HAL_UART_DMAStop+0x4c>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800885a:	f7fb fd47 	bl	80042ec <HAL_DMA_Abort>
 800885e:	b918      	cbnz	r0, 8008868 <HAL_UART_DMAStop+0x54>
    UART_EndTxTransfer(huart);
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff ff55 	bl	8008710 <UART_EndTxTransfer>
 8008866:	e7e1      	b.n	800882c <HAL_UART_DMAStop+0x18>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008868:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800886a:	f7fb fdef 	bl	800444c <HAL_DMA_GetError>
 800886e:	2820      	cmp	r0, #32
 8008870:	d1f6      	bne.n	8008860 <HAL_UART_DMAStop+0x4c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008872:	2310      	movs	r3, #16
 8008874:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8008878:	2003      	movs	r0, #3
 800887a:	e020      	b.n	80088be <HAL_UART_DMAStop+0xaa>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800887c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	f102 0308 	add.w	r3, r2, #8
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	3208      	adds	r2, #8
 800888c:	e842 3100 	strex	r1, r3, [r2]
 8008890:	2900      	cmp	r1, #0
 8008892:	d1f3      	bne.n	800887c <HAL_UART_DMAStop+0x68>
    if (huart->hdmarx != NULL)
 8008894:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008896:	b110      	cbz	r0, 800889e <HAL_UART_DMAStop+0x8a>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008898:	f7fb fd28 	bl	80042ec <HAL_DMA_Abort>
 800889c:	b920      	cbnz	r0, 80088a8 <HAL_UART_DMAStop+0x94>
    UART_EndRxTransfer(huart);
 800889e:	4620      	mov	r0, r4
 80088a0:	f7ff ff42 	bl	8008728 <UART_EndRxTransfer>
  return HAL_OK;
 80088a4:	2000      	movs	r0, #0
 80088a6:	e00a      	b.n	80088be <HAL_UART_DMAStop+0xaa>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80088a8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80088aa:	f7fb fdcf 	bl	800444c <HAL_DMA_GetError>
 80088ae:	2820      	cmp	r0, #32
 80088b0:	d1f5      	bne.n	800889e <HAL_UART_DMAStop+0x8a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088b2:	2310      	movs	r3, #16
 80088b4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80088b8:	2003      	movs	r0, #3
 80088ba:	e000      	b.n	80088be <HAL_UART_DMAStop+0xaa>
  return HAL_OK;
 80088bc:	2000      	movs	r0, #0
}
 80088be:	bd38      	pop	{r3, r4, r5, pc}

080088c0 <HAL_UART_TxCpltCallback>:
}
 80088c0:	4770      	bx	lr

080088c2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088c2:	b508      	push	{r3, lr}
 80088c4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c6:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f013 0f20 	tst.w	r3, #32
 80088d0:	d118      	bne.n	8008904 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088d8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	f102 0308 	add.w	r3, r2, #8
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	3208      	adds	r2, #8
 80088e8:	e842 3100 	strex	r1, r3, [r2]
 80088ec:	2900      	cmp	r1, #0
 80088ee:	d1f3      	bne.n	80088d8 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	e852 3f00 	ldrex	r3, [r2]
 80088f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	e842 3100 	strex	r1, r3, [r2]
 80088fe:	2900      	cmp	r1, #0
 8008900:	d1f6      	bne.n	80088f0 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008902:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008904:	f7ff ffdc 	bl	80088c0 <HAL_UART_TxCpltCallback>
}
 8008908:	e7fb      	b.n	8008902 <UART_DMATransmitCplt+0x40>

0800890a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800890a:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800890c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	e852 3f00 	ldrex	r3, [r2]
 8008912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	e842 3100 	strex	r1, r3, [r2]
 800891a:	2900      	cmp	r1, #0
 800891c:	d1f6      	bne.n	800890c <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800891e:	2320      	movs	r3, #32
 8008920:	67c3      	str	r3, [r0, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	66c3      	str	r3, [r0, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008926:	f7ff ffcb 	bl	80088c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800892a:	bd08      	pop	{r3, pc}

0800892c <HAL_UART_TxHalfCpltCallback>:
}
 800892c:	4770      	bx	lr

0800892e <UART_DMATxHalfCplt>:
{
 800892e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8008930:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8008932:	f7ff fffb 	bl	800892c <HAL_UART_TxHalfCpltCallback>
}
 8008936:	bd08      	pop	{r3, pc}

08008938 <HAL_UART_RxCpltCallback>:
}
 8008938:	4770      	bx	lr

0800893a <HAL_UART_RxHalfCpltCallback>:
}
 800893a:	4770      	bx	lr

0800893c <HAL_UART_ErrorCallback>:
}
 800893c:	4770      	bx	lr

0800893e <UART_DMAError>:
{
 800893e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008940:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008942:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008944:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008950:	d001      	beq.n	8008956 <UART_DMAError+0x18>
 8008952:	2a21      	cmp	r2, #33	@ 0x21
 8008954:	d010      	beq.n	8008978 <UART_DMAError+0x3a>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800895e:	d001      	beq.n	8008964 <UART_DMAError+0x26>
 8008960:	2d22      	cmp	r5, #34	@ 0x22
 8008962:	d010      	beq.n	8008986 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008964:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8008968:	f043 0310 	orr.w	r3, r3, #16
 800896c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  HAL_UART_ErrorCallback(huart);
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff ffe3 	bl	800893c <HAL_UART_ErrorCallback>
}
 8008976:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800897e:	4620      	mov	r0, r4
 8008980:	f7ff fec6 	bl	8008710 <UART_EndTxTransfer>
 8008984:	e7e7      	b.n	8008956 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800898c:	4620      	mov	r0, r4
 800898e:	f7ff fecb 	bl	8008728 <UART_EndRxTransfer>
 8008992:	e7e7      	b.n	8008964 <UART_DMAError+0x26>

08008994 <UART_DMAAbortOnError>:
{
 8008994:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008996:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800899e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 80089a2:	f7ff ffcb 	bl	800893c <HAL_UART_ErrorCallback>
}
 80089a6:	bd08      	pop	{r3, pc}

080089a8 <HAL_UARTEx_RxEventCallback>:
}
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_UART_IRQHandler>:
{
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089b0:	6802      	ldr	r2, [r0, #0]
 80089b2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089b4:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089b6:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80089b8:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 80089bc:	ea13 0f0c 	tst.w	r3, ip
 80089c0:	d10a      	bne.n	80089d8 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089c2:	f013 0f20 	tst.w	r3, #32
 80089c6:	d00d      	beq.n	80089e4 <HAL_UART_IRQHandler+0x38>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089c8:	f011 0f20 	tst.w	r1, #32
 80089cc:	d00a      	beq.n	80089e4 <HAL_UART_IRQHandler+0x38>
      if (huart->RxISR != NULL)
 80089ce:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80089d0:	b30b      	cbz	r3, 8008a16 <HAL_UART_IRQHandler+0x6a>
        huart->RxISR(huart);
 80089d2:	4620      	mov	r0, r4
 80089d4:	4798      	blx	r3
      return;
 80089d6:	e01e      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80089d8:	f010 0501 	ands.w	r5, r0, #1
 80089dc:	d11c      	bne.n	8008a18 <HAL_UART_IRQHandler+0x6c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80089de:	4ead      	ldr	r6, [pc, #692]	@ (8008c94 <HAL_UART_IRQHandler+0x2e8>)
 80089e0:	4231      	tst	r1, r6
 80089e2:	d119      	bne.n	8008a18 <HAL_UART_IRQHandler+0x6c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e4:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80089e6:	2d01      	cmp	r5, #1
 80089e8:	f000 80a4 	beq.w	8008b34 <HAL_UART_IRQHandler+0x188>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80089f0:	d003      	beq.n	80089fa <HAL_UART_IRQHandler+0x4e>
 80089f2:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 80089f6:	f040 8146 	bne.w	8008c86 <HAL_UART_IRQHandler+0x2da>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089fe:	d003      	beq.n	8008a08 <HAL_UART_IRQHandler+0x5c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a00:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008a04:	f040 814a 	bne.w	8008c9c <HAL_UART_IRQHandler+0x2f0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a08:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008a0c:	d003      	beq.n	8008a16 <HAL_UART_IRQHandler+0x6a>
 8008a0e:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8008a12:	f040 814a 	bne.w	8008caa <HAL_UART_IRQHandler+0x2fe>
}
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a18:	f013 0f01 	tst.w	r3, #1
 8008a1c:	d009      	beq.n	8008a32 <HAL_UART_IRQHandler+0x86>
 8008a1e:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8008a22:	d006      	beq.n	8008a32 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a24:	2001      	movs	r0, #1
 8008a26:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a28:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008a2c:	4302      	orrs	r2, r0
 8008a2e:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a32:	f013 0f02 	tst.w	r3, #2
 8008a36:	d009      	beq.n	8008a4c <HAL_UART_IRQHandler+0xa0>
 8008a38:	b145      	cbz	r5, 8008a4c <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a3a:	6822      	ldr	r2, [r4, #0]
 8008a3c:	2002      	movs	r0, #2
 8008a3e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a40:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008a44:	f042 0204 	orr.w	r2, r2, #4
 8008a48:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a4c:	f013 0f04 	tst.w	r3, #4
 8008a50:	d009      	beq.n	8008a66 <HAL_UART_IRQHandler+0xba>
 8008a52:	b145      	cbz	r5, 8008a66 <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a54:	6822      	ldr	r2, [r4, #0]
 8008a56:	2004      	movs	r0, #4
 8008a58:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a5a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008a5e:	f042 0202 	orr.w	r2, r2, #2
 8008a62:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a66:	f013 0f08 	tst.w	r3, #8
 8008a6a:	d00b      	beq.n	8008a84 <HAL_UART_IRQHandler+0xd8>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a6c:	f011 0f20 	tst.w	r1, #32
 8008a70:	d100      	bne.n	8008a74 <HAL_UART_IRQHandler+0xc8>
 8008a72:	b13d      	cbz	r5, 8008a84 <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a74:	6822      	ldr	r2, [r4, #0]
 8008a76:	2008      	movs	r0, #8
 8008a78:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a7a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008a7e:	4302      	orrs	r2, r0
 8008a80:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a84:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8008a88:	d00c      	beq.n	8008aa4 <HAL_UART_IRQHandler+0xf8>
 8008a8a:	f011 6f80 	tst.w	r1, #67108864	@ 0x4000000
 8008a8e:	d009      	beq.n	8008aa4 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a90:	6822      	ldr	r2, [r4, #0]
 8008a92:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008a96:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a98:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008a9c:	f042 0220 	orr.w	r2, r2, #32
 8008aa0:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aa4:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008aa8:	2a00      	cmp	r2, #0
 8008aaa:	d0b4      	beq.n	8008a16 <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008aac:	f013 0f20 	tst.w	r3, #32
 8008ab0:	d006      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x114>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ab2:	f011 0f20 	tst.w	r1, #32
 8008ab6:	d003      	beq.n	8008ac0 <HAL_UART_IRQHandler+0x114>
        if (huart->RxISR != NULL)
 8008ab8:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008aba:	b10b      	cbz	r3, 8008ac0 <HAL_UART_IRQHandler+0x114>
          huart->RxISR(huart);
 8008abc:	4620      	mov	r0, r4
 8008abe:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8008ac0:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008acc:	d102      	bne.n	8008ad4 <HAL_UART_IRQHandler+0x128>
 8008ace:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8008ad2:	d028      	beq.n	8008b26 <HAL_UART_IRQHandler+0x17a>
        UART_EndRxTransfer(huart);
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f7ff fe27 	bl	8008728 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008ae2:	d01c      	beq.n	8008b1e <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	f102 0308 	add.w	r3, r2, #8
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	3208      	adds	r2, #8
 8008af4:	e842 3100 	strex	r1, r3, [r2]
 8008af8:	2900      	cmp	r1, #0
 8008afa:	d1f3      	bne.n	8008ae4 <HAL_UART_IRQHandler+0x138>
          if (huart->hdmarx != NULL)
 8008afc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008afe:	b153      	cbz	r3, 8008b16 <HAL_UART_IRQHandler+0x16a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b00:	4a65      	ldr	r2, [pc, #404]	@ (8008c98 <HAL_UART_IRQHandler+0x2ec>)
 8008b02:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b04:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008b06:	f7fb fc15 	bl	8004334 <HAL_DMA_Abort_IT>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d083      	beq.n	8008a16 <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b0e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008b10:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008b12:	4798      	blx	r3
 8008b14:	e77f      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8008b16:	4620      	mov	r0, r4
 8008b18:	f7ff ff10 	bl	800893c <HAL_UART_ErrorCallback>
 8008b1c:	e77b      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
          HAL_UART_ErrorCallback(huart);
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7ff ff0c 	bl	800893c <HAL_UART_ErrorCallback>
 8008b24:	e777      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
        HAL_UART_ErrorCallback(huart);
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff ff08 	bl	800893c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return;
 8008b32:	e770      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b34:	f013 0f10 	tst.w	r3, #16
 8008b38:	f43f af58 	beq.w	80089ec <HAL_UART_IRQHandler+0x40>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b3c:	f011 0f10 	tst.w	r1, #16
 8008b40:	f43f af54 	beq.w	80089ec <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b44:	2310      	movs	r3, #16
 8008b46:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008b50:	d05f      	beq.n	8008c12 <HAL_UART_IRQHandler+0x266>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b52:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8008b54:	680a      	ldr	r2, [r1, #0]
 8008b56:	6853      	ldr	r3, [r2, #4]
 8008b58:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d049      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b5e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
 8008b62:	4298      	cmp	r0, r3
 8008b64:	d945      	bls.n	8008bf2 <HAL_UART_IRQHandler+0x246>
        huart->RxXferCount = nb_remaining_rx_data;
 8008b66:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b6a:	680b      	ldr	r3, [r1, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f013 0f20 	tst.w	r3, #32
 8008b72:	d131      	bne.n	8008bd8 <HAL_UART_IRQHandler+0x22c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b74:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	e852 3f00 	ldrex	r3, [r2]
 8008b7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	e842 3100 	strex	r1, r3, [r2]
 8008b82:	2900      	cmp	r1, #0
 8008b84:	d1f6      	bne.n	8008b74 <HAL_UART_IRQHandler+0x1c8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	f102 0308 	add.w	r3, r2, #8
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	3208      	adds	r2, #8
 8008b96:	e842 3100 	strex	r1, r3, [r2]
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	d1f3      	bne.n	8008b86 <HAL_UART_IRQHandler+0x1da>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	f102 0308 	add.w	r3, r2, #8
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	3208      	adds	r2, #8
 8008bae:	e842 3100 	strex	r1, r3, [r2]
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d1f3      	bne.n	8008b9e <HAL_UART_IRQHandler+0x1f2>
          huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	2320      	movs	r3, #32
 8008bb8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6623      	str	r3, [r4, #96]	@ 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	e852 3f00 	ldrex	r3, [r2]
 8008bc6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	e842 3100 	strex	r1, r3, [r2]
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d1f6      	bne.n	8008bc0 <HAL_UART_IRQHandler+0x214>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bd2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008bd4:	f7fb fb8a 	bl	80042ec <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bdc:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8008be0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	1ac9      	subs	r1, r1, r3
 8008be8:	b289      	uxth	r1, r1
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7ff fedc 	bl	80089a8 <HAL_UARTEx_RxEventCallback>
 8008bf0:	e711      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008bf2:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	f47f af0d 	bne.w	8008a16 <HAL_UART_IRQHandler+0x6a>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008bfc:	6813      	ldr	r3, [r2, #0]
 8008bfe:	f013 0f20 	tst.w	r3, #32
 8008c02:	f43f af08 	beq.w	8008a16 <HAL_UART_IRQHandler+0x6a>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c06:	2302      	movs	r3, #2
 8008c08:	6663      	str	r3, [r4, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff fecc 	bl	80089a8 <HAL_UARTEx_RxEventCallback>
      return;
 8008c10:	e701      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c12:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8008c16:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	1ac9      	subs	r1, r1, r3
 8008c1e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008c20:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f43f aef5 	beq.w	8008a16 <HAL_UART_IRQHandler+0x6a>
          && (nb_rx_data > 0U))
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	f43f aef2 	beq.w	8008a16 <HAL_UART_IRQHandler+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	e852 3f00 	ldrex	r3, [r2]
 8008c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	e842 3000 	strex	r0, r3, [r2]
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d1f6      	bne.n	8008c32 <HAL_UART_IRQHandler+0x286>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	f102 0308 	add.w	r3, r2, #8
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	3208      	adds	r2, #8
 8008c54:	e842 3000 	strex	r0, r3, [r2]
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d1f3      	bne.n	8008c44 <HAL_UART_IRQHandler+0x298>
        huart->RxState = HAL_UART_STATE_READY;
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c62:	2300      	movs	r3, #0
 8008c64:	6623      	str	r3, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 8008c66:	66a3      	str	r3, [r4, #104]	@ 0x68
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	e852 3f00 	ldrex	r3, [r2]
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	e842 3000 	strex	r0, r3, [r2]
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1f6      	bne.n	8008c68 <HAL_UART_IRQHandler+0x2bc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f7ff fe92 	bl	80089a8 <HAL_UARTEx_RxEventCallback>
      return;
 8008c84:	e6c7      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c86:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008c8a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fcf1 	bl	8009674 <HAL_UARTEx_WakeupCallback>
    return;
 8008c92:	e6c0      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
 8008c94:	04000120 	.word	0x04000120
 8008c98:	08008995 	.word	0x08008995
    if (huart->TxISR != NULL)
 8008c9c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f43f aeb9 	beq.w	8008a16 <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4798      	blx	r3
    return;
 8008ca8:	e6b5      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
    UART_EndTransmit_IT(huart);
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7ff fe2d 	bl	800890a <UART_EndTransmit_IT>
    return;
 8008cb0:	e6b1      	b.n	8008a16 <HAL_UART_IRQHandler+0x6a>
 8008cb2:	bf00      	nop

08008cb4 <UART_DMARxHalfCplt>:
{
 8008cb4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cbc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d002      	beq.n	8008cc8 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8008cc2:	f7ff fe3a 	bl	800893a <HAL_UART_RxHalfCpltCallback>
}
 8008cc6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008cc8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8008ccc:	0849      	lsrs	r1, r1, #1
 8008cce:	f7ff fe6b 	bl	80089a8 <HAL_UARTEx_RxEventCallback>
 8008cd2:	e7f8      	b.n	8008cc6 <UART_DMARxHalfCplt+0x12>

08008cd4 <UART_DMAReceiveCplt>:
{
 8008cd4:	b508      	push	{r3, lr}
 8008cd6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cd8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f013 0f20 	tst.w	r3, #32
 8008ce2:	d129      	bne.n	8008d38 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	e852 3f00 	ldrex	r3, [r2]
 8008cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	e842 3100 	strex	r1, r3, [r2]
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d1f6      	bne.n	8008cea <UART_DMAReceiveCplt+0x16>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cfc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	f102 0308 	add.w	r3, r2, #8
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	3208      	adds	r2, #8
 8008d0c:	e842 3100 	strex	r1, r3, [r2]
 8008d10:	2900      	cmp	r1, #0
 8008d12:	d1f3      	bne.n	8008cfc <UART_DMAReceiveCplt+0x28>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d14:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	f102 0308 	add.w	r3, r2, #8
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	3208      	adds	r2, #8
 8008d24:	e842 3100 	strex	r1, r3, [r2]
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d1f3      	bne.n	8008d14 <UART_DMAReceiveCplt+0x40>
    huart->RxState = HAL_UART_STATE_READY;
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d32:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d007      	beq.n	8008d48 <UART_DMAReceiveCplt+0x74>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d00c      	beq.n	8008d5c <UART_DMAReceiveCplt+0x88>
    HAL_UART_RxCpltCallback(huart);
 8008d42:	f7ff fdf9 	bl	8008938 <HAL_UART_RxCpltCallback>
}
 8008d46:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d48:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	e852 3f00 	ldrex	r3, [r2]
 8008d4e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	e842 3100 	strex	r1, r3, [r2]
 8008d56:	2900      	cmp	r1, #0
 8008d58:	d1f6      	bne.n	8008d48 <UART_DMAReceiveCplt+0x74>
 8008d5a:	e7ed      	b.n	8008d38 <UART_DMAReceiveCplt+0x64>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d5c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8008d60:	f7ff fe22 	bl	80089a8 <HAL_UARTEx_RxEventCallback>
 8008d64:	e7ef      	b.n	8008d46 <UART_DMAReceiveCplt+0x72>
	...

08008d68 <UART_SetConfig>:
{
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008d6c:	6842      	ldr	r2, [r0, #4]
 8008d6e:	4b95      	ldr	r3, [pc, #596]	@ (8008fc4 <UART_SetConfig+0x25c>)
 8008d70:	429a      	cmp	r2, r3
 8008d72:	f200 808e 	bhi.w	8008e92 <UART_SetConfig+0x12a>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d7c:	d004      	beq.n	8008d88 <UART_SetConfig+0x20>
 8008d7e:	b11b      	cbz	r3, 8008d88 <UART_SetConfig+0x20>
 8008d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d84:	f040 808b 	bne.w	8008e9e <UART_SetConfig+0x136>
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d88:	6822      	ldr	r2, [r4, #0]
 8008d8a:	4b8f      	ldr	r3, [pc, #572]	@ (8008fc8 <UART_SetConfig+0x260>)
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	f000 808c 	beq.w	8008eaa <UART_SetConfig+0x142>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d98:	d007      	beq.n	8008daa <UART_SetConfig+0x42>
 8008d9a:	b133      	cbz	r3, 8008daa <UART_SetConfig+0x42>
 8008d9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008da0:	d003      	beq.n	8008daa <UART_SetConfig+0x42>
 8008da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008da6:	f040 808d 	bne.w	8008ec4 <UART_SetConfig+0x15c>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008daa:	6a23      	ldr	r3, [r4, #32]
 8008dac:	b11b      	cbz	r3, 8008db6 <UART_SetConfig+0x4e>
 8008dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008db2:	f040 808d 	bne.w	8008ed0 <UART_SetConfig+0x168>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	b133      	cbz	r3, 8008dc8 <UART_SetConfig+0x60>
 8008dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dbe:	d003      	beq.n	8008dc8 <UART_SetConfig+0x60>
 8008dc0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008dc4:	f040 808a 	bne.w	8008edc <UART_SetConfig+0x174>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008dc8:	6963      	ldr	r3, [r4, #20]
 8008dca:	f033 020c 	bics.w	r2, r3, #12
 8008dce:	d100      	bne.n	8008dd2 <UART_SetConfig+0x6a>
 8008dd0:	b923      	cbnz	r3, 8008ddc <UART_SetConfig+0x74>
 8008dd2:	f640 4165 	movw	r1, #3173	@ 0xc65
 8008dd6:	487d      	ldr	r0, [pc, #500]	@ (8008fcc <UART_SetConfig+0x264>)
 8008dd8:	f7f9 fb46 	bl	8002468 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008ddc:	69a3      	ldr	r3, [r4, #24]
 8008dde:	b143      	cbz	r3, 8008df2 <UART_SetConfig+0x8a>
 8008de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008de4:	d005      	beq.n	8008df2 <UART_SetConfig+0x8a>
 8008de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dea:	d002      	beq.n	8008df2 <UART_SetConfig+0x8a>
 8008dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008df0:	d17a      	bne.n	8008ee8 <UART_SetConfig+0x180>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008df2:	69e3      	ldr	r3, [r4, #28]
 8008df4:	b113      	cbz	r3, 8008dfc <UART_SetConfig+0x94>
 8008df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dfa:	d17b      	bne.n	8008ef4 <UART_SetConfig+0x18c>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dfc:	68a3      	ldr	r3, [r4, #8]
 8008dfe:	6922      	ldr	r2, [r4, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	6962      	ldr	r2, [r4, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	69e2      	ldr	r2, [r4, #28]
 8008e08:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e0a:	6821      	ldr	r1, [r4, #0]
 8008e0c:	6808      	ldr	r0, [r1, #0]
 8008e0e:	4a70      	ldr	r2, [pc, #448]	@ (8008fd0 <UART_SetConfig+0x268>)
 8008e10:	4002      	ands	r2, r0
 8008e12:	431a      	orrs	r2, r3
 8008e14:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e16:	6822      	ldr	r2, [r4, #0]
 8008e18:	6853      	ldr	r3, [r2, #4]
 8008e1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008e1e:	68e1      	ldr	r1, [r4, #12]
 8008e20:	430b      	orrs	r3, r1
 8008e22:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e24:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	4b67      	ldr	r3, [pc, #412]	@ (8008fc8 <UART_SetConfig+0x260>)
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d001      	beq.n	8008e32 <UART_SetConfig+0xca>
    tmpreg |= huart->Init.OneBitSampling;
 8008e2e:	6a23      	ldr	r3, [r4, #32]
 8008e30:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e32:	6893      	ldr	r3, [r2, #8]
 8008e34:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	4a65      	ldr	r2, [pc, #404]	@ (8008fd4 <UART_SetConfig+0x26c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d05d      	beq.n	8008f00 <UART_SetConfig+0x198>
 8008e44:	4a64      	ldr	r2, [pc, #400]	@ (8008fd8 <UART_SetConfig+0x270>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d06e      	beq.n	8008f28 <UART_SetConfig+0x1c0>
 8008e4a:	4a64      	ldr	r2, [pc, #400]	@ (8008fdc <UART_SetConfig+0x274>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	f000 8084 	beq.w	8008f5a <UART_SetConfig+0x1f2>
 8008e52:	4a63      	ldr	r2, [pc, #396]	@ (8008fe0 <UART_SetConfig+0x278>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	f000 8093 	beq.w	8008f80 <UART_SetConfig+0x218>
 8008e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8008fc8 <UART_SetConfig+0x260>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	f000 80a1 	beq.w	8008fa4 <UART_SetConfig+0x23c>
 8008e62:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e64:	4958      	ldr	r1, [pc, #352]	@ (8008fc8 <UART_SetConfig+0x260>)
 8008e66:	428b      	cmp	r3, r1
 8008e68:	f000 80dd 	beq.w	8009026 <UART_SetConfig+0x2be>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e6c:	69e0      	ldr	r0, [r4, #28]
 8008e6e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008e72:	f000 8108 	beq.w	8009086 <UART_SetConfig+0x31e>
    switch (clocksource)
 8008e76:	2a08      	cmp	r2, #8
 8008e78:	f200 815c 	bhi.w	8009134 <UART_SetConfig+0x3cc>
 8008e7c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008e80:	01430130 	.word	0x01430130
 8008e84:	015a012e 	.word	0x015a012e
 8008e88:	015a0146 	.word	0x015a0146
 8008e8c:	015a015a 	.word	0x015a015a
 8008e90:	0149      	.short	0x0149
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008e92:	f640 4158 	movw	r1, #3160	@ 0xc58
 8008e96:	484d      	ldr	r0, [pc, #308]	@ (8008fcc <UART_SetConfig+0x264>)
 8008e98:	f7f9 fae6 	bl	8002468 <assert_failed>
 8008e9c:	e76b      	b.n	8008d76 <UART_SetConfig+0xe>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008e9e:	f640 4159 	movw	r1, #3161	@ 0xc59
 8008ea2:	484a      	ldr	r0, [pc, #296]	@ (8008fcc <UART_SetConfig+0x264>)
 8008ea4:	f7f9 fae0 	bl	8002468 <assert_failed>
 8008ea8:	e76e      	b.n	8008d88 <UART_SetConfig+0x20>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8008eaa:	68e3      	ldr	r3, [r4, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d082      	beq.n	8008db6 <UART_SetConfig+0x4e>
 8008eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb4:	f43f af7f 	beq.w	8008db6 <UART_SetConfig+0x4e>
 8008eb8:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8008ebc:	4843      	ldr	r0, [pc, #268]	@ (8008fcc <UART_SetConfig+0x264>)
 8008ebe:	f7f9 fad3 	bl	8002468 <assert_failed>
 8008ec2:	e778      	b.n	8008db6 <UART_SetConfig+0x4e>
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008ec4:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8008ec8:	4840      	ldr	r0, [pc, #256]	@ (8008fcc <UART_SetConfig+0x264>)
 8008eca:	f7f9 facd 	bl	8002468 <assert_failed>
 8008ece:	e76c      	b.n	8008daa <UART_SetConfig+0x42>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8008ed0:	f640 4161 	movw	r1, #3169	@ 0xc61
 8008ed4:	483d      	ldr	r0, [pc, #244]	@ (8008fcc <UART_SetConfig+0x264>)
 8008ed6:	f7f9 fac7 	bl	8002468 <assert_failed>
 8008eda:	e76c      	b.n	8008db6 <UART_SetConfig+0x4e>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008edc:	f640 4164 	movw	r1, #3172	@ 0xc64
 8008ee0:	483a      	ldr	r0, [pc, #232]	@ (8008fcc <UART_SetConfig+0x264>)
 8008ee2:	f7f9 fac1 	bl	8002468 <assert_failed>
 8008ee6:	e76f      	b.n	8008dc8 <UART_SetConfig+0x60>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008ee8:	f640 4166 	movw	r1, #3174	@ 0xc66
 8008eec:	4837      	ldr	r0, [pc, #220]	@ (8008fcc <UART_SetConfig+0x264>)
 8008eee:	f7f9 fabb 	bl	8002468 <assert_failed>
 8008ef2:	e77e      	b.n	8008df2 <UART_SetConfig+0x8a>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008ef4:	f640 4167 	movw	r1, #3175	@ 0xc67
 8008ef8:	4834      	ldr	r0, [pc, #208]	@ (8008fcc <UART_SetConfig+0x264>)
 8008efa:	f7f9 fab5 	bl	8002468 <assert_failed>
 8008efe:	e77d      	b.n	8008dfc <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f00:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8008f04:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008f08:	f002 0203 	and.w	r2, r2, #3
 8008f0c:	2a03      	cmp	r2, #3
 8008f0e:	d809      	bhi.n	8008f24 <UART_SetConfig+0x1bc>
 8008f10:	e8df f002 	tbb	[pc, r2]
 8008f14:	066d0402 	.word	0x066d0402
 8008f18:	2201      	movs	r2, #1
 8008f1a:	e7a3      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f1c:	2204      	movs	r2, #4
 8008f1e:	e7a1      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f20:	2208      	movs	r2, #8
 8008f22:	e79f      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f24:	2210      	movs	r2, #16
 8008f26:	e79d      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f28:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8008f2c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008f30:	f002 020c 	and.w	r2, r2, #12
 8008f34:	2a0c      	cmp	r2, #12
 8008f36:	d80e      	bhi.n	8008f56 <UART_SetConfig+0x1ee>
 8008f38:	e8df f002 	tbb	[pc, r2]
 8008f3c:	0d0d0d07 	.word	0x0d0d0d07
 8008f40:	0d0d0d09 	.word	0x0d0d0d09
 8008f44:	0d0d0d5b 	.word	0x0d0d0d5b
 8008f48:	0b          	.byte	0x0b
 8008f49:	00          	.byte	0x00
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	e78a      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f4e:	2204      	movs	r2, #4
 8008f50:	e788      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f52:	2208      	movs	r2, #8
 8008f54:	e786      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f56:	2210      	movs	r2, #16
 8008f58:	e784      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f5a:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8008f5e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008f62:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8008f66:	2a20      	cmp	r2, #32
 8008f68:	d045      	beq.n	8008ff6 <UART_SetConfig+0x28e>
 8008f6a:	d805      	bhi.n	8008f78 <UART_SetConfig+0x210>
 8008f6c:	2a00      	cmp	r2, #0
 8008f6e:	d044      	beq.n	8008ffa <UART_SetConfig+0x292>
 8008f70:	2a10      	cmp	r2, #16
 8008f72:	d144      	bne.n	8008ffe <UART_SetConfig+0x296>
 8008f74:	2204      	movs	r2, #4
 8008f76:	e775      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f78:	2a30      	cmp	r2, #48	@ 0x30
 8008f7a:	d142      	bne.n	8009002 <UART_SetConfig+0x29a>
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	e771      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f80:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 8008f84:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008f88:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8008f8c:	2a80      	cmp	r2, #128	@ 0x80
 8008f8e:	d03a      	beq.n	8009006 <UART_SetConfig+0x29e>
 8008f90:	d804      	bhi.n	8008f9c <UART_SetConfig+0x234>
 8008f92:	b3d2      	cbz	r2, 800900a <UART_SetConfig+0x2a2>
 8008f94:	2a40      	cmp	r2, #64	@ 0x40
 8008f96:	d13a      	bne.n	800900e <UART_SetConfig+0x2a6>
 8008f98:	2204      	movs	r2, #4
 8008f9a:	e763      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008f9c:	2ac0      	cmp	r2, #192	@ 0xc0
 8008f9e:	d138      	bne.n	8009012 <UART_SetConfig+0x2aa>
 8008fa0:	2208      	movs	r2, #8
 8008fa2:	e75f      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008fa4:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8008fa8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008fac:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8008fb0:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8008fb4:	d02f      	beq.n	8009016 <UART_SetConfig+0x2ae>
 8008fb6:	d815      	bhi.n	8008fe4 <UART_SetConfig+0x27c>
 8008fb8:	b37a      	cbz	r2, 800901a <UART_SetConfig+0x2b2>
 8008fba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008fbe:	d12e      	bne.n	800901e <UART_SetConfig+0x2b6>
 8008fc0:	2204      	movs	r2, #4
 8008fc2:	e74f      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008fc4:	00989680 	.word	0x00989680
 8008fc8:	40008000 	.word	0x40008000
 8008fcc:	0801d728 	.word	0x0801d728
 8008fd0:	efff69f3 	.word	0xefff69f3
 8008fd4:	40013800 	.word	0x40013800
 8008fd8:	40004400 	.word	0x40004400
 8008fdc:	40004800 	.word	0x40004800
 8008fe0:	40004c00 	.word	0x40004c00
 8008fe4:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8008fe8:	d11b      	bne.n	8009022 <UART_SetConfig+0x2ba>
 8008fea:	2208      	movs	r2, #8
 8008fec:	e73a      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008fee:	2202      	movs	r2, #2
 8008ff0:	e738      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	e736      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	e734      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	e732      	b.n	8008e64 <UART_SetConfig+0xfc>
 8008ffe:	2210      	movs	r2, #16
 8009000:	e730      	b.n	8008e64 <UART_SetConfig+0xfc>
 8009002:	2210      	movs	r2, #16
 8009004:	e72e      	b.n	8008e64 <UART_SetConfig+0xfc>
 8009006:	2202      	movs	r2, #2
 8009008:	e72c      	b.n	8008e64 <UART_SetConfig+0xfc>
 800900a:	2200      	movs	r2, #0
 800900c:	e72a      	b.n	8008e64 <UART_SetConfig+0xfc>
 800900e:	2210      	movs	r2, #16
 8009010:	e728      	b.n	8008e64 <UART_SetConfig+0xfc>
 8009012:	2210      	movs	r2, #16
 8009014:	e726      	b.n	8008e64 <UART_SetConfig+0xfc>
 8009016:	2202      	movs	r2, #2
 8009018:	e724      	b.n	8008e64 <UART_SetConfig+0xfc>
 800901a:	2200      	movs	r2, #0
 800901c:	e722      	b.n	8008e64 <UART_SetConfig+0xfc>
 800901e:	2210      	movs	r2, #16
 8009020:	e720      	b.n	8008e64 <UART_SetConfig+0xfc>
 8009022:	2210      	movs	r2, #16
 8009024:	e71e      	b.n	8008e64 <UART_SetConfig+0xfc>
    switch (clocksource)
 8009026:	2a08      	cmp	r2, #8
 8009028:	d876      	bhi.n	8009118 <UART_SetConfig+0x3b0>
 800902a:	e8df f002 	tbb	[pc, r2]
 800902e:	7508      	.short	0x7508
 8009030:	750d7510 	.word	0x750d7510
 8009034:	7575      	.short	0x7575
 8009036:	05          	.byte	0x05
 8009037:	00          	.byte	0x00
 8009038:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800903c:	e008      	b.n	8009050 <UART_SetConfig+0x2e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800903e:	f7fc fef1 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009042:	b928      	cbnz	r0, 8009050 <UART_SetConfig+0x2e8>
 8009044:	2000      	movs	r0, #0
 8009046:	e076      	b.n	8009136 <UART_SetConfig+0x3ce>
        pclk = HAL_RCC_GetSysClockFreq();
 8009048:	f7fc f95e 	bl	8005308 <HAL_RCC_GetSysClockFreq>
        break;
 800904c:	e7f9      	b.n	8009042 <UART_SetConfig+0x2da>
        pclk = (uint32_t) HSI_VALUE;
 800904e:	483e      	ldr	r0, [pc, #248]	@ (8009148 <UART_SetConfig+0x3e0>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009050:	6862      	ldr	r2, [r4, #4]
 8009052:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8009056:	4283      	cmp	r3, r0
 8009058:	d860      	bhi.n	800911c <UART_SetConfig+0x3b4>
 800905a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800905e:	d85f      	bhi.n	8009120 <UART_SetConfig+0x3b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009060:	0e01      	lsrs	r1, r0, #24
 8009062:	0200      	lsls	r0, r0, #8
 8009064:	0853      	lsrs	r3, r2, #1
 8009066:	18c0      	adds	r0, r0, r3
 8009068:	f04f 0300 	mov.w	r3, #0
 800906c:	f141 0100 	adc.w	r1, r1, #0
 8009070:	f7f7 fe32 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009074:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8009078:	4b34      	ldr	r3, [pc, #208]	@ (800914c <UART_SetConfig+0x3e4>)
 800907a:	429a      	cmp	r2, r3
 800907c:	d852      	bhi.n	8009124 <UART_SetConfig+0x3bc>
          huart->Instance->BRR = usartdiv;
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	60d8      	str	r0, [r3, #12]
 8009082:	2000      	movs	r0, #0
 8009084:	e057      	b.n	8009136 <UART_SetConfig+0x3ce>
    switch (clocksource)
 8009086:	2a08      	cmp	r2, #8
 8009088:	d84e      	bhi.n	8009128 <UART_SetConfig+0x3c0>
 800908a:	e8df f002 	tbb	[pc, r2]
 800908e:	2107      	.short	0x2107
 8009090:	4d244d05 	.word	0x4d244d05
 8009094:	4d4d      	.short	0x4d4d
 8009096:	0b          	.byte	0x0b
 8009097:	00          	.byte	0x00
 8009098:	482b      	ldr	r0, [pc, #172]	@ (8009148 <UART_SetConfig+0x3e0>)
 800909a:	e003      	b.n	80090a4 <UART_SetConfig+0x33c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800909c:	f7fc fec2 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d043      	beq.n	800912c <UART_SetConfig+0x3c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090a4:	6862      	ldr	r2, [r4, #4]
 80090a6:	0853      	lsrs	r3, r2, #1
 80090a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80090ac:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b0:	f1a3 0110 	sub.w	r1, r3, #16
 80090b4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80090b8:	4291      	cmp	r1, r2
 80090ba:	d839      	bhi.n	8009130 <UART_SetConfig+0x3c8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090bc:	b29a      	uxth	r2, r3
 80090be:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090c2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80090c6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	60d3      	str	r3, [r2, #12]
 80090cc:	2000      	movs	r0, #0
 80090ce:	e032      	b.n	8009136 <UART_SetConfig+0x3ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 80090d0:	f7fc feba 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
        break;
 80090d4:	e7e4      	b.n	80090a0 <UART_SetConfig+0x338>
        pclk = HAL_RCC_GetSysClockFreq();
 80090d6:	f7fc f917 	bl	8005308 <HAL_RCC_GetSysClockFreq>
        break;
 80090da:	e7e1      	b.n	80090a0 <UART_SetConfig+0x338>
    switch (clocksource)
 80090dc:	481a      	ldr	r0, [pc, #104]	@ (8009148 <UART_SetConfig+0x3e0>)
 80090de:	e002      	b.n	80090e6 <UART_SetConfig+0x37e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e0:	f7fc fea0 	bl	8005e24 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80090e4:	b358      	cbz	r0, 800913e <UART_SetConfig+0x3d6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090e6:	6863      	ldr	r3, [r4, #4]
 80090e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80090ec:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090f0:	f1a0 0210 	sub.w	r2, r0, #16
 80090f4:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d822      	bhi.n	8009142 <UART_SetConfig+0x3da>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	b280      	uxth	r0, r0
 8009100:	60d8      	str	r0, [r3, #12]
 8009102:	2000      	movs	r0, #0
 8009104:	e017      	b.n	8009136 <UART_SetConfig+0x3ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009106:	f7fc fe9f 	bl	8005e48 <HAL_RCC_GetPCLK2Freq>
        break;
 800910a:	e7eb      	b.n	80090e4 <UART_SetConfig+0x37c>
        pclk = HAL_RCC_GetSysClockFreq();
 800910c:	f7fc f8fc 	bl	8005308 <HAL_RCC_GetSysClockFreq>
        break;
 8009110:	e7e8      	b.n	80090e4 <UART_SetConfig+0x37c>
        pclk = (uint32_t) LSE_VALUE;
 8009112:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009116:	e7e6      	b.n	80090e6 <UART_SetConfig+0x37e>
    switch (clocksource)
 8009118:	2001      	movs	r0, #1
 800911a:	e00c      	b.n	8009136 <UART_SetConfig+0x3ce>
        ret = HAL_ERROR;
 800911c:	2001      	movs	r0, #1
 800911e:	e00a      	b.n	8009136 <UART_SetConfig+0x3ce>
 8009120:	2001      	movs	r0, #1
 8009122:	e008      	b.n	8009136 <UART_SetConfig+0x3ce>
          ret = HAL_ERROR;
 8009124:	2001      	movs	r0, #1
 8009126:	e006      	b.n	8009136 <UART_SetConfig+0x3ce>
    switch (clocksource)
 8009128:	2001      	movs	r0, #1
 800912a:	e004      	b.n	8009136 <UART_SetConfig+0x3ce>
 800912c:	2000      	movs	r0, #0
 800912e:	e002      	b.n	8009136 <UART_SetConfig+0x3ce>
        ret = HAL_ERROR;
 8009130:	2001      	movs	r0, #1
 8009132:	e000      	b.n	8009136 <UART_SetConfig+0x3ce>
    switch (clocksource)
 8009134:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8009136:	2300      	movs	r3, #0
 8009138:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800913a:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800913c:	bd10      	pop	{r4, pc}
 800913e:	2000      	movs	r0, #0
 8009140:	e7f9      	b.n	8009136 <UART_SetConfig+0x3ce>
        ret = HAL_ERROR;
 8009142:	2001      	movs	r0, #1
 8009144:	e7f7      	b.n	8009136 <UART_SetConfig+0x3ce>
 8009146:	bf00      	nop
 8009148:	00f42400 	.word	0x00f42400
 800914c:	000ffcff 	.word	0x000ffcff

08009150 <UART_AdvFeatureConfig>:
{
 8009150:	b510      	push	{r4, lr}
 8009152:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009154:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009156:	2bff      	cmp	r3, #255	@ 0xff
 8009158:	f200 809d 	bhi.w	8009296 <UART_AdvFeatureConfig+0x146>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800915c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800915e:	f013 0f08 	tst.w	r3, #8
 8009162:	d00c      	beq.n	800917e <UART_AdvFeatureConfig+0x2e>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009166:	b11b      	cbz	r3, 8009170 <UART_AdvFeatureConfig+0x20>
 8009168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800916c:	f040 8099 	bne.w	80092a2 <UART_AdvFeatureConfig+0x152>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009170:	6822      	ldr	r2, [r4, #0]
 8009172:	6853      	ldr	r3, [r2, #4]
 8009174:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800917a:	430b      	orrs	r3, r1
 800917c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800917e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009180:	f013 0f01 	tst.w	r3, #1
 8009184:	d00c      	beq.n	80091a0 <UART_AdvFeatureConfig+0x50>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009186:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009188:	b11b      	cbz	r3, 8009192 <UART_AdvFeatureConfig+0x42>
 800918a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800918e:	f040 808e 	bne.w	80092ae <UART_AdvFeatureConfig+0x15e>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	6853      	ldr	r3, [r2, #4]
 8009196:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800919a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800919c:	430b      	orrs	r3, r1
 800919e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091a2:	f013 0f02 	tst.w	r3, #2
 80091a6:	d00c      	beq.n	80091c2 <UART_AdvFeatureConfig+0x72>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80091a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80091aa:	b11b      	cbz	r3, 80091b4 <UART_AdvFeatureConfig+0x64>
 80091ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091b0:	f040 8083 	bne.w	80092ba <UART_AdvFeatureConfig+0x16a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	6853      	ldr	r3, [r2, #4]
 80091b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091bc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80091be:	430b      	orrs	r3, r1
 80091c0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091c4:	f013 0f04 	tst.w	r3, #4
 80091c8:	d00b      	beq.n	80091e2 <UART_AdvFeatureConfig+0x92>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80091ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80091cc:	b113      	cbz	r3, 80091d4 <UART_AdvFeatureConfig+0x84>
 80091ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091d2:	d178      	bne.n	80092c6 <UART_AdvFeatureConfig+0x176>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091d4:	6822      	ldr	r2, [r4, #0]
 80091d6:	6853      	ldr	r3, [r2, #4]
 80091d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80091de:	430b      	orrs	r3, r1
 80091e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091e4:	f013 0f10 	tst.w	r3, #16
 80091e8:	d00b      	beq.n	8009202 <UART_AdvFeatureConfig+0xb2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80091ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80091ec:	b113      	cbz	r3, 80091f4 <UART_AdvFeatureConfig+0xa4>
 80091ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f2:	d16e      	bne.n	80092d2 <UART_AdvFeatureConfig+0x182>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091f4:	6822      	ldr	r2, [r4, #0]
 80091f6:	6893      	ldr	r3, [r2, #8]
 80091f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80091fe:	430b      	orrs	r3, r1
 8009200:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009202:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009204:	f013 0f20 	tst.w	r3, #32
 8009208:	d00b      	beq.n	8009222 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800920a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800920c:	b113      	cbz	r3, 8009214 <UART_AdvFeatureConfig+0xc4>
 800920e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009212:	d164      	bne.n	80092de <UART_AdvFeatureConfig+0x18e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009214:	6822      	ldr	r2, [r4, #0]
 8009216:	6893      	ldr	r3, [r2, #8]
 8009218:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800921c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800921e:	430b      	orrs	r3, r1
 8009220:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009222:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009224:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009228:	d024      	beq.n	8009274 <UART_AdvFeatureConfig+0x124>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	4a41      	ldr	r2, [pc, #260]	@ (8009334 <UART_AdvFeatureConfig+0x1e4>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d010      	beq.n	8009254 <UART_AdvFeatureConfig+0x104>
 8009232:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8009236:	4293      	cmp	r3, r2
 8009238:	d00c      	beq.n	8009254 <UART_AdvFeatureConfig+0x104>
 800923a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800923e:	4293      	cmp	r3, r2
 8009240:	d008      	beq.n	8009254 <UART_AdvFeatureConfig+0x104>
 8009242:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009246:	4293      	cmp	r3, r2
 8009248:	d004      	beq.n	8009254 <UART_AdvFeatureConfig+0x104>
 800924a:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800924e:	483a      	ldr	r0, [pc, #232]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 8009250:	f7f9 f90a 	bl	8002468 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009256:	b113      	cbz	r3, 800925e <UART_AdvFeatureConfig+0x10e>
 8009258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800925c:	d145      	bne.n	80092ea <UART_AdvFeatureConfig+0x19a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800925e:	6822      	ldr	r2, [r4, #0]
 8009260:	6853      	ldr	r3, [r2, #4]
 8009262:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009266:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8009268:	430b      	orrs	r3, r1
 800926a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800926c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800926e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009272:	d040      	beq.n	80092f6 <UART_AdvFeatureConfig+0x1a6>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009274:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009276:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800927a:	d00b      	beq.n	8009294 <UART_AdvFeatureConfig+0x144>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800927c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800927e:	b113      	cbz	r3, 8009286 <UART_AdvFeatureConfig+0x136>
 8009280:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009284:	d150      	bne.n	8009328 <UART_AdvFeatureConfig+0x1d8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	6853      	ldr	r3, [r2, #4]
 800928a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800928e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009290:	430b      	orrs	r3, r1
 8009292:	6053      	str	r3, [r2, #4]
}
 8009294:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009296:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800929a:	4827      	ldr	r0, [pc, #156]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 800929c:	f7f9 f8e4 	bl	8002468 <assert_failed>
 80092a0:	e75c      	b.n	800915c <UART_AdvFeatureConfig+0xc>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80092a2:	f640 5152 	movw	r1, #3410	@ 0xd52
 80092a6:	4824      	ldr	r0, [pc, #144]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 80092a8:	f7f9 f8de 	bl	8002468 <assert_failed>
 80092ac:	e760      	b.n	8009170 <UART_AdvFeatureConfig+0x20>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80092ae:	f640 5159 	movw	r1, #3417	@ 0xd59
 80092b2:	4821      	ldr	r0, [pc, #132]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 80092b4:	f7f9 f8d8 	bl	8002468 <assert_failed>
 80092b8:	e76b      	b.n	8009192 <UART_AdvFeatureConfig+0x42>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80092ba:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 80092be:	481e      	ldr	r0, [pc, #120]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 80092c0:	f7f9 f8d2 	bl	8002468 <assert_failed>
 80092c4:	e776      	b.n	80091b4 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80092c6:	f640 5167 	movw	r1, #3431	@ 0xd67
 80092ca:	481b      	ldr	r0, [pc, #108]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 80092cc:	f7f9 f8cc 	bl	8002468 <assert_failed>
 80092d0:	e780      	b.n	80091d4 <UART_AdvFeatureConfig+0x84>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80092d2:	f640 516e 	movw	r1, #3438	@ 0xd6e
 80092d6:	4818      	ldr	r0, [pc, #96]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 80092d8:	f7f9 f8c6 	bl	8002468 <assert_failed>
 80092dc:	e78a      	b.n	80091f4 <UART_AdvFeatureConfig+0xa4>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80092de:	f640 5175 	movw	r1, #3445	@ 0xd75
 80092e2:	4815      	ldr	r0, [pc, #84]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 80092e4:	f7f9 f8c0 	bl	8002468 <assert_failed>
 80092e8:	e794      	b.n	8009214 <UART_AdvFeatureConfig+0xc4>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80092ea:	f640 517d 	movw	r1, #3453	@ 0xd7d
 80092ee:	4812      	ldr	r0, [pc, #72]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 80092f0:	f7f9 f8ba 	bl	8002468 <assert_failed>
 80092f4:	e7b3      	b.n	800925e <UART_AdvFeatureConfig+0x10e>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80092f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80092f8:	b143      	cbz	r3, 800930c <UART_AdvFeatureConfig+0x1bc>
 80092fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092fe:	d005      	beq.n	800930c <UART_AdvFeatureConfig+0x1bc>
 8009300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009304:	d002      	beq.n	800930c <UART_AdvFeatureConfig+0x1bc>
 8009306:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800930a:	d107      	bne.n	800931c <UART_AdvFeatureConfig+0x1cc>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800930c:	6822      	ldr	r2, [r4, #0]
 800930e:	6853      	ldr	r3, [r2, #4]
 8009310:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009314:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009316:	430b      	orrs	r3, r1
 8009318:	6053      	str	r3, [r2, #4]
 800931a:	e7ab      	b.n	8009274 <UART_AdvFeatureConfig+0x124>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800931c:	f640 5182 	movw	r1, #3458	@ 0xd82
 8009320:	4805      	ldr	r0, [pc, #20]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 8009322:	f7f9 f8a1 	bl	8002468 <assert_failed>
 8009326:	e7f1      	b.n	800930c <UART_AdvFeatureConfig+0x1bc>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009328:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800932c:	4802      	ldr	r0, [pc, #8]	@ (8009338 <UART_AdvFeatureConfig+0x1e8>)
 800932e:	f7f9 f89b 	bl	8002468 <assert_failed>
 8009332:	e7a8      	b.n	8009286 <UART_AdvFeatureConfig+0x136>
 8009334:	40013800 	.word	0x40013800
 8009338:	0801d728 	.word	0x0801d728

0800933c <UART_WaitOnFlagUntilTimeout>:
{
 800933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009340:	4605      	mov	r5, r0
 8009342:	460e      	mov	r6, r1
 8009344:	4617      	mov	r7, r2
 8009346:	4699      	mov	r9, r3
 8009348:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	69dc      	ldr	r4, [r3, #28]
 8009350:	ea36 0404 	bics.w	r4, r6, r4
 8009354:	bf0c      	ite	eq
 8009356:	2401      	moveq	r4, #1
 8009358:	2400      	movne	r4, #0
 800935a:	42bc      	cmp	r4, r7
 800935c:	d136      	bne.n	80093cc <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 800935e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009362:	d0f3      	beq.n	800934c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009364:	f7f9 ff88 	bl	8003278 <HAL_GetTick>
 8009368:	eba0 0009 	sub.w	r0, r0, r9
 800936c:	4540      	cmp	r0, r8
 800936e:	d830      	bhi.n	80093d2 <UART_WaitOnFlagUntilTimeout+0x96>
 8009370:	f1b8 0f00 	cmp.w	r8, #0
 8009374:	d02f      	beq.n	80093d6 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009376:	682b      	ldr	r3, [r5, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	f012 0f04 	tst.w	r2, #4
 800937e:	d0e5      	beq.n	800934c <UART_WaitOnFlagUntilTimeout+0x10>
 8009380:	2e80      	cmp	r6, #128	@ 0x80
 8009382:	d0e3      	beq.n	800934c <UART_WaitOnFlagUntilTimeout+0x10>
 8009384:	2e40      	cmp	r6, #64	@ 0x40
 8009386:	d0e1      	beq.n	800934c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009388:	69da      	ldr	r2, [r3, #28]
 800938a:	f012 0f08 	tst.w	r2, #8
 800938e:	d111      	bne.n	80093b4 <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009390:	69da      	ldr	r2, [r3, #28]
 8009392:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8009396:	d0d9      	beq.n	800934c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009398:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800939c:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800939e:	4628      	mov	r0, r5
 80093a0:	f7ff f9c2 	bl	8008728 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093a4:	2320      	movs	r3, #32
 80093a6:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80093aa:	2300      	movs	r3, #0
 80093ac:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 80093b0:	2003      	movs	r0, #3
 80093b2:	e00c      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093b4:	2408      	movs	r4, #8
 80093b6:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff f9b5 	bl	8008728 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093be:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80093c2:	2300      	movs	r3, #0
 80093c4:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 80093c8:	2001      	movs	r0, #1
 80093ca:	e000      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 80093cc:	2000      	movs	r0, #0
}
 80093ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80093d2:	2003      	movs	r0, #3
 80093d4:	e7fb      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0x92>
 80093d6:	2003      	movs	r0, #3
 80093d8:	e7f9      	b.n	80093ce <UART_WaitOnFlagUntilTimeout+0x92>

080093da <UART_CheckIdleState>:
{
 80093da:	b530      	push	{r4, r5, lr}
 80093dc:	b083      	sub	sp, #12
 80093de:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80093e6:	f7f9 ff47 	bl	8003278 <HAL_GetTick>
 80093ea:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	f012 0f08 	tst.w	r2, #8
 80093f4:	d10f      	bne.n	8009416 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f013 0f04 	tst.w	r3, #4
 80093fe:	d126      	bne.n	800944e <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8009400:	2320      	movs	r3, #32
 8009402:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009404:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009408:	2000      	movs	r0, #0
 800940a:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800940c:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800940e:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8009412:	b003      	add	sp, #12
 8009414:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009416:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	4603      	mov	r3, r0
 800941e:	2200      	movs	r2, #0
 8009420:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009424:	4620      	mov	r0, r4
 8009426:	f7ff ff89 	bl	800933c <UART_WaitOnFlagUntilTimeout>
 800942a:	2800      	cmp	r0, #0
 800942c:	d0e3      	beq.n	80093f6 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800942e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	e852 3f00 	ldrex	r3, [r2]
 8009434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	e842 3100 	strex	r1, r3, [r2]
 800943c:	2900      	cmp	r1, #0
 800943e:	d1f6      	bne.n	800942e <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8009440:	2320      	movs	r3, #32
 8009442:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 8009444:	2300      	movs	r3, #0
 8009446:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 800944a:	2003      	movs	r0, #3
 800944c:	e7e1      	b.n	8009412 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800944e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	462b      	mov	r3, r5
 8009456:	2200      	movs	r2, #0
 8009458:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800945c:	4620      	mov	r0, r4
 800945e:	f7ff ff6d 	bl	800933c <UART_WaitOnFlagUntilTimeout>
 8009462:	2800      	cmp	r0, #0
 8009464:	d0cc      	beq.n	8009400 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009466:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	e852 3f00 	ldrex	r3, [r2]
 800946c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	e842 3100 	strex	r1, r3, [r2]
 8009474:	2900      	cmp	r1, #0
 8009476:	d1f6      	bne.n	8009466 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009478:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	f102 0308 	add.w	r3, r2, #8
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	3208      	adds	r2, #8
 8009488:	e842 3100 	strex	r1, r3, [r2]
 800948c:	2900      	cmp	r1, #0
 800948e:	d1f3      	bne.n	8009478 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8009490:	2320      	movs	r3, #32
 8009492:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 8009496:	2300      	movs	r3, #0
 8009498:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 800949c:	2003      	movs	r0, #3
 800949e:	e7b8      	b.n	8009412 <UART_CheckIdleState+0x38>

080094a0 <HAL_UART_Init>:
  if (huart == NULL)
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d066      	beq.n	8009572 <HAL_UART_Init+0xd2>
{
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80094a8:	6983      	ldr	r3, [r0, #24]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d03d      	beq.n	800952a <HAL_UART_Init+0x8a>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80094ae:	6803      	ldr	r3, [r0, #0]
 80094b0:	4a31      	ldr	r2, [pc, #196]	@ (8009578 <HAL_UART_Init+0xd8>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d014      	beq.n	80094e0 <HAL_UART_Init+0x40>
 80094b6:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d010      	beq.n	80094e0 <HAL_UART_Init+0x40>
 80094be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00c      	beq.n	80094e0 <HAL_UART_Init+0x40>
 80094c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d008      	beq.n	80094e0 <HAL_UART_Init+0x40>
 80094ce:	f502 5250 	add.w	r2, r2, #13312	@ 0x3400
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d004      	beq.n	80094e0 <HAL_UART_Init+0x40>
 80094d6:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80094da:	4828      	ldr	r0, [pc, #160]	@ (800957c <HAL_UART_Init+0xdc>)
 80094dc:	f7f8 ffc4 	bl	8002468 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 80094e0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d03b      	beq.n	800955e <HAL_UART_Init+0xbe>
  huart->gState = HAL_UART_STATE_BUSY;
 80094e6:	2324      	movs	r3, #36	@ 0x24
 80094e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	6813      	ldr	r3, [r2, #0]
 80094ee:	f023 0301 	bic.w	r3, r3, #1
 80094f2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d137      	bne.n	800956a <HAL_UART_Init+0xca>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094fa:	4620      	mov	r0, r4
 80094fc:	f7ff fc34 	bl	8008d68 <UART_SetConfig>
 8009500:	2801      	cmp	r0, #1
 8009502:	d011      	beq.n	8009528 <HAL_UART_Init+0x88>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009504:	6822      	ldr	r2, [r4, #0]
 8009506:	6853      	ldr	r3, [r2, #4]
 8009508:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800950c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	6893      	ldr	r3, [r2, #8]
 8009512:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8009516:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	f043 0301 	orr.w	r3, r3, #1
 8009520:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8009522:	4620      	mov	r0, r4
 8009524:	f7ff ff59 	bl	80093da <UART_CheckIdleState>
}
 8009528:	bd10      	pop	{r4, pc}
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800952a:	6803      	ldr	r3, [r0, #0]
 800952c:	4a12      	ldr	r2, [pc, #72]	@ (8009578 <HAL_UART_Init+0xd8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d0d6      	beq.n	80094e0 <HAL_UART_Init+0x40>
 8009532:	f5a2 4274 	sub.w	r2, r2, #62464	@ 0xf400
 8009536:	4293      	cmp	r3, r2
 8009538:	d0d2      	beq.n	80094e0 <HAL_UART_Init+0x40>
 800953a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800953e:	4293      	cmp	r3, r2
 8009540:	d0ce      	beq.n	80094e0 <HAL_UART_Init+0x40>
 8009542:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009546:	4293      	cmp	r3, r2
 8009548:	d0ca      	beq.n	80094e0 <HAL_UART_Init+0x40>
 800954a:	f502 5250 	add.w	r2, r2, #13312	@ 0x3400
 800954e:	4293      	cmp	r3, r2
 8009550:	d0c6      	beq.n	80094e0 <HAL_UART_Init+0x40>
 8009552:	f240 1157 	movw	r1, #343	@ 0x157
 8009556:	4809      	ldr	r0, [pc, #36]	@ (800957c <HAL_UART_Init+0xdc>)
 8009558:	f7f8 ff86 	bl	8002468 <assert_failed>
 800955c:	e7c0      	b.n	80094e0 <HAL_UART_Init+0x40>
    huart->Lock = HAL_UNLOCKED;
 800955e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8009562:	4620      	mov	r0, r4
 8009564:	f001 fb44 	bl	800abf0 <HAL_UART_MspInit>
 8009568:	e7bd      	b.n	80094e6 <HAL_UART_Init+0x46>
    UART_AdvFeatureConfig(huart);
 800956a:	4620      	mov	r0, r4
 800956c:	f7ff fdf0 	bl	8009150 <UART_AdvFeatureConfig>
 8009570:	e7c3      	b.n	80094fa <HAL_UART_Init+0x5a>
    return HAL_ERROR;
 8009572:	2001      	movs	r0, #1
}
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	40013800 	.word	0x40013800
 800957c:	0801d728 	.word	0x0801d728

08009580 <UART_Start_Receive_DMA>:
{
 8009580:	b510      	push	{r4, lr}
 8009582:	4604      	mov	r4, r0
 8009584:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8009586:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009588:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958c:	2200      	movs	r2, #0
 800958e:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009592:	2222      	movs	r2, #34	@ 0x22
 8009594:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8009598:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 800959a:	b18a      	cbz	r2, 80095c0 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800959c:	491f      	ldr	r1, [pc, #124]	@ (800961c <UART_Start_Receive_DMA+0x9c>)
 800959e:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095a0:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 80095a2:	491f      	ldr	r1, [pc, #124]	@ (8009620 <UART_Start_Receive_DMA+0xa0>)
 80095a4:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095a6:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 80095a8:	491e      	ldr	r1, [pc, #120]	@ (8009624 <UART_Start_Receive_DMA+0xa4>)
 80095aa:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 80095ac:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 80095ae:	2100      	movs	r1, #0
 80095b0:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095b2:	6801      	ldr	r1, [r0, #0]
 80095b4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80095b6:	3124      	adds	r1, #36	@ 0x24
 80095b8:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80095ba:	f7fa fe49 	bl	8004250 <HAL_DMA_Start_IT>
 80095be:	bb20      	cbnz	r0, 800960a <UART_Start_Receive_DMA+0x8a>
  if (huart->Init.Parity != UART_PARITY_NONE)
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	b143      	cbz	r3, 80095d6 <UART_Start_Receive_DMA+0x56>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	e852 3f00 	ldrex	r3, [r2]
 80095ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ce:	e842 3100 	strex	r1, r3, [r2]
 80095d2:	2900      	cmp	r1, #0
 80095d4:	d1f6      	bne.n	80095c4 <UART_Start_Receive_DMA+0x44>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	f102 0308 	add.w	r3, r2, #8
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	3208      	adds	r2, #8
 80095e6:	e842 3100 	strex	r1, r3, [r2]
 80095ea:	2900      	cmp	r1, #0
 80095ec:	d1f3      	bne.n	80095d6 <UART_Start_Receive_DMA+0x56>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	f102 0308 	add.w	r3, r2, #8
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	3208      	adds	r2, #8
 80095fe:	e842 3100 	strex	r1, r3, [r2]
 8009602:	2900      	cmp	r1, #0
 8009604:	d1f3      	bne.n	80095ee <UART_Start_Receive_DMA+0x6e>
  return HAL_OK;
 8009606:	2000      	movs	r0, #0
}
 8009608:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800960a:	2310      	movs	r3, #16
 800960c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8009610:	2320      	movs	r3, #32
 8009612:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8009616:	2001      	movs	r0, #1
 8009618:	e7f6      	b.n	8009608 <UART_Start_Receive_DMA+0x88>
 800961a:	bf00      	nop
 800961c:	08008cd5 	.word	0x08008cd5
 8009620:	08008cb5 	.word	0x08008cb5
 8009624:	0800893f 	.word	0x0800893f

08009628 <HAL_UART_Receive_DMA>:
{
 8009628:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800962a:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800962e:	2b20      	cmp	r3, #32
 8009630:	d117      	bne.n	8009662 <HAL_UART_Receive_DMA+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8009632:	b1c1      	cbz	r1, 8009666 <HAL_UART_Receive_DMA+0x3e>
 8009634:	b1ca      	cbz	r2, 800966a <HAL_UART_Receive_DMA+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009636:	2300      	movs	r3, #0
 8009638:	6603      	str	r3, [r0, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800963a:	6803      	ldr	r3, [r0, #0]
 800963c:	4c0c      	ldr	r4, [pc, #48]	@ (8009670 <HAL_UART_Receive_DMA+0x48>)
 800963e:	42a3      	cmp	r3, r4
 8009640:	d00c      	beq.n	800965c <HAL_UART_Receive_DMA+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009648:	d008      	beq.n	800965c <HAL_UART_Receive_DMA+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800964a:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	e854 3f00 	ldrex	r3, [r4]
 8009650:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	e844 3500 	strex	r5, r3, [r4]
 8009658:	2d00      	cmp	r5, #0
 800965a:	d1f6      	bne.n	800964a <HAL_UART_Receive_DMA+0x22>
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800965c:	f7ff ff90 	bl	8009580 <UART_Start_Receive_DMA>
 8009660:	e000      	b.n	8009664 <HAL_UART_Receive_DMA+0x3c>
    return HAL_BUSY;
 8009662:	2002      	movs	r0, #2
}
 8009664:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009666:	2001      	movs	r0, #1
 8009668:	e7fc      	b.n	8009664 <HAL_UART_Receive_DMA+0x3c>
 800966a:	2001      	movs	r0, #1
 800966c:	e7fa      	b.n	8009664 <HAL_UART_Receive_DMA+0x3c>
 800966e:	bf00      	nop
 8009670:	40008000 	.word	0x40008000

08009674 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009674:	4770      	bx	lr

08009676 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009676:	e7fe      	b.n	8009676 <NMI_Handler>

08009678 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009678:	e7fe      	b.n	8009678 <HardFault_Handler>

0800967a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800967a:	e7fe      	b.n	800967a <MemManage_Handler>

0800967c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800967c:	e7fe      	b.n	800967c <BusFault_Handler>

0800967e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800967e:	e7fe      	b.n	800967e <UsageFault_Handler>

08009680 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009680:	4770      	bx	lr

08009682 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8009682:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MD_ENCA_Pin);
 8009684:	2002      	movs	r0, #2
 8009686:	f7fb f86d 	bl	8004764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800968a:	bd08      	pop	{r3, pc}

0800968c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800968c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800968e:	4802      	ldr	r0, [pc, #8]	@ (8009698 <DMA1_Channel6_IRQHandler+0xc>)
 8009690:	f7fa fe77 	bl	8004382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8009694:	bd08      	pop	{r3, pc}
 8009696:	bf00      	nop
 8009698:	200087c0 	.word	0x200087c0

0800969c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800969c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800969e:	4802      	ldr	r0, [pc, #8]	@ (80096a8 <DMA1_Channel7_IRQHandler+0xc>)
 80096a0:	f7fa fe6f 	bl	8004382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80096a4:	bd08      	pop	{r3, pc}
 80096a6:	bf00      	nop
 80096a8:	20008808 	.word	0x20008808

080096ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80096ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MA_ENCA_Pin);
 80096ae:	2040      	movs	r0, #64	@ 0x40
 80096b0:	f7fb f858 	bl	8004764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80096b4:	bd08      	pop	{r3, pc}
	...

080096b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80096b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  if (htim1.Instance != NULL)
 80096ba:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	b113      	cbz	r3, 80096c6 <TIM1_UP_TIM16_IRQHandler+0xe>
  {
    HAL_TIM_IRQHandler(&htim1);
 80096c0:	4804      	ldr	r0, [pc, #16]	@ (80096d4 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80096c2:	f7fd fac2 	bl	8006c4a <HAL_TIM_IRQHandler>
  }
  if (htim16.Instance != NULL)
 80096c6:	4b04      	ldr	r3, [pc, #16]	@ (80096d8 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	b113      	cbz	r3, 80096d2 <TIM1_UP_TIM16_IRQHandler+0x1a>
  {
    HAL_TIM_IRQHandler(&htim16);
 80096cc:	4802      	ldr	r0, [pc, #8]	@ (80096d8 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80096ce:	f7fd fabc 	bl	8006c4a <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80096d2:	bd08      	pop	{r3, pc}
 80096d4:	20008648 	.word	0x20008648
 80096d8:	2000805c 	.word	0x2000805c

080096dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80096dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80096de:	4802      	ldr	r0, [pc, #8]	@ (80096e8 <TIM2_IRQHandler+0xc>)
 80096e0:	f7fd fab3 	bl	8006c4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80096e4:	bd08      	pop	{r3, pc}
 80096e6:	bf00      	nop
 80096e8:	200085fc 	.word	0x200085fc

080096ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80096ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80096ee:	4802      	ldr	r0, [pc, #8]	@ (80096f8 <TIM3_IRQHandler+0xc>)
 80096f0:	f7fd faab 	bl	8006c4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80096f4:	bd08      	pop	{r3, pc}
 80096f6:	bf00      	nop
 80096f8:	200085b0 	.word	0x200085b0

080096fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80096fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80096fe:	4802      	ldr	r0, [pc, #8]	@ (8009708 <I2C1_EV_IRQHandler+0xc>)
 8009700:	f7fb f94c 	bl	800499c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009704:	bd08      	pop	{r3, pc}
 8009706:	bf00      	nop
 8009708:	20007e98 	.word	0x20007e98

0800970c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800970c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800970e:	4802      	ldr	r0, [pc, #8]	@ (8009718 <I2C1_ER_IRQHandler+0xc>)
 8009710:	f7fb fc5a 	bl	8004fc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009714:	bd08      	pop	{r3, pc}
 8009716:	bf00      	nop
 8009718:	20007e98 	.word	0x20007e98

0800971c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800971c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800971e:	4802      	ldr	r0, [pc, #8]	@ (8009728 <USART2_IRQHandler+0xc>)
 8009720:	f7ff f944 	bl	80089ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009724:	bd08      	pop	{r3, pc}
 8009726:	bf00      	nop
 8009728:	20008850 	.word	0x20008850

0800972c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800972c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800972e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009732:	f7fb f817 	bl	8004764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009736:	bd08      	pop	{r3, pc}

08009738 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8009738:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800973a:	4802      	ldr	r0, [pc, #8]	@ (8009744 <DMA2_Channel6_IRQHandler+0xc>)
 800973c:	f7fa fe21 	bl	8004382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8009740:	bd08      	pop	{r3, pc}
 8009742:	bf00      	nop
 8009744:	20007e50 	.word	0x20007e50

08009748 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8009748:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800974a:	4802      	ldr	r0, [pc, #8]	@ (8009754 <DMA2_Channel7_IRQHandler+0xc>)
 800974c:	f7fa fe19 	bl	8004382 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8009750:	bd08      	pop	{r3, pc}
 8009752:	bf00      	nop
 8009754:	20007e08 	.word	0x20007e08

08009758 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8009758:	2001      	movs	r0, #1
 800975a:	4770      	bx	lr

0800975c <_kill>:

int _kill(int pid, int sig)
{
 800975c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800975e:	f011 fb61 	bl	801ae24 <__errno>
 8009762:	2316      	movs	r3, #22
 8009764:	6003      	str	r3, [r0, #0]
  return -1;
}
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	bd08      	pop	{r3, pc}

0800976c <_exit>:

void _exit (int status)
{
 800976c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800976e:	f04f 31ff 	mov.w	r1, #4294967295
 8009772:	f7ff fff3 	bl	800975c <_kill>
  while (1) {}    /* Make sure we hang here */
 8009776:	e7fe      	b.n	8009776 <_exit+0xa>

08009778 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009778:	b570      	push	{r4, r5, r6, lr}
 800977a:	460c      	mov	r4, r1
 800977c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800977e:	2500      	movs	r5, #0
 8009780:	e006      	b.n	8009790 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8009782:	f3af 8000 	nop.w
 8009786:	4621      	mov	r1, r4
 8009788:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800978c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800978e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009790:	42b5      	cmp	r5, r6
 8009792:	dbf6      	blt.n	8009782 <_read+0xa>
  }

  return len;
}
 8009794:	4630      	mov	r0, r6
 8009796:	bd70      	pop	{r4, r5, r6, pc}

08009798 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	460c      	mov	r4, r1
 800979c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800979e:	2500      	movs	r5, #0
 80097a0:	e004      	b.n	80097ac <_write+0x14>
  {
    __io_putchar(*ptr++);
 80097a2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097aa:	3501      	adds	r5, #1
 80097ac:	42b5      	cmp	r5, r6
 80097ae:	dbf8      	blt.n	80097a2 <_write+0xa>
  }
  return len;
}
 80097b0:	4630      	mov	r0, r6
 80097b2:	bd70      	pop	{r4, r5, r6, pc}

080097b4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295
 80097b8:	4770      	bx	lr

080097ba <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80097ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80097be:	604b      	str	r3, [r1, #4]
  return 0;
}
 80097c0:	2000      	movs	r0, #0
 80097c2:	4770      	bx	lr

080097c4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80097c4:	2001      	movs	r0, #1
 80097c6:	4770      	bx	lr

080097c8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80097c8:	2000      	movs	r0, #0
 80097ca:	4770      	bx	lr

080097cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80097cc:	b510      	push	{r4, lr}
 80097ce:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80097d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009804 <_sbrk+0x38>)
 80097d2:	490d      	ldr	r1, [pc, #52]	@ (8009808 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80097d4:	480d      	ldr	r0, [pc, #52]	@ (800980c <_sbrk+0x40>)
 80097d6:	6800      	ldr	r0, [r0, #0]
 80097d8:	b140      	cbz	r0, 80097ec <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80097da:	480c      	ldr	r0, [pc, #48]	@ (800980c <_sbrk+0x40>)
 80097dc:	6800      	ldr	r0, [r0, #0]
 80097de:	4403      	add	r3, r0
 80097e0:	1a52      	subs	r2, r2, r1
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d806      	bhi.n	80097f4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80097e6:	4a09      	ldr	r2, [pc, #36]	@ (800980c <_sbrk+0x40>)
 80097e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80097ea:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80097ec:	4807      	ldr	r0, [pc, #28]	@ (800980c <_sbrk+0x40>)
 80097ee:	4c08      	ldr	r4, [pc, #32]	@ (8009810 <_sbrk+0x44>)
 80097f0:	6004      	str	r4, [r0, #0]
 80097f2:	e7f2      	b.n	80097da <_sbrk+0xe>
    errno = ENOMEM;
 80097f4:	f011 fb16 	bl	801ae24 <__errno>
 80097f8:	230c      	movs	r3, #12
 80097fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	e7f3      	b.n	80097ea <_sbrk+0x1e>
 8009802:	bf00      	nop
 8009804:	20028000 	.word	0x20028000
 8009808:	00000400 	.word	0x00000400
 800980c:	200080ac 	.word	0x200080ac
 8009810:	2000d3a8 	.word	0x2000d3a8

08009814 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009814:	4a03      	ldr	r2, [pc, #12]	@ (8009824 <SystemInit+0x10>)
 8009816:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800981a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800981e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8009822:	4770      	bx	lr
 8009824:	e000ed00 	.word	0xe000ed00

08009828 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009828:	4b08      	ldr	r3, [pc, #32]	@ (800984c <prvResetNextTaskUnblockTime+0x24>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	b923      	cbnz	r3, 800983a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009830:	4b07      	ldr	r3, [pc, #28]	@ (8009850 <prvResetNextTaskUnblockTime+0x28>)
 8009832:	f04f 32ff 	mov.w	r2, #4294967295
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983a:	4b04      	ldr	r3, [pc, #16]	@ (800984c <prvResetNextTaskUnblockTime+0x24>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	4b02      	ldr	r3, [pc, #8]	@ (8009850 <prvResetNextTaskUnblockTime+0x28>)
 8009846:	601a      	str	r2, [r3, #0]
	}
}
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20008120 	.word	0x20008120
 8009850:	200080b8 	.word	0x200080b8

08009854 <prvInitialiseNewTask>:
{
 8009854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	4680      	mov	r8, r0
 800985a:	460d      	mov	r5, r1
 800985c:	4617      	mov	r7, r2
 800985e:	4699      	mov	r9, r3
 8009860:	9e08      	ldr	r6, [sp, #32]
 8009862:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8009866:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009868:	0092      	lsls	r2, r2, #2
 800986a:	21a5      	movs	r1, #165	@ 0xa5
 800986c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800986e:	f011 fa2e 	bl	801acce <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009872:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009874:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8009878:	3a01      	subs	r2, #1
 800987a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800987e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009882:	b3a5      	cbz	r5, 80098ee <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009884:	f04f 0c00 	mov.w	ip, #0
 8009888:	f1bc 0f0f 	cmp.w	ip, #15
 800988c:	d809      	bhi.n	80098a2 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800988e:	f815 300c 	ldrb.w	r3, [r5, ip]
 8009892:	eb04 020c 	add.w	r2, r4, ip
 8009896:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800989a:	b113      	cbz	r3, 80098a2 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800989c:	f10c 0c01 	add.w	ip, ip, #1
 80098a0:	e7f2      	b.n	8009888 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098a2:	2300      	movs	r3, #0
 80098a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098a8:	2e37      	cmp	r6, #55	@ 0x37
 80098aa:	d900      	bls.n	80098ae <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098ac:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 80098ae:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80098b0:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098b2:	2500      	movs	r5, #0
 80098b4:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098b6:	1d20      	adds	r0, r4, #4
 80098b8:	f7f8 fc5f 	bl	800217a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098bc:	f104 0018 	add.w	r0, r4, #24
 80098c0:	f7f8 fc5b 	bl	800217a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c6:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 80098ca:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098cc:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80098ce:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098d0:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098d4:	464a      	mov	r2, r9
 80098d6:	4641      	mov	r1, r8
 80098d8:	4638      	mov	r0, r7
 80098da:	f7f8 ffa1 	bl	8002820 <pxPortInitialiseStack>
 80098de:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80098e0:	f1ba 0f00 	cmp.w	sl, #0
 80098e4:	d001      	beq.n	80098ea <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098e6:	f8ca 4000 	str.w	r4, [sl]
}
 80098ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80098f4:	e7d8      	b.n	80098a8 <prvInitialiseNewTask+0x54>
	...

080098f8 <prvInitialiseTaskLists>:
{
 80098f8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098fa:	2400      	movs	r4, #0
 80098fc:	e007      	b.n	800990e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098fe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009902:	0093      	lsls	r3, r2, #2
 8009904:	480e      	ldr	r0, [pc, #56]	@ (8009940 <prvInitialiseTaskLists+0x48>)
 8009906:	4418      	add	r0, r3
 8009908:	f7f8 fc2c 	bl	8002164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800990c:	3401      	adds	r4, #1
 800990e:	2c37      	cmp	r4, #55	@ 0x37
 8009910:	d9f5      	bls.n	80098fe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009912:	4d0c      	ldr	r5, [pc, #48]	@ (8009944 <prvInitialiseTaskLists+0x4c>)
 8009914:	4628      	mov	r0, r5
 8009916:	f7f8 fc25 	bl	8002164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800991a:	4c0b      	ldr	r4, [pc, #44]	@ (8009948 <prvInitialiseTaskLists+0x50>)
 800991c:	4620      	mov	r0, r4
 800991e:	f7f8 fc21 	bl	8002164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009922:	480a      	ldr	r0, [pc, #40]	@ (800994c <prvInitialiseTaskLists+0x54>)
 8009924:	f7f8 fc1e 	bl	8002164 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009928:	4809      	ldr	r0, [pc, #36]	@ (8009950 <prvInitialiseTaskLists+0x58>)
 800992a:	f7f8 fc1b 	bl	8002164 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800992e:	4809      	ldr	r0, [pc, #36]	@ (8009954 <prvInitialiseTaskLists+0x5c>)
 8009930:	f7f8 fc18 	bl	8002164 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009934:	4b08      	ldr	r3, [pc, #32]	@ (8009958 <prvInitialiseTaskLists+0x60>)
 8009936:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009938:	4b08      	ldr	r3, [pc, #32]	@ (800995c <prvInitialiseTaskLists+0x64>)
 800993a:	601c      	str	r4, [r3, #0]
}
 800993c:	bd38      	pop	{r3, r4, r5, pc}
 800993e:	bf00      	nop
 8009940:	2000814c 	.word	0x2000814c
 8009944:	20008138 	.word	0x20008138
 8009948:	20008124 	.word	0x20008124
 800994c:	20008108 	.word	0x20008108
 8009950:	200080f4 	.word	0x200080f4
 8009954:	200080dc 	.word	0x200080dc
 8009958:	20008120 	.word	0x20008120
 800995c:	2000811c 	.word	0x2000811c

08009960 <prvAddNewTaskToReadyList>:
{
 8009960:	b510      	push	{r4, lr}
 8009962:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009964:	f7f8 ff86 	bl	8002874 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009968:	4a22      	ldr	r2, [pc, #136]	@ (80099f4 <prvAddNewTaskToReadyList+0x94>)
 800996a:	6813      	ldr	r3, [r2, #0]
 800996c:	3301      	adds	r3, #1
 800996e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009970:	4b21      	ldr	r3, [pc, #132]	@ (80099f8 <prvAddNewTaskToReadyList+0x98>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	b15b      	cbz	r3, 800998e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009976:	4b21      	ldr	r3, [pc, #132]	@ (80099fc <prvAddNewTaskToReadyList+0x9c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	b96b      	cbnz	r3, 8009998 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800997c:	4b1e      	ldr	r3, [pc, #120]	@ (80099f8 <prvAddNewTaskToReadyList+0x98>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009982:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009984:	429a      	cmp	r2, r3
 8009986:	d807      	bhi.n	8009998 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009988:	4b1b      	ldr	r3, [pc, #108]	@ (80099f8 <prvAddNewTaskToReadyList+0x98>)
 800998a:	601c      	str	r4, [r3, #0]
 800998c:	e004      	b.n	8009998 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800998e:	4b1a      	ldr	r3, [pc, #104]	@ (80099f8 <prvAddNewTaskToReadyList+0x98>)
 8009990:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d029      	beq.n	80099ec <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009998:	4a19      	ldr	r2, [pc, #100]	@ (8009a00 <prvAddNewTaskToReadyList+0xa0>)
 800999a:	6813      	ldr	r3, [r2, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80099a0:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80099a2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80099a4:	4b17      	ldr	r3, [pc, #92]	@ (8009a04 <prvAddNewTaskToReadyList+0xa4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4298      	cmp	r0, r3
 80099aa:	d901      	bls.n	80099b0 <prvAddNewTaskToReadyList+0x50>
 80099ac:	4b15      	ldr	r3, [pc, #84]	@ (8009a04 <prvAddNewTaskToReadyList+0xa4>)
 80099ae:	6018      	str	r0, [r3, #0]
 80099b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80099b4:	1d21      	adds	r1, r4, #4
 80099b6:	4b14      	ldr	r3, [pc, #80]	@ (8009a08 <prvAddNewTaskToReadyList+0xa8>)
 80099b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80099bc:	f7f8 fbe0 	bl	8002180 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80099c0:	f7f8 ff7a 	bl	80028b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80099c4:	4b0d      	ldr	r3, [pc, #52]	@ (80099fc <prvAddNewTaskToReadyList+0x9c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	b17b      	cbz	r3, 80099ea <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099ca:	4b0b      	ldr	r3, [pc, #44]	@ (80099f8 <prvAddNewTaskToReadyList+0x98>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d209      	bcs.n	80099ea <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80099d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80099da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	f3bf 8f6f 	isb	sy
}
 80099ea:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80099ec:	f7ff ff84 	bl	80098f8 <prvInitialiseTaskLists>
 80099f0:	e7d2      	b.n	8009998 <prvAddNewTaskToReadyList+0x38>
 80099f2:	bf00      	nop
 80099f4:	200080d8 	.word	0x200080d8
 80099f8:	200085ac 	.word	0x200085ac
 80099fc:	200080cc 	.word	0x200080cc
 8009a00:	200080bc 	.word	0x200080bc
 8009a04:	200080d0 	.word	0x200080d0
 8009a08:	2000814c 	.word	0x2000814c

08009a0c <prvDeleteTCB>:
	{
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a10:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8009a14:	b163      	cbz	r3, 8009a30 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d011      	beq.n	8009a3e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d00e      	beq.n	8009a3c <prvDeleteTCB+0x30>
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	e7fe      	b.n	8009a2e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8009a30:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8009a32:	f7f8 fa4b 	bl	8001ecc <vPortFree>
				vPortFree( pxTCB );
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7f8 fa48 	bl	8001ecc <vPortFree>
	}
 8009a3c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8009a3e:	f7f8 fa45 	bl	8001ecc <vPortFree>
 8009a42:	e7fb      	b.n	8009a3c <prvDeleteTCB+0x30>

08009a44 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a44:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <prvCheckTasksWaitingTermination+0x40>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	b1d3      	cbz	r3, 8009a80 <prvCheckTasksWaitingTermination+0x3c>
{
 8009a4a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009a4c:	f7f8 ff12 	bl	8002874 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a50:	4b0d      	ldr	r3, [pc, #52]	@ (8009a88 <prvCheckTasksWaitingTermination+0x44>)
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a56:	1d20      	adds	r0, r4, #4
 8009a58:	f7f8 fbb6 	bl	80021c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8009a8c <prvCheckTasksWaitingTermination+0x48>)
 8009a5e:	6813      	ldr	r3, [r2, #0]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a64:	4a07      	ldr	r2, [pc, #28]	@ (8009a84 <prvCheckTasksWaitingTermination+0x40>)
 8009a66:	6813      	ldr	r3, [r2, #0]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009a6c:	f7f8 ff24 	bl	80028b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7ff ffcb 	bl	8009a0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a76:	4b03      	ldr	r3, [pc, #12]	@ (8009a84 <prvCheckTasksWaitingTermination+0x40>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e6      	bne.n	8009a4c <prvCheckTasksWaitingTermination+0x8>
}
 8009a7e:	bd10      	pop	{r4, pc}
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	200080f0 	.word	0x200080f0
 8009a88:	200080f4 	.word	0x200080f4
 8009a8c:	200080d8 	.word	0x200080d8

08009a90 <prvIdleTask>:
{
 8009a90:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009a92:	f7ff ffd7 	bl	8009a44 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a96:	4b07      	ldr	r3, [pc, #28]	@ (8009ab4 <prvIdleTask+0x24>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d9f9      	bls.n	8009a92 <prvIdleTask+0x2>
				taskYIELD();
 8009a9e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	e7ee      	b.n	8009a92 <prvIdleTask+0x2>
 8009ab4:	2000814c 	.word	0x2000814c

08009ab8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	4604      	mov	r4, r0
 8009abc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009abe:	4b17      	ldr	r3, [pc, #92]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x64>)
 8009ac0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ac2:	4b17      	ldr	r3, [pc, #92]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x68>)
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	3004      	adds	r0, #4
 8009ac8:	f7f8 fb7e 	bl	80021c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009acc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009ad0:	d00d      	beq.n	8009aee <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ad2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ad4:	4b12      	ldr	r3, [pc, #72]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x68>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009ada:	42a6      	cmp	r6, r4
 8009adc:	d910      	bls.n	8009b00 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ade:	4b11      	ldr	r3, [pc, #68]	@ (8009b24 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x68>)
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	3104      	adds	r1, #4
 8009ae8:	f7f8 fb55 	bl	8002196 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009aec:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009aee:	2d00      	cmp	r5, #0
 8009af0:	d0ef      	beq.n	8009ad2 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af2:	4b0b      	ldr	r3, [pc, #44]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x68>)
 8009af4:	6819      	ldr	r1, [r3, #0]
 8009af6:	3104      	adds	r1, #4
 8009af8:	480b      	ldr	r0, [pc, #44]	@ (8009b28 <prvAddCurrentTaskToDelayedList+0x70>)
 8009afa:	f7f8 fb41 	bl	8002180 <vListInsertEnd>
 8009afe:	e7f5      	b.n	8009aec <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b00:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <prvAddCurrentTaskToDelayedList+0x74>)
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	4b06      	ldr	r3, [pc, #24]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x68>)
 8009b06:	6819      	ldr	r1, [r3, #0]
 8009b08:	3104      	adds	r1, #4
 8009b0a:	f7f8 fb44 	bl	8002196 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b0e:	4b08      	ldr	r3, [pc, #32]	@ (8009b30 <prvAddCurrentTaskToDelayedList+0x78>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	42a3      	cmp	r3, r4
 8009b14:	d9ea      	bls.n	8009aec <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8009b16:	4b06      	ldr	r3, [pc, #24]	@ (8009b30 <prvAddCurrentTaskToDelayedList+0x78>)
 8009b18:	601c      	str	r4, [r3, #0]
}
 8009b1a:	e7e7      	b.n	8009aec <prvAddCurrentTaskToDelayedList+0x34>
 8009b1c:	200080d4 	.word	0x200080d4
 8009b20:	200085ac 	.word	0x200085ac
 8009b24:	2000811c 	.word	0x2000811c
 8009b28:	200080dc 	.word	0x200080dc
 8009b2c:	20008120 	.word	0x20008120
 8009b30:	200080b8 	.word	0x200080b8

08009b34 <xTaskCreateStatic>:
	{
 8009b34:	b530      	push	{r4, r5, lr}
 8009b36:	b087      	sub	sp, #28
 8009b38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009b3a:	b17c      	cbz	r4, 8009b5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b3c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8009b3e:	b1b5      	cbz	r5, 8009b6e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b40:	255c      	movs	r5, #92	@ 0x5c
 8009b42:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b44:	9d04      	ldr	r5, [sp, #16]
 8009b46:	2d5c      	cmp	r5, #92	@ 0x5c
 8009b48:	d01a      	beq.n	8009b80 <xTaskCreateStatic+0x4c>
 8009b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	e7fe      	b.n	8009b5a <xTaskCreateStatic+0x26>
 8009b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009b6c:	e7fe      	b.n	8009b6c <xTaskCreateStatic+0x38>
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009b7e:	e7fe      	b.n	8009b7e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b80:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b82:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8009b84:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b86:	2402      	movs	r4, #2
 8009b88:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b8c:	2400      	movs	r4, #0
 8009b8e:	9403      	str	r4, [sp, #12]
 8009b90:	9502      	str	r5, [sp, #8]
 8009b92:	ac05      	add	r4, sp, #20
 8009b94:	9401      	str	r4, [sp, #4]
 8009b96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b98:	9400      	str	r4, [sp, #0]
 8009b9a:	f7ff fe5b 	bl	8009854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b9e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8009ba0:	f7ff fede 	bl	8009960 <prvAddNewTaskToReadyList>
	}
 8009ba4:	9805      	ldr	r0, [sp, #20]
 8009ba6:	b007      	add	sp, #28
 8009ba8:	bd30      	pop	{r4, r5, pc}

08009baa <xTaskCreate>:
	{
 8009baa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	4607      	mov	r7, r0
 8009bb2:	4688      	mov	r8, r1
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009bb8:	0090      	lsls	r0, r2, #2
 8009bba:	f7f8 f905 	bl	8001dc8 <pvPortMalloc>
			if( pxStack != NULL )
 8009bbe:	b308      	cbz	r0, 8009c04 <xTaskCreate+0x5a>
 8009bc0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bc2:	205c      	movs	r0, #92	@ 0x5c
 8009bc4:	f7f8 f900 	bl	8001dc8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009bc8:	4605      	mov	r5, r0
 8009bca:	b1a8      	cbz	r0, 8009bf8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8009bcc:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bd6:	9303      	str	r3, [sp, #12]
 8009bd8:	9002      	str	r0, [sp, #8]
 8009bda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	4633      	mov	r3, r6
 8009be4:	4622      	mov	r2, r4
 8009be6:	4641      	mov	r1, r8
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff fe33 	bl	8009854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7ff feb6 	bl	8009960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009bf4:	2001      	movs	r0, #1
 8009bf6:	e007      	b.n	8009c08 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8009bf8:	4648      	mov	r0, r9
 8009bfa:	f7f8 f967 	bl	8001ecc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	e001      	b.n	8009c08 <xTaskCreate+0x5e>
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009c08:	b005      	add	sp, #20
 8009c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009c10 <vTaskStartScheduler>:
{
 8009c10:	b510      	push	{r4, lr}
 8009c12:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c14:	2400      	movs	r4, #0
 8009c16:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c18:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c1a:	aa07      	add	r2, sp, #28
 8009c1c:	a906      	add	r1, sp, #24
 8009c1e:	a805      	add	r0, sp, #20
 8009c20:	f7f7 f9ca 	bl	8000fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c24:	9b05      	ldr	r3, [sp, #20]
 8009c26:	9302      	str	r3, [sp, #8]
 8009c28:	9b06      	ldr	r3, [sp, #24]
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	9400      	str	r4, [sp, #0]
 8009c2e:	4623      	mov	r3, r4
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	4917      	ldr	r1, [pc, #92]	@ (8009c90 <vTaskStartScheduler+0x80>)
 8009c34:	4817      	ldr	r0, [pc, #92]	@ (8009c94 <vTaskStartScheduler+0x84>)
 8009c36:	f7ff ff7d 	bl	8009b34 <xTaskCreateStatic>
 8009c3a:	4b17      	ldr	r3, [pc, #92]	@ (8009c98 <vTaskStartScheduler+0x88>)
 8009c3c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8009c3e:	b1c0      	cbz	r0, 8009c72 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8009c40:	f000 fdfc 	bl	800a83c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009c44:	2801      	cmp	r0, #1
 8009c46:	d115      	bne.n	8009c74 <vTaskStartScheduler+0x64>
 8009c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c58:	4b10      	ldr	r3, [pc, #64]	@ (8009c9c <vTaskStartScheduler+0x8c>)
 8009c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c60:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca0 <vTaskStartScheduler+0x90>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <vTaskStartScheduler+0x94>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009c6c:	f7f8 fe9c 	bl	80029a8 <xPortStartScheduler>
		}
 8009c70:	e003      	b.n	8009c7a <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 8009c72:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c78:	d001      	beq.n	8009c7e <vTaskStartScheduler+0x6e>
}
 8009c7a:	b008      	add	sp, #32
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c8e:	e7fe      	b.n	8009c8e <vTaskStartScheduler+0x7e>
 8009c90:	0801d760 	.word	0x0801d760
 8009c94:	08009a91 	.word	0x08009a91
 8009c98:	200080b4 	.word	0x200080b4
 8009c9c:	200080b8 	.word	0x200080b8
 8009ca0:	200080cc 	.word	0x200080cc
 8009ca4:	200080d4 	.word	0x200080d4

08009ca8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009ca8:	4a02      	ldr	r2, [pc, #8]	@ (8009cb4 <vTaskSuspendAll+0xc>)
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	3301      	adds	r3, #1
 8009cae:	6013      	str	r3, [r2, #0]
}
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	200080b0 	.word	0x200080b0

08009cb8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009cb8:	4b01      	ldr	r3, [pc, #4]	@ (8009cc0 <xTaskGetTickCount+0x8>)
 8009cba:	6818      	ldr	r0, [r3, #0]
}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	200080d4 	.word	0x200080d4

08009cc4 <xTaskIncrementTick>:
{
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8009db0 <xTaskIncrementTick+0xec>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d169      	bne.n	8009da2 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cce:	4b39      	ldr	r3, [pc, #228]	@ (8009db4 <xTaskIncrementTick+0xf0>)
 8009cd0:	681d      	ldr	r5, [r3, #0]
 8009cd2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009cd4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cd6:	b9c5      	cbnz	r5, 8009d0a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009cd8:	4b37      	ldr	r3, [pc, #220]	@ (8009db8 <xTaskIncrementTick+0xf4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	b143      	cbz	r3, 8009cf2 <xTaskIncrementTick+0x2e>
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskIncrementTick+0x2c>
 8009cf2:	4a31      	ldr	r2, [pc, #196]	@ (8009db8 <xTaskIncrementTick+0xf4>)
 8009cf4:	6811      	ldr	r1, [r2, #0]
 8009cf6:	4b31      	ldr	r3, [pc, #196]	@ (8009dbc <xTaskIncrementTick+0xf8>)
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	6010      	str	r0, [r2, #0]
 8009cfc:	6019      	str	r1, [r3, #0]
 8009cfe:	4a30      	ldr	r2, [pc, #192]	@ (8009dc0 <xTaskIncrementTick+0xfc>)
 8009d00:	6813      	ldr	r3, [r2, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	f7ff fd8f 	bl	8009828 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8009dc4 <xTaskIncrementTick+0x100>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	42ab      	cmp	r3, r5
 8009d10:	d93d      	bls.n	8009d8e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8009d12:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d14:	4b2c      	ldr	r3, [pc, #176]	@ (8009dc8 <xTaskIncrementTick+0x104>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d1e:	009a      	lsls	r2, r3, #2
 8009d20:	4b2a      	ldr	r3, [pc, #168]	@ (8009dcc <xTaskIncrementTick+0x108>)
 8009d22:	589b      	ldr	r3, [r3, r2]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d900      	bls.n	8009d2a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8009d28:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8009d2a:	4b29      	ldr	r3, [pc, #164]	@ (8009dd0 <xTaskIncrementTick+0x10c>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d03c      	beq.n	8009dac <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8009d32:	2701      	movs	r7, #1
	return xSwitchRequired;
 8009d34:	e03a      	b.n	8009dac <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8009d36:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d38:	4b1f      	ldr	r3, [pc, #124]	@ (8009db8 <xTaskIncrementTick+0xf4>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	b343      	cbz	r3, 8009d92 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d40:	4b1d      	ldr	r3, [pc, #116]	@ (8009db8 <xTaskIncrementTick+0xf4>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d48:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	d326      	bcc.n	8009d9c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d4e:	1d26      	adds	r6, r4, #4
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7f8 fa39 	bl	80021c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009d58:	b11b      	cbz	r3, 8009d62 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d5a:	f104 0018 	add.w	r0, r4, #24
 8009d5e:	f7f8 fa33 	bl	80021c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d64:	4a1b      	ldr	r2, [pc, #108]	@ (8009dd4 <xTaskIncrementTick+0x110>)
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d901      	bls.n	8009d70 <xTaskIncrementTick+0xac>
 8009d6c:	4a19      	ldr	r2, [pc, #100]	@ (8009dd4 <xTaskIncrementTick+0x110>)
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d74:	009a      	lsls	r2, r3, #2
 8009d76:	4631      	mov	r1, r6
 8009d78:	4814      	ldr	r0, [pc, #80]	@ (8009dcc <xTaskIncrementTick+0x108>)
 8009d7a:	4410      	add	r0, r2
 8009d7c:	f7f8 fa00 	bl	8002180 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d80:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d82:	4b11      	ldr	r3, [pc, #68]	@ (8009dc8 <xTaskIncrementTick+0x104>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d2d4      	bcs.n	8009d36 <xTaskIncrementTick+0x72>
 8009d8c:	e7d4      	b.n	8009d38 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8009d8e:	2700      	movs	r7, #0
 8009d90:	e7d2      	b.n	8009d38 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d92:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <xTaskIncrementTick+0x100>)
 8009d94:	f04f 32ff 	mov.w	r2, #4294967295
 8009d98:	601a      	str	r2, [r3, #0]
					break;
 8009d9a:	e7bb      	b.n	8009d14 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009d9c:	4a09      	ldr	r2, [pc, #36]	@ (8009dc4 <xTaskIncrementTick+0x100>)
 8009d9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009da0:	e7b8      	b.n	8009d14 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8009da2:	4a0d      	ldr	r2, [pc, #52]	@ (8009dd8 <xTaskIncrementTick+0x114>)
 8009da4:	6813      	ldr	r3, [r2, #0]
 8009da6:	3301      	adds	r3, #1
 8009da8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009daa:	2700      	movs	r7, #0
}
 8009dac:	4638      	mov	r0, r7
 8009dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db0:	200080b0 	.word	0x200080b0
 8009db4:	200080d4 	.word	0x200080d4
 8009db8:	20008120 	.word	0x20008120
 8009dbc:	2000811c 	.word	0x2000811c
 8009dc0:	200080c0 	.word	0x200080c0
 8009dc4:	200080b8 	.word	0x200080b8
 8009dc8:	200085ac 	.word	0x200085ac
 8009dcc:	2000814c 	.word	0x2000814c
 8009dd0:	200080c4 	.word	0x200080c4
 8009dd4:	200080d0 	.word	0x200080d0
 8009dd8:	200080c8 	.word	0x200080c8

08009ddc <xTaskResumeAll>:
{
 8009ddc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009dde:	4b35      	ldr	r3, [pc, #212]	@ (8009eb4 <xTaskResumeAll+0xd8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	b943      	cbnz	r3, 8009df6 <xTaskResumeAll+0x1a>
 8009de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	e7fe      	b.n	8009df4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009df6:	f7f8 fd3d 	bl	8002874 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8009eb4 <xTaskResumeAll+0xd8>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	3a01      	subs	r2, #1
 8009e00:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d14f      	bne.n	8009ea8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e08:	4b2b      	ldr	r3, [pc, #172]	@ (8009eb8 <xTaskResumeAll+0xdc>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	b90b      	cbnz	r3, 8009e12 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009e0e:	2400      	movs	r4, #0
 8009e10:	e04b      	b.n	8009eaa <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8009e12:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e14:	4b29      	ldr	r3, [pc, #164]	@ (8009ebc <xTaskResumeAll+0xe0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	b31b      	cbz	r3, 8009e62 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1a:	4b28      	ldr	r3, [pc, #160]	@ (8009ebc <xTaskResumeAll+0xe0>)
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e20:	f104 0018 	add.w	r0, r4, #24
 8009e24:	f7f8 f9d0 	bl	80021c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e28:	1d25      	adds	r5, r4, #4
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f7f8 f9cc 	bl	80021c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e30:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009e32:	4b23      	ldr	r3, [pc, #140]	@ (8009ec0 <xTaskResumeAll+0xe4>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4298      	cmp	r0, r3
 8009e38:	d901      	bls.n	8009e3e <xTaskResumeAll+0x62>
 8009e3a:	4b21      	ldr	r3, [pc, #132]	@ (8009ec0 <xTaskResumeAll+0xe4>)
 8009e3c:	6018      	str	r0, [r3, #0]
 8009e3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009e42:	4629      	mov	r1, r5
 8009e44:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec4 <xTaskResumeAll+0xe8>)
 8009e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e4a:	f7f8 f999 	bl	8002180 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e4e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009e50:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec8 <xTaskResumeAll+0xec>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d3dc      	bcc.n	8009e14 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8009ecc <xTaskResumeAll+0xf0>)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	e7d8      	b.n	8009e14 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009e62:	b10c      	cbz	r4, 8009e68 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009e64:	f7ff fce0 	bl	8009828 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e68:	4b19      	ldr	r3, [pc, #100]	@ (8009ed0 <xTaskResumeAll+0xf4>)
 8009e6a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009e6c:	b984      	cbnz	r4, 8009e90 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8009e6e:	4b17      	ldr	r3, [pc, #92]	@ (8009ecc <xTaskResumeAll+0xf0>)
 8009e70:	681c      	ldr	r4, [r3, #0]
 8009e72:	b1d4      	cbz	r4, 8009eaa <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009e74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009e88:	2401      	movs	r4, #1
 8009e8a:	e00e      	b.n	8009eaa <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e8c:	3c01      	subs	r4, #1
 8009e8e:	d007      	beq.n	8009ea0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8009e90:	f7ff ff18 	bl	8009cc4 <xTaskIncrementTick>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d0f9      	beq.n	8009e8c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009e98:	4b0c      	ldr	r3, [pc, #48]	@ (8009ecc <xTaskResumeAll+0xf0>)
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	e7f5      	b.n	8009e8c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8009ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed0 <xTaskResumeAll+0xf4>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	e7e2      	b.n	8009e6e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009ea8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009eaa:	f7f8 fd05 	bl	80028b8 <vPortExitCritical>
}
 8009eae:	4620      	mov	r0, r4
 8009eb0:	bd38      	pop	{r3, r4, r5, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200080b0 	.word	0x200080b0
 8009eb8:	200080d8 	.word	0x200080d8
 8009ebc:	20008108 	.word	0x20008108
 8009ec0:	200080d0 	.word	0x200080d0
 8009ec4:	2000814c 	.word	0x2000814c
 8009ec8:	200085ac 	.word	0x200085ac
 8009ecc:	200080c4 	.word	0x200080c4
 8009ed0:	200080c8 	.word	0x200080c8

08009ed4 <vTaskDelay>:
	{
 8009ed4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ed6:	b1a8      	cbz	r0, 8009f04 <vTaskDelay+0x30>
 8009ed8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009eda:	4b10      	ldr	r3, [pc, #64]	@ (8009f1c <vTaskDelay+0x48>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	b143      	cbz	r3, 8009ef2 <vTaskDelay+0x1e>
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	e7fe      	b.n	8009ef0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009ef2:	f7ff fed9 	bl	8009ca8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7ff fddd 	bl	8009ab8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009efe:	f7ff ff6d 	bl	8009ddc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009f02:	b948      	cbnz	r0, 8009f18 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8009f04:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	f3bf 8f6f 	isb	sy
	}
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200080b0 	.word	0x200080b0

08009f20 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f20:	4b20      	ldr	r3, [pc, #128]	@ (8009fa4 <vTaskSwitchContext+0x84>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	b11b      	cbz	r3, 8009f2e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009f26:	4b20      	ldr	r3, [pc, #128]	@ (8009fa8 <vTaskSwitchContext+0x88>)
 8009f28:	2201      	movs	r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fa8 <vTaskSwitchContext+0x88>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f34:	4b1d      	ldr	r3, [pc, #116]	@ (8009fac <vTaskSwitchContext+0x8c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009f3c:	008a      	lsls	r2, r1, #2
 8009f3e:	491c      	ldr	r1, [pc, #112]	@ (8009fb0 <vTaskSwitchContext+0x90>)
 8009f40:	588a      	ldr	r2, [r1, r2]
 8009f42:	b95a      	cbnz	r2, 8009f5c <vTaskSwitchContext+0x3c>
 8009f44:	b10b      	cbz	r3, 8009f4a <vTaskSwitchContext+0x2a>
 8009f46:	3b01      	subs	r3, #1
 8009f48:	e7f6      	b.n	8009f38 <vTaskSwitchContext+0x18>
 8009f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	e7fe      	b.n	8009f5a <vTaskSwitchContext+0x3a>
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009f62:	008a      	lsls	r2, r1, #2
 8009f64:	4402      	add	r2, r0
 8009f66:	6851      	ldr	r1, [r2, #4]
 8009f68:	6849      	ldr	r1, [r1, #4]
 8009f6a:	6051      	str	r1, [r2, #4]
 8009f6c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8009f70:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8009f74:	3208      	adds	r2, #8
 8009f76:	4402      	add	r2, r0
 8009f78:	4291      	cmp	r1, r2
 8009f7a:	d00b      	beq.n	8009f94 <vTaskSwitchContext+0x74>
 8009f7c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009f80:	0091      	lsls	r1, r2, #2
 8009f82:	4a0b      	ldr	r2, [pc, #44]	@ (8009fb0 <vTaskSwitchContext+0x90>)
 8009f84:	440a      	add	r2, r1
 8009f86:	6852      	ldr	r2, [r2, #4]
 8009f88:	68d1      	ldr	r1, [r2, #12]
 8009f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8009fb4 <vTaskSwitchContext+0x94>)
 8009f8c:	6011      	str	r1, [r2, #0]
 8009f8e:	4a07      	ldr	r2, [pc, #28]	@ (8009fac <vTaskSwitchContext+0x8c>)
 8009f90:	6013      	str	r3, [r2, #0]
}
 8009f92:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f94:	6848      	ldr	r0, [r1, #4]
 8009f96:	4662      	mov	r2, ip
 8009f98:	0091      	lsls	r1, r2, #2
 8009f9a:	4a05      	ldr	r2, [pc, #20]	@ (8009fb0 <vTaskSwitchContext+0x90>)
 8009f9c:	440a      	add	r2, r1
 8009f9e:	6050      	str	r0, [r2, #4]
 8009fa0:	e7ec      	b.n	8009f7c <vTaskSwitchContext+0x5c>
 8009fa2:	bf00      	nop
 8009fa4:	200080b0 	.word	0x200080b0
 8009fa8:	200080c4 	.word	0x200080c4
 8009fac:	200080d0 	.word	0x200080d0
 8009fb0:	2000814c 	.word	0x2000814c
 8009fb4:	200085ac 	.word	0x200085ac

08009fb8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009fb8:	b158      	cbz	r0, 8009fd2 <vTaskPlaceOnEventList+0x1a>
{
 8009fba:	b510      	push	{r4, lr}
 8009fbc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fbe:	4a09      	ldr	r2, [pc, #36]	@ (8009fe4 <vTaskPlaceOnEventList+0x2c>)
 8009fc0:	6811      	ldr	r1, [r2, #0]
 8009fc2:	3118      	adds	r1, #24
 8009fc4:	f7f8 f8e7 	bl	8002196 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fc8:	2101      	movs	r1, #1
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f7ff fd74 	bl	8009ab8 <prvAddCurrentTaskToDelayedList>
}
 8009fd0:	bd10      	pop	{r4, pc}
 8009fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009fe2:	e7fe      	b.n	8009fe2 <vTaskPlaceOnEventList+0x2a>
 8009fe4:	200085ac 	.word	0x200085ac

08009fe8 <vTaskPlaceOnEventListRestricted>:
	{
 8009fe8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009fea:	b170      	cbz	r0, 800a00a <vTaskPlaceOnEventListRestricted+0x22>
 8009fec:	460d      	mov	r5, r1
 8009fee:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800a01c <vTaskPlaceOnEventListRestricted+0x34>)
 8009ff2:	6811      	ldr	r1, [r2, #0]
 8009ff4:	3118      	adds	r1, #24
 8009ff6:	f7f8 f8c3 	bl	8002180 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009ffa:	b10c      	cbz	r4, 800a000 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8009ffc:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a000:	4621      	mov	r1, r4
 800a002:	4628      	mov	r0, r5
 800a004:	f7ff fd58 	bl	8009ab8 <prvAddCurrentTaskToDelayedList>
	}
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a01a:	e7fe      	b.n	800a01a <vTaskPlaceOnEventListRestricted+0x32>
 800a01c:	200085ac 	.word	0x200085ac

0800a020 <xTaskRemoveFromEventList>:
{
 800a020:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a022:	68c3      	ldr	r3, [r0, #12]
 800a024:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a026:	b324      	cbz	r4, 800a072 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a028:	f104 0518 	add.w	r5, r4, #24
 800a02c:	4628      	mov	r0, r5
 800a02e:	f7f8 f8cb 	bl	80021c8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a032:	4b18      	ldr	r3, [pc, #96]	@ (800a094 <xTaskRemoveFromEventList+0x74>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	bb2b      	cbnz	r3, 800a084 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a038:	1d25      	adds	r5, r4, #4
 800a03a:	4628      	mov	r0, r5
 800a03c:	f7f8 f8c4 	bl	80021c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a040:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a042:	4b15      	ldr	r3, [pc, #84]	@ (800a098 <xTaskRemoveFromEventList+0x78>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4298      	cmp	r0, r3
 800a048:	d901      	bls.n	800a04e <xTaskRemoveFromEventList+0x2e>
 800a04a:	4b13      	ldr	r3, [pc, #76]	@ (800a098 <xTaskRemoveFromEventList+0x78>)
 800a04c:	6018      	str	r0, [r3, #0]
 800a04e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a052:	4629      	mov	r1, r5
 800a054:	4b11      	ldr	r3, [pc, #68]	@ (800a09c <xTaskRemoveFromEventList+0x7c>)
 800a056:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a05a:	f7f8 f891 	bl	8002180 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a05e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a060:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a0 <xTaskRemoveFromEventList+0x80>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a066:	429a      	cmp	r2, r3
 800a068:	d911      	bls.n	800a08e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800a06a:	2001      	movs	r0, #1
 800a06c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a4 <xTaskRemoveFromEventList+0x84>)
 800a06e:	6018      	str	r0, [r3, #0]
}
 800a070:	bd38      	pop	{r3, r4, r5, pc}
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a082:	e7fe      	b.n	800a082 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a084:	4629      	mov	r1, r5
 800a086:	4808      	ldr	r0, [pc, #32]	@ (800a0a8 <xTaskRemoveFromEventList+0x88>)
 800a088:	f7f8 f87a 	bl	8002180 <vListInsertEnd>
 800a08c:	e7e7      	b.n	800a05e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800a08e:	2000      	movs	r0, #0
	return xReturn;
 800a090:	e7ee      	b.n	800a070 <xTaskRemoveFromEventList+0x50>
 800a092:	bf00      	nop
 800a094:	200080b0 	.word	0x200080b0
 800a098:	200080d0 	.word	0x200080d0
 800a09c:	2000814c 	.word	0x2000814c
 800a0a0:	200085ac 	.word	0x200085ac
 800a0a4:	200080c4 	.word	0x200080c4
 800a0a8:	20008108 	.word	0x20008108

0800a0ac <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800a0ac:	b160      	cbz	r0, 800a0c8 <vTaskSetTimeOutState+0x1c>
{
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a0b2:	f7f8 fbdf 	bl	8002874 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0b6:	4b09      	ldr	r3, [pc, #36]	@ (800a0dc <vTaskSetTimeOutState+0x30>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a0bc:	4b08      	ldr	r3, [pc, #32]	@ (800a0e0 <vTaskSetTimeOutState+0x34>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800a0c2:	f7f8 fbf9 	bl	80028b8 <vPortExitCritical>
}
 800a0c6:	bd10      	pop	{r4, pc}
 800a0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a0d8:	e7fe      	b.n	800a0d8 <vTaskSetTimeOutState+0x2c>
 800a0da:	bf00      	nop
 800a0dc:	200080c0 	.word	0x200080c0
 800a0e0:	200080d4 	.word	0x200080d4

0800a0e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0e4:	4b03      	ldr	r3, [pc, #12]	@ (800a0f4 <vTaskInternalSetTimeOutState+0x10>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0ea:	4b03      	ldr	r3, [pc, #12]	@ (800a0f8 <vTaskInternalSetTimeOutState+0x14>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6043      	str	r3, [r0, #4]
}
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	200080c0 	.word	0x200080c0
 800a0f8:	200080d4 	.word	0x200080d4

0800a0fc <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800a0fc:	b1e0      	cbz	r0, 800a138 <xTaskCheckForTimeOut+0x3c>
{
 800a0fe:	b570      	push	{r4, r5, r6, lr}
 800a100:	460c      	mov	r4, r1
 800a102:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a104:	b309      	cbz	r1, 800a14a <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800a106:	f7f8 fbb5 	bl	8002874 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a10a:	4b1c      	ldr	r3, [pc, #112]	@ (800a17c <xTaskCheckForTimeOut+0x80>)
 800a10c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a10e:	686b      	ldr	r3, [r5, #4]
 800a110:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a112:	6822      	ldr	r2, [r4, #0]
 800a114:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a118:	d028      	beq.n	800a16c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a11a:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800a180 <xTaskCheckForTimeOut+0x84>
 800a11e:	f8dc c000 	ldr.w	ip, [ip]
 800a122:	682e      	ldr	r6, [r5, #0]
 800a124:	4566      	cmp	r6, ip
 800a126:	d001      	beq.n	800a12c <xTaskCheckForTimeOut+0x30>
 800a128:	428b      	cmp	r3, r1
 800a12a:	d924      	bls.n	800a176 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a12c:	4282      	cmp	r2, r0
 800a12e:	d815      	bhi.n	800a15c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a134:	2401      	movs	r4, #1
 800a136:	e01a      	b.n	800a16e <xTaskCheckForTimeOut+0x72>
 800a138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a148:	e7fe      	b.n	800a148 <xTaskCheckForTimeOut+0x4c>
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a15a:	e7fe      	b.n	800a15a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 800a15c:	1a5b      	subs	r3, r3, r1
 800a15e:	4413      	add	r3, r2
 800a160:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a162:	4628      	mov	r0, r5
 800a164:	f7ff ffbe 	bl	800a0e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a168:	2400      	movs	r4, #0
 800a16a:	e000      	b.n	800a16e <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 800a16c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a16e:	f7f8 fba3 	bl	80028b8 <vPortExitCritical>
}
 800a172:	4620      	mov	r0, r4
 800a174:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800a176:	2401      	movs	r4, #1
 800a178:	e7f9      	b.n	800a16e <xTaskCheckForTimeOut+0x72>
 800a17a:	bf00      	nop
 800a17c:	200080d4 	.word	0x200080d4
 800a180:	200080c0 	.word	0x200080c0

0800a184 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a184:	4b01      	ldr	r3, [pc, #4]	@ (800a18c <vTaskMissedYield+0x8>)
 800a186:	2201      	movs	r2, #1
 800a188:	601a      	str	r2, [r3, #0]
}
 800a18a:	4770      	bx	lr
 800a18c:	200080c4 	.word	0x200080c4

0800a190 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a190:	4b05      	ldr	r3, [pc, #20]	@ (800a1a8 <xTaskGetSchedulerState+0x18>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	b133      	cbz	r3, 800a1a4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a196:	4b05      	ldr	r3, [pc, #20]	@ (800a1ac <xTaskGetSchedulerState+0x1c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	b10b      	cbz	r3, 800a1a0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a19c:	2000      	movs	r0, #0
	}
 800a19e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a1a0:	2002      	movs	r0, #2
 800a1a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	4770      	bx	lr
 800a1a8:	200080cc 	.word	0x200080cc
 800a1ac:	200080b0 	.word	0x200080b0

0800a1b0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d03b      	beq.n	800a22c <xTaskPriorityDisinherit+0x7c>
	{
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a234 <xTaskPriorityDisinherit+0x84>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4283      	cmp	r3, r0
 800a1be:	d008      	beq.n	800a1d2 <xTaskPriorityDisinherit+0x22>
 800a1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	e7fe      	b.n	800a1d0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a1d2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a1d4:	b943      	cbnz	r3, 800a1e8 <xTaskPriorityDisinherit+0x38>
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	e7fe      	b.n	800a1e6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1ec:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a1ee:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a1f0:	4291      	cmp	r1, r2
 800a1f2:	d01d      	beq.n	800a230 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1f4:	b10b      	cbz	r3, 800a1fa <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a1f6:	2000      	movs	r0, #0
	}
 800a1f8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fa:	1d05      	adds	r5, r0, #4
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f7f7 ffe3 	bl	80021c8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a202:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a204:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a206:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800a20a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a20c:	4b0a      	ldr	r3, [pc, #40]	@ (800a238 <xTaskPriorityDisinherit+0x88>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4298      	cmp	r0, r3
 800a212:	d901      	bls.n	800a218 <xTaskPriorityDisinherit+0x68>
 800a214:	4b08      	ldr	r3, [pc, #32]	@ (800a238 <xTaskPriorityDisinherit+0x88>)
 800a216:	6018      	str	r0, [r3, #0]
 800a218:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a21c:	4629      	mov	r1, r5
 800a21e:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <xTaskPriorityDisinherit+0x8c>)
 800a220:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a224:	f7f7 ffac 	bl	8002180 <vListInsertEnd>
					xReturn = pdTRUE;
 800a228:	2001      	movs	r0, #1
 800a22a:	e7e5      	b.n	800a1f8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a22c:	2000      	movs	r0, #0
	}
 800a22e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a230:	2000      	movs	r0, #0
 800a232:	e7e1      	b.n	800a1f8 <xTaskPriorityDisinherit+0x48>
 800a234:	200085ac 	.word	0x200085ac
 800a238:	200080d0 	.word	0x200080d0
 800a23c:	2000814c 	.word	0x2000814c

0800a240 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a244:	2300      	movs	r3, #0
 800a246:	9307      	str	r3, [sp, #28]
 800a248:	9308      	str	r3, [sp, #32]
 800a24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a24e:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(tim_baseHandle->Instance==TIM1)
 800a250:	6803      	ldr	r3, [r0, #0]
 800a252:	4a3f      	ldr	r2, [pc, #252]	@ (800a350 <HAL_TIM_Base_MspInit+0x110>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d007      	beq.n	800a268 <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 800a258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25c:	d017      	beq.n	800a28e <HAL_TIM_Base_MspInit+0x4e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800a25e:	4a3d      	ldr	r2, [pc, #244]	@ (800a354 <HAL_TIM_Base_MspInit+0x114>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d051      	beq.n	800a308 <HAL_TIM_Base_MspInit+0xc8>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800a264:	b00c      	add	sp, #48	@ 0x30
 800a266:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a268:	4b3b      	ldr	r3, [pc, #236]	@ (800a358 <HAL_TIM_Base_MspInit+0x118>)
 800a26a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a26c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a270:	661a      	str	r2, [r3, #96]	@ 0x60
 800a272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800a27c:	2200      	movs	r2, #0
 800a27e:	210f      	movs	r1, #15
 800a280:	2019      	movs	r0, #25
 800a282:	f7f9 fe8d 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a286:	2019      	movs	r0, #25
 800a288:	f7f9 feae 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
 800a28c:	e7ea      	b.n	800a264 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a28e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800a292:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a294:	f042 0201 	orr.w	r2, r2, #1
 800a298:	659a      	str	r2, [r3, #88]	@ 0x58
 800a29a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a29c:	f002 0201 	and.w	r2, r2, #1
 800a2a0:	9202      	str	r2, [sp, #8]
 800a2a2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2a6:	f042 0201 	orr.w	r2, r2, #1
 800a2aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a2ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2ae:	f002 0201 	and.w	r2, r2, #1
 800a2b2:	9203      	str	r2, [sp, #12]
 800a2b4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2b8:	f042 0202 	orr.w	r2, r2, #2
 800a2bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a2be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Ultra_4_Echo_Pin;
 800a2c8:	2501      	movs	r5, #1
 800a2ca:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2cc:	2402      	movs	r4, #2
 800a2ce:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a2d0:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(Ultra_4_Echo_GPIO_Port, &GPIO_InitStruct);
 800a2d2:	ae07      	add	r6, sp, #28
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a2da:	f7fa f8b9 	bl	8004450 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Ultra_2_Echo_Pin|Ultra_1_Echo_Pin;
 800a2de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a2e2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2e4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e6:	2400      	movs	r4, #0
 800a2e8:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2ea:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a2ec:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	481a      	ldr	r0, [pc, #104]	@ (800a35c <HAL_TIM_Base_MspInit+0x11c>)
 800a2f2:	f7fa f8ad 	bl	8004450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	2105      	movs	r1, #5
 800a2fa:	201c      	movs	r0, #28
 800a2fc:	f7f9 fe50 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a300:	201c      	movs	r0, #28
 800a302:	f7f9 fe71 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
 800a306:	e7ad      	b.n	800a264 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a308:	4b13      	ldr	r3, [pc, #76]	@ (800a358 <HAL_TIM_Base_MspInit+0x118>)
 800a30a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a30c:	f042 0202 	orr.w	r2, r2, #2
 800a310:	659a      	str	r2, [r3, #88]	@ 0x58
 800a312:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a314:	f002 0202 	and.w	r2, r2, #2
 800a318:	9205      	str	r2, [sp, #20]
 800a31a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a31c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a31e:	f042 0202 	orr.w	r2, r2, #2
 800a322:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	9306      	str	r3, [sp, #24]
 800a32c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = Ultra_3_Echo_Pin;
 800a32e:	2302      	movs	r3, #2
 800a330:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a332:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a334:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(Ultra_3_Echo_GPIO_Port, &GPIO_InitStruct);
 800a336:	a907      	add	r1, sp, #28
 800a338:	4808      	ldr	r0, [pc, #32]	@ (800a35c <HAL_TIM_Base_MspInit+0x11c>)
 800a33a:	f7fa f889 	bl	8004450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800a33e:	2200      	movs	r2, #0
 800a340:	2105      	movs	r1, #5
 800a342:	201d      	movs	r0, #29
 800a344:	f7f9 fe2c 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a348:	201d      	movs	r0, #29
 800a34a:	f7f9 fe4d 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
}
 800a34e:	e789      	b.n	800a264 <HAL_TIM_Base_MspInit+0x24>
 800a350:	40012c00 	.word	0x40012c00
 800a354:	40000400 	.word	0x40000400
 800a358:	40021000 	.word	0x40021000
 800a35c:	48000400 	.word	0x48000400

0800a360 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a360:	b530      	push	{r4, r5, lr}
 800a362:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a364:	2300      	movs	r3, #0
 800a366:	9305      	str	r3, [sp, #20]
 800a368:	9306      	str	r3, [sp, #24]
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	9308      	str	r3, [sp, #32]
 800a36e:	9309      	str	r3, [sp, #36]	@ 0x24
  if(timHandle->Instance==TIM1)
 800a370:	6803      	ldr	r3, [r0, #0]
 800a372:	4a30      	ldr	r2, [pc, #192]	@ (800a434 <HAL_TIM_MspPostInit+0xd4>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d007      	beq.n	800a388 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37c:	d01a      	beq.n	800a3b4 <HAL_TIM_MspPostInit+0x54>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 800a37e:	4a2e      	ldr	r2, [pc, #184]	@ (800a438 <HAL_TIM_MspPostInit+0xd8>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d02d      	beq.n	800a3e0 <HAL_TIM_MspPostInit+0x80>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a384:	b00b      	add	sp, #44	@ 0x2c
 800a386:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a388:	4b2c      	ldr	r3, [pc, #176]	@ (800a43c <HAL_TIM_MspPostInit+0xdc>)
 800a38a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a38c:	f042 0202 	orr.w	r2, r2, #2
 800a390:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MA_PWM_Pin;
 800a39c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(MA_PWM_GPIO_Port, &GPIO_InitStruct);
 800a3aa:	a905      	add	r1, sp, #20
 800a3ac:	4824      	ldr	r0, [pc, #144]	@ (800a440 <HAL_TIM_MspPostInit+0xe0>)
 800a3ae:	f7fa f84f 	bl	8004450 <HAL_GPIO_Init>
 800a3b2:	e7e7      	b.n	800a384 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3b4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800a3b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3ba:	f042 0202 	orr.w	r2, r2, #2
 800a3be:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	9302      	str	r3, [sp, #8]
 800a3c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = MD_PWM_Pin;
 800a3ca:	2308      	movs	r3, #8
 800a3cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(MD_PWM_GPIO_Port, &GPIO_InitStruct);
 800a3d6:	a905      	add	r1, sp, #20
 800a3d8:	4819      	ldr	r0, [pc, #100]	@ (800a440 <HAL_TIM_MspPostInit+0xe0>)
 800a3da:	f7fa f839 	bl	8004450 <HAL_GPIO_Init>
 800a3de:	e7d1      	b.n	800a384 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3e0:	4b16      	ldr	r3, [pc, #88]	@ (800a43c <HAL_TIM_MspPostInit+0xdc>)
 800a3e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3e4:	f042 0204 	orr.w	r2, r2, #4
 800a3e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3ec:	f002 0204 	and.w	r2, r2, #4
 800a3f0:	9203      	str	r2, [sp, #12]
 800a3f2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3f6:	f042 0202 	orr.w	r2, r2, #2
 800a3fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Servo_PWM_Pin;
 800a406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a40a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a40c:	2402      	movs	r4, #2
 800a40e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a410:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(Servo_PWM_GPIO_Port, &GPIO_InitStruct);
 800a412:	ad05      	add	r5, sp, #20
 800a414:	4629      	mov	r1, r5
 800a416:	480b      	ldr	r0, [pc, #44]	@ (800a444 <HAL_TIM_MspPostInit+0xe4>)
 800a418:	f7fa f81a 	bl	8004450 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_Strip_Data_1_Pin|LED_Strip_Data_2_Pin;
 800a41c:	2330      	movs	r3, #48	@ 0x30
 800a41e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a420:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a422:	2300      	movs	r3, #0
 800a424:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a426:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a428:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a42a:	4629      	mov	r1, r5
 800a42c:	4804      	ldr	r0, [pc, #16]	@ (800a440 <HAL_TIM_MspPostInit+0xe0>)
 800a42e:	f7fa f80f 	bl	8004450 <HAL_GPIO_Init>
}
 800a432:	e7a7      	b.n	800a384 <HAL_TIM_MspPostInit+0x24>
 800a434:	40012c00 	.word	0x40012c00
 800a438:	40000400 	.word	0x40000400
 800a43c:	40021000 	.word	0x40021000
 800a440:	48000400 	.word	0x48000400
 800a444:	48000800 	.word	0x48000800

0800a448 <MX_TIM1_Init>:
{
 800a448:	b510      	push	{r4, lr}
 800a44a:	b09a      	sub	sp, #104	@ 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a44c:	2400      	movs	r4, #0
 800a44e:	9416      	str	r4, [sp, #88]	@ 0x58
 800a450:	9417      	str	r4, [sp, #92]	@ 0x5c
 800a452:	9418      	str	r4, [sp, #96]	@ 0x60
 800a454:	9419      	str	r4, [sp, #100]	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a456:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a458:	9414      	str	r4, [sp, #80]	@ 0x50
 800a45a:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a45c:	940c      	str	r4, [sp, #48]	@ 0x30
 800a45e:	940d      	str	r4, [sp, #52]	@ 0x34
 800a460:	940e      	str	r4, [sp, #56]	@ 0x38
 800a462:	940f      	str	r4, [sp, #60]	@ 0x3c
 800a464:	9410      	str	r4, [sp, #64]	@ 0x40
 800a466:	9411      	str	r4, [sp, #68]	@ 0x44
 800a468:	9412      	str	r4, [sp, #72]	@ 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a46a:	222c      	movs	r2, #44	@ 0x2c
 800a46c:	4621      	mov	r1, r4
 800a46e:	a801      	add	r0, sp, #4
 800a470:	f010 fc2d 	bl	801acce <memset>
  htim1.Instance = TIM1;
 800a474:	4830      	ldr	r0, [pc, #192]	@ (800a538 <MX_TIM1_Init+0xf0>)
 800a476:	4b31      	ldr	r3, [pc, #196]	@ (800a53c <MX_TIM1_Init+0xf4>)
 800a478:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800a47a:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a47c:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 800a47e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a482:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a484:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800a486:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a488:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a48a:	f7fc fce3 	bl	8006e54 <HAL_TIM_Base_Init>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d140      	bne.n	800a514 <MX_TIM1_Init+0xcc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a496:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a498:	a916      	add	r1, sp, #88	@ 0x58
 800a49a:	4827      	ldr	r0, [pc, #156]	@ (800a538 <MX_TIM1_Init+0xf0>)
 800a49c:	f7fd f972 	bl	8007784 <HAL_TIM_ConfigClockSource>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d13a      	bne.n	800a51a <MX_TIM1_Init+0xd2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a4a4:	4824      	ldr	r0, [pc, #144]	@ (800a538 <MX_TIM1_Init+0xf0>)
 800a4a6:	f7fc fd6b 	bl	8006f80 <HAL_TIM_PWM_Init>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d138      	bne.n	800a520 <MX_TIM1_Init+0xd8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	9313      	str	r3, [sp, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a4b2:	9314      	str	r3, [sp, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4b4:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a4b6:	a913      	add	r1, sp, #76	@ 0x4c
 800a4b8:	481f      	ldr	r0, [pc, #124]	@ (800a538 <MX_TIM1_Init+0xf0>)
 800a4ba:	f7fd ff57 	bl	800836c <HAL_TIMEx_MasterConfigSynchronization>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d131      	bne.n	800a526 <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a4c2:	2360      	movs	r3, #96	@ 0x60
 800a4c4:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a4ca:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a4cc:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a4ce:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a4d0:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a4d2:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	a90c      	add	r1, sp, #48	@ 0x30
 800a4d8:	4817      	ldr	r0, [pc, #92]	@ (800a538 <MX_TIM1_Init+0xf0>)
 800a4da:	f7fc fedd 	bl	8007298 <HAL_TIM_PWM_ConfigChannel>
 800a4de:	bb28      	cbnz	r0, 800a52c <MX_TIM1_Init+0xe4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a4e4:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a4e6:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a4e8:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a4ea:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a4ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a4f0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a4f2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a4f4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a4f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800a4fa:	9209      	str	r2, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a4fc:	930a      	str	r3, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a4fe:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a500:	a901      	add	r1, sp, #4
 800a502:	480d      	ldr	r0, [pc, #52]	@ (800a538 <MX_TIM1_Init+0xf0>)
 800a504:	f7fd ffe0 	bl	80084c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800a508:	b998      	cbnz	r0, 800a532 <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 800a50a:	480b      	ldr	r0, [pc, #44]	@ (800a538 <MX_TIM1_Init+0xf0>)
 800a50c:	f7ff ff28 	bl	800a360 <HAL_TIM_MspPostInit>
}
 800a510:	b01a      	add	sp, #104	@ 0x68
 800a512:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a514:	f7f7 feb2 	bl	800227c <Error_Handler>
 800a518:	e7bb      	b.n	800a492 <MX_TIM1_Init+0x4a>
    Error_Handler();
 800a51a:	f7f7 feaf 	bl	800227c <Error_Handler>
 800a51e:	e7c1      	b.n	800a4a4 <MX_TIM1_Init+0x5c>
    Error_Handler();
 800a520:	f7f7 feac 	bl	800227c <Error_Handler>
 800a524:	e7c3      	b.n	800a4ae <MX_TIM1_Init+0x66>
    Error_Handler();
 800a526:	f7f7 fea9 	bl	800227c <Error_Handler>
 800a52a:	e7ca      	b.n	800a4c2 <MX_TIM1_Init+0x7a>
    Error_Handler();
 800a52c:	f7f7 fea6 	bl	800227c <Error_Handler>
 800a530:	e7d6      	b.n	800a4e0 <MX_TIM1_Init+0x98>
    Error_Handler();
 800a532:	f7f7 fea3 	bl	800227c <Error_Handler>
 800a536:	e7e8      	b.n	800a50a <MX_TIM1_Init+0xc2>
 800a538:	20008648 	.word	0x20008648
 800a53c:	40012c00 	.word	0x40012c00

0800a540 <MX_TIM2_Init>:
{
 800a540:	b500      	push	{lr}
 800a542:	b093      	sub	sp, #76	@ 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a544:	2300      	movs	r3, #0
 800a546:	930e      	str	r3, [sp, #56]	@ 0x38
 800a548:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a54a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a54c:	9311      	str	r3, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a54e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a550:	930c      	str	r3, [sp, #48]	@ 0x30
 800a552:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a554:	9307      	str	r3, [sp, #28]
 800a556:	9308      	str	r3, [sp, #32]
 800a558:	9309      	str	r3, [sp, #36]	@ 0x24
 800a55a:	930a      	str	r3, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	9305      	str	r3, [sp, #20]
 800a568:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800a56a:	4838      	ldr	r0, [pc, #224]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a56c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a570:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 800a572:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a574:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 3999;
 800a576:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800a57a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a57c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a57e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a580:	f7fc fc68 	bl	8006e54 <HAL_TIM_Base_Init>
 800a584:	2800      	cmp	r0, #0
 800a586:	d146      	bne.n	800a616 <MX_TIM2_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a58c:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a58e:	a90e      	add	r1, sp, #56	@ 0x38
 800a590:	482e      	ldr	r0, [pc, #184]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a592:	f7fd f8f7 	bl	8007784 <HAL_TIM_ConfigClockSource>
 800a596:	2800      	cmp	r0, #0
 800a598:	d140      	bne.n	800a61c <MX_TIM2_Init+0xdc>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800a59a:	482c      	ldr	r0, [pc, #176]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a59c:	f7fc fd86 	bl	80070ac <HAL_TIM_IC_Init>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d13e      	bne.n	800a622 <MX_TIM2_Init+0xe2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a5a4:	4829      	ldr	r0, [pc, #164]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a5a6:	f7fc fceb 	bl	8006f80 <HAL_TIM_PWM_Init>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d13c      	bne.n	800a628 <MX_TIM2_Init+0xe8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	930b      	str	r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a5b2:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a5b4:	a90b      	add	r1, sp, #44	@ 0x2c
 800a5b6:	4825      	ldr	r0, [pc, #148]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a5b8:	f7fd fed8 	bl	800836c <HAL_TIMEx_MasterConfigSynchronization>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d136      	bne.n	800a62e <MX_TIM2_Init+0xee>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	9207      	str	r2, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	9308      	str	r3, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a5c8:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfigIC.ICFilter = 0;
 800a5ca:	920a      	str	r2, [sp, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a5cc:	a907      	add	r1, sp, #28
 800a5ce:	481f      	ldr	r0, [pc, #124]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a5d0:	f7fc ffe0 	bl	8007594 <HAL_TIM_IC_ConfigChannel>
 800a5d4:	bb70      	cbnz	r0, 800a634 <MX_TIM2_Init+0xf4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a5d6:	2360      	movs	r3, #96	@ 0x60
 800a5d8:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 2000;
 800a5da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a5de:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a5e4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a5e6:	2204      	movs	r2, #4
 800a5e8:	4669      	mov	r1, sp
 800a5ea:	4818      	ldr	r0, [pc, #96]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a5ec:	f7fc fe54 	bl	8007298 <HAL_TIM_PWM_ConfigChannel>
 800a5f0:	bb18      	cbnz	r0, 800a63a <MX_TIM2_Init+0xfa>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800a5f2:	2208      	movs	r2, #8
 800a5f4:	a907      	add	r1, sp, #28
 800a5f6:	4815      	ldr	r0, [pc, #84]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a5f8:	f7fc ffcc 	bl	8007594 <HAL_TIM_IC_ConfigChannel>
 800a5fc:	bb00      	cbnz	r0, 800a640 <MX_TIM2_Init+0x100>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800a5fe:	220c      	movs	r2, #12
 800a600:	a907      	add	r1, sp, #28
 800a602:	4812      	ldr	r0, [pc, #72]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a604:	f7fc ffc6 	bl	8007594 <HAL_TIM_IC_ConfigChannel>
 800a608:	b9e8      	cbnz	r0, 800a646 <MX_TIM2_Init+0x106>
  HAL_TIM_MspPostInit(&htim2);
 800a60a:	4810      	ldr	r0, [pc, #64]	@ (800a64c <MX_TIM2_Init+0x10c>)
 800a60c:	f7ff fea8 	bl	800a360 <HAL_TIM_MspPostInit>
}
 800a610:	b013      	add	sp, #76	@ 0x4c
 800a612:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a616:	f7f7 fe31 	bl	800227c <Error_Handler>
 800a61a:	e7b5      	b.n	800a588 <MX_TIM2_Init+0x48>
    Error_Handler();
 800a61c:	f7f7 fe2e 	bl	800227c <Error_Handler>
 800a620:	e7bb      	b.n	800a59a <MX_TIM2_Init+0x5a>
    Error_Handler();
 800a622:	f7f7 fe2b 	bl	800227c <Error_Handler>
 800a626:	e7bd      	b.n	800a5a4 <MX_TIM2_Init+0x64>
    Error_Handler();
 800a628:	f7f7 fe28 	bl	800227c <Error_Handler>
 800a62c:	e7bf      	b.n	800a5ae <MX_TIM2_Init+0x6e>
    Error_Handler();
 800a62e:	f7f7 fe25 	bl	800227c <Error_Handler>
 800a632:	e7c5      	b.n	800a5c0 <MX_TIM2_Init+0x80>
    Error_Handler();
 800a634:	f7f7 fe22 	bl	800227c <Error_Handler>
 800a638:	e7cd      	b.n	800a5d6 <MX_TIM2_Init+0x96>
    Error_Handler();
 800a63a:	f7f7 fe1f 	bl	800227c <Error_Handler>
 800a63e:	e7d8      	b.n	800a5f2 <MX_TIM2_Init+0xb2>
    Error_Handler();
 800a640:	f7f7 fe1c 	bl	800227c <Error_Handler>
 800a644:	e7db      	b.n	800a5fe <MX_TIM2_Init+0xbe>
    Error_Handler();
 800a646:	f7f7 fe19 	bl	800227c <Error_Handler>
 800a64a:	e7de      	b.n	800a60a <MX_TIM2_Init+0xca>
 800a64c:	200085fc 	.word	0x200085fc

0800a650 <MX_TIM3_Init>:
{
 800a650:	b500      	push	{lr}
 800a652:	b093      	sub	sp, #76	@ 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a654:	2300      	movs	r3, #0
 800a656:	930e      	str	r3, [sp, #56]	@ 0x38
 800a658:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a65a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a65c:	9311      	str	r3, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a65e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a660:	930c      	str	r3, [sp, #48]	@ 0x30
 800a662:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	9305      	str	r3, [sp, #20]
 800a668:	9306      	str	r3, [sp, #24]
 800a66a:	9307      	str	r3, [sp, #28]
 800a66c:	9308      	str	r3, [sp, #32]
 800a66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a670:	930a      	str	r3, [sp, #40]	@ 0x28
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	9302      	str	r3, [sp, #8]
 800a678:	9303      	str	r3, [sp, #12]
  htim3.Instance = TIM3;
 800a67a:	4838      	ldr	r0, [pc, #224]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a67c:	4a38      	ldr	r2, [pc, #224]	@ (800a760 <MX_TIM3_Init+0x110>)
 800a67e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 79;
 800a680:	224f      	movs	r2, #79	@ 0x4f
 800a682:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a684:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 19999;
 800a686:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800a68a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a68c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a68e:	2380      	movs	r3, #128	@ 0x80
 800a690:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a692:	f7fc fbdf 	bl	8006e54 <HAL_TIM_Base_Init>
 800a696:	2800      	cmp	r0, #0
 800a698:	d144      	bne.n	800a724 <MX_TIM3_Init+0xd4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a69a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a69e:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a6a0:	a90e      	add	r1, sp, #56	@ 0x38
 800a6a2:	482e      	ldr	r0, [pc, #184]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a6a4:	f7fd f86e 	bl	8007784 <HAL_TIM_ConfigClockSource>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d13e      	bne.n	800a72a <MX_TIM3_Init+0xda>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a6ac:	482b      	ldr	r0, [pc, #172]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a6ae:	f7fc fc67 	bl	8006f80 <HAL_TIM_PWM_Init>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d13c      	bne.n	800a730 <MX_TIM3_Init+0xe0>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800a6b6:	4829      	ldr	r0, [pc, #164]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a6b8:	f7fc fcf8 	bl	80070ac <HAL_TIM_IC_Init>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d13a      	bne.n	800a736 <MX_TIM3_Init+0xe6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	930b      	str	r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a6c4:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a6c6:	a90b      	add	r1, sp, #44	@ 0x2c
 800a6c8:	4824      	ldr	r0, [pc, #144]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a6ca:	f7fd fe4f 	bl	800836c <HAL_TIMEx_MasterConfigSynchronization>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d134      	bne.n	800a73c <MX_TIM3_Init+0xec>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a6d2:	2360      	movs	r3, #96	@ 0x60
 800a6d4:	9304      	str	r3, [sp, #16]
  sConfigOC.Pulse = 0;
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	9205      	str	r2, [sp, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a6da:	9206      	str	r2, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a6dc:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a6de:	a904      	add	r1, sp, #16
 800a6e0:	481e      	ldr	r0, [pc, #120]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a6e2:	f7fc fdd9 	bl	8007298 <HAL_TIM_PWM_ConfigChannel>
 800a6e6:	bb60      	cbnz	r0, 800a742 <MX_TIM3_Init+0xf2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	a904      	add	r1, sp, #16
 800a6ec:	481b      	ldr	r0, [pc, #108]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a6ee:	f7fc fdd3 	bl	8007298 <HAL_TIM_PWM_ConfigChannel>
 800a6f2:	bb48      	cbnz	r0, 800a748 <MX_TIM3_Init+0xf8>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a6f4:	2208      	movs	r2, #8
 800a6f6:	a904      	add	r1, sp, #16
 800a6f8:	4818      	ldr	r0, [pc, #96]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a6fa:	f7fc fdcd 	bl	8007298 <HAL_TIM_PWM_ConfigChannel>
 800a6fe:	bb30      	cbnz	r0, 800a74e <MX_TIM3_Init+0xfe>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a700:	2300      	movs	r3, #0
 800a702:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a704:	2201      	movs	r2, #1
 800a706:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a708:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 800a70a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800a70c:	220c      	movs	r2, #12
 800a70e:	4669      	mov	r1, sp
 800a710:	4812      	ldr	r0, [pc, #72]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a712:	f7fc ff3f 	bl	8007594 <HAL_TIM_IC_ConfigChannel>
 800a716:	b9e8      	cbnz	r0, 800a754 <MX_TIM3_Init+0x104>
  HAL_TIM_MspPostInit(&htim3);
 800a718:	4810      	ldr	r0, [pc, #64]	@ (800a75c <MX_TIM3_Init+0x10c>)
 800a71a:	f7ff fe21 	bl	800a360 <HAL_TIM_MspPostInit>
}
 800a71e:	b013      	add	sp, #76	@ 0x4c
 800a720:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a724:	f7f7 fdaa 	bl	800227c <Error_Handler>
 800a728:	e7b7      	b.n	800a69a <MX_TIM3_Init+0x4a>
    Error_Handler();
 800a72a:	f7f7 fda7 	bl	800227c <Error_Handler>
 800a72e:	e7bd      	b.n	800a6ac <MX_TIM3_Init+0x5c>
    Error_Handler();
 800a730:	f7f7 fda4 	bl	800227c <Error_Handler>
 800a734:	e7bf      	b.n	800a6b6 <MX_TIM3_Init+0x66>
    Error_Handler();
 800a736:	f7f7 fda1 	bl	800227c <Error_Handler>
 800a73a:	e7c1      	b.n	800a6c0 <MX_TIM3_Init+0x70>
    Error_Handler();
 800a73c:	f7f7 fd9e 	bl	800227c <Error_Handler>
 800a740:	e7c7      	b.n	800a6d2 <MX_TIM3_Init+0x82>
    Error_Handler();
 800a742:	f7f7 fd9b 	bl	800227c <Error_Handler>
 800a746:	e7cf      	b.n	800a6e8 <MX_TIM3_Init+0x98>
    Error_Handler();
 800a748:	f7f7 fd98 	bl	800227c <Error_Handler>
 800a74c:	e7d2      	b.n	800a6f4 <MX_TIM3_Init+0xa4>
    Error_Handler();
 800a74e:	f7f7 fd95 	bl	800227c <Error_Handler>
 800a752:	e7d5      	b.n	800a700 <MX_TIM3_Init+0xb0>
    Error_Handler();
 800a754:	f7f7 fd92 	bl	800227c <Error_Handler>
 800a758:	e7de      	b.n	800a718 <MX_TIM3_Init+0xc8>
 800a75a:	bf00      	nop
 800a75c:	200085b0 	.word	0x200085b0
 800a760:	40000400 	.word	0x40000400

0800a764 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a764:	4b06      	ldr	r3, [pc, #24]	@ (800a780 <prvGetNextExpireTime+0x1c>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	6813      	ldr	r3, [r2, #0]
 800a76a:	b92b      	cbnz	r3, 800a778 <prvGetNextExpireTime+0x14>
 800a76c:	2301      	movs	r3, #1
 800a76e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a770:	b923      	cbnz	r3, 800a77c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a772:	68d3      	ldr	r3, [r2, #12]
 800a774:	6818      	ldr	r0, [r3, #0]
 800a776:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a778:	2300      	movs	r3, #0
 800a77a:	e7f8      	b.n	800a76e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a77c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a77e:	4770      	bx	lr
 800a780:	20008794 	.word	0x20008794

0800a784 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a784:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a786:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a788:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a78a:	4291      	cmp	r1, r2
 800a78c:	d80c      	bhi.n	800a7a8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	6983      	ldr	r3, [r0, #24]
 800a792:	429a      	cmp	r2, r3
 800a794:	d301      	bcc.n	800a79a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a796:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a798:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a79a:	1d01      	adds	r1, r0, #4
 800a79c:	4b09      	ldr	r3, [pc, #36]	@ (800a7c4 <prvInsertTimerInActiveList+0x40>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	f7f7 fcf9 	bl	8002196 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	e7f7      	b.n	800a798 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d201      	bcs.n	800a7b0 <prvInsertTimerInActiveList+0x2c>
 800a7ac:	4299      	cmp	r1, r3
 800a7ae:	d206      	bcs.n	800a7be <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7b0:	1d01      	adds	r1, r0, #4
 800a7b2:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <prvInsertTimerInActiveList+0x44>)
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f7f7 fcee 	bl	8002196 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e7ec      	b.n	800a798 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800a7be:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a7c0:	e7ea      	b.n	800a798 <prvInsertTimerInActiveList+0x14>
 800a7c2:	bf00      	nop
 800a7c4:	20008790 	.word	0x20008790
 800a7c8:	20008794 	.word	0x20008794

0800a7cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7cc:	b530      	push	{r4, r5, lr}
 800a7ce:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7d0:	f7f8 f850 	bl	8002874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7d4:	4b11      	ldr	r3, [pc, #68]	@ (800a81c <prvCheckForValidListAndQueue+0x50>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	b11b      	cbz	r3, 800a7e2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7da:	f7f8 f86d 	bl	80028b8 <vPortExitCritical>
}
 800a7de:	b003      	add	sp, #12
 800a7e0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a7e2:	4d0f      	ldr	r5, [pc, #60]	@ (800a820 <prvCheckForValidListAndQueue+0x54>)
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f7f7 fcbd 	bl	8002164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7ea:	4c0e      	ldr	r4, [pc, #56]	@ (800a824 <prvCheckForValidListAndQueue+0x58>)
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7f7 fcb9 	bl	8002164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a828 <prvCheckForValidListAndQueue+0x5c>)
 800a7f4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a82c <prvCheckForValidListAndQueue+0x60>)
 800a7f8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a830 <prvCheckForValidListAndQueue+0x64>)
 800a800:	4a0c      	ldr	r2, [pc, #48]	@ (800a834 <prvCheckForValidListAndQueue+0x68>)
 800a802:	2110      	movs	r1, #16
 800a804:	200a      	movs	r0, #10
 800a806:	f7f8 fa7c 	bl	8002d02 <xQueueGenericCreateStatic>
 800a80a:	4b04      	ldr	r3, [pc, #16]	@ (800a81c <prvCheckForValidListAndQueue+0x50>)
 800a80c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a80e:	2800      	cmp	r0, #0
 800a810:	d0e3      	beq.n	800a7da <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a812:	4909      	ldr	r1, [pc, #36]	@ (800a838 <prvCheckForValidListAndQueue+0x6c>)
 800a814:	f7f8 fc9a 	bl	800314c <vQueueAddToRegistry>
 800a818:	e7df      	b.n	800a7da <prvCheckForValidListAndQueue+0xe>
 800a81a:	bf00      	nop
 800a81c:	2000878c 	.word	0x2000878c
 800a820:	200087ac 	.word	0x200087ac
 800a824:	20008798 	.word	0x20008798
 800a828:	20008794 	.word	0x20008794
 800a82c:	20008790 	.word	0x20008790
 800a830:	20008694 	.word	0x20008694
 800a834:	200086e4 	.word	0x200086e4
 800a838:	0801d768 	.word	0x0801d768

0800a83c <xTimerCreateTimerTask>:
{
 800a83c:	b510      	push	{r4, lr}
 800a83e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a840:	f7ff ffc4 	bl	800a7cc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a844:	4b12      	ldr	r3, [pc, #72]	@ (800a890 <xTimerCreateTimerTask+0x54>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	b1cb      	cbz	r3, 800a87e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a84a:	2400      	movs	r4, #0
 800a84c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a84e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a850:	aa07      	add	r2, sp, #28
 800a852:	a906      	add	r1, sp, #24
 800a854:	a805      	add	r0, sp, #20
 800a856:	f7f6 fbbb 	bl	8000fd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a85a:	9b05      	ldr	r3, [sp, #20]
 800a85c:	9302      	str	r3, [sp, #8]
 800a85e:	9b06      	ldr	r3, [sp, #24]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	2302      	movs	r3, #2
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	4623      	mov	r3, r4
 800a868:	9a07      	ldr	r2, [sp, #28]
 800a86a:	490a      	ldr	r1, [pc, #40]	@ (800a894 <xTimerCreateTimerTask+0x58>)
 800a86c:	480a      	ldr	r0, [pc, #40]	@ (800a898 <xTimerCreateTimerTask+0x5c>)
 800a86e:	f7ff f961 	bl	8009b34 <xTaskCreateStatic>
 800a872:	4b0a      	ldr	r3, [pc, #40]	@ (800a89c <xTimerCreateTimerTask+0x60>)
 800a874:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a876:	b110      	cbz	r0, 800a87e <xTimerCreateTimerTask+0x42>
}
 800a878:	2001      	movs	r0, #1
 800a87a:	b008      	add	sp, #32
 800a87c:	bd10      	pop	{r4, pc}
 800a87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a88e:	e7fe      	b.n	800a88e <xTimerCreateTimerTask+0x52>
 800a890:	2000878c 	.word	0x2000878c
 800a894:	0801d770 	.word	0x0801d770
 800a898:	0800aba1 	.word	0x0800aba1
 800a89c:	20008788 	.word	0x20008788

0800a8a0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a8a0:	b1b8      	cbz	r0, 800a8d2 <xTimerGenericCommand+0x32>
 800a8a2:	469c      	mov	ip, r3
 800a8a4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a8a6:	4818      	ldr	r0, [pc, #96]	@ (800a908 <xTimerGenericCommand+0x68>)
 800a8a8:	6800      	ldr	r0, [r0, #0]
 800a8aa:	b358      	cbz	r0, 800a904 <xTimerGenericCommand+0x64>
{
 800a8ac:	b500      	push	{lr}
 800a8ae:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a8b0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8b2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8b4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8b6:	2905      	cmp	r1, #5
 800a8b8:	dc1c      	bgt.n	800a8f4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8ba:	f7ff fc69 	bl	800a190 <xTaskGetSchedulerState>
 800a8be:	2802      	cmp	r0, #2
 800a8c0:	d010      	beq.n	800a8e4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4669      	mov	r1, sp
 800a8c8:	480f      	ldr	r0, [pc, #60]	@ (800a908 <xTimerGenericCommand+0x68>)
 800a8ca:	6800      	ldr	r0, [r0, #0]
 800a8cc:	f7f8 fa63 	bl	8002d96 <xQueueGenericSend>
 800a8d0:	e015      	b.n	800a8fe <xTimerGenericCommand+0x5e>
 800a8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a8e2:	e7fe      	b.n	800a8e2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9a06      	ldr	r2, [sp, #24]
 800a8e8:	4669      	mov	r1, sp
 800a8ea:	4807      	ldr	r0, [pc, #28]	@ (800a908 <xTimerGenericCommand+0x68>)
 800a8ec:	6800      	ldr	r0, [r0, #0]
 800a8ee:	f7f8 fa52 	bl	8002d96 <xQueueGenericSend>
 800a8f2:	e004      	b.n	800a8fe <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4662      	mov	r2, ip
 800a8f8:	4669      	mov	r1, sp
 800a8fa:	f7f8 fb10 	bl	8002f1e <xQueueGenericSendFromISR>
}
 800a8fe:	b005      	add	sp, #20
 800a900:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a904:	2000      	movs	r0, #0
}
 800a906:	4770      	bx	lr
 800a908:	2000878c 	.word	0x2000878c

0800a90c <prvSwitchTimerLists>:
{
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a910:	4b1b      	ldr	r3, [pc, #108]	@ (800a980 <prvSwitchTimerLists+0x74>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	b362      	cbz	r2, 800a972 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a91c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a91e:	1d25      	adds	r5, r4, #4
 800a920:	4628      	mov	r0, r5
 800a922:	f7f7 fc51 	bl	80021c8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a926:	6a23      	ldr	r3, [r4, #32]
 800a928:	4620      	mov	r0, r4
 800a92a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a92c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800a930:	f013 0f04 	tst.w	r3, #4
 800a934:	d0ec      	beq.n	800a910 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a936:	69a3      	ldr	r3, [r4, #24]
 800a938:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a93a:	429e      	cmp	r6, r3
 800a93c:	d207      	bcs.n	800a94e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a93e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a940:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a942:	4629      	mov	r1, r5
 800a944:	4b0e      	ldr	r3, [pc, #56]	@ (800a980 <prvSwitchTimerLists+0x74>)
 800a946:	6818      	ldr	r0, [r3, #0]
 800a948:	f7f7 fc25 	bl	8002196 <vListInsert>
 800a94c:	e7e0      	b.n	800a910 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a94e:	2100      	movs	r1, #0
 800a950:	9100      	str	r1, [sp, #0]
 800a952:	460b      	mov	r3, r1
 800a954:	4632      	mov	r2, r6
 800a956:	4620      	mov	r0, r4
 800a958:	f7ff ffa2 	bl	800a8a0 <xTimerGenericCommand>
				configASSERT( xResult );
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d1d7      	bne.n	800a910 <prvSwitchTimerLists+0x4>
 800a960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	e7fe      	b.n	800a970 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a972:	4a04      	ldr	r2, [pc, #16]	@ (800a984 <prvSwitchTimerLists+0x78>)
 800a974:	6810      	ldr	r0, [r2, #0]
 800a976:	4902      	ldr	r1, [pc, #8]	@ (800a980 <prvSwitchTimerLists+0x74>)
 800a978:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a97a:	6013      	str	r3, [r2, #0]
}
 800a97c:	b002      	add	sp, #8
 800a97e:	bd70      	pop	{r4, r5, r6, pc}
 800a980:	20008794 	.word	0x20008794
 800a984:	20008790 	.word	0x20008790

0800a988 <prvSampleTimeNow>:
{
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a98c:	f7ff f994 	bl	8009cb8 <xTaskGetTickCount>
 800a990:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a992:	4b07      	ldr	r3, [pc, #28]	@ (800a9b0 <prvSampleTimeNow+0x28>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4283      	cmp	r3, r0
 800a998:	d805      	bhi.n	800a9a6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a99e:	4b04      	ldr	r3, [pc, #16]	@ (800a9b0 <prvSampleTimeNow+0x28>)
 800a9a0:	601c      	str	r4, [r3, #0]
}
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a9a6:	f7ff ffb1 	bl	800a90c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	e7f6      	b.n	800a99e <prvSampleTimeNow+0x16>
 800a9b0:	20008784 	.word	0x20008784

0800a9b4 <prvProcessExpiredTimer>:
{
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9bc:	4917      	ldr	r1, [pc, #92]	@ (800aa1c <prvProcessExpiredTimer+0x68>)
 800a9be:	6809      	ldr	r1, [r1, #0]
 800a9c0:	68c9      	ldr	r1, [r1, #12]
 800a9c2:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9c4:	1d20      	adds	r0, r4, #4
 800a9c6:	f7f7 fbff 	bl	80021c8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9ca:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800a9ce:	f01c 0f04 	tst.w	ip, #4
 800a9d2:	d108      	bne.n	800a9e6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9d4:	f02c 0c01 	bic.w	ip, ip, #1
 800a9d8:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9dc:	6a23      	ldr	r3, [r4, #32]
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4798      	blx	r3
}
 800a9e2:	b002      	add	sp, #8
 800a9e4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9e6:	69a1      	ldr	r1, [r4, #24]
 800a9e8:	4633      	mov	r3, r6
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4431      	add	r1, r6
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7ff fec8 	bl	800a784 <prvInsertTimerInActiveList>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d0f1      	beq.n	800a9dc <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	9100      	str	r1, [sp, #0]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4632      	mov	r2, r6
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7ff ff4d 	bl	800a8a0 <xTimerGenericCommand>
			configASSERT( xResult );
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d1e8      	bne.n	800a9dc <prvProcessExpiredTimer+0x28>
 800aa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	e7fe      	b.n	800aa1a <prvProcessExpiredTimer+0x66>
 800aa1c:	20008794 	.word	0x20008794

0800aa20 <prvProcessTimerOrBlockTask>:
{
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	4606      	mov	r6, r0
 800aa26:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800aa28:	f7ff f93e 	bl	8009ca8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa2c:	a801      	add	r0, sp, #4
 800aa2e:	f7ff ffab 	bl	800a988 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	bb33      	cbnz	r3, 800aa84 <prvProcessTimerOrBlockTask+0x64>
 800aa36:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa38:	b9e4      	cbnz	r4, 800aa74 <prvProcessTimerOrBlockTask+0x54>
 800aa3a:	42b0      	cmp	r0, r6
 800aa3c:	d213      	bcs.n	800aa66 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa3e:	4622      	mov	r2, r4
 800aa40:	1b71      	subs	r1, r6, r5
 800aa42:	4b12      	ldr	r3, [pc, #72]	@ (800aa8c <prvProcessTimerOrBlockTask+0x6c>)
 800aa44:	6818      	ldr	r0, [r3, #0]
 800aa46:	f7f8 fb95 	bl	8003174 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa4a:	f7ff f9c7 	bl	8009ddc <xTaskResumeAll>
 800aa4e:	b9d8      	cbnz	r0, 800aa88 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800aa50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800aa54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	e010      	b.n	800aa88 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800aa66:	f7ff f9b9 	bl	8009ddc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7ff ffa1 	bl	800a9b4 <prvProcessExpiredTimer>
 800aa72:	e009      	b.n	800aa88 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa74:	4a06      	ldr	r2, [pc, #24]	@ (800aa90 <prvProcessTimerOrBlockTask+0x70>)
 800aa76:	6812      	ldr	r2, [r2, #0]
 800aa78:	6812      	ldr	r2, [r2, #0]
 800aa7a:	b90a      	cbnz	r2, 800aa80 <prvProcessTimerOrBlockTask+0x60>
 800aa7c:	2401      	movs	r4, #1
 800aa7e:	e7de      	b.n	800aa3e <prvProcessTimerOrBlockTask+0x1e>
 800aa80:	461c      	mov	r4, r3
 800aa82:	e7dc      	b.n	800aa3e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 800aa84:	f7ff f9aa 	bl	8009ddc <xTaskResumeAll>
}
 800aa88:	b002      	add	sp, #8
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	2000878c 	.word	0x2000878c
 800aa90:	20008790 	.word	0x20008790

0800aa94 <prvProcessReceivedCommands>:
{
 800aa94:	b510      	push	{r4, lr}
 800aa96:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa98:	e002      	b.n	800aaa0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa9a:	9b04      	ldr	r3, [sp, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	da0f      	bge.n	800aac0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	4b3d      	ldr	r3, [pc, #244]	@ (800ab9c <prvProcessReceivedCommands+0x108>)
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	f7f8 faa0 	bl	8002fec <xQueueReceive>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d072      	beq.n	800ab96 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aab0:	9b04      	ldr	r3, [sp, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	daf1      	bge.n	800aa9a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aab6:	9907      	ldr	r1, [sp, #28]
 800aab8:	9806      	ldr	r0, [sp, #24]
 800aaba:	9b05      	ldr	r3, [sp, #20]
 800aabc:	4798      	blx	r3
 800aabe:	e7ec      	b.n	800aa9a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aac0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aac2:	6963      	ldr	r3, [r4, #20]
 800aac4:	b113      	cbz	r3, 800aacc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aac6:	1d20      	adds	r0, r4, #4
 800aac8:	f7f7 fb7e 	bl	80021c8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aacc:	a803      	add	r0, sp, #12
 800aace:	f7ff ff5b 	bl	800a988 <prvSampleTimeNow>
 800aad2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800aad4:	9b04      	ldr	r3, [sp, #16]
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	d8e2      	bhi.n	800aaa0 <prvProcessReceivedCommands+0xc>
 800aada:	e8df f003 	tbb	[pc, r3]
 800aade:	0505      	.short	0x0505
 800aae0:	4e362f05 	.word	0x4e362f05
 800aae4:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aae8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800aaec:	f043 0301 	orr.w	r3, r3, #1
 800aaf0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aaf4:	9b05      	ldr	r3, [sp, #20]
 800aaf6:	69a1      	ldr	r1, [r4, #24]
 800aaf8:	4419      	add	r1, r3
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7ff fe42 	bl	800a784 <prvInsertTimerInActiveList>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d0cd      	beq.n	800aaa0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab04:	6a23      	ldr	r3, [r4, #32]
 800ab06:	4620      	mov	r0, r4
 800ab08:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab0a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ab0e:	f013 0f04 	tst.w	r3, #4
 800ab12:	d0c5      	beq.n	800aaa0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab14:	69a2      	ldr	r2, [r4, #24]
 800ab16:	2100      	movs	r1, #0
 800ab18:	9100      	str	r1, [sp, #0]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	9805      	ldr	r0, [sp, #20]
 800ab1e:	4402      	add	r2, r0
 800ab20:	4620      	mov	r0, r4
 800ab22:	f7ff febd 	bl	800a8a0 <xTimerGenericCommand>
							configASSERT( xResult );
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d1ba      	bne.n	800aaa0 <prvProcessReceivedCommands+0xc>
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	e7fe      	b.n	800ab3a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab3c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ab40:	f023 0301 	bic.w	r3, r3, #1
 800ab44:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800ab48:	e7aa      	b.n	800aaa0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab56:	9905      	ldr	r1, [sp, #20]
 800ab58:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab5a:	b129      	cbz	r1, 800ab68 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	4401      	add	r1, r0
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7ff fe0f 	bl	800a784 <prvInsertTimerInActiveList>
					break;
 800ab66:	e79b      	b.n	800aaa0 <prvProcessReceivedCommands+0xc>
 800ab68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab78:	e7fe      	b.n	800ab78 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab7a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ab7e:	f013 0f02 	tst.w	r3, #2
 800ab82:	d004      	beq.n	800ab8e <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab84:	f023 0301 	bic.w	r3, r3, #1
 800ab88:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800ab8c:	e788      	b.n	800aaa0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f7f7 f99c 	bl	8001ecc <vPortFree>
 800ab94:	e784      	b.n	800aaa0 <prvProcessReceivedCommands+0xc>
}
 800ab96:	b008      	add	sp, #32
 800ab98:	bd10      	pop	{r4, pc}
 800ab9a:	bf00      	nop
 800ab9c:	2000878c 	.word	0x2000878c

0800aba0 <prvTimerTask>:
{
 800aba0:	b500      	push	{lr}
 800aba2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aba4:	a801      	add	r0, sp, #4
 800aba6:	f7ff fddd 	bl	800a764 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800abaa:	9901      	ldr	r1, [sp, #4]
 800abac:	f7ff ff38 	bl	800aa20 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800abb0:	f7ff ff70 	bl	800aa94 <prvProcessReceivedCommands>
	for( ;; )
 800abb4:	e7f6      	b.n	800aba4 <prvTimerTask+0x4>
	...

0800abb8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800abb8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800abba:	480b      	ldr	r0, [pc, #44]	@ (800abe8 <MX_USART2_UART_Init+0x30>)
 800abbc:	4b0b      	ldr	r3, [pc, #44]	@ (800abec <MX_USART2_UART_Init+0x34>)
 800abbe:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800abc0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800abc4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800abc6:	2300      	movs	r3, #0
 800abc8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800abca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800abcc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800abce:	220c      	movs	r2, #12
 800abd0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800abd2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800abd4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800abd6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800abd8:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800abda:	f7fe fc61 	bl	80094a0 <HAL_UART_Init>
 800abde:	b900      	cbnz	r0, 800abe2 <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800abe0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800abe2:	f7f7 fb4b 	bl	800227c <Error_Handler>
}
 800abe6:	e7fb      	b.n	800abe0 <MX_USART2_UART_Init+0x28>
 800abe8:	20008850 	.word	0x20008850
 800abec:	40004400 	.word	0x40004400

0800abf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	b0a2      	sub	sp, #136	@ 0x88
 800abf4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abf6:	2100      	movs	r1, #0
 800abf8:	911d      	str	r1, [sp, #116]	@ 0x74
 800abfa:	911e      	str	r1, [sp, #120]	@ 0x78
 800abfc:	911f      	str	r1, [sp, #124]	@ 0x7c
 800abfe:	9120      	str	r1, [sp, #128]	@ 0x80
 800ac00:	9121      	str	r1, [sp, #132]	@ 0x84
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ac02:	2268      	movs	r2, #104	@ 0x68
 800ac04:	a803      	add	r0, sp, #12
 800ac06:	f010 f862 	bl	801acce <memset>
  if(uartHandle->Instance==USART2)
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	4b35      	ldr	r3, [pc, #212]	@ (800ace4 <HAL_UART_MspInit+0xf4>)
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d001      	beq.n	800ac16 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ac12:	b022      	add	sp, #136	@ 0x88
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ac16:	2302      	movs	r3, #2
 800ac18:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ac1a:	a803      	add	r0, sp, #12
 800ac1c:	f7fb fa66 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d156      	bne.n	800acd2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ac24:	4b30      	ldr	r3, [pc, #192]	@ (800ace8 <HAL_UART_MspInit+0xf8>)
 800ac26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac28:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ac2c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ac2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac30:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800ac34:	9201      	str	r2, [sp, #4]
 800ac36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac3a:	f042 0201 	orr.w	r2, r2, #1
 800ac3e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ac40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	9302      	str	r3, [sp, #8]
 800ac48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800ac4a:	230c      	movs	r3, #12
 800ac4c:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac4e:	2602      	movs	r6, #2
 800ac50:	961e      	str	r6, [sp, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac52:	2500      	movs	r5, #0
 800ac54:	951f      	str	r5, [sp, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac56:	2303      	movs	r3, #3
 800ac58:	9320      	str	r3, [sp, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ac5a:	2307      	movs	r3, #7
 800ac5c:	9321      	str	r3, [sp, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac5e:	a91d      	add	r1, sp, #116	@ 0x74
 800ac60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ac64:	f7f9 fbf4 	bl	8004450 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800ac68:	4820      	ldr	r0, [pc, #128]	@ (800acec <HAL_UART_MspInit+0xfc>)
 800ac6a:	4b21      	ldr	r3, [pc, #132]	@ (800acf0 <HAL_UART_MspInit+0x100>)
 800ac6c:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800ac6e:	6046      	str	r6, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac70:	2310      	movs	r3, #16
 800ac72:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac74:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ac76:	2380      	movs	r3, #128	@ 0x80
 800ac78:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac7a:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac7c:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ac7e:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac80:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800ac84:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ac86:	f7f9 f9d7 	bl	8004038 <HAL_DMA_Init>
 800ac8a:	bb28      	cbnz	r0, 800acd8 <HAL_UART_MspInit+0xe8>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800ac8c:	4b17      	ldr	r3, [pc, #92]	@ (800acec <HAL_UART_MspInit+0xfc>)
 800ac8e:	6723      	str	r3, [r4, #112]	@ 0x70
 800ac90:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800ac92:	4818      	ldr	r0, [pc, #96]	@ (800acf4 <HAL_UART_MspInit+0x104>)
 800ac94:	4b18      	ldr	r3, [pc, #96]	@ (800acf8 <HAL_UART_MspInit+0x108>)
 800ac96:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800ac98:	2302      	movs	r3, #2
 800ac9a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aca0:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aca2:	2280      	movs	r2, #128	@ 0x80
 800aca4:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aca6:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aca8:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800acaa:	2320      	movs	r3, #32
 800acac:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800acae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800acb2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800acb4:	f7f9 f9c0 	bl	8004038 <HAL_DMA_Init>
 800acb8:	b988      	cbnz	r0, 800acde <HAL_UART_MspInit+0xee>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800acba:	4b0e      	ldr	r3, [pc, #56]	@ (800acf4 <HAL_UART_MspInit+0x104>)
 800acbc:	6763      	str	r3, [r4, #116]	@ 0x74
 800acbe:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800acc0:	2200      	movs	r2, #0
 800acc2:	2105      	movs	r1, #5
 800acc4:	2026      	movs	r0, #38	@ 0x26
 800acc6:	f7f9 f96b 	bl	8003fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800acca:	2026      	movs	r0, #38	@ 0x26
 800accc:	f7f9 f98c 	bl	8003fe8 <HAL_NVIC_EnableIRQ>
}
 800acd0:	e79f      	b.n	800ac12 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800acd2:	f7f7 fad3 	bl	800227c <Error_Handler>
 800acd6:	e7a5      	b.n	800ac24 <HAL_UART_MspInit+0x34>
      Error_Handler();
 800acd8:	f7f7 fad0 	bl	800227c <Error_Handler>
 800acdc:	e7d6      	b.n	800ac8c <HAL_UART_MspInit+0x9c>
      Error_Handler();
 800acde:	f7f7 facd 	bl	800227c <Error_Handler>
 800ace2:	e7ea      	b.n	800acba <HAL_UART_MspInit+0xca>
 800ace4:	40004400 	.word	0x40004400
 800ace8:	40021000 	.word	0x40021000
 800acec:	20008808 	.word	0x20008808
 800acf0:	40020080 	.word	0x40020080
 800acf4:	200087c0 	.word	0x200087c0
 800acf8:	4002006c 	.word	0x4002006c

0800acfc <stamp_header>:
#include "utils.h"

#include "rcutils/time.h"
#include "rmw_microros/time_sync.h"

void stamp_header(builtin_interfaces__msg__Time *stamp) {
 800acfc:	b510      	push	{r4, lr}
 800acfe:	4604      	mov	r4, r0
  stamp->sec = (int32_t)(rmw_uros_epoch_millis() / 1000);
 800ad00:	f003 ff72 	bl	800ebe8 <rmw_uros_epoch_millis>
 800ad04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f7f5 ff95 	bl	8000c38 <__aeabi_ldivmod>
 800ad0e:	6020      	str	r0, [r4, #0]
  stamp->nanosec = (int32_t)rmw_uros_epoch_nanos();
 800ad10:	f003 ff78 	bl	800ec04 <rmw_uros_epoch_nanos>
 800ad14:	6060      	str	r0, [r4, #4]
}
 800ad16:	bd10      	pop	{r4, pc}

0800ad18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ad18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ad50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800ad1c:	f7fe fd7a 	bl	8009814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ad20:	480c      	ldr	r0, [pc, #48]	@ (800ad54 <LoopForever+0x6>)
  ldr r1, =_edata
 800ad22:	490d      	ldr	r1, [pc, #52]	@ (800ad58 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ad24:	4a0d      	ldr	r2, [pc, #52]	@ (800ad5c <LoopForever+0xe>)
  movs r3, #0
 800ad26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ad28:	e002      	b.n	800ad30 <LoopCopyDataInit>

0800ad2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ad2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ad2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ad2e:	3304      	adds	r3, #4

0800ad30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ad30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ad32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ad34:	d3f9      	bcc.n	800ad2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ad36:	4a0a      	ldr	r2, [pc, #40]	@ (800ad60 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ad38:	4c0a      	ldr	r4, [pc, #40]	@ (800ad64 <LoopForever+0x16>)
  movs r3, #0
 800ad3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ad3c:	e001      	b.n	800ad42 <LoopFillZerobss>

0800ad3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ad3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ad40:	3204      	adds	r2, #4

0800ad42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ad42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ad44:	d3fb      	bcc.n	800ad3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ad46:	f010 f873 	bl	801ae30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ad4a:	f7f7 fad7 	bl	80022fc <main>

0800ad4e <LoopForever>:

LoopForever:
    b LoopForever
 800ad4e:	e7fe      	b.n	800ad4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ad50:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800ad54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ad58:	20002668 	.word	0x20002668
  ldr r2, =_sidata
 800ad5c:	0801f088 	.word	0x0801f088
  ldr r2, =_sbss
 800ad60:	20002668 	.word	0x20002668
  ldr r4, =_ebss
 800ad64:	2000d3a8 	.word	0x2000d3a8

0800ad68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ad68:	e7fe      	b.n	800ad68 <ADC1_IRQHandler>
	...

0800ad6c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ad6c:	4b04      	ldr	r3, [pc, #16]	@ (800ad80 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	b10a      	cbz	r2, 800ad76 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ad72:	4803      	ldr	r0, [pc, #12]	@ (800ad80 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ad74:	4770      	bx	lr
 800ad76:	4a03      	ldr	r2, [pc, #12]	@ (800ad84 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ad78:	4801      	ldr	r0, [pc, #4]	@ (800ad80 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ad7a:	6812      	ldr	r2, [r2, #0]
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	4770      	bx	lr
 800ad80:	20000018 	.word	0x20000018
 800ad84:	200004c8 	.word	0x200004c8

0800ad88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ad88:	4a02      	ldr	r2, [pc, #8]	@ (800ad94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ad8a:	4b03      	ldr	r3, [pc, #12]	@ (800ad98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ad8c:	6812      	ldr	r2, [r2, #0]
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	200004c8 	.word	0x200004c8
 800ad98:	20000018 	.word	0x20000018

0800ad9c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ad9c:	f004 bd54 	b.w	800f848 <geometry_msgs__msg__Twist__init>

0800ada0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ada0:	f004 bd72 	b.w	800f888 <geometry_msgs__msg__Twist__fini>

0800ada4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ada4:	b510      	push	{r4, lr}
 800ada6:	f000 f819 	bl	800addc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800adaa:	4c07      	ldr	r4, [pc, #28]	@ (800adc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800adac:	60e0      	str	r0, [r4, #12]
 800adae:	f000 f815 	bl	800addc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800adb2:	4b06      	ldr	r3, [pc, #24]	@ (800adcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800adb4:	64a0      	str	r0, [r4, #72]	@ 0x48
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	b10a      	cbz	r2, 800adbe <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800adba:	4804      	ldr	r0, [pc, #16]	@ (800adcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	4a04      	ldr	r2, [pc, #16]	@ (800add0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800adc0:	4802      	ldr	r0, [pc, #8]	@ (800adcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	bd10      	pop	{r4, pc}
 800adc8:	20000050 	.word	0x20000050
 800adcc:	20000038 	.word	0x20000038
 800add0:	200004cc 	.word	0x200004cc

0800add4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800add4:	f004 bd94 	b.w	800f900 <geometry_msgs__msg__Vector3__init>

0800add8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800add8:	f004 bd96 	b.w	800f908 <geometry_msgs__msg__Vector3__fini>

0800addc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	b10a      	cbz	r2, 800ade6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ade2:	4803      	ldr	r0, [pc, #12]	@ (800adf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ade4:	4770      	bx	lr
 800ade6:	4a03      	ldr	r2, [pc, #12]	@ (800adf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ade8:	4801      	ldr	r0, [pc, #4]	@ (800adf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800adea:	6812      	ldr	r2, [r2, #0]
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	4770      	bx	lr
 800adf0:	200000c8 	.word	0x200000c8
 800adf4:	200004cc 	.word	0x200004cc

0800adf8 <get_serialized_size_geometry_msgs__msg__Twist>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	4604      	mov	r4, r0
 800adfc:	b148      	cbz	r0, 800ae12 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800adfe:	460d      	mov	r5, r1
 800ae00:	f000 f85c 	bl	800aebc <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae04:	4606      	mov	r6, r0
 800ae06:	1829      	adds	r1, r5, r0
 800ae08:	f104 0018 	add.w	r0, r4, #24
 800ae0c:	f000 f856 	bl	800aebc <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae10:	4430      	add	r0, r6
 800ae12:	bd70      	pop	{r4, r5, r6, pc}

0800ae14 <_Twist__cdr_deserialize>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	460c      	mov	r4, r1
 800ae18:	b189      	cbz	r1, 800ae3e <_Twist__cdr_deserialize+0x2a>
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	f000 f8da 	bl	800afd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae20:	6843      	ldr	r3, [r0, #4]
 800ae22:	4621      	mov	r1, r4
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	4628      	mov	r0, r5
 800ae28:	4798      	blx	r3
 800ae2a:	f000 f8d3 	bl	800afd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae2e:	6843      	ldr	r3, [r0, #4]
 800ae30:	f104 0118 	add.w	r1, r4, #24
 800ae34:	4628      	mov	r0, r5
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae3c:	4718      	bx	r3
 800ae3e:	4608      	mov	r0, r1
 800ae40:	bd70      	pop	{r4, r5, r6, pc}
 800ae42:	bf00      	nop

0800ae44 <_Twist__cdr_serialize>:
 800ae44:	b198      	cbz	r0, 800ae6e <_Twist__cdr_serialize+0x2a>
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	460d      	mov	r5, r1
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	f000 f8c2 	bl	800afd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae50:	6843      	ldr	r3, [r0, #4]
 800ae52:	4629      	mov	r1, r5
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	4620      	mov	r0, r4
 800ae58:	4798      	blx	r3
 800ae5a:	f000 f8bb 	bl	800afd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae5e:	6843      	ldr	r3, [r0, #4]
 800ae60:	4629      	mov	r1, r5
 800ae62:	f104 0018 	add.w	r0, r4, #24
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae6c:	4718      	bx	r3
 800ae6e:	4770      	bx	lr

0800ae70 <_Twist__get_serialized_size>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4604      	mov	r4, r0
 800ae74:	b148      	cbz	r0, 800ae8a <_Twist__get_serialized_size+0x1a>
 800ae76:	2100      	movs	r1, #0
 800ae78:	f000 f820 	bl	800aebc <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	4601      	mov	r1, r0
 800ae80:	f104 0018 	add.w	r0, r4, #24
 800ae84:	f000 f81a 	bl	800aebc <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae88:	4428      	add	r0, r5
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}

0800ae8c <_Twist__max_serialized_size>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	2301      	movs	r3, #1
 800ae92:	2100      	movs	r1, #0
 800ae94:	f10d 0007 	add.w	r0, sp, #7
 800ae98:	f88d 3007 	strb.w	r3, [sp, #7]
 800ae9c:	f000 f880 	bl	800afa0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800aea0:	4604      	mov	r4, r0
 800aea2:	4601      	mov	r1, r0
 800aea4:	f10d 0007 	add.w	r0, sp, #7
 800aea8:	f000 f87a 	bl	800afa0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800aeac:	4420      	add	r0, r4
 800aeae:	b002      	add	sp, #8
 800aeb0:	bd10      	pop	{r4, pc}
 800aeb2:	bf00      	nop

0800aeb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aeb4:	4800      	ldr	r0, [pc, #0]	@ (800aeb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800aeb6:	4770      	bx	lr
 800aeb8:	20000194 	.word	0x20000194

0800aebc <get_serialized_size_geometry_msgs__msg__Vector3>:
 800aebc:	b1b8      	cbz	r0, 800aeee <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800aebe:	b570      	push	{r4, r5, r6, lr}
 800aec0:	460d      	mov	r5, r1
 800aec2:	4628      	mov	r0, r5
 800aec4:	2108      	movs	r1, #8
 800aec6:	f001 fb37 	bl	800c538 <ucdr_alignment>
 800aeca:	2108      	movs	r1, #8
 800aecc:	186e      	adds	r6, r5, r1
 800aece:	4406      	add	r6, r0
 800aed0:	4630      	mov	r0, r6
 800aed2:	f001 fb31 	bl	800c538 <ucdr_alignment>
 800aed6:	f100 0408 	add.w	r4, r0, #8
 800aeda:	4434      	add	r4, r6
 800aedc:	2108      	movs	r1, #8
 800aede:	4620      	mov	r0, r4
 800aee0:	f001 fb2a 	bl	800c538 <ucdr_alignment>
 800aee4:	f1c5 0508 	rsb	r5, r5, #8
 800aee8:	4405      	add	r5, r0
 800aeea:	1928      	adds	r0, r5, r4
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	4770      	bx	lr

0800aef0 <_Vector3__cdr_deserialize>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	460c      	mov	r4, r1
 800aef4:	b171      	cbz	r1, 800af14 <_Vector3__cdr_deserialize+0x24>
 800aef6:	4605      	mov	r5, r0
 800aef8:	f001 fa08 	bl	800c30c <ucdr_deserialize_double>
 800aefc:	f104 0108 	add.w	r1, r4, #8
 800af00:	4628      	mov	r0, r5
 800af02:	f001 fa03 	bl	800c30c <ucdr_deserialize_double>
 800af06:	f104 0110 	add.w	r1, r4, #16
 800af0a:	4628      	mov	r0, r5
 800af0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af10:	f001 b9fc 	b.w	800c30c <ucdr_deserialize_double>
 800af14:	4608      	mov	r0, r1
 800af16:	bd38      	pop	{r3, r4, r5, pc}

0800af18 <_Vector3__cdr_serialize>:
 800af18:	b198      	cbz	r0, 800af42 <_Vector3__cdr_serialize+0x2a>
 800af1a:	b538      	push	{r3, r4, r5, lr}
 800af1c:	ed90 0b00 	vldr	d0, [r0]
 800af20:	460d      	mov	r5, r1
 800af22:	4604      	mov	r4, r0
 800af24:	4608      	mov	r0, r1
 800af26:	f001 f929 	bl	800c17c <ucdr_serialize_double>
 800af2a:	ed94 0b02 	vldr	d0, [r4, #8]
 800af2e:	4628      	mov	r0, r5
 800af30:	f001 f924 	bl	800c17c <ucdr_serialize_double>
 800af34:	ed94 0b04 	vldr	d0, [r4, #16]
 800af38:	4628      	mov	r0, r5
 800af3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3e:	f001 b91d 	b.w	800c17c <ucdr_serialize_double>
 800af42:	4770      	bx	lr

0800af44 <_Vector3__get_serialized_size>:
 800af44:	b1a0      	cbz	r0, 800af70 <_Vector3__get_serialized_size+0x2c>
 800af46:	b538      	push	{r3, r4, r5, lr}
 800af48:	2108      	movs	r1, #8
 800af4a:	2000      	movs	r0, #0
 800af4c:	f001 faf4 	bl	800c538 <ucdr_alignment>
 800af50:	f100 0508 	add.w	r5, r0, #8
 800af54:	2108      	movs	r1, #8
 800af56:	4628      	mov	r0, r5
 800af58:	f001 faee 	bl	800c538 <ucdr_alignment>
 800af5c:	f100 0408 	add.w	r4, r0, #8
 800af60:	442c      	add	r4, r5
 800af62:	2108      	movs	r1, #8
 800af64:	4620      	mov	r0, r4
 800af66:	f001 fae7 	bl	800c538 <ucdr_alignment>
 800af6a:	3008      	adds	r0, #8
 800af6c:	4420      	add	r0, r4
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop

0800af74 <_Vector3__max_serialized_size>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	2108      	movs	r1, #8
 800af78:	2000      	movs	r0, #0
 800af7a:	f001 fadd 	bl	800c538 <ucdr_alignment>
 800af7e:	f100 0508 	add.w	r5, r0, #8
 800af82:	2108      	movs	r1, #8
 800af84:	4628      	mov	r0, r5
 800af86:	f001 fad7 	bl	800c538 <ucdr_alignment>
 800af8a:	f100 0408 	add.w	r4, r0, #8
 800af8e:	442c      	add	r4, r5
 800af90:	2108      	movs	r1, #8
 800af92:	4620      	mov	r0, r4
 800af94:	f001 fad0 	bl	800c538 <ucdr_alignment>
 800af98:	3008      	adds	r0, #8
 800af9a:	4420      	add	r0, r4
 800af9c:	bd38      	pop	{r3, r4, r5, pc}
 800af9e:	bf00      	nop

0800afa0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	2301      	movs	r3, #1
 800afa4:	460c      	mov	r4, r1
 800afa6:	7003      	strb	r3, [r0, #0]
 800afa8:	2108      	movs	r1, #8
 800afaa:	4620      	mov	r0, r4
 800afac:	f001 fac4 	bl	800c538 <ucdr_alignment>
 800afb0:	2108      	movs	r1, #8
 800afb2:	1863      	adds	r3, r4, r1
 800afb4:	18c6      	adds	r6, r0, r3
 800afb6:	4630      	mov	r0, r6
 800afb8:	f001 fabe 	bl	800c538 <ucdr_alignment>
 800afbc:	f100 0508 	add.w	r5, r0, #8
 800afc0:	4435      	add	r5, r6
 800afc2:	2108      	movs	r1, #8
 800afc4:	4628      	mov	r0, r5
 800afc6:	f001 fab7 	bl	800c538 <ucdr_alignment>
 800afca:	f1c4 0408 	rsb	r4, r4, #8
 800afce:	4420      	add	r0, r4
 800afd0:	4428      	add	r0, r5
 800afd2:	bd70      	pop	{r4, r5, r6, pc}

0800afd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800afd4:	4800      	ldr	r0, [pc, #0]	@ (800afd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800afd6:	4770      	bx	lr
 800afd8:	200001c8 	.word	0x200001c8

0800afdc <micro_ros_string_utilities_init>:
 800afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe0:	b086      	sub	sp, #24
 800afe2:	460f      	mov	r7, r1
 800afe4:	4604      	mov	r4, r0
 800afe6:	a801      	add	r0, sp, #4
 800afe8:	f002 fdec 	bl	800dbc4 <rcutils_get_default_allocator>
 800afec:	4638      	mov	r0, r7
 800afee:	f7f5 f937 	bl	8000260 <strlen>
 800aff2:	f100 0801 	add.w	r8, r0, #1
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	9905      	ldr	r1, [sp, #20]
 800affa:	4605      	mov	r5, r0
 800affc:	4640      	mov	r0, r8
 800affe:	4798      	blx	r3
 800b000:	4642      	mov	r2, r8
 800b002:	4606      	mov	r6, r0
 800b004:	2100      	movs	r1, #0
 800b006:	f00f fe62 	bl	801acce <memset>
 800b00a:	462a      	mov	r2, r5
 800b00c:	4639      	mov	r1, r7
 800b00e:	4630      	mov	r0, r6
 800b010:	f00f ff3d 	bl	801ae8e <memcpy>
 800b014:	4620      	mov	r0, r4
 800b016:	e9c4 6500 	strd	r6, r5, [r4]
 800b01a:	f8c4 8008 	str.w	r8, [r4, #8]
 800b01e:	b006      	add	sp, #24
 800b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b024 <ucdr_serialize_bool>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	460d      	mov	r5, r1
 800b028:	2101      	movs	r1, #1
 800b02a:	4604      	mov	r4, r0
 800b02c:	f001 fa38 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b030:	b148      	cbz	r0, 800b046 <ucdr_serialize_bool+0x22>
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	701d      	strb	r5, [r3, #0]
 800b036:	68a2      	ldr	r2, [r4, #8]
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	2101      	movs	r1, #1
 800b03c:	440a      	add	r2, r1
 800b03e:	440b      	add	r3, r1
 800b040:	60a2      	str	r2, [r4, #8]
 800b042:	6123      	str	r3, [r4, #16]
 800b044:	7561      	strb	r1, [r4, #21]
 800b046:	7da0      	ldrb	r0, [r4, #22]
 800b048:	f080 0001 	eor.w	r0, r0, #1
 800b04c:	bd38      	pop	{r3, r4, r5, pc}
 800b04e:	bf00      	nop

0800b050 <ucdr_deserialize_bool>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	460d      	mov	r5, r1
 800b054:	2101      	movs	r1, #1
 800b056:	4604      	mov	r4, r0
 800b058:	f001 fa22 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b05c:	b160      	cbz	r0, 800b078 <ucdr_deserialize_bool+0x28>
 800b05e:	68a2      	ldr	r2, [r4, #8]
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b066:	3900      	subs	r1, #0
 800b068:	bf18      	it	ne
 800b06a:	2101      	movne	r1, #1
 800b06c:	7029      	strb	r1, [r5, #0]
 800b06e:	3301      	adds	r3, #1
 800b070:	2101      	movs	r1, #1
 800b072:	60a2      	str	r2, [r4, #8]
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	7561      	strb	r1, [r4, #21]
 800b078:	7da0      	ldrb	r0, [r4, #22]
 800b07a:	f080 0001 	eor.w	r0, r0, #1
 800b07e:	bd38      	pop	{r3, r4, r5, pc}

0800b080 <ucdr_serialize_uint8_t>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	460d      	mov	r5, r1
 800b084:	2101      	movs	r1, #1
 800b086:	4604      	mov	r4, r0
 800b088:	f001 fa0a 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b08c:	b148      	cbz	r0, 800b0a2 <ucdr_serialize_uint8_t+0x22>
 800b08e:	68a3      	ldr	r3, [r4, #8]
 800b090:	701d      	strb	r5, [r3, #0]
 800b092:	68a2      	ldr	r2, [r4, #8]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	2101      	movs	r1, #1
 800b098:	440a      	add	r2, r1
 800b09a:	440b      	add	r3, r1
 800b09c:	60a2      	str	r2, [r4, #8]
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	7561      	strb	r1, [r4, #21]
 800b0a2:	7da0      	ldrb	r0, [r4, #22]
 800b0a4:	f080 0001 	eor.w	r0, r0, #1
 800b0a8:	bd38      	pop	{r3, r4, r5, pc}
 800b0aa:	bf00      	nop

0800b0ac <ucdr_deserialize_uint8_t>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	460d      	mov	r5, r1
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	f001 f9f4 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b0b8:	b150      	cbz	r0, 800b0d0 <ucdr_deserialize_uint8_t+0x24>
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	702b      	strb	r3, [r5, #0]
 800b0c0:	68a2      	ldr	r2, [r4, #8]
 800b0c2:	6923      	ldr	r3, [r4, #16]
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	440a      	add	r2, r1
 800b0c8:	440b      	add	r3, r1
 800b0ca:	60a2      	str	r2, [r4, #8]
 800b0cc:	6123      	str	r3, [r4, #16]
 800b0ce:	7561      	strb	r1, [r4, #21]
 800b0d0:	7da0      	ldrb	r0, [r4, #22]
 800b0d2:	f080 0001 	eor.w	r0, r0, #1
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}

0800b0d8 <ucdr_serialize_uint16_t>:
 800b0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	460b      	mov	r3, r1
 800b0e0:	2102      	movs	r1, #2
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b0e8:	f001 fa2e 	bl	800c548 <ucdr_buffer_alignment>
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	7d67      	ldrb	r7, [r4, #21]
 800b0f2:	f001 fa6d 	bl	800c5d0 <ucdr_advance_buffer>
 800b0f6:	2102      	movs	r1, #2
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f001 f9c5 	bl	800c488 <ucdr_check_buffer_available_for>
 800b0fe:	b1c0      	cbz	r0, 800b132 <ucdr_serialize_uint16_t+0x5a>
 800b100:	7d22      	ldrb	r2, [r4, #20]
 800b102:	68a3      	ldr	r3, [r4, #8]
 800b104:	2a01      	cmp	r2, #1
 800b106:	d04e      	beq.n	800b1a6 <ucdr_serialize_uint16_t+0xce>
 800b108:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	68a3      	ldr	r3, [r4, #8]
 800b110:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b114:	705a      	strb	r2, [r3, #1]
 800b116:	68a2      	ldr	r2, [r4, #8]
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	3202      	adds	r2, #2
 800b11c:	3302      	adds	r3, #2
 800b11e:	2102      	movs	r1, #2
 800b120:	60a2      	str	r2, [r4, #8]
 800b122:	6123      	str	r3, [r4, #16]
 800b124:	7561      	strb	r1, [r4, #21]
 800b126:	7da0      	ldrb	r0, [r4, #22]
 800b128:	f080 0001 	eor.w	r0, r0, #1
 800b12c:	b002      	add	sp, #8
 800b12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b132:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b136:	42ab      	cmp	r3, r5
 800b138:	d923      	bls.n	800b182 <ucdr_serialize_uint16_t+0xaa>
 800b13a:	1b5e      	subs	r6, r3, r5
 800b13c:	60a3      	str	r3, [r4, #8]
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	f1c6 0802 	rsb	r8, r6, #2
 800b144:	4433      	add	r3, r6
 800b146:	6123      	str	r3, [r4, #16]
 800b148:	4641      	mov	r1, r8
 800b14a:	4620      	mov	r0, r4
 800b14c:	f001 f9a8 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b150:	b368      	cbz	r0, 800b1ae <ucdr_serialize_uint16_t+0xd6>
 800b152:	7d23      	ldrb	r3, [r4, #20]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d03b      	beq.n	800b1d0 <ucdr_serialize_uint16_t+0xf8>
 800b158:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b15c:	702b      	strb	r3, [r5, #0]
 800b15e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b162:	706b      	strb	r3, [r5, #1]
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	68a2      	ldr	r2, [r4, #8]
 800b168:	7da0      	ldrb	r0, [r4, #22]
 800b16a:	3302      	adds	r3, #2
 800b16c:	4442      	add	r2, r8
 800b16e:	1b9b      	subs	r3, r3, r6
 800b170:	2102      	movs	r1, #2
 800b172:	f080 0001 	eor.w	r0, r0, #1
 800b176:	60a2      	str	r2, [r4, #8]
 800b178:	6123      	str	r3, [r4, #16]
 800b17a:	7561      	strb	r1, [r4, #21]
 800b17c:	b002      	add	sp, #8
 800b17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b182:	2102      	movs	r1, #2
 800b184:	4620      	mov	r0, r4
 800b186:	f001 f98b 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d0cb      	beq.n	800b126 <ucdr_serialize_uint16_t+0x4e>
 800b18e:	7d23      	ldrb	r3, [r4, #20]
 800b190:	68a2      	ldr	r2, [r4, #8]
 800b192:	2b01      	cmp	r3, #1
 800b194:	d018      	beq.n	800b1c8 <ucdr_serialize_uint16_t+0xf0>
 800b196:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b19a:	7013      	strb	r3, [r2, #0]
 800b19c:	68a3      	ldr	r3, [r4, #8]
 800b19e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1a2:	705a      	strb	r2, [r3, #1]
 800b1a4:	e7b7      	b.n	800b116 <ucdr_serialize_uint16_t+0x3e>
 800b1a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b1aa:	801a      	strh	r2, [r3, #0]
 800b1ac:	e7b3      	b.n	800b116 <ucdr_serialize_uint16_t+0x3e>
 800b1ae:	68a2      	ldr	r2, [r4, #8]
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	7da0      	ldrb	r0, [r4, #22]
 800b1b4:	7567      	strb	r7, [r4, #21]
 800b1b6:	1b92      	subs	r2, r2, r6
 800b1b8:	1b9b      	subs	r3, r3, r6
 800b1ba:	f080 0001 	eor.w	r0, r0, #1
 800b1be:	60a2      	str	r2, [r4, #8]
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	b002      	add	sp, #8
 800b1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b1cc:	8013      	strh	r3, [r2, #0]
 800b1ce:	e7a2      	b.n	800b116 <ucdr_serialize_uint16_t+0x3e>
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f10d 0506 	add.w	r5, sp, #6
 800b1d6:	4632      	mov	r2, r6
 800b1d8:	4629      	mov	r1, r5
 800b1da:	f00f fe58 	bl	801ae8e <memcpy>
 800b1de:	68a0      	ldr	r0, [r4, #8]
 800b1e0:	4642      	mov	r2, r8
 800b1e2:	19a9      	adds	r1, r5, r6
 800b1e4:	f00f fe53 	bl	801ae8e <memcpy>
 800b1e8:	e7bc      	b.n	800b164 <ucdr_serialize_uint16_t+0x8c>
 800b1ea:	bf00      	nop

0800b1ec <ucdr_serialize_endian_uint16_t>:
 800b1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1f0:	b083      	sub	sp, #12
 800b1f2:	460d      	mov	r5, r1
 800b1f4:	2102      	movs	r1, #2
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b1fc:	f001 f9a4 	bl	800c548 <ucdr_buffer_alignment>
 800b200:	4601      	mov	r1, r0
 800b202:	4620      	mov	r0, r4
 800b204:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b208:	f001 f9e2 	bl	800c5d0 <ucdr_advance_buffer>
 800b20c:	2102      	movs	r1, #2
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 f93a 	bl	800c488 <ucdr_check_buffer_available_for>
 800b214:	bb60      	cbnz	r0, 800b270 <ucdr_serialize_endian_uint16_t+0x84>
 800b216:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b21a:	42be      	cmp	r6, r7
 800b21c:	d923      	bls.n	800b266 <ucdr_serialize_endian_uint16_t+0x7a>
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	60a6      	str	r6, [r4, #8]
 800b222:	1bf6      	subs	r6, r6, r7
 800b224:	4433      	add	r3, r6
 800b226:	f1c6 0902 	rsb	r9, r6, #2
 800b22a:	6123      	str	r3, [r4, #16]
 800b22c:	4649      	mov	r1, r9
 800b22e:	4620      	mov	r0, r4
 800b230:	f001 f936 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b234:	2800      	cmp	r0, #0
 800b236:	d037      	beq.n	800b2a8 <ucdr_serialize_endian_uint16_t+0xbc>
 800b238:	2d01      	cmp	r5, #1
 800b23a:	d043      	beq.n	800b2c4 <ucdr_serialize_endian_uint16_t+0xd8>
 800b23c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b240:	703b      	strb	r3, [r7, #0]
 800b242:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b246:	707b      	strb	r3, [r7, #1]
 800b248:	6923      	ldr	r3, [r4, #16]
 800b24a:	68a2      	ldr	r2, [r4, #8]
 800b24c:	7da0      	ldrb	r0, [r4, #22]
 800b24e:	3302      	adds	r3, #2
 800b250:	444a      	add	r2, r9
 800b252:	1b9b      	subs	r3, r3, r6
 800b254:	2102      	movs	r1, #2
 800b256:	f080 0001 	eor.w	r0, r0, #1
 800b25a:	60a2      	str	r2, [r4, #8]
 800b25c:	6123      	str	r3, [r4, #16]
 800b25e:	7561      	strb	r1, [r4, #21]
 800b260:	b003      	add	sp, #12
 800b262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b266:	2102      	movs	r1, #2
 800b268:	4620      	mov	r0, r4
 800b26a:	f001 f919 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b26e:	b188      	cbz	r0, 800b294 <ucdr_serialize_endian_uint16_t+0xa8>
 800b270:	2d01      	cmp	r5, #1
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	d014      	beq.n	800b2a0 <ucdr_serialize_endian_uint16_t+0xb4>
 800b276:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b27a:	701a      	strb	r2, [r3, #0]
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b282:	705a      	strb	r2, [r3, #1]
 800b284:	68a2      	ldr	r2, [r4, #8]
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	3202      	adds	r2, #2
 800b28a:	3302      	adds	r3, #2
 800b28c:	2102      	movs	r1, #2
 800b28e:	60a2      	str	r2, [r4, #8]
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	7561      	strb	r1, [r4, #21]
 800b294:	7da0      	ldrb	r0, [r4, #22]
 800b296:	f080 0001 	eor.w	r0, r0, #1
 800b29a:	b003      	add	sp, #12
 800b29c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b2a4:	801a      	strh	r2, [r3, #0]
 800b2a6:	e7ed      	b.n	800b284 <ucdr_serialize_endian_uint16_t+0x98>
 800b2a8:	68a2      	ldr	r2, [r4, #8]
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	7da0      	ldrb	r0, [r4, #22]
 800b2ae:	f884 8015 	strb.w	r8, [r4, #21]
 800b2b2:	1b92      	subs	r2, r2, r6
 800b2b4:	1b9b      	subs	r3, r3, r6
 800b2b6:	f080 0001 	eor.w	r0, r0, #1
 800b2ba:	60a2      	str	r2, [r4, #8]
 800b2bc:	6123      	str	r3, [r4, #16]
 800b2be:	b003      	add	sp, #12
 800b2c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2c4:	f10d 0506 	add.w	r5, sp, #6
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	f00f fdde 	bl	801ae8e <memcpy>
 800b2d2:	68a0      	ldr	r0, [r4, #8]
 800b2d4:	464a      	mov	r2, r9
 800b2d6:	19a9      	adds	r1, r5, r6
 800b2d8:	f00f fdd9 	bl	801ae8e <memcpy>
 800b2dc:	e7b4      	b.n	800b248 <ucdr_serialize_endian_uint16_t+0x5c>
 800b2de:	bf00      	nop

0800b2e0 <ucdr_deserialize_uint16_t>:
 800b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	2102      	movs	r1, #2
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	f001 f92d 	bl	800c548 <ucdr_buffer_alignment>
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b2f6:	f001 f96b 	bl	800c5d0 <ucdr_advance_buffer>
 800b2fa:	2102      	movs	r1, #2
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f001 f8c3 	bl	800c488 <ucdr_check_buffer_available_for>
 800b302:	b1a8      	cbz	r0, 800b330 <ucdr_deserialize_uint16_t+0x50>
 800b304:	7d22      	ldrb	r2, [r4, #20]
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	2a01      	cmp	r2, #1
 800b30a:	d046      	beq.n	800b39a <ucdr_deserialize_uint16_t+0xba>
 800b30c:	785b      	ldrb	r3, [r3, #1]
 800b30e:	702b      	strb	r3, [r5, #0]
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	706b      	strb	r3, [r5, #1]
 800b316:	68a2      	ldr	r2, [r4, #8]
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	3202      	adds	r2, #2
 800b31c:	3302      	adds	r3, #2
 800b31e:	2102      	movs	r1, #2
 800b320:	60a2      	str	r2, [r4, #8]
 800b322:	6123      	str	r3, [r4, #16]
 800b324:	7561      	strb	r1, [r4, #21]
 800b326:	7da0      	ldrb	r0, [r4, #22]
 800b328:	f080 0001 	eor.w	r0, r0, #1
 800b32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b330:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b334:	42be      	cmp	r6, r7
 800b336:	d920      	bls.n	800b37a <ucdr_deserialize_uint16_t+0x9a>
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	60a6      	str	r6, [r4, #8]
 800b33c:	1bf6      	subs	r6, r6, r7
 800b33e:	4433      	add	r3, r6
 800b340:	f1c6 0902 	rsb	r9, r6, #2
 800b344:	6123      	str	r3, [r4, #16]
 800b346:	4649      	mov	r1, r9
 800b348:	4620      	mov	r0, r4
 800b34a:	f001 f8a9 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b34e:	b338      	cbz	r0, 800b3a0 <ucdr_deserialize_uint16_t+0xc0>
 800b350:	7d23      	ldrb	r3, [r4, #20]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d034      	beq.n	800b3c0 <ucdr_deserialize_uint16_t+0xe0>
 800b356:	787b      	ldrb	r3, [r7, #1]
 800b358:	702b      	strb	r3, [r5, #0]
 800b35a:	783b      	ldrb	r3, [r7, #0]
 800b35c:	706b      	strb	r3, [r5, #1]
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	68a2      	ldr	r2, [r4, #8]
 800b362:	7da0      	ldrb	r0, [r4, #22]
 800b364:	2102      	movs	r1, #2
 800b366:	3302      	adds	r3, #2
 800b368:	444a      	add	r2, r9
 800b36a:	1b9b      	subs	r3, r3, r6
 800b36c:	7561      	strb	r1, [r4, #21]
 800b36e:	60a2      	str	r2, [r4, #8]
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	f080 0001 	eor.w	r0, r0, #1
 800b376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37a:	2102      	movs	r1, #2
 800b37c:	4620      	mov	r0, r4
 800b37e:	f001 f88f 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b382:	2800      	cmp	r0, #0
 800b384:	d0cf      	beq.n	800b326 <ucdr_deserialize_uint16_t+0x46>
 800b386:	7d23      	ldrb	r3, [r4, #20]
 800b388:	68a2      	ldr	r2, [r4, #8]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d015      	beq.n	800b3ba <ucdr_deserialize_uint16_t+0xda>
 800b38e:	7853      	ldrb	r3, [r2, #1]
 800b390:	702b      	strb	r3, [r5, #0]
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	706b      	strb	r3, [r5, #1]
 800b398:	e7bd      	b.n	800b316 <ucdr_deserialize_uint16_t+0x36>
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	802b      	strh	r3, [r5, #0]
 800b39e:	e7ba      	b.n	800b316 <ucdr_deserialize_uint16_t+0x36>
 800b3a0:	68a2      	ldr	r2, [r4, #8]
 800b3a2:	6923      	ldr	r3, [r4, #16]
 800b3a4:	7da0      	ldrb	r0, [r4, #22]
 800b3a6:	f884 8015 	strb.w	r8, [r4, #21]
 800b3aa:	1b92      	subs	r2, r2, r6
 800b3ac:	1b9b      	subs	r3, r3, r6
 800b3ae:	60a2      	str	r2, [r4, #8]
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	f080 0001 	eor.w	r0, r0, #1
 800b3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ba:	8813      	ldrh	r3, [r2, #0]
 800b3bc:	802b      	strh	r3, [r5, #0]
 800b3be:	e7aa      	b.n	800b316 <ucdr_deserialize_uint16_t+0x36>
 800b3c0:	4639      	mov	r1, r7
 800b3c2:	4632      	mov	r2, r6
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f00f fd62 	bl	801ae8e <memcpy>
 800b3ca:	68a1      	ldr	r1, [r4, #8]
 800b3cc:	464a      	mov	r2, r9
 800b3ce:	19a8      	adds	r0, r5, r6
 800b3d0:	f00f fd5d 	bl	801ae8e <memcpy>
 800b3d4:	e7c3      	b.n	800b35e <ucdr_deserialize_uint16_t+0x7e>
 800b3d6:	bf00      	nop

0800b3d8 <ucdr_deserialize_endian_uint16_t>:
 800b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3dc:	460e      	mov	r6, r1
 800b3de:	2102      	movs	r1, #2
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	4615      	mov	r5, r2
 800b3e4:	f001 f8b0 	bl	800c548 <ucdr_buffer_alignment>
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b3f0:	f001 f8ee 	bl	800c5d0 <ucdr_advance_buffer>
 800b3f4:	2102      	movs	r1, #2
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f001 f846 	bl	800c488 <ucdr_check_buffer_available_for>
 800b3fc:	bb60      	cbnz	r0, 800b458 <ucdr_deserialize_endian_uint16_t+0x80>
 800b3fe:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b402:	4547      	cmp	r7, r8
 800b404:	d923      	bls.n	800b44e <ucdr_deserialize_endian_uint16_t+0x76>
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	60a7      	str	r7, [r4, #8]
 800b40a:	eba7 0708 	sub.w	r7, r7, r8
 800b40e:	443b      	add	r3, r7
 800b410:	f1c7 0a02 	rsb	sl, r7, #2
 800b414:	6123      	str	r3, [r4, #16]
 800b416:	4651      	mov	r1, sl
 800b418:	4620      	mov	r0, r4
 800b41a:	f001 f841 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d032      	beq.n	800b488 <ucdr_deserialize_endian_uint16_t+0xb0>
 800b422:	2e01      	cmp	r6, #1
 800b424:	d03d      	beq.n	800b4a2 <ucdr_deserialize_endian_uint16_t+0xca>
 800b426:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b42a:	702b      	strb	r3, [r5, #0]
 800b42c:	f898 3000 	ldrb.w	r3, [r8]
 800b430:	706b      	strb	r3, [r5, #1]
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	68a2      	ldr	r2, [r4, #8]
 800b436:	7da0      	ldrb	r0, [r4, #22]
 800b438:	2102      	movs	r1, #2
 800b43a:	3302      	adds	r3, #2
 800b43c:	4452      	add	r2, sl
 800b43e:	1bdb      	subs	r3, r3, r7
 800b440:	7561      	strb	r1, [r4, #21]
 800b442:	60a2      	str	r2, [r4, #8]
 800b444:	6123      	str	r3, [r4, #16]
 800b446:	f080 0001 	eor.w	r0, r0, #1
 800b44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b44e:	2102      	movs	r1, #2
 800b450:	4620      	mov	r0, r4
 800b452:	f001 f825 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b456:	b178      	cbz	r0, 800b478 <ucdr_deserialize_endian_uint16_t+0xa0>
 800b458:	2e01      	cmp	r6, #1
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	d011      	beq.n	800b482 <ucdr_deserialize_endian_uint16_t+0xaa>
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	702b      	strb	r3, [r5, #0]
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	706b      	strb	r3, [r5, #1]
 800b468:	68a2      	ldr	r2, [r4, #8]
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	3202      	adds	r2, #2
 800b46e:	3302      	adds	r3, #2
 800b470:	2102      	movs	r1, #2
 800b472:	60a2      	str	r2, [r4, #8]
 800b474:	6123      	str	r3, [r4, #16]
 800b476:	7561      	strb	r1, [r4, #21]
 800b478:	7da0      	ldrb	r0, [r4, #22]
 800b47a:	f080 0001 	eor.w	r0, r0, #1
 800b47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	802b      	strh	r3, [r5, #0]
 800b486:	e7ef      	b.n	800b468 <ucdr_deserialize_endian_uint16_t+0x90>
 800b488:	68a2      	ldr	r2, [r4, #8]
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	7da0      	ldrb	r0, [r4, #22]
 800b48e:	f884 9015 	strb.w	r9, [r4, #21]
 800b492:	1bd2      	subs	r2, r2, r7
 800b494:	1bdb      	subs	r3, r3, r7
 800b496:	60a2      	str	r2, [r4, #8]
 800b498:	6123      	str	r3, [r4, #16]
 800b49a:	f080 0001 	eor.w	r0, r0, #1
 800b49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a2:	4641      	mov	r1, r8
 800b4a4:	463a      	mov	r2, r7
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f00f fcf1 	bl	801ae8e <memcpy>
 800b4ac:	68a1      	ldr	r1, [r4, #8]
 800b4ae:	4652      	mov	r2, sl
 800b4b0:	19e8      	adds	r0, r5, r7
 800b4b2:	f00f fcec 	bl	801ae8e <memcpy>
 800b4b6:	e7bc      	b.n	800b432 <ucdr_deserialize_endian_uint16_t+0x5a>

0800b4b8 <ucdr_serialize_uint32_t>:
 800b4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	4604      	mov	r4, r0
 800b4c0:	9101      	str	r1, [sp, #4]
 800b4c2:	2104      	movs	r1, #4
 800b4c4:	f001 f840 	bl	800c548 <ucdr_buffer_alignment>
 800b4c8:	4601      	mov	r1, r0
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	7d67      	ldrb	r7, [r4, #21]
 800b4ce:	f001 f87f 	bl	800c5d0 <ucdr_advance_buffer>
 800b4d2:	2104      	movs	r1, #4
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f000 ffd7 	bl	800c488 <ucdr_check_buffer_available_for>
 800b4da:	b300      	cbz	r0, 800b51e <ucdr_serialize_uint32_t+0x66>
 800b4dc:	7d22      	ldrb	r2, [r4, #20]
 800b4de:	68a3      	ldr	r3, [r4, #8]
 800b4e0:	2a01      	cmp	r2, #1
 800b4e2:	d05d      	beq.n	800b5a0 <ucdr_serialize_uint32_t+0xe8>
 800b4e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4e8:	701a      	strb	r2, [r3, #0]
 800b4ea:	68a3      	ldr	r3, [r4, #8]
 800b4ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4f0:	705a      	strb	r2, [r3, #1]
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4f8:	709a      	strb	r2, [r3, #2]
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b500:	70da      	strb	r2, [r3, #3]
 800b502:	68a2      	ldr	r2, [r4, #8]
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	3204      	adds	r2, #4
 800b508:	3304      	adds	r3, #4
 800b50a:	2104      	movs	r1, #4
 800b50c:	60a2      	str	r2, [r4, #8]
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	7561      	strb	r1, [r4, #21]
 800b512:	7da0      	ldrb	r0, [r4, #22]
 800b514:	f080 0001 	eor.w	r0, r0, #1
 800b518:	b002      	add	sp, #8
 800b51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b522:	42ab      	cmp	r3, r5
 800b524:	d92e      	bls.n	800b584 <ucdr_serialize_uint32_t+0xcc>
 800b526:	1b5e      	subs	r6, r3, r5
 800b528:	60a3      	str	r3, [r4, #8]
 800b52a:	6923      	ldr	r3, [r4, #16]
 800b52c:	f1c6 0804 	rsb	r8, r6, #4
 800b530:	4433      	add	r3, r6
 800b532:	6123      	str	r3, [r4, #16]
 800b534:	4641      	mov	r1, r8
 800b536:	4620      	mov	r0, r4
 800b538:	f000 ffb2 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b53c:	b398      	cbz	r0, 800b5a6 <ucdr_serialize_uint32_t+0xee>
 800b53e:	7d23      	ldrb	r3, [r4, #20]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d046      	beq.n	800b5d2 <ucdr_serialize_uint32_t+0x11a>
 800b544:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b548:	702b      	strb	r3, [r5, #0]
 800b54a:	2e01      	cmp	r6, #1
 800b54c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b550:	706b      	strb	r3, [r5, #1]
 800b552:	d035      	beq.n	800b5c0 <ucdr_serialize_uint32_t+0x108>
 800b554:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b558:	70ab      	strb	r3, [r5, #2]
 800b55a:	2e02      	cmp	r6, #2
 800b55c:	d034      	beq.n	800b5c8 <ucdr_serialize_uint32_t+0x110>
 800b55e:	3503      	adds	r5, #3
 800b560:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b564:	702b      	strb	r3, [r5, #0]
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	68a2      	ldr	r2, [r4, #8]
 800b56a:	7da0      	ldrb	r0, [r4, #22]
 800b56c:	3304      	adds	r3, #4
 800b56e:	4442      	add	r2, r8
 800b570:	1b9b      	subs	r3, r3, r6
 800b572:	2104      	movs	r1, #4
 800b574:	f080 0001 	eor.w	r0, r0, #1
 800b578:	60a2      	str	r2, [r4, #8]
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	7561      	strb	r1, [r4, #21]
 800b57e:	b002      	add	sp, #8
 800b580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b584:	2104      	movs	r1, #4
 800b586:	4620      	mov	r0, r4
 800b588:	f000 ff8a 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d0c0      	beq.n	800b512 <ucdr_serialize_uint32_t+0x5a>
 800b590:	7d23      	ldrb	r3, [r4, #20]
 800b592:	68a2      	ldr	r2, [r4, #8]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d019      	beq.n	800b5cc <ucdr_serialize_uint32_t+0x114>
 800b598:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b59c:	7013      	strb	r3, [r2, #0]
 800b59e:	e7a4      	b.n	800b4ea <ucdr_serialize_uint32_t+0x32>
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	e7ad      	b.n	800b502 <ucdr_serialize_uint32_t+0x4a>
 800b5a6:	68a2      	ldr	r2, [r4, #8]
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	7da0      	ldrb	r0, [r4, #22]
 800b5ac:	7567      	strb	r7, [r4, #21]
 800b5ae:	1b92      	subs	r2, r2, r6
 800b5b0:	1b9b      	subs	r3, r3, r6
 800b5b2:	f080 0001 	eor.w	r0, r0, #1
 800b5b6:	60a2      	str	r2, [r4, #8]
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	b002      	add	sp, #8
 800b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c0:	68a3      	ldr	r3, [r4, #8]
 800b5c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5c6:	701a      	strb	r2, [r3, #0]
 800b5c8:	68a5      	ldr	r5, [r4, #8]
 800b5ca:	e7c9      	b.n	800b560 <ucdr_serialize_uint32_t+0xa8>
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	e797      	b.n	800b502 <ucdr_serialize_uint32_t+0x4a>
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	ad01      	add	r5, sp, #4
 800b5d6:	4632      	mov	r2, r6
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f00f fc58 	bl	801ae8e <memcpy>
 800b5de:	68a0      	ldr	r0, [r4, #8]
 800b5e0:	4642      	mov	r2, r8
 800b5e2:	19a9      	adds	r1, r5, r6
 800b5e4:	f00f fc53 	bl	801ae8e <memcpy>
 800b5e8:	e7bd      	b.n	800b566 <ucdr_serialize_uint32_t+0xae>
 800b5ea:	bf00      	nop

0800b5ec <ucdr_serialize_endian_uint32_t>:
 800b5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	2104      	movs	r1, #4
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	9201      	str	r2, [sp, #4]
 800b5fa:	f000 ffa5 	bl	800c548 <ucdr_buffer_alignment>
 800b5fe:	4601      	mov	r1, r0
 800b600:	4620      	mov	r0, r4
 800b602:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b606:	f000 ffe3 	bl	800c5d0 <ucdr_advance_buffer>
 800b60a:	2104      	movs	r1, #4
 800b60c:	4620      	mov	r0, r4
 800b60e:	f000 ff3b 	bl	800c488 <ucdr_check_buffer_available_for>
 800b612:	2800      	cmp	r0, #0
 800b614:	d137      	bne.n	800b686 <ucdr_serialize_endian_uint32_t+0x9a>
 800b616:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b61a:	42b7      	cmp	r7, r6
 800b61c:	d92e      	bls.n	800b67c <ucdr_serialize_endian_uint32_t+0x90>
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	60a7      	str	r7, [r4, #8]
 800b622:	1bbf      	subs	r7, r7, r6
 800b624:	443b      	add	r3, r7
 800b626:	f1c7 0904 	rsb	r9, r7, #4
 800b62a:	6123      	str	r3, [r4, #16]
 800b62c:	4649      	mov	r1, r9
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 ff36 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b634:	2800      	cmp	r0, #0
 800b636:	d049      	beq.n	800b6cc <ucdr_serialize_endian_uint32_t+0xe0>
 800b638:	2d01      	cmp	r5, #1
 800b63a:	d05b      	beq.n	800b6f4 <ucdr_serialize_endian_uint32_t+0x108>
 800b63c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b640:	7033      	strb	r3, [r6, #0]
 800b642:	2f01      	cmp	r7, #1
 800b644:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b648:	7073      	strb	r3, [r6, #1]
 800b64a:	d04d      	beq.n	800b6e8 <ucdr_serialize_endian_uint32_t+0xfc>
 800b64c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b650:	70b3      	strb	r3, [r6, #2]
 800b652:	2f02      	cmp	r7, #2
 800b654:	d04c      	beq.n	800b6f0 <ucdr_serialize_endian_uint32_t+0x104>
 800b656:	3603      	adds	r6, #3
 800b658:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b65c:	7033      	strb	r3, [r6, #0]
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	68a2      	ldr	r2, [r4, #8]
 800b662:	7da0      	ldrb	r0, [r4, #22]
 800b664:	3304      	adds	r3, #4
 800b666:	444a      	add	r2, r9
 800b668:	1bdb      	subs	r3, r3, r7
 800b66a:	2104      	movs	r1, #4
 800b66c:	f080 0001 	eor.w	r0, r0, #1
 800b670:	60a2      	str	r2, [r4, #8]
 800b672:	6123      	str	r3, [r4, #16]
 800b674:	7561      	strb	r1, [r4, #21]
 800b676:	b003      	add	sp, #12
 800b678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b67c:	2104      	movs	r1, #4
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 ff0e 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b684:	b1c8      	cbz	r0, 800b6ba <ucdr_serialize_endian_uint32_t+0xce>
 800b686:	2d01      	cmp	r5, #1
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	d01c      	beq.n	800b6c6 <ucdr_serialize_endian_uint32_t+0xda>
 800b68c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	68a3      	ldr	r3, [r4, #8]
 800b694:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b698:	705a      	strb	r2, [r3, #1]
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6a0:	709a      	strb	r2, [r3, #2]
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6a8:	70da      	strb	r2, [r3, #3]
 800b6aa:	68a2      	ldr	r2, [r4, #8]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	3204      	adds	r2, #4
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	2104      	movs	r1, #4
 800b6b4:	60a2      	str	r2, [r4, #8]
 800b6b6:	6123      	str	r3, [r4, #16]
 800b6b8:	7561      	strb	r1, [r4, #21]
 800b6ba:	7da0      	ldrb	r0, [r4, #22]
 800b6bc:	f080 0001 	eor.w	r0, r0, #1
 800b6c0:	b003      	add	sp, #12
 800b6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c6:	9a01      	ldr	r2, [sp, #4]
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	e7ee      	b.n	800b6aa <ucdr_serialize_endian_uint32_t+0xbe>
 800b6cc:	68a2      	ldr	r2, [r4, #8]
 800b6ce:	6923      	ldr	r3, [r4, #16]
 800b6d0:	7da0      	ldrb	r0, [r4, #22]
 800b6d2:	f884 8015 	strb.w	r8, [r4, #21]
 800b6d6:	1bd2      	subs	r2, r2, r7
 800b6d8:	1bdb      	subs	r3, r3, r7
 800b6da:	f080 0001 	eor.w	r0, r0, #1
 800b6de:	60a2      	str	r2, [r4, #8]
 800b6e0:	6123      	str	r3, [r4, #16]
 800b6e2:	b003      	add	sp, #12
 800b6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e8:	68a3      	ldr	r3, [r4, #8]
 800b6ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	68a6      	ldr	r6, [r4, #8]
 800b6f2:	e7b1      	b.n	800b658 <ucdr_serialize_endian_uint32_t+0x6c>
 800b6f4:	ad01      	add	r5, sp, #4
 800b6f6:	463a      	mov	r2, r7
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f00f fbc7 	bl	801ae8e <memcpy>
 800b700:	68a0      	ldr	r0, [r4, #8]
 800b702:	464a      	mov	r2, r9
 800b704:	19e9      	adds	r1, r5, r7
 800b706:	f00f fbc2 	bl	801ae8e <memcpy>
 800b70a:	e7a8      	b.n	800b65e <ucdr_serialize_endian_uint32_t+0x72>

0800b70c <ucdr_deserialize_uint32_t>:
 800b70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b710:	460d      	mov	r5, r1
 800b712:	2104      	movs	r1, #4
 800b714:	4604      	mov	r4, r0
 800b716:	f000 ff17 	bl	800c548 <ucdr_buffer_alignment>
 800b71a:	4601      	mov	r1, r0
 800b71c:	4620      	mov	r0, r4
 800b71e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b722:	f000 ff55 	bl	800c5d0 <ucdr_advance_buffer>
 800b726:	2104      	movs	r1, #4
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 fead 	bl	800c488 <ucdr_check_buffer_available_for>
 800b72e:	b1d8      	cbz	r0, 800b768 <ucdr_deserialize_uint32_t+0x5c>
 800b730:	7d22      	ldrb	r2, [r4, #20]
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	2a01      	cmp	r2, #1
 800b736:	d052      	beq.n	800b7de <ucdr_deserialize_uint32_t+0xd2>
 800b738:	78db      	ldrb	r3, [r3, #3]
 800b73a:	702b      	strb	r3, [r5, #0]
 800b73c:	68a3      	ldr	r3, [r4, #8]
 800b73e:	789b      	ldrb	r3, [r3, #2]
 800b740:	706b      	strb	r3, [r5, #1]
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	785b      	ldrb	r3, [r3, #1]
 800b746:	70ab      	strb	r3, [r5, #2]
 800b748:	68a3      	ldr	r3, [r4, #8]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	70eb      	strb	r3, [r5, #3]
 800b74e:	68a2      	ldr	r2, [r4, #8]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	3204      	adds	r2, #4
 800b754:	3304      	adds	r3, #4
 800b756:	2104      	movs	r1, #4
 800b758:	60a2      	str	r2, [r4, #8]
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	7561      	strb	r1, [r4, #21]
 800b75e:	7da0      	ldrb	r0, [r4, #22]
 800b760:	f080 0001 	eor.w	r0, r0, #1
 800b764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b768:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b76c:	42b7      	cmp	r7, r6
 800b76e:	d92a      	bls.n	800b7c6 <ucdr_deserialize_uint32_t+0xba>
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	60a7      	str	r7, [r4, #8]
 800b774:	1bbf      	subs	r7, r7, r6
 800b776:	443b      	add	r3, r7
 800b778:	f1c7 0904 	rsb	r9, r7, #4
 800b77c:	6123      	str	r3, [r4, #16]
 800b77e:	4649      	mov	r1, r9
 800b780:	4620      	mov	r0, r4
 800b782:	f000 fe8d 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b786:	b368      	cbz	r0, 800b7e4 <ucdr_deserialize_uint32_t+0xd8>
 800b788:	7d23      	ldrb	r3, [r4, #20]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d040      	beq.n	800b810 <ucdr_deserialize_uint32_t+0x104>
 800b78e:	78f3      	ldrb	r3, [r6, #3]
 800b790:	702b      	strb	r3, [r5, #0]
 800b792:	78b3      	ldrb	r3, [r6, #2]
 800b794:	706b      	strb	r3, [r5, #1]
 800b796:	2f01      	cmp	r7, #1
 800b798:	d031      	beq.n	800b7fe <ucdr_deserialize_uint32_t+0xf2>
 800b79a:	7873      	ldrb	r3, [r6, #1]
 800b79c:	70ab      	strb	r3, [r5, #2]
 800b79e:	2f02      	cmp	r7, #2
 800b7a0:	f105 0503 	add.w	r5, r5, #3
 800b7a4:	d02f      	beq.n	800b806 <ucdr_deserialize_uint32_t+0xfa>
 800b7a6:	7833      	ldrb	r3, [r6, #0]
 800b7a8:	702b      	strb	r3, [r5, #0]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	68a2      	ldr	r2, [r4, #8]
 800b7ae:	7da0      	ldrb	r0, [r4, #22]
 800b7b0:	2104      	movs	r1, #4
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	444a      	add	r2, r9
 800b7b6:	1bdb      	subs	r3, r3, r7
 800b7b8:	7561      	strb	r1, [r4, #21]
 800b7ba:	60a2      	str	r2, [r4, #8]
 800b7bc:	6123      	str	r3, [r4, #16]
 800b7be:	f080 0001 	eor.w	r0, r0, #1
 800b7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c6:	2104      	movs	r1, #4
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 fe69 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0c5      	beq.n	800b75e <ucdr_deserialize_uint32_t+0x52>
 800b7d2:	7d23      	ldrb	r3, [r4, #20]
 800b7d4:	68a2      	ldr	r2, [r4, #8]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d017      	beq.n	800b80a <ucdr_deserialize_uint32_t+0xfe>
 800b7da:	78d3      	ldrb	r3, [r2, #3]
 800b7dc:	e7ad      	b.n	800b73a <ucdr_deserialize_uint32_t+0x2e>
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	e7b4      	b.n	800b74e <ucdr_deserialize_uint32_t+0x42>
 800b7e4:	68a2      	ldr	r2, [r4, #8]
 800b7e6:	6923      	ldr	r3, [r4, #16]
 800b7e8:	7da0      	ldrb	r0, [r4, #22]
 800b7ea:	f884 8015 	strb.w	r8, [r4, #21]
 800b7ee:	1bd2      	subs	r2, r2, r7
 800b7f0:	1bdb      	subs	r3, r3, r7
 800b7f2:	60a2      	str	r2, [r4, #8]
 800b7f4:	6123      	str	r3, [r4, #16]
 800b7f6:	f080 0001 	eor.w	r0, r0, #1
 800b7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7fe:	68a3      	ldr	r3, [r4, #8]
 800b800:	785b      	ldrb	r3, [r3, #1]
 800b802:	70ab      	strb	r3, [r5, #2]
 800b804:	3503      	adds	r5, #3
 800b806:	68a6      	ldr	r6, [r4, #8]
 800b808:	e7cd      	b.n	800b7a6 <ucdr_deserialize_uint32_t+0x9a>
 800b80a:	6813      	ldr	r3, [r2, #0]
 800b80c:	602b      	str	r3, [r5, #0]
 800b80e:	e79e      	b.n	800b74e <ucdr_deserialize_uint32_t+0x42>
 800b810:	4631      	mov	r1, r6
 800b812:	463a      	mov	r2, r7
 800b814:	4628      	mov	r0, r5
 800b816:	f00f fb3a 	bl	801ae8e <memcpy>
 800b81a:	68a1      	ldr	r1, [r4, #8]
 800b81c:	464a      	mov	r2, r9
 800b81e:	19e8      	adds	r0, r5, r7
 800b820:	f00f fb35 	bl	801ae8e <memcpy>
 800b824:	e7c1      	b.n	800b7aa <ucdr_deserialize_uint32_t+0x9e>
 800b826:	bf00      	nop

0800b828 <ucdr_deserialize_endian_uint32_t>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	460e      	mov	r6, r1
 800b82e:	2104      	movs	r1, #4
 800b830:	4604      	mov	r4, r0
 800b832:	4615      	mov	r5, r2
 800b834:	f000 fe88 	bl	800c548 <ucdr_buffer_alignment>
 800b838:	4601      	mov	r1, r0
 800b83a:	4620      	mov	r0, r4
 800b83c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b840:	f000 fec6 	bl	800c5d0 <ucdr_advance_buffer>
 800b844:	2104      	movs	r1, #4
 800b846:	4620      	mov	r0, r4
 800b848:	f000 fe1e 	bl	800c488 <ucdr_check_buffer_available_for>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d137      	bne.n	800b8c0 <ucdr_deserialize_endian_uint32_t+0x98>
 800b850:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b854:	42bb      	cmp	r3, r7
 800b856:	d92e      	bls.n	800b8b6 <ucdr_deserialize_endian_uint32_t+0x8e>
 800b858:	eba3 0807 	sub.w	r8, r3, r7
 800b85c:	60a3      	str	r3, [r4, #8]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	f1c8 0a04 	rsb	sl, r8, #4
 800b864:	4443      	add	r3, r8
 800b866:	6123      	str	r3, [r4, #16]
 800b868:	4651      	mov	r1, sl
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fe18 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b870:	2800      	cmp	r0, #0
 800b872:	d043      	beq.n	800b8fc <ucdr_deserialize_endian_uint32_t+0xd4>
 800b874:	2e01      	cmp	r6, #1
 800b876:	d056      	beq.n	800b926 <ucdr_deserialize_endian_uint32_t+0xfe>
 800b878:	78fb      	ldrb	r3, [r7, #3]
 800b87a:	702b      	strb	r3, [r5, #0]
 800b87c:	78bb      	ldrb	r3, [r7, #2]
 800b87e:	706b      	strb	r3, [r5, #1]
 800b880:	f1b8 0f01 	cmp.w	r8, #1
 800b884:	d049      	beq.n	800b91a <ucdr_deserialize_endian_uint32_t+0xf2>
 800b886:	787b      	ldrb	r3, [r7, #1]
 800b888:	70ab      	strb	r3, [r5, #2]
 800b88a:	f1b8 0f02 	cmp.w	r8, #2
 800b88e:	f105 0503 	add.w	r5, r5, #3
 800b892:	d046      	beq.n	800b922 <ucdr_deserialize_endian_uint32_t+0xfa>
 800b894:	783b      	ldrb	r3, [r7, #0]
 800b896:	702b      	strb	r3, [r5, #0]
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	68a2      	ldr	r2, [r4, #8]
 800b89c:	7da0      	ldrb	r0, [r4, #22]
 800b89e:	2104      	movs	r1, #4
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4452      	add	r2, sl
 800b8a4:	eba3 0308 	sub.w	r3, r3, r8
 800b8a8:	7561      	strb	r1, [r4, #21]
 800b8aa:	60a2      	str	r2, [r4, #8]
 800b8ac:	6123      	str	r3, [r4, #16]
 800b8ae:	f080 0001 	eor.w	r0, r0, #1
 800b8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b6:	2104      	movs	r1, #4
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fdf1 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b8be:	b1a8      	cbz	r0, 800b8ec <ucdr_deserialize_endian_uint32_t+0xc4>
 800b8c0:	2e01      	cmp	r6, #1
 800b8c2:	68a3      	ldr	r3, [r4, #8]
 800b8c4:	d017      	beq.n	800b8f6 <ucdr_deserialize_endian_uint32_t+0xce>
 800b8c6:	78db      	ldrb	r3, [r3, #3]
 800b8c8:	702b      	strb	r3, [r5, #0]
 800b8ca:	68a3      	ldr	r3, [r4, #8]
 800b8cc:	789b      	ldrb	r3, [r3, #2]
 800b8ce:	706b      	strb	r3, [r5, #1]
 800b8d0:	68a3      	ldr	r3, [r4, #8]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	70ab      	strb	r3, [r5, #2]
 800b8d6:	68a3      	ldr	r3, [r4, #8]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	70eb      	strb	r3, [r5, #3]
 800b8dc:	68a2      	ldr	r2, [r4, #8]
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	3204      	adds	r2, #4
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	2104      	movs	r1, #4
 800b8e6:	60a2      	str	r2, [r4, #8]
 800b8e8:	6123      	str	r3, [r4, #16]
 800b8ea:	7561      	strb	r1, [r4, #21]
 800b8ec:	7da0      	ldrb	r0, [r4, #22]
 800b8ee:	f080 0001 	eor.w	r0, r0, #1
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	e7ef      	b.n	800b8dc <ucdr_deserialize_endian_uint32_t+0xb4>
 800b8fc:	68a2      	ldr	r2, [r4, #8]
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	7da0      	ldrb	r0, [r4, #22]
 800b902:	f884 9015 	strb.w	r9, [r4, #21]
 800b906:	eba2 0208 	sub.w	r2, r2, r8
 800b90a:	eba3 0308 	sub.w	r3, r3, r8
 800b90e:	60a2      	str	r2, [r4, #8]
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	f080 0001 	eor.w	r0, r0, #1
 800b916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	70ab      	strb	r3, [r5, #2]
 800b920:	3503      	adds	r5, #3
 800b922:	68a7      	ldr	r7, [r4, #8]
 800b924:	e7b6      	b.n	800b894 <ucdr_deserialize_endian_uint32_t+0x6c>
 800b926:	4639      	mov	r1, r7
 800b928:	4642      	mov	r2, r8
 800b92a:	4628      	mov	r0, r5
 800b92c:	f00f faaf 	bl	801ae8e <memcpy>
 800b930:	68a1      	ldr	r1, [r4, #8]
 800b932:	4652      	mov	r2, sl
 800b934:	eb05 0008 	add.w	r0, r5, r8
 800b938:	f00f faa9 	bl	801ae8e <memcpy>
 800b93c:	e7ac      	b.n	800b898 <ucdr_deserialize_endian_uint32_t+0x70>
 800b93e:	bf00      	nop

0800b940 <ucdr_serialize_uint64_t>:
 800b940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b944:	2108      	movs	r1, #8
 800b946:	b082      	sub	sp, #8
 800b948:	4604      	mov	r4, r0
 800b94a:	e9cd 2300 	strd	r2, r3, [sp]
 800b94e:	f000 fdfb 	bl	800c548 <ucdr_buffer_alignment>
 800b952:	4601      	mov	r1, r0
 800b954:	4620      	mov	r0, r4
 800b956:	7d67      	ldrb	r7, [r4, #21]
 800b958:	f000 fe3a 	bl	800c5d0 <ucdr_advance_buffer>
 800b95c:	2108      	movs	r1, #8
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 fd92 	bl	800c488 <ucdr_check_buffer_available_for>
 800b964:	2800      	cmp	r0, #0
 800b966:	d14d      	bne.n	800ba04 <ucdr_serialize_uint64_t+0xc4>
 800b968:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b96c:	42ab      	cmp	r3, r5
 800b96e:	d944      	bls.n	800b9fa <ucdr_serialize_uint64_t+0xba>
 800b970:	1b5e      	subs	r6, r3, r5
 800b972:	60a3      	str	r3, [r4, #8]
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	f1c6 0808 	rsb	r8, r6, #8
 800b97a:	4433      	add	r3, r6
 800b97c:	6123      	str	r3, [r4, #16]
 800b97e:	4641      	mov	r1, r8
 800b980:	4620      	mov	r0, r4
 800b982:	f000 fd8d 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800b986:	2800      	cmp	r0, #0
 800b988:	d072      	beq.n	800ba70 <ucdr_serialize_uint64_t+0x130>
 800b98a:	7d23      	ldrb	r3, [r4, #20]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	f000 8092 	beq.w	800bab6 <ucdr_serialize_uint64_t+0x176>
 800b992:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b996:	702b      	strb	r3, [r5, #0]
 800b998:	2e01      	cmp	r6, #1
 800b99a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b99e:	706b      	strb	r3, [r5, #1]
 800b9a0:	d073      	beq.n	800ba8a <ucdr_serialize_uint64_t+0x14a>
 800b9a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b9a6:	70ab      	strb	r3, [r5, #2]
 800b9a8:	2e02      	cmp	r6, #2
 800b9aa:	d072      	beq.n	800ba92 <ucdr_serialize_uint64_t+0x152>
 800b9ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9b0:	70eb      	strb	r3, [r5, #3]
 800b9b2:	2e03      	cmp	r6, #3
 800b9b4:	d071      	beq.n	800ba9a <ucdr_serialize_uint64_t+0x15a>
 800b9b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b9ba:	712b      	strb	r3, [r5, #4]
 800b9bc:	2e04      	cmp	r6, #4
 800b9be:	d070      	beq.n	800baa2 <ucdr_serialize_uint64_t+0x162>
 800b9c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b9c4:	716b      	strb	r3, [r5, #5]
 800b9c6:	2e05      	cmp	r6, #5
 800b9c8:	d06f      	beq.n	800baaa <ucdr_serialize_uint64_t+0x16a>
 800b9ca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b9ce:	71ab      	strb	r3, [r5, #6]
 800b9d0:	2e06      	cmp	r6, #6
 800b9d2:	d06e      	beq.n	800bab2 <ucdr_serialize_uint64_t+0x172>
 800b9d4:	3507      	adds	r5, #7
 800b9d6:	f89d 3000 	ldrb.w	r3, [sp]
 800b9da:	702b      	strb	r3, [r5, #0]
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	68a2      	ldr	r2, [r4, #8]
 800b9e0:	7da0      	ldrb	r0, [r4, #22]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	4442      	add	r2, r8
 800b9e6:	1b9b      	subs	r3, r3, r6
 800b9e8:	2108      	movs	r1, #8
 800b9ea:	f080 0001 	eor.w	r0, r0, #1
 800b9ee:	60a2      	str	r2, [r4, #8]
 800b9f0:	6123      	str	r3, [r4, #16]
 800b9f2:	7561      	strb	r1, [r4, #21]
 800b9f4:	b002      	add	sp, #8
 800b9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9fa:	2108      	movs	r1, #8
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 fd4f 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800ba02:	b350      	cbz	r0, 800ba5a <ucdr_serialize_uint64_t+0x11a>
 800ba04:	7d22      	ldrb	r2, [r4, #20]
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	2a01      	cmp	r2, #1
 800ba0a:	d02c      	beq.n	800ba66 <ucdr_serialize_uint64_t+0x126>
 800ba0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	68a3      	ldr	r3, [r4, #8]
 800ba14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba18:	705a      	strb	r2, [r3, #1]
 800ba1a:	68a3      	ldr	r3, [r4, #8]
 800ba1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba20:	709a      	strb	r2, [r3, #2]
 800ba22:	68a3      	ldr	r3, [r4, #8]
 800ba24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba28:	70da      	strb	r2, [r3, #3]
 800ba2a:	68a3      	ldr	r3, [r4, #8]
 800ba2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba30:	711a      	strb	r2, [r3, #4]
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba38:	715a      	strb	r2, [r3, #5]
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba40:	719a      	strb	r2, [r3, #6]
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	f89d 2000 	ldrb.w	r2, [sp]
 800ba48:	71da      	strb	r2, [r3, #7]
 800ba4a:	68a2      	ldr	r2, [r4, #8]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	3208      	adds	r2, #8
 800ba50:	3308      	adds	r3, #8
 800ba52:	2108      	movs	r1, #8
 800ba54:	60a2      	str	r2, [r4, #8]
 800ba56:	6123      	str	r3, [r4, #16]
 800ba58:	7561      	strb	r1, [r4, #21]
 800ba5a:	7da0      	ldrb	r0, [r4, #22]
 800ba5c:	f080 0001 	eor.w	r0, r0, #1
 800ba60:	b002      	add	sp, #8
 800ba62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba6a:	6019      	str	r1, [r3, #0]
 800ba6c:	605a      	str	r2, [r3, #4]
 800ba6e:	e7ec      	b.n	800ba4a <ucdr_serialize_uint64_t+0x10a>
 800ba70:	68a2      	ldr	r2, [r4, #8]
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	7da0      	ldrb	r0, [r4, #22]
 800ba76:	7567      	strb	r7, [r4, #21]
 800ba78:	1b92      	subs	r2, r2, r6
 800ba7a:	1b9b      	subs	r3, r3, r6
 800ba7c:	f080 0001 	eor.w	r0, r0, #1
 800ba80:	60a2      	str	r2, [r4, #8]
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	b002      	add	sp, #8
 800ba86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba8a:	68a3      	ldr	r3, [r4, #8]
 800ba8c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	68a3      	ldr	r3, [r4, #8]
 800ba94:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	68a3      	ldr	r3, [r4, #8]
 800ba9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800baa0:	701a      	strb	r2, [r3, #0]
 800baa2:	68a3      	ldr	r3, [r4, #8]
 800baa4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	68a3      	ldr	r3, [r4, #8]
 800baac:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bab0:	701a      	strb	r2, [r3, #0]
 800bab2:	68a5      	ldr	r5, [r4, #8]
 800bab4:	e78f      	b.n	800b9d6 <ucdr_serialize_uint64_t+0x96>
 800bab6:	4628      	mov	r0, r5
 800bab8:	466d      	mov	r5, sp
 800baba:	4632      	mov	r2, r6
 800babc:	4629      	mov	r1, r5
 800babe:	f00f f9e6 	bl	801ae8e <memcpy>
 800bac2:	68a0      	ldr	r0, [r4, #8]
 800bac4:	4642      	mov	r2, r8
 800bac6:	19a9      	adds	r1, r5, r6
 800bac8:	f00f f9e1 	bl	801ae8e <memcpy>
 800bacc:	e786      	b.n	800b9dc <ucdr_serialize_uint64_t+0x9c>
 800bace:	bf00      	nop

0800bad0 <ucdr_serialize_int16_t>:
 800bad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	460b      	mov	r3, r1
 800bad8:	2102      	movs	r1, #2
 800bada:	4604      	mov	r4, r0
 800badc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bae0:	f000 fd32 	bl	800c548 <ucdr_buffer_alignment>
 800bae4:	4601      	mov	r1, r0
 800bae6:	4620      	mov	r0, r4
 800bae8:	7d67      	ldrb	r7, [r4, #21]
 800baea:	f000 fd71 	bl	800c5d0 <ucdr_advance_buffer>
 800baee:	2102      	movs	r1, #2
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fcc9 	bl	800c488 <ucdr_check_buffer_available_for>
 800baf6:	b1c0      	cbz	r0, 800bb2a <ucdr_serialize_int16_t+0x5a>
 800baf8:	7d22      	ldrb	r2, [r4, #20]
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	2a01      	cmp	r2, #1
 800bafe:	d04e      	beq.n	800bb9e <ucdr_serialize_int16_t+0xce>
 800bb00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb04:	701a      	strb	r2, [r3, #0]
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb0c:	705a      	strb	r2, [r3, #1]
 800bb0e:	68a2      	ldr	r2, [r4, #8]
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	3202      	adds	r2, #2
 800bb14:	3302      	adds	r3, #2
 800bb16:	2102      	movs	r1, #2
 800bb18:	60a2      	str	r2, [r4, #8]
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	7561      	strb	r1, [r4, #21]
 800bb1e:	7da0      	ldrb	r0, [r4, #22]
 800bb20:	f080 0001 	eor.w	r0, r0, #1
 800bb24:	b002      	add	sp, #8
 800bb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bb2e:	42ab      	cmp	r3, r5
 800bb30:	d923      	bls.n	800bb7a <ucdr_serialize_int16_t+0xaa>
 800bb32:	1b5e      	subs	r6, r3, r5
 800bb34:	60a3      	str	r3, [r4, #8]
 800bb36:	6923      	ldr	r3, [r4, #16]
 800bb38:	f1c6 0802 	rsb	r8, r6, #2
 800bb3c:	4433      	add	r3, r6
 800bb3e:	6123      	str	r3, [r4, #16]
 800bb40:	4641      	mov	r1, r8
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 fcac 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bb48:	b368      	cbz	r0, 800bba6 <ucdr_serialize_int16_t+0xd6>
 800bb4a:	7d23      	ldrb	r3, [r4, #20]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d03b      	beq.n	800bbc8 <ucdr_serialize_int16_t+0xf8>
 800bb50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb54:	702b      	strb	r3, [r5, #0]
 800bb56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb5a:	706b      	strb	r3, [r5, #1]
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	68a2      	ldr	r2, [r4, #8]
 800bb60:	7da0      	ldrb	r0, [r4, #22]
 800bb62:	3302      	adds	r3, #2
 800bb64:	4442      	add	r2, r8
 800bb66:	1b9b      	subs	r3, r3, r6
 800bb68:	2102      	movs	r1, #2
 800bb6a:	f080 0001 	eor.w	r0, r0, #1
 800bb6e:	60a2      	str	r2, [r4, #8]
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	7561      	strb	r1, [r4, #21]
 800bb74:	b002      	add	sp, #8
 800bb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7a:	2102      	movs	r1, #2
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fc8f 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d0cb      	beq.n	800bb1e <ucdr_serialize_int16_t+0x4e>
 800bb86:	7d23      	ldrb	r3, [r4, #20]
 800bb88:	68a2      	ldr	r2, [r4, #8]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d018      	beq.n	800bbc0 <ucdr_serialize_int16_t+0xf0>
 800bb8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb92:	7013      	strb	r3, [r2, #0]
 800bb94:	68a3      	ldr	r3, [r4, #8]
 800bb96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb9a:	705a      	strb	r2, [r3, #1]
 800bb9c:	e7b7      	b.n	800bb0e <ucdr_serialize_int16_t+0x3e>
 800bb9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bba2:	801a      	strh	r2, [r3, #0]
 800bba4:	e7b3      	b.n	800bb0e <ucdr_serialize_int16_t+0x3e>
 800bba6:	68a2      	ldr	r2, [r4, #8]
 800bba8:	6923      	ldr	r3, [r4, #16]
 800bbaa:	7da0      	ldrb	r0, [r4, #22]
 800bbac:	7567      	strb	r7, [r4, #21]
 800bbae:	1b92      	subs	r2, r2, r6
 800bbb0:	1b9b      	subs	r3, r3, r6
 800bbb2:	f080 0001 	eor.w	r0, r0, #1
 800bbb6:	60a2      	str	r2, [r4, #8]
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	b002      	add	sp, #8
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bbc4:	8013      	strh	r3, [r2, #0]
 800bbc6:	e7a2      	b.n	800bb0e <ucdr_serialize_int16_t+0x3e>
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f10d 0506 	add.w	r5, sp, #6
 800bbce:	4632      	mov	r2, r6
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f00f f95c 	bl	801ae8e <memcpy>
 800bbd6:	68a0      	ldr	r0, [r4, #8]
 800bbd8:	4642      	mov	r2, r8
 800bbda:	19a9      	adds	r1, r5, r6
 800bbdc:	f00f f957 	bl	801ae8e <memcpy>
 800bbe0:	e7bc      	b.n	800bb5c <ucdr_serialize_int16_t+0x8c>
 800bbe2:	bf00      	nop

0800bbe4 <ucdr_deserialize_int16_t>:
 800bbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe8:	460d      	mov	r5, r1
 800bbea:	2102      	movs	r1, #2
 800bbec:	4604      	mov	r4, r0
 800bbee:	f000 fcab 	bl	800c548 <ucdr_buffer_alignment>
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bbfa:	f000 fce9 	bl	800c5d0 <ucdr_advance_buffer>
 800bbfe:	2102      	movs	r1, #2
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 fc41 	bl	800c488 <ucdr_check_buffer_available_for>
 800bc06:	b1a8      	cbz	r0, 800bc34 <ucdr_deserialize_int16_t+0x50>
 800bc08:	7d22      	ldrb	r2, [r4, #20]
 800bc0a:	68a3      	ldr	r3, [r4, #8]
 800bc0c:	2a01      	cmp	r2, #1
 800bc0e:	d046      	beq.n	800bc9e <ucdr_deserialize_int16_t+0xba>
 800bc10:	785b      	ldrb	r3, [r3, #1]
 800bc12:	702b      	strb	r3, [r5, #0]
 800bc14:	68a3      	ldr	r3, [r4, #8]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	706b      	strb	r3, [r5, #1]
 800bc1a:	68a2      	ldr	r2, [r4, #8]
 800bc1c:	6923      	ldr	r3, [r4, #16]
 800bc1e:	3202      	adds	r2, #2
 800bc20:	3302      	adds	r3, #2
 800bc22:	2102      	movs	r1, #2
 800bc24:	60a2      	str	r2, [r4, #8]
 800bc26:	6123      	str	r3, [r4, #16]
 800bc28:	7561      	strb	r1, [r4, #21]
 800bc2a:	7da0      	ldrb	r0, [r4, #22]
 800bc2c:	f080 0001 	eor.w	r0, r0, #1
 800bc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc34:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bc38:	42be      	cmp	r6, r7
 800bc3a:	d920      	bls.n	800bc7e <ucdr_deserialize_int16_t+0x9a>
 800bc3c:	6923      	ldr	r3, [r4, #16]
 800bc3e:	60a6      	str	r6, [r4, #8]
 800bc40:	1bf6      	subs	r6, r6, r7
 800bc42:	4433      	add	r3, r6
 800bc44:	f1c6 0902 	rsb	r9, r6, #2
 800bc48:	6123      	str	r3, [r4, #16]
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 fc27 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bc52:	b338      	cbz	r0, 800bca4 <ucdr_deserialize_int16_t+0xc0>
 800bc54:	7d23      	ldrb	r3, [r4, #20]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d034      	beq.n	800bcc4 <ucdr_deserialize_int16_t+0xe0>
 800bc5a:	787b      	ldrb	r3, [r7, #1]
 800bc5c:	702b      	strb	r3, [r5, #0]
 800bc5e:	783b      	ldrb	r3, [r7, #0]
 800bc60:	706b      	strb	r3, [r5, #1]
 800bc62:	6923      	ldr	r3, [r4, #16]
 800bc64:	68a2      	ldr	r2, [r4, #8]
 800bc66:	7da0      	ldrb	r0, [r4, #22]
 800bc68:	2102      	movs	r1, #2
 800bc6a:	3302      	adds	r3, #2
 800bc6c:	444a      	add	r2, r9
 800bc6e:	1b9b      	subs	r3, r3, r6
 800bc70:	7561      	strb	r1, [r4, #21]
 800bc72:	60a2      	str	r2, [r4, #8]
 800bc74:	6123      	str	r3, [r4, #16]
 800bc76:	f080 0001 	eor.w	r0, r0, #1
 800bc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7e:	2102      	movs	r1, #2
 800bc80:	4620      	mov	r0, r4
 800bc82:	f000 fc0d 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d0cf      	beq.n	800bc2a <ucdr_deserialize_int16_t+0x46>
 800bc8a:	7d23      	ldrb	r3, [r4, #20]
 800bc8c:	68a2      	ldr	r2, [r4, #8]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d015      	beq.n	800bcbe <ucdr_deserialize_int16_t+0xda>
 800bc92:	7853      	ldrb	r3, [r2, #1]
 800bc94:	702b      	strb	r3, [r5, #0]
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	706b      	strb	r3, [r5, #1]
 800bc9c:	e7bd      	b.n	800bc1a <ucdr_deserialize_int16_t+0x36>
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	802b      	strh	r3, [r5, #0]
 800bca2:	e7ba      	b.n	800bc1a <ucdr_deserialize_int16_t+0x36>
 800bca4:	68a2      	ldr	r2, [r4, #8]
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	7da0      	ldrb	r0, [r4, #22]
 800bcaa:	f884 8015 	strb.w	r8, [r4, #21]
 800bcae:	1b92      	subs	r2, r2, r6
 800bcb0:	1b9b      	subs	r3, r3, r6
 800bcb2:	60a2      	str	r2, [r4, #8]
 800bcb4:	6123      	str	r3, [r4, #16]
 800bcb6:	f080 0001 	eor.w	r0, r0, #1
 800bcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbe:	8813      	ldrh	r3, [r2, #0]
 800bcc0:	802b      	strh	r3, [r5, #0]
 800bcc2:	e7aa      	b.n	800bc1a <ucdr_deserialize_int16_t+0x36>
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f00f f8e0 	bl	801ae8e <memcpy>
 800bcce:	68a1      	ldr	r1, [r4, #8]
 800bcd0:	464a      	mov	r2, r9
 800bcd2:	19a8      	adds	r0, r5, r6
 800bcd4:	f00f f8db 	bl	801ae8e <memcpy>
 800bcd8:	e7c3      	b.n	800bc62 <ucdr_deserialize_int16_t+0x7e>
 800bcda:	bf00      	nop

0800bcdc <ucdr_serialize_int32_t>:
 800bcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	4604      	mov	r4, r0
 800bce4:	9101      	str	r1, [sp, #4]
 800bce6:	2104      	movs	r1, #4
 800bce8:	f000 fc2e 	bl	800c548 <ucdr_buffer_alignment>
 800bcec:	4601      	mov	r1, r0
 800bcee:	4620      	mov	r0, r4
 800bcf0:	7d67      	ldrb	r7, [r4, #21]
 800bcf2:	f000 fc6d 	bl	800c5d0 <ucdr_advance_buffer>
 800bcf6:	2104      	movs	r1, #4
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fbc5 	bl	800c488 <ucdr_check_buffer_available_for>
 800bcfe:	b300      	cbz	r0, 800bd42 <ucdr_serialize_int32_t+0x66>
 800bd00:	7d22      	ldrb	r2, [r4, #20]
 800bd02:	68a3      	ldr	r3, [r4, #8]
 800bd04:	2a01      	cmp	r2, #1
 800bd06:	d05d      	beq.n	800bdc4 <ucdr_serialize_int32_t+0xe8>
 800bd08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd0c:	701a      	strb	r2, [r3, #0]
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd14:	705a      	strb	r2, [r3, #1]
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd1c:	709a      	strb	r2, [r3, #2]
 800bd1e:	68a3      	ldr	r3, [r4, #8]
 800bd20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd24:	70da      	strb	r2, [r3, #3]
 800bd26:	68a2      	ldr	r2, [r4, #8]
 800bd28:	6923      	ldr	r3, [r4, #16]
 800bd2a:	3204      	adds	r2, #4
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	2104      	movs	r1, #4
 800bd30:	60a2      	str	r2, [r4, #8]
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	7561      	strb	r1, [r4, #21]
 800bd36:	7da0      	ldrb	r0, [r4, #22]
 800bd38:	f080 0001 	eor.w	r0, r0, #1
 800bd3c:	b002      	add	sp, #8
 800bd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd42:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bd46:	42ab      	cmp	r3, r5
 800bd48:	d92e      	bls.n	800bda8 <ucdr_serialize_int32_t+0xcc>
 800bd4a:	1b5e      	subs	r6, r3, r5
 800bd4c:	60a3      	str	r3, [r4, #8]
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	f1c6 0804 	rsb	r8, r6, #4
 800bd54:	4433      	add	r3, r6
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	4641      	mov	r1, r8
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 fba0 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bd60:	b398      	cbz	r0, 800bdca <ucdr_serialize_int32_t+0xee>
 800bd62:	7d23      	ldrb	r3, [r4, #20]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d046      	beq.n	800bdf6 <ucdr_serialize_int32_t+0x11a>
 800bd68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd6c:	702b      	strb	r3, [r5, #0]
 800bd6e:	2e01      	cmp	r6, #1
 800bd70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd74:	706b      	strb	r3, [r5, #1]
 800bd76:	d035      	beq.n	800bde4 <ucdr_serialize_int32_t+0x108>
 800bd78:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd7c:	70ab      	strb	r3, [r5, #2]
 800bd7e:	2e02      	cmp	r6, #2
 800bd80:	d034      	beq.n	800bdec <ucdr_serialize_int32_t+0x110>
 800bd82:	3503      	adds	r5, #3
 800bd84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd88:	702b      	strb	r3, [r5, #0]
 800bd8a:	6923      	ldr	r3, [r4, #16]
 800bd8c:	68a2      	ldr	r2, [r4, #8]
 800bd8e:	7da0      	ldrb	r0, [r4, #22]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4442      	add	r2, r8
 800bd94:	1b9b      	subs	r3, r3, r6
 800bd96:	2104      	movs	r1, #4
 800bd98:	f080 0001 	eor.w	r0, r0, #1
 800bd9c:	60a2      	str	r2, [r4, #8]
 800bd9e:	6123      	str	r3, [r4, #16]
 800bda0:	7561      	strb	r1, [r4, #21]
 800bda2:	b002      	add	sp, #8
 800bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda8:	2104      	movs	r1, #4
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 fb78 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d0c0      	beq.n	800bd36 <ucdr_serialize_int32_t+0x5a>
 800bdb4:	7d23      	ldrb	r3, [r4, #20]
 800bdb6:	68a2      	ldr	r2, [r4, #8]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d019      	beq.n	800bdf0 <ucdr_serialize_int32_t+0x114>
 800bdbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bdc0:	7013      	strb	r3, [r2, #0]
 800bdc2:	e7a4      	b.n	800bd0e <ucdr_serialize_int32_t+0x32>
 800bdc4:	9a01      	ldr	r2, [sp, #4]
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	e7ad      	b.n	800bd26 <ucdr_serialize_int32_t+0x4a>
 800bdca:	68a2      	ldr	r2, [r4, #8]
 800bdcc:	6923      	ldr	r3, [r4, #16]
 800bdce:	7da0      	ldrb	r0, [r4, #22]
 800bdd0:	7567      	strb	r7, [r4, #21]
 800bdd2:	1b92      	subs	r2, r2, r6
 800bdd4:	1b9b      	subs	r3, r3, r6
 800bdd6:	f080 0001 	eor.w	r0, r0, #1
 800bdda:	60a2      	str	r2, [r4, #8]
 800bddc:	6123      	str	r3, [r4, #16]
 800bdde:	b002      	add	sp, #8
 800bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde4:	68a3      	ldr	r3, [r4, #8]
 800bde6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdea:	701a      	strb	r2, [r3, #0]
 800bdec:	68a5      	ldr	r5, [r4, #8]
 800bdee:	e7c9      	b.n	800bd84 <ucdr_serialize_int32_t+0xa8>
 800bdf0:	9b01      	ldr	r3, [sp, #4]
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	e797      	b.n	800bd26 <ucdr_serialize_int32_t+0x4a>
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	ad01      	add	r5, sp, #4
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f00f f846 	bl	801ae8e <memcpy>
 800be02:	68a0      	ldr	r0, [r4, #8]
 800be04:	4642      	mov	r2, r8
 800be06:	19a9      	adds	r1, r5, r6
 800be08:	f00f f841 	bl	801ae8e <memcpy>
 800be0c:	e7bd      	b.n	800bd8a <ucdr_serialize_int32_t+0xae>
 800be0e:	bf00      	nop

0800be10 <ucdr_deserialize_int32_t>:
 800be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be14:	460d      	mov	r5, r1
 800be16:	2104      	movs	r1, #4
 800be18:	4604      	mov	r4, r0
 800be1a:	f000 fb95 	bl	800c548 <ucdr_buffer_alignment>
 800be1e:	4601      	mov	r1, r0
 800be20:	4620      	mov	r0, r4
 800be22:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be26:	f000 fbd3 	bl	800c5d0 <ucdr_advance_buffer>
 800be2a:	2104      	movs	r1, #4
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fb2b 	bl	800c488 <ucdr_check_buffer_available_for>
 800be32:	b1d8      	cbz	r0, 800be6c <ucdr_deserialize_int32_t+0x5c>
 800be34:	7d22      	ldrb	r2, [r4, #20]
 800be36:	68a3      	ldr	r3, [r4, #8]
 800be38:	2a01      	cmp	r2, #1
 800be3a:	d052      	beq.n	800bee2 <ucdr_deserialize_int32_t+0xd2>
 800be3c:	78db      	ldrb	r3, [r3, #3]
 800be3e:	702b      	strb	r3, [r5, #0]
 800be40:	68a3      	ldr	r3, [r4, #8]
 800be42:	789b      	ldrb	r3, [r3, #2]
 800be44:	706b      	strb	r3, [r5, #1]
 800be46:	68a3      	ldr	r3, [r4, #8]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	70ab      	strb	r3, [r5, #2]
 800be4c:	68a3      	ldr	r3, [r4, #8]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	70eb      	strb	r3, [r5, #3]
 800be52:	68a2      	ldr	r2, [r4, #8]
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	3204      	adds	r2, #4
 800be58:	3304      	adds	r3, #4
 800be5a:	2104      	movs	r1, #4
 800be5c:	60a2      	str	r2, [r4, #8]
 800be5e:	6123      	str	r3, [r4, #16]
 800be60:	7561      	strb	r1, [r4, #21]
 800be62:	7da0      	ldrb	r0, [r4, #22]
 800be64:	f080 0001 	eor.w	r0, r0, #1
 800be68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800be70:	42b7      	cmp	r7, r6
 800be72:	d92a      	bls.n	800beca <ucdr_deserialize_int32_t+0xba>
 800be74:	6923      	ldr	r3, [r4, #16]
 800be76:	60a7      	str	r7, [r4, #8]
 800be78:	1bbf      	subs	r7, r7, r6
 800be7a:	443b      	add	r3, r7
 800be7c:	f1c7 0904 	rsb	r9, r7, #4
 800be80:	6123      	str	r3, [r4, #16]
 800be82:	4649      	mov	r1, r9
 800be84:	4620      	mov	r0, r4
 800be86:	f000 fb0b 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800be8a:	b368      	cbz	r0, 800bee8 <ucdr_deserialize_int32_t+0xd8>
 800be8c:	7d23      	ldrb	r3, [r4, #20]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d040      	beq.n	800bf14 <ucdr_deserialize_int32_t+0x104>
 800be92:	78f3      	ldrb	r3, [r6, #3]
 800be94:	702b      	strb	r3, [r5, #0]
 800be96:	78b3      	ldrb	r3, [r6, #2]
 800be98:	706b      	strb	r3, [r5, #1]
 800be9a:	2f01      	cmp	r7, #1
 800be9c:	d031      	beq.n	800bf02 <ucdr_deserialize_int32_t+0xf2>
 800be9e:	7873      	ldrb	r3, [r6, #1]
 800bea0:	70ab      	strb	r3, [r5, #2]
 800bea2:	2f02      	cmp	r7, #2
 800bea4:	f105 0503 	add.w	r5, r5, #3
 800bea8:	d02f      	beq.n	800bf0a <ucdr_deserialize_int32_t+0xfa>
 800beaa:	7833      	ldrb	r3, [r6, #0]
 800beac:	702b      	strb	r3, [r5, #0]
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	68a2      	ldr	r2, [r4, #8]
 800beb2:	7da0      	ldrb	r0, [r4, #22]
 800beb4:	2104      	movs	r1, #4
 800beb6:	3304      	adds	r3, #4
 800beb8:	444a      	add	r2, r9
 800beba:	1bdb      	subs	r3, r3, r7
 800bebc:	7561      	strb	r1, [r4, #21]
 800bebe:	60a2      	str	r2, [r4, #8]
 800bec0:	6123      	str	r3, [r4, #16]
 800bec2:	f080 0001 	eor.w	r0, r0, #1
 800bec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beca:	2104      	movs	r1, #4
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fae7 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d0c5      	beq.n	800be62 <ucdr_deserialize_int32_t+0x52>
 800bed6:	7d23      	ldrb	r3, [r4, #20]
 800bed8:	68a2      	ldr	r2, [r4, #8]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d017      	beq.n	800bf0e <ucdr_deserialize_int32_t+0xfe>
 800bede:	78d3      	ldrb	r3, [r2, #3]
 800bee0:	e7ad      	b.n	800be3e <ucdr_deserialize_int32_t+0x2e>
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	e7b4      	b.n	800be52 <ucdr_deserialize_int32_t+0x42>
 800bee8:	68a2      	ldr	r2, [r4, #8]
 800beea:	6923      	ldr	r3, [r4, #16]
 800beec:	7da0      	ldrb	r0, [r4, #22]
 800beee:	f884 8015 	strb.w	r8, [r4, #21]
 800bef2:	1bd2      	subs	r2, r2, r7
 800bef4:	1bdb      	subs	r3, r3, r7
 800bef6:	60a2      	str	r2, [r4, #8]
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	f080 0001 	eor.w	r0, r0, #1
 800befe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	70ab      	strb	r3, [r5, #2]
 800bf08:	3503      	adds	r5, #3
 800bf0a:	68a6      	ldr	r6, [r4, #8]
 800bf0c:	e7cd      	b.n	800beaa <ucdr_deserialize_int32_t+0x9a>
 800bf0e:	6813      	ldr	r3, [r2, #0]
 800bf10:	602b      	str	r3, [r5, #0]
 800bf12:	e79e      	b.n	800be52 <ucdr_deserialize_int32_t+0x42>
 800bf14:	4631      	mov	r1, r6
 800bf16:	463a      	mov	r2, r7
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f00e ffb8 	bl	801ae8e <memcpy>
 800bf1e:	68a1      	ldr	r1, [r4, #8]
 800bf20:	464a      	mov	r2, r9
 800bf22:	19e8      	adds	r0, r5, r7
 800bf24:	f00e ffb3 	bl	801ae8e <memcpy>
 800bf28:	e7c1      	b.n	800beae <ucdr_deserialize_int32_t+0x9e>
 800bf2a:	bf00      	nop

0800bf2c <ucdr_serialize_float>:
 800bf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf30:	2104      	movs	r1, #4
 800bf32:	b082      	sub	sp, #8
 800bf34:	4604      	mov	r4, r0
 800bf36:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bf3a:	f000 fb05 	bl	800c548 <ucdr_buffer_alignment>
 800bf3e:	4601      	mov	r1, r0
 800bf40:	4620      	mov	r0, r4
 800bf42:	7d67      	ldrb	r7, [r4, #21]
 800bf44:	f000 fb44 	bl	800c5d0 <ucdr_advance_buffer>
 800bf48:	2104      	movs	r1, #4
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 fa9c 	bl	800c488 <ucdr_check_buffer_available_for>
 800bf50:	b300      	cbz	r0, 800bf94 <ucdr_serialize_float+0x68>
 800bf52:	7d22      	ldrb	r2, [r4, #20]
 800bf54:	68a3      	ldr	r3, [r4, #8]
 800bf56:	2a01      	cmp	r2, #1
 800bf58:	d05d      	beq.n	800c016 <ucdr_serialize_float+0xea>
 800bf5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	68a3      	ldr	r3, [r4, #8]
 800bf62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf66:	705a      	strb	r2, [r3, #1]
 800bf68:	68a3      	ldr	r3, [r4, #8]
 800bf6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf6e:	709a      	strb	r2, [r3, #2]
 800bf70:	68a3      	ldr	r3, [r4, #8]
 800bf72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf76:	70da      	strb	r2, [r3, #3]
 800bf78:	68a2      	ldr	r2, [r4, #8]
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	3204      	adds	r2, #4
 800bf7e:	3304      	adds	r3, #4
 800bf80:	2104      	movs	r1, #4
 800bf82:	60a2      	str	r2, [r4, #8]
 800bf84:	6123      	str	r3, [r4, #16]
 800bf86:	7561      	strb	r1, [r4, #21]
 800bf88:	7da0      	ldrb	r0, [r4, #22]
 800bf8a:	f080 0001 	eor.w	r0, r0, #1
 800bf8e:	b002      	add	sp, #8
 800bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf94:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bf98:	42ab      	cmp	r3, r5
 800bf9a:	d92e      	bls.n	800bffa <ucdr_serialize_float+0xce>
 800bf9c:	1b5e      	subs	r6, r3, r5
 800bf9e:	60a3      	str	r3, [r4, #8]
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	f1c6 0804 	rsb	r8, r6, #4
 800bfa6:	4433      	add	r3, r6
 800bfa8:	6123      	str	r3, [r4, #16]
 800bfaa:	4641      	mov	r1, r8
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fa77 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800bfb2:	b398      	cbz	r0, 800c01c <ucdr_serialize_float+0xf0>
 800bfb4:	7d23      	ldrb	r3, [r4, #20]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d046      	beq.n	800c048 <ucdr_serialize_float+0x11c>
 800bfba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfbe:	702b      	strb	r3, [r5, #0]
 800bfc0:	2e01      	cmp	r6, #1
 800bfc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bfc6:	706b      	strb	r3, [r5, #1]
 800bfc8:	d035      	beq.n	800c036 <ucdr_serialize_float+0x10a>
 800bfca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bfce:	70ab      	strb	r3, [r5, #2]
 800bfd0:	2e02      	cmp	r6, #2
 800bfd2:	d034      	beq.n	800c03e <ucdr_serialize_float+0x112>
 800bfd4:	3503      	adds	r5, #3
 800bfd6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bfda:	702b      	strb	r3, [r5, #0]
 800bfdc:	6923      	ldr	r3, [r4, #16]
 800bfde:	68a2      	ldr	r2, [r4, #8]
 800bfe0:	7da0      	ldrb	r0, [r4, #22]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4442      	add	r2, r8
 800bfe6:	1b9b      	subs	r3, r3, r6
 800bfe8:	2104      	movs	r1, #4
 800bfea:	f080 0001 	eor.w	r0, r0, #1
 800bfee:	60a2      	str	r2, [r4, #8]
 800bff0:	6123      	str	r3, [r4, #16]
 800bff2:	7561      	strb	r1, [r4, #21]
 800bff4:	b002      	add	sp, #8
 800bff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffa:	2104      	movs	r1, #4
 800bffc:	4620      	mov	r0, r4
 800bffe:	f000 fa4f 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800c002:	2800      	cmp	r0, #0
 800c004:	d0c0      	beq.n	800bf88 <ucdr_serialize_float+0x5c>
 800c006:	7d23      	ldrb	r3, [r4, #20]
 800c008:	68a2      	ldr	r2, [r4, #8]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d019      	beq.n	800c042 <ucdr_serialize_float+0x116>
 800c00e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c012:	7013      	strb	r3, [r2, #0]
 800c014:	e7a4      	b.n	800bf60 <ucdr_serialize_float+0x34>
 800c016:	9a01      	ldr	r2, [sp, #4]
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	e7ad      	b.n	800bf78 <ucdr_serialize_float+0x4c>
 800c01c:	68a2      	ldr	r2, [r4, #8]
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	7da0      	ldrb	r0, [r4, #22]
 800c022:	7567      	strb	r7, [r4, #21]
 800c024:	1b92      	subs	r2, r2, r6
 800c026:	1b9b      	subs	r3, r3, r6
 800c028:	f080 0001 	eor.w	r0, r0, #1
 800c02c:	60a2      	str	r2, [r4, #8]
 800c02e:	6123      	str	r3, [r4, #16]
 800c030:	b002      	add	sp, #8
 800c032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c036:	68a3      	ldr	r3, [r4, #8]
 800c038:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c03c:	701a      	strb	r2, [r3, #0]
 800c03e:	68a5      	ldr	r5, [r4, #8]
 800c040:	e7c9      	b.n	800bfd6 <ucdr_serialize_float+0xaa>
 800c042:	9b01      	ldr	r3, [sp, #4]
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	e797      	b.n	800bf78 <ucdr_serialize_float+0x4c>
 800c048:	4628      	mov	r0, r5
 800c04a:	ad01      	add	r5, sp, #4
 800c04c:	4632      	mov	r2, r6
 800c04e:	4629      	mov	r1, r5
 800c050:	f00e ff1d 	bl	801ae8e <memcpy>
 800c054:	68a0      	ldr	r0, [r4, #8]
 800c056:	4642      	mov	r2, r8
 800c058:	19a9      	adds	r1, r5, r6
 800c05a:	f00e ff18 	bl	801ae8e <memcpy>
 800c05e:	e7bd      	b.n	800bfdc <ucdr_serialize_float+0xb0>

0800c060 <ucdr_deserialize_float>:
 800c060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c064:	460d      	mov	r5, r1
 800c066:	2104      	movs	r1, #4
 800c068:	4604      	mov	r4, r0
 800c06a:	f000 fa6d 	bl	800c548 <ucdr_buffer_alignment>
 800c06e:	4601      	mov	r1, r0
 800c070:	4620      	mov	r0, r4
 800c072:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c076:	f000 faab 	bl	800c5d0 <ucdr_advance_buffer>
 800c07a:	2104      	movs	r1, #4
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fa03 	bl	800c488 <ucdr_check_buffer_available_for>
 800c082:	b1d8      	cbz	r0, 800c0bc <ucdr_deserialize_float+0x5c>
 800c084:	7d22      	ldrb	r2, [r4, #20]
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	2a01      	cmp	r2, #1
 800c08a:	d052      	beq.n	800c132 <ucdr_deserialize_float+0xd2>
 800c08c:	78db      	ldrb	r3, [r3, #3]
 800c08e:	702b      	strb	r3, [r5, #0]
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	789b      	ldrb	r3, [r3, #2]
 800c094:	706b      	strb	r3, [r5, #1]
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	785b      	ldrb	r3, [r3, #1]
 800c09a:	70ab      	strb	r3, [r5, #2]
 800c09c:	68a3      	ldr	r3, [r4, #8]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	70eb      	strb	r3, [r5, #3]
 800c0a2:	68a2      	ldr	r2, [r4, #8]
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	3204      	adds	r2, #4
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	2104      	movs	r1, #4
 800c0ac:	60a2      	str	r2, [r4, #8]
 800c0ae:	6123      	str	r3, [r4, #16]
 800c0b0:	7561      	strb	r1, [r4, #21]
 800c0b2:	7da0      	ldrb	r0, [r4, #22]
 800c0b4:	f080 0001 	eor.w	r0, r0, #1
 800c0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0bc:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c0c0:	42b7      	cmp	r7, r6
 800c0c2:	d92a      	bls.n	800c11a <ucdr_deserialize_float+0xba>
 800c0c4:	6923      	ldr	r3, [r4, #16]
 800c0c6:	60a7      	str	r7, [r4, #8]
 800c0c8:	1bbf      	subs	r7, r7, r6
 800c0ca:	443b      	add	r3, r7
 800c0cc:	f1c7 0904 	rsb	r9, r7, #4
 800c0d0:	6123      	str	r3, [r4, #16]
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 f9e3 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800c0da:	b368      	cbz	r0, 800c138 <ucdr_deserialize_float+0xd8>
 800c0dc:	7d23      	ldrb	r3, [r4, #20]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d040      	beq.n	800c164 <ucdr_deserialize_float+0x104>
 800c0e2:	78f3      	ldrb	r3, [r6, #3]
 800c0e4:	702b      	strb	r3, [r5, #0]
 800c0e6:	78b3      	ldrb	r3, [r6, #2]
 800c0e8:	706b      	strb	r3, [r5, #1]
 800c0ea:	2f01      	cmp	r7, #1
 800c0ec:	d031      	beq.n	800c152 <ucdr_deserialize_float+0xf2>
 800c0ee:	7873      	ldrb	r3, [r6, #1]
 800c0f0:	70ab      	strb	r3, [r5, #2]
 800c0f2:	2f02      	cmp	r7, #2
 800c0f4:	f105 0503 	add.w	r5, r5, #3
 800c0f8:	d02f      	beq.n	800c15a <ucdr_deserialize_float+0xfa>
 800c0fa:	7833      	ldrb	r3, [r6, #0]
 800c0fc:	702b      	strb	r3, [r5, #0]
 800c0fe:	6923      	ldr	r3, [r4, #16]
 800c100:	68a2      	ldr	r2, [r4, #8]
 800c102:	7da0      	ldrb	r0, [r4, #22]
 800c104:	2104      	movs	r1, #4
 800c106:	3304      	adds	r3, #4
 800c108:	444a      	add	r2, r9
 800c10a:	1bdb      	subs	r3, r3, r7
 800c10c:	7561      	strb	r1, [r4, #21]
 800c10e:	60a2      	str	r2, [r4, #8]
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	f080 0001 	eor.w	r0, r0, #1
 800c116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c11a:	2104      	movs	r1, #4
 800c11c:	4620      	mov	r0, r4
 800c11e:	f000 f9bf 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800c122:	2800      	cmp	r0, #0
 800c124:	d0c5      	beq.n	800c0b2 <ucdr_deserialize_float+0x52>
 800c126:	7d23      	ldrb	r3, [r4, #20]
 800c128:	68a2      	ldr	r2, [r4, #8]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d017      	beq.n	800c15e <ucdr_deserialize_float+0xfe>
 800c12e:	78d3      	ldrb	r3, [r2, #3]
 800c130:	e7ad      	b.n	800c08e <ucdr_deserialize_float+0x2e>
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	602b      	str	r3, [r5, #0]
 800c136:	e7b4      	b.n	800c0a2 <ucdr_deserialize_float+0x42>
 800c138:	68a2      	ldr	r2, [r4, #8]
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	7da0      	ldrb	r0, [r4, #22]
 800c13e:	f884 8015 	strb.w	r8, [r4, #21]
 800c142:	1bd2      	subs	r2, r2, r7
 800c144:	1bdb      	subs	r3, r3, r7
 800c146:	60a2      	str	r2, [r4, #8]
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	f080 0001 	eor.w	r0, r0, #1
 800c14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c152:	68a3      	ldr	r3, [r4, #8]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	70ab      	strb	r3, [r5, #2]
 800c158:	3503      	adds	r5, #3
 800c15a:	68a6      	ldr	r6, [r4, #8]
 800c15c:	e7cd      	b.n	800c0fa <ucdr_deserialize_float+0x9a>
 800c15e:	6813      	ldr	r3, [r2, #0]
 800c160:	602b      	str	r3, [r5, #0]
 800c162:	e79e      	b.n	800c0a2 <ucdr_deserialize_float+0x42>
 800c164:	4631      	mov	r1, r6
 800c166:	463a      	mov	r2, r7
 800c168:	4628      	mov	r0, r5
 800c16a:	f00e fe90 	bl	801ae8e <memcpy>
 800c16e:	68a1      	ldr	r1, [r4, #8]
 800c170:	464a      	mov	r2, r9
 800c172:	19e8      	adds	r0, r5, r7
 800c174:	f00e fe8b 	bl	801ae8e <memcpy>
 800c178:	e7c1      	b.n	800c0fe <ucdr_deserialize_float+0x9e>
 800c17a:	bf00      	nop

0800c17c <ucdr_serialize_double>:
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	2108      	movs	r1, #8
 800c182:	b082      	sub	sp, #8
 800c184:	4604      	mov	r4, r0
 800c186:	ed8d 0b00 	vstr	d0, [sp]
 800c18a:	f000 f9dd 	bl	800c548 <ucdr_buffer_alignment>
 800c18e:	4601      	mov	r1, r0
 800c190:	4620      	mov	r0, r4
 800c192:	7d67      	ldrb	r7, [r4, #21]
 800c194:	f000 fa1c 	bl	800c5d0 <ucdr_advance_buffer>
 800c198:	2108      	movs	r1, #8
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 f974 	bl	800c488 <ucdr_check_buffer_available_for>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d14d      	bne.n	800c240 <ucdr_serialize_double+0xc4>
 800c1a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c1a8:	42ab      	cmp	r3, r5
 800c1aa:	d944      	bls.n	800c236 <ucdr_serialize_double+0xba>
 800c1ac:	1b5e      	subs	r6, r3, r5
 800c1ae:	60a3      	str	r3, [r4, #8]
 800c1b0:	6923      	ldr	r3, [r4, #16]
 800c1b2:	f1c6 0808 	rsb	r8, r6, #8
 800c1b6:	4433      	add	r3, r6
 800c1b8:	6123      	str	r3, [r4, #16]
 800c1ba:	4641      	mov	r1, r8
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 f96f 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d072      	beq.n	800c2ac <ucdr_serialize_double+0x130>
 800c1c6:	7d23      	ldrb	r3, [r4, #20]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	f000 8092 	beq.w	800c2f2 <ucdr_serialize_double+0x176>
 800c1ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c1d2:	702b      	strb	r3, [r5, #0]
 800c1d4:	2e01      	cmp	r6, #1
 800c1d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1da:	706b      	strb	r3, [r5, #1]
 800c1dc:	d073      	beq.n	800c2c6 <ucdr_serialize_double+0x14a>
 800c1de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c1e2:	70ab      	strb	r3, [r5, #2]
 800c1e4:	2e02      	cmp	r6, #2
 800c1e6:	d072      	beq.n	800c2ce <ucdr_serialize_double+0x152>
 800c1e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1ec:	70eb      	strb	r3, [r5, #3]
 800c1ee:	2e03      	cmp	r6, #3
 800c1f0:	d071      	beq.n	800c2d6 <ucdr_serialize_double+0x15a>
 800c1f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c1f6:	712b      	strb	r3, [r5, #4]
 800c1f8:	2e04      	cmp	r6, #4
 800c1fa:	d070      	beq.n	800c2de <ucdr_serialize_double+0x162>
 800c1fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c200:	716b      	strb	r3, [r5, #5]
 800c202:	2e05      	cmp	r6, #5
 800c204:	d06f      	beq.n	800c2e6 <ucdr_serialize_double+0x16a>
 800c206:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c20a:	71ab      	strb	r3, [r5, #6]
 800c20c:	2e06      	cmp	r6, #6
 800c20e:	d06e      	beq.n	800c2ee <ucdr_serialize_double+0x172>
 800c210:	3507      	adds	r5, #7
 800c212:	f89d 3000 	ldrb.w	r3, [sp]
 800c216:	702b      	strb	r3, [r5, #0]
 800c218:	6923      	ldr	r3, [r4, #16]
 800c21a:	68a2      	ldr	r2, [r4, #8]
 800c21c:	7da0      	ldrb	r0, [r4, #22]
 800c21e:	3308      	adds	r3, #8
 800c220:	4442      	add	r2, r8
 800c222:	1b9b      	subs	r3, r3, r6
 800c224:	2108      	movs	r1, #8
 800c226:	f080 0001 	eor.w	r0, r0, #1
 800c22a:	60a2      	str	r2, [r4, #8]
 800c22c:	6123      	str	r3, [r4, #16]
 800c22e:	7561      	strb	r1, [r4, #21]
 800c230:	b002      	add	sp, #8
 800c232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c236:	2108      	movs	r1, #8
 800c238:	4620      	mov	r0, r4
 800c23a:	f000 f931 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800c23e:	b350      	cbz	r0, 800c296 <ucdr_serialize_double+0x11a>
 800c240:	7d22      	ldrb	r2, [r4, #20]
 800c242:	68a3      	ldr	r3, [r4, #8]
 800c244:	2a01      	cmp	r2, #1
 800c246:	d02c      	beq.n	800c2a2 <ucdr_serialize_double+0x126>
 800c248:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c24c:	701a      	strb	r2, [r3, #0]
 800c24e:	68a3      	ldr	r3, [r4, #8]
 800c250:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c254:	705a      	strb	r2, [r3, #1]
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c25c:	709a      	strb	r2, [r3, #2]
 800c25e:	68a3      	ldr	r3, [r4, #8]
 800c260:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c264:	70da      	strb	r2, [r3, #3]
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c26c:	711a      	strb	r2, [r3, #4]
 800c26e:	68a3      	ldr	r3, [r4, #8]
 800c270:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c274:	715a      	strb	r2, [r3, #5]
 800c276:	68a3      	ldr	r3, [r4, #8]
 800c278:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c27c:	719a      	strb	r2, [r3, #6]
 800c27e:	68a3      	ldr	r3, [r4, #8]
 800c280:	f89d 2000 	ldrb.w	r2, [sp]
 800c284:	71da      	strb	r2, [r3, #7]
 800c286:	68a2      	ldr	r2, [r4, #8]
 800c288:	6923      	ldr	r3, [r4, #16]
 800c28a:	3208      	adds	r2, #8
 800c28c:	3308      	adds	r3, #8
 800c28e:	2108      	movs	r1, #8
 800c290:	60a2      	str	r2, [r4, #8]
 800c292:	6123      	str	r3, [r4, #16]
 800c294:	7561      	strb	r1, [r4, #21]
 800c296:	7da0      	ldrb	r0, [r4, #22]
 800c298:	f080 0001 	eor.w	r0, r0, #1
 800c29c:	b002      	add	sp, #8
 800c29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2a6:	6019      	str	r1, [r3, #0]
 800c2a8:	605a      	str	r2, [r3, #4]
 800c2aa:	e7ec      	b.n	800c286 <ucdr_serialize_double+0x10a>
 800c2ac:	68a2      	ldr	r2, [r4, #8]
 800c2ae:	6923      	ldr	r3, [r4, #16]
 800c2b0:	7da0      	ldrb	r0, [r4, #22]
 800c2b2:	7567      	strb	r7, [r4, #21]
 800c2b4:	1b92      	subs	r2, r2, r6
 800c2b6:	1b9b      	subs	r3, r3, r6
 800c2b8:	f080 0001 	eor.w	r0, r0, #1
 800c2bc:	60a2      	str	r2, [r4, #8]
 800c2be:	6123      	str	r3, [r4, #16]
 800c2c0:	b002      	add	sp, #8
 800c2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2cc:	701a      	strb	r2, [r3, #0]
 800c2ce:	68a3      	ldr	r3, [r4, #8]
 800c2d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c2dc:	701a      	strb	r2, [r3, #0]
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c2e4:	701a      	strb	r2, [r3, #0]
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	68a5      	ldr	r5, [r4, #8]
 800c2f0:	e78f      	b.n	800c212 <ucdr_serialize_double+0x96>
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	466d      	mov	r5, sp
 800c2f6:	4632      	mov	r2, r6
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f00e fdc8 	bl	801ae8e <memcpy>
 800c2fe:	68a0      	ldr	r0, [r4, #8]
 800c300:	4642      	mov	r2, r8
 800c302:	19a9      	adds	r1, r5, r6
 800c304:	f00e fdc3 	bl	801ae8e <memcpy>
 800c308:	e786      	b.n	800c218 <ucdr_serialize_double+0x9c>
 800c30a:	bf00      	nop

0800c30c <ucdr_deserialize_double>:
 800c30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c310:	460d      	mov	r5, r1
 800c312:	2108      	movs	r1, #8
 800c314:	4604      	mov	r4, r0
 800c316:	f000 f917 	bl	800c548 <ucdr_buffer_alignment>
 800c31a:	4601      	mov	r1, r0
 800c31c:	4620      	mov	r0, r4
 800c31e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c322:	f000 f955 	bl	800c5d0 <ucdr_advance_buffer>
 800c326:	2108      	movs	r1, #8
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 f8ad 	bl	800c488 <ucdr_check_buffer_available_for>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d147      	bne.n	800c3c2 <ucdr_deserialize_double+0xb6>
 800c332:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c336:	42be      	cmp	r6, r7
 800c338:	d93e      	bls.n	800c3b8 <ucdr_deserialize_double+0xac>
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	60a6      	str	r6, [r4, #8]
 800c33e:	1bf6      	subs	r6, r6, r7
 800c340:	4433      	add	r3, r6
 800c342:	f1c6 0908 	rsb	r9, r6, #8
 800c346:	6123      	str	r3, [r4, #16]
 800c348:	4649      	mov	r1, r9
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 f8a8 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800c350:	2800      	cmp	r0, #0
 800c352:	d063      	beq.n	800c41c <ucdr_deserialize_double+0x110>
 800c354:	7d23      	ldrb	r3, [r4, #20]
 800c356:	2b01      	cmp	r3, #1
 800c358:	f000 8083 	beq.w	800c462 <ucdr_deserialize_double+0x156>
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	702b      	strb	r3, [r5, #0]
 800c360:	79bb      	ldrb	r3, [r7, #6]
 800c362:	706b      	strb	r3, [r5, #1]
 800c364:	2e01      	cmp	r6, #1
 800c366:	d066      	beq.n	800c436 <ucdr_deserialize_double+0x12a>
 800c368:	797b      	ldrb	r3, [r7, #5]
 800c36a:	70ab      	strb	r3, [r5, #2]
 800c36c:	2e02      	cmp	r6, #2
 800c36e:	f000 8089 	beq.w	800c484 <ucdr_deserialize_double+0x178>
 800c372:	793b      	ldrb	r3, [r7, #4]
 800c374:	70eb      	strb	r3, [r5, #3]
 800c376:	2e03      	cmp	r6, #3
 800c378:	f000 8082 	beq.w	800c480 <ucdr_deserialize_double+0x174>
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	712b      	strb	r3, [r5, #4]
 800c380:	2e04      	cmp	r6, #4
 800c382:	d07b      	beq.n	800c47c <ucdr_deserialize_double+0x170>
 800c384:	78bb      	ldrb	r3, [r7, #2]
 800c386:	716b      	strb	r3, [r5, #5]
 800c388:	2e05      	cmp	r6, #5
 800c38a:	d075      	beq.n	800c478 <ucdr_deserialize_double+0x16c>
 800c38c:	787b      	ldrb	r3, [r7, #1]
 800c38e:	71ab      	strb	r3, [r5, #6]
 800c390:	2e06      	cmp	r6, #6
 800c392:	f105 0507 	add.w	r5, r5, #7
 800c396:	d062      	beq.n	800c45e <ucdr_deserialize_double+0x152>
 800c398:	783b      	ldrb	r3, [r7, #0]
 800c39a:	702b      	strb	r3, [r5, #0]
 800c39c:	6923      	ldr	r3, [r4, #16]
 800c39e:	68a2      	ldr	r2, [r4, #8]
 800c3a0:	7da0      	ldrb	r0, [r4, #22]
 800c3a2:	2108      	movs	r1, #8
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	444a      	add	r2, r9
 800c3a8:	1b9b      	subs	r3, r3, r6
 800c3aa:	7561      	strb	r1, [r4, #21]
 800c3ac:	60a2      	str	r2, [r4, #8]
 800c3ae:	6123      	str	r3, [r4, #16]
 800c3b0:	f080 0001 	eor.w	r0, r0, #1
 800c3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b8:	2108      	movs	r1, #8
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 f870 	bl	800c4a0 <ucdr_check_final_buffer_behavior>
 800c3c0:	b310      	cbz	r0, 800c408 <ucdr_deserialize_double+0xfc>
 800c3c2:	7d22      	ldrb	r2, [r4, #20]
 800c3c4:	68a3      	ldr	r3, [r4, #8]
 800c3c6:	2a01      	cmp	r2, #1
 800c3c8:	d023      	beq.n	800c412 <ucdr_deserialize_double+0x106>
 800c3ca:	79db      	ldrb	r3, [r3, #7]
 800c3cc:	702b      	strb	r3, [r5, #0]
 800c3ce:	68a3      	ldr	r3, [r4, #8]
 800c3d0:	799b      	ldrb	r3, [r3, #6]
 800c3d2:	706b      	strb	r3, [r5, #1]
 800c3d4:	68a3      	ldr	r3, [r4, #8]
 800c3d6:	795b      	ldrb	r3, [r3, #5]
 800c3d8:	70ab      	strb	r3, [r5, #2]
 800c3da:	68a3      	ldr	r3, [r4, #8]
 800c3dc:	791b      	ldrb	r3, [r3, #4]
 800c3de:	70eb      	strb	r3, [r5, #3]
 800c3e0:	68a3      	ldr	r3, [r4, #8]
 800c3e2:	78db      	ldrb	r3, [r3, #3]
 800c3e4:	712b      	strb	r3, [r5, #4]
 800c3e6:	68a3      	ldr	r3, [r4, #8]
 800c3e8:	789b      	ldrb	r3, [r3, #2]
 800c3ea:	716b      	strb	r3, [r5, #5]
 800c3ec:	68a3      	ldr	r3, [r4, #8]
 800c3ee:	785b      	ldrb	r3, [r3, #1]
 800c3f0:	71ab      	strb	r3, [r5, #6]
 800c3f2:	68a3      	ldr	r3, [r4, #8]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	71eb      	strb	r3, [r5, #7]
 800c3f8:	68a2      	ldr	r2, [r4, #8]
 800c3fa:	6923      	ldr	r3, [r4, #16]
 800c3fc:	3208      	adds	r2, #8
 800c3fe:	3308      	adds	r3, #8
 800c400:	2108      	movs	r1, #8
 800c402:	60a2      	str	r2, [r4, #8]
 800c404:	6123      	str	r3, [r4, #16]
 800c406:	7561      	strb	r1, [r4, #21]
 800c408:	7da0      	ldrb	r0, [r4, #22]
 800c40a:	f080 0001 	eor.w	r0, r0, #1
 800c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	606b      	str	r3, [r5, #4]
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	e7ed      	b.n	800c3f8 <ucdr_deserialize_double+0xec>
 800c41c:	68a2      	ldr	r2, [r4, #8]
 800c41e:	6923      	ldr	r3, [r4, #16]
 800c420:	7da0      	ldrb	r0, [r4, #22]
 800c422:	f884 8015 	strb.w	r8, [r4, #21]
 800c426:	1b92      	subs	r2, r2, r6
 800c428:	1b9b      	subs	r3, r3, r6
 800c42a:	60a2      	str	r2, [r4, #8]
 800c42c:	6123      	str	r3, [r4, #16]
 800c42e:	f080 0001 	eor.w	r0, r0, #1
 800c432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c436:	68a3      	ldr	r3, [r4, #8]
 800c438:	795b      	ldrb	r3, [r3, #5]
 800c43a:	70ab      	strb	r3, [r5, #2]
 800c43c:	3503      	adds	r5, #3
 800c43e:	68a3      	ldr	r3, [r4, #8]
 800c440:	791b      	ldrb	r3, [r3, #4]
 800c442:	f805 3b01 	strb.w	r3, [r5], #1
 800c446:	68a3      	ldr	r3, [r4, #8]
 800c448:	78db      	ldrb	r3, [r3, #3]
 800c44a:	f805 3b01 	strb.w	r3, [r5], #1
 800c44e:	68a3      	ldr	r3, [r4, #8]
 800c450:	789b      	ldrb	r3, [r3, #2]
 800c452:	f805 3b01 	strb.w	r3, [r5], #1
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	785b      	ldrb	r3, [r3, #1]
 800c45a:	f805 3b01 	strb.w	r3, [r5], #1
 800c45e:	68a7      	ldr	r7, [r4, #8]
 800c460:	e79a      	b.n	800c398 <ucdr_deserialize_double+0x8c>
 800c462:	4639      	mov	r1, r7
 800c464:	4632      	mov	r2, r6
 800c466:	4628      	mov	r0, r5
 800c468:	f00e fd11 	bl	801ae8e <memcpy>
 800c46c:	68a1      	ldr	r1, [r4, #8]
 800c46e:	464a      	mov	r2, r9
 800c470:	19a8      	adds	r0, r5, r6
 800c472:	f00e fd0c 	bl	801ae8e <memcpy>
 800c476:	e791      	b.n	800c39c <ucdr_deserialize_double+0x90>
 800c478:	3506      	adds	r5, #6
 800c47a:	e7ec      	b.n	800c456 <ucdr_deserialize_double+0x14a>
 800c47c:	3505      	adds	r5, #5
 800c47e:	e7e6      	b.n	800c44e <ucdr_deserialize_double+0x142>
 800c480:	3504      	adds	r5, #4
 800c482:	e7e0      	b.n	800c446 <ucdr_deserialize_double+0x13a>
 800c484:	3503      	adds	r5, #3
 800c486:	e7da      	b.n	800c43e <ucdr_deserialize_double+0x132>

0800c488 <ucdr_check_buffer_available_for>:
 800c488:	7d83      	ldrb	r3, [r0, #22]
 800c48a:	b93b      	cbnz	r3, 800c49c <ucdr_check_buffer_available_for+0x14>
 800c48c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c490:	440b      	add	r3, r1
 800c492:	4298      	cmp	r0, r3
 800c494:	bf34      	ite	cc
 800c496:	2000      	movcc	r0, #0
 800c498:	2001      	movcs	r0, #1
 800c49a:	4770      	bx	lr
 800c49c:	2000      	movs	r0, #0
 800c49e:	4770      	bx	lr

0800c4a0 <ucdr_check_final_buffer_behavior>:
 800c4a0:	7d83      	ldrb	r3, [r0, #22]
 800c4a2:	b943      	cbnz	r3, 800c4b6 <ucdr_check_final_buffer_behavior+0x16>
 800c4a4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c4a8:	4291      	cmp	r1, r2
 800c4aa:	b510      	push	{r4, lr}
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	d205      	bcs.n	800c4bc <ucdr_check_final_buffer_behavior+0x1c>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	bd10      	pop	{r4, pc}
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	4770      	bx	lr
 800c4bc:	6982      	ldr	r2, [r0, #24]
 800c4be:	b13a      	cbz	r2, 800c4d0 <ucdr_check_final_buffer_behavior+0x30>
 800c4c0:	69c1      	ldr	r1, [r0, #28]
 800c4c2:	4790      	blx	r2
 800c4c4:	f080 0301 	eor.w	r3, r0, #1
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	75a0      	strb	r0, [r4, #22]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	bd10      	pop	{r4, pc}
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	75a0      	strb	r0, [r4, #22]
 800c4d4:	e7fa      	b.n	800c4cc <ucdr_check_final_buffer_behavior+0x2c>
 800c4d6:	bf00      	nop

0800c4d8 <ucdr_set_on_full_buffer_callback>:
 800c4d8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop

0800c4e0 <ucdr_init_buffer_origin_offset_endian>:
 800c4e0:	b410      	push	{r4}
 800c4e2:	9c01      	ldr	r4, [sp, #4]
 800c4e4:	6001      	str	r1, [r0, #0]
 800c4e6:	440a      	add	r2, r1
 800c4e8:	6042      	str	r2, [r0, #4]
 800c4ea:	190a      	adds	r2, r1, r4
 800c4ec:	441c      	add	r4, r3
 800c4ee:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c4f2:	6082      	str	r2, [r0, #8]
 800c4f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c4f8:	7503      	strb	r3, [r0, #20]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c500:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c504:	7542      	strb	r2, [r0, #21]
 800c506:	7582      	strb	r2, [r0, #22]
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop

0800c50c <ucdr_init_buffer_origin_offset>:
 800c50c:	b510      	push	{r4, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	9c04      	ldr	r4, [sp, #16]
 800c512:	9400      	str	r4, [sp, #0]
 800c514:	2401      	movs	r4, #1
 800c516:	9401      	str	r4, [sp, #4]
 800c518:	f7ff ffe2 	bl	800c4e0 <ucdr_init_buffer_origin_offset_endian>
 800c51c:	b002      	add	sp, #8
 800c51e:	bd10      	pop	{r4, pc}

0800c520 <ucdr_init_buffer_origin>:
 800c520:	b510      	push	{r4, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	2400      	movs	r4, #0
 800c526:	9400      	str	r4, [sp, #0]
 800c528:	f7ff fff0 	bl	800c50c <ucdr_init_buffer_origin_offset>
 800c52c:	b002      	add	sp, #8
 800c52e:	bd10      	pop	{r4, pc}

0800c530 <ucdr_init_buffer>:
 800c530:	2300      	movs	r3, #0
 800c532:	f7ff bff5 	b.w	800c520 <ucdr_init_buffer_origin>
 800c536:	bf00      	nop

0800c538 <ucdr_alignment>:
 800c538:	fbb0 f3f1 	udiv	r3, r0, r1
 800c53c:	fb03 0011 	mls	r0, r3, r1, r0
 800c540:	1a08      	subs	r0, r1, r0
 800c542:	3901      	subs	r1, #1
 800c544:	4008      	ands	r0, r1
 800c546:	4770      	bx	lr

0800c548 <ucdr_buffer_alignment>:
 800c548:	7d43      	ldrb	r3, [r0, #21]
 800c54a:	428b      	cmp	r3, r1
 800c54c:	d208      	bcs.n	800c560 <ucdr_buffer_alignment+0x18>
 800c54e:	6900      	ldr	r0, [r0, #16]
 800c550:	fbb0 f3f1 	udiv	r3, r0, r1
 800c554:	fb01 0013 	mls	r0, r1, r3, r0
 800c558:	1a08      	subs	r0, r1, r0
 800c55a:	3901      	subs	r1, #1
 800c55c:	4008      	ands	r0, r1
 800c55e:	4770      	bx	lr
 800c560:	2000      	movs	r0, #0
 800c562:	4770      	bx	lr

0800c564 <ucdr_align_to>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4604      	mov	r4, r0
 800c568:	460d      	mov	r5, r1
 800c56a:	f7ff ffed 	bl	800c548 <ucdr_buffer_alignment>
 800c56e:	68a3      	ldr	r3, [r4, #8]
 800c570:	6861      	ldr	r1, [r4, #4]
 800c572:	6922      	ldr	r2, [r4, #16]
 800c574:	7565      	strb	r5, [r4, #21]
 800c576:	4403      	add	r3, r0
 800c578:	428b      	cmp	r3, r1
 800c57a:	bf28      	it	cs
 800c57c:	460b      	movcs	r3, r1
 800c57e:	4402      	add	r2, r0
 800c580:	60a3      	str	r3, [r4, #8]
 800c582:	6122      	str	r2, [r4, #16]
 800c584:	bd38      	pop	{r3, r4, r5, pc}
 800c586:	bf00      	nop

0800c588 <ucdr_buffer_length>:
 800c588:	6882      	ldr	r2, [r0, #8]
 800c58a:	6800      	ldr	r0, [r0, #0]
 800c58c:	1a10      	subs	r0, r2, r0
 800c58e:	4770      	bx	lr

0800c590 <ucdr_buffer_remaining>:
 800c590:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c594:	1a10      	subs	r0, r2, r0
 800c596:	4770      	bx	lr

0800c598 <ucdr_check_final_buffer_behavior_array>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	7d83      	ldrb	r3, [r0, #22]
 800c59c:	b963      	cbnz	r3, 800c5b8 <ucdr_check_final_buffer_behavior_array+0x20>
 800c59e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	d308      	bcc.n	800c5bc <ucdr_check_final_buffer_behavior_array+0x24>
 800c5aa:	b139      	cbz	r1, 800c5bc <ucdr_check_final_buffer_behavior_array+0x24>
 800c5ac:	6983      	ldr	r3, [r0, #24]
 800c5ae:	b163      	cbz	r3, 800c5ca <ucdr_check_final_buffer_behavior_array+0x32>
 800c5b0:	69c1      	ldr	r1, [r0, #28]
 800c5b2:	4798      	blx	r3
 800c5b4:	75a0      	strb	r0, [r4, #22]
 800c5b6:	b108      	cbz	r0, 800c5bc <ucdr_check_final_buffer_behavior_array+0x24>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f7ff ffe7 	bl	800c590 <ucdr_buffer_remaining>
 800c5c2:	42a8      	cmp	r0, r5
 800c5c4:	bf28      	it	cs
 800c5c6:	4628      	movcs	r0, r5
 800c5c8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	7583      	strb	r3, [r0, #22]
 800c5ce:	e7f3      	b.n	800c5b8 <ucdr_check_final_buffer_behavior_array+0x20>

0800c5d0 <ucdr_advance_buffer>:
 800c5d0:	b538      	push	{r3, r4, r5, lr}
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	460d      	mov	r5, r1
 800c5d6:	f7ff ff57 	bl	800c488 <ucdr_check_buffer_available_for>
 800c5da:	b178      	cbz	r0, 800c5fc <ucdr_advance_buffer+0x2c>
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	68a2      	ldr	r2, [r4, #8]
 800c5e0:	442b      	add	r3, r5
 800c5e2:	6123      	str	r3, [r4, #16]
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	442a      	add	r2, r5
 800c5e8:	7563      	strb	r3, [r4, #21]
 800c5ea:	60a2      	str	r2, [r4, #8]
 800c5ec:	bd38      	pop	{r3, r4, r5, pc}
 800c5ee:	68a2      	ldr	r2, [r4, #8]
 800c5f0:	6923      	ldr	r3, [r4, #16]
 800c5f2:	4402      	add	r2, r0
 800c5f4:	4403      	add	r3, r0
 800c5f6:	1a2d      	subs	r5, r5, r0
 800c5f8:	60a2      	str	r2, [r4, #8]
 800c5fa:	6123      	str	r3, [r4, #16]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	4629      	mov	r1, r5
 800c600:	4620      	mov	r0, r4
 800c602:	f7ff ffc9 	bl	800c598 <ucdr_check_final_buffer_behavior_array>
 800c606:	2800      	cmp	r0, #0
 800c608:	d1f1      	bne.n	800c5ee <ucdr_advance_buffer+0x1e>
 800c60a:	2301      	movs	r3, #1
 800c60c:	7563      	strb	r3, [r4, #21]
 800c60e:	bd38      	pop	{r3, r4, r5, pc}

0800c610 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped>:
 800c610:	4b04      	ldr	r3, [pc, #16]	@ (800c624 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x14>)
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	b10a      	cbz	r2, 800c61a <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0xa>
 800c616:	4803      	ldr	r0, [pc, #12]	@ (800c624 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x14>)
 800c618:	4770      	bx	lr
 800c61a:	4a03      	ldr	r2, [pc, #12]	@ (800c628 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x18>)
 800c61c:	4801      	ldr	r0, [pc, #4]	@ (800c624 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x14>)
 800c61e:	6812      	ldr	r2, [r2, #0]
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	4770      	bx	lr
 800c624:	200001fc 	.word	0x200001fc
 800c628:	200004c8 	.word	0x200004c8

0800c62c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped>:
 800c62c:	4a02      	ldr	r2, [pc, #8]	@ (800c638 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0xc>)
 800c62e:	4b03      	ldr	r3, [pc, #12]	@ (800c63c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x10>)
 800c630:	6812      	ldr	r2, [r2, #0]
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	200004c8 	.word	0x200004c8
 800c63c:	200001fc 	.word	0x200001fc

0800c640 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges>:
 800c640:	4b04      	ldr	r3, [pc, #16]	@ (800c654 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x14>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	b10a      	cbz	r2, 800c64a <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0xa>
 800c646:	4803      	ldr	r0, [pc, #12]	@ (800c654 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x14>)
 800c648:	4770      	bx	lr
 800c64a:	4a03      	ldr	r2, [pc, #12]	@ (800c658 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x18>)
 800c64c:	4801      	ldr	r0, [pc, #4]	@ (800c654 <rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x14>)
 800c64e:	6812      	ldr	r2, [r2, #0]
 800c650:	601a      	str	r2, [r3, #0]
 800c652:	4770      	bx	lr
 800c654:	2000021c 	.word	0x2000021c
 800c658:	200004c8 	.word	0x200004c8

0800c65c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges>:
 800c65c:	4a02      	ldr	r2, [pc, #8]	@ (800c668 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0xc>)
 800c65e:	4b03      	ldr	r3, [pc, #12]	@ (800c66c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x10>)
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	200004c8 	.word	0x200004c8
 800c66c:	2000021c 	.word	0x2000021c

0800c670 <mobi_interfaces__msg__EncodersStamped__rosidl_typesupport_introspection_c__EncodersStamped_init_function>:
 800c670:	f007 b80c 	b.w	801368c <mobi_interfaces__msg__EncodersStamped__init>

0800c674 <mobi_interfaces__msg__EncodersStamped__rosidl_typesupport_introspection_c__EncodersStamped_fini_function>:
 800c674:	f007 b82a 	b.w	80136cc <mobi_interfaces__msg__EncodersStamped__fini>

0800c678 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	f002 ff7d 	bl	800f578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c67e:	4c07      	ldr	r4, [pc, #28]	@ (800c69c <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x24>)
 800c680:	60e0      	str	r0, [r4, #12]
 800c682:	f007 f947 	bl	8013914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders>
 800c686:	4b06      	ldr	r3, [pc, #24]	@ (800c6a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x28>)
 800c688:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	b10a      	cbz	r2, 800c692 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x1a>
 800c68e:	4804      	ldr	r0, [pc, #16]	@ (800c6a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x28>)
 800c690:	bd10      	pop	{r4, pc}
 800c692:	4a04      	ldr	r2, [pc, #16]	@ (800c6a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x2c>)
 800c694:	4802      	ldr	r0, [pc, #8]	@ (800c6a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x28>)
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	bd10      	pop	{r4, pc}
 800c69c:	20000254 	.word	0x20000254
 800c6a0:	2000023c 	.word	0x2000023c
 800c6a4:	200004cc 	.word	0x200004cc

0800c6a8 <mobi_interfaces__msg__UltraRanges__rosidl_typesupport_introspection_c__UltraRanges_init_function>:
 800c6a8:	f007 b890 	b.w	80137cc <mobi_interfaces__msg__UltraRanges__init>

0800c6ac <mobi_interfaces__msg__UltraRanges__rosidl_typesupport_introspection_c__UltraRanges_fini_function>:
 800c6ac:	f007 b912 	b.w	80138d4 <mobi_interfaces__msg__UltraRanges__fini>

0800c6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	f002 fe7b 	bl	800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c6b6:	4c0f      	ldr	r4, [pc, #60]	@ (800c6f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x44>)
 800c6b8:	60e0      	str	r0, [r4, #12]
 800c6ba:	f002 fe77 	bl	800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c6be:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c6c0:	f002 fe74 	bl	800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c6c4:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c6c8:	f002 fe70 	bl	800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c6cc:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c6d0:	f002 fe6c 	bl	800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c6d4:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
 800c6d8:	f002 fe68 	bl	800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c6dc:	4b06      	ldr	r3, [pc, #24]	@ (800c6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x48>)
 800c6de:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	b10a      	cbz	r2, 800c6ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x3a>
 800c6e6:	4804      	ldr	r0, [pc, #16]	@ (800c6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x48>)
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	4a04      	ldr	r2, [pc, #16]	@ (800c6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x4c>)
 800c6ec:	4802      	ldr	r0, [pc, #8]	@ (800c6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x48>)
 800c6ee:	6812      	ldr	r2, [r2, #0]
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	bd10      	pop	{r4, pc}
 800c6f4:	200002e4 	.word	0x200002e4
 800c6f8:	200002cc 	.word	0x200002cc
 800c6fc:	200004cc 	.word	0x200004cc

0800c700 <get_serialized_size_mobi_interfaces__msg__EncodersStamped>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	4604      	mov	r4, r0
 800c704:	b148      	cbz	r0, 800c71a <get_serialized_size_mobi_interfaces__msg__EncodersStamped+0x1a>
 800c706:	460d      	mov	r5, r1
 800c708:	f002 ff5a 	bl	800f5c0 <get_serialized_size_std_msgs__msg__Header>
 800c70c:	4606      	mov	r6, r0
 800c70e:	1829      	adds	r1, r5, r0
 800c710:	f104 0014 	add.w	r0, r4, #20
 800c714:	f007 f90c 	bl	8013930 <get_serialized_size_mobi_interfaces__msg__Encoders>
 800c718:	4430      	add	r0, r6
 800c71a:	bd70      	pop	{r4, r5, r6, pc}

0800c71c <_EncodersStamped__cdr_deserialize>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	460c      	mov	r4, r1
 800c720:	b189      	cbz	r1, 800c746 <_EncodersStamped__cdr_deserialize+0x2a>
 800c722:	4605      	mov	r5, r0
 800c724:	f002 ffce 	bl	800f6c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c728:	6843      	ldr	r3, [r0, #4]
 800c72a:	4621      	mov	r1, r4
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	4628      	mov	r0, r5
 800c730:	4798      	blx	r3
 800c732:	f007 f9a3 	bl	8013a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders>
 800c736:	6843      	ldr	r3, [r0, #4]
 800c738:	f104 0114 	add.w	r1, r4, #20
 800c73c:	4628      	mov	r0, r5
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c744:	4718      	bx	r3
 800c746:	4608      	mov	r0, r1
 800c748:	bd70      	pop	{r4, r5, r6, pc}
 800c74a:	bf00      	nop

0800c74c <_EncodersStamped__cdr_serialize>:
 800c74c:	b198      	cbz	r0, 800c776 <_EncodersStamped__cdr_serialize+0x2a>
 800c74e:	b570      	push	{r4, r5, r6, lr}
 800c750:	460d      	mov	r5, r1
 800c752:	4604      	mov	r4, r0
 800c754:	f002 ffb6 	bl	800f6c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c758:	6843      	ldr	r3, [r0, #4]
 800c75a:	4629      	mov	r1, r5
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	4620      	mov	r0, r4
 800c760:	4798      	blx	r3
 800c762:	f007 f98b 	bl	8013a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders>
 800c766:	6843      	ldr	r3, [r0, #4]
 800c768:	4629      	mov	r1, r5
 800c76a:	f104 0014 	add.w	r0, r4, #20
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c774:	4718      	bx	r3
 800c776:	4770      	bx	lr

0800c778 <_EncodersStamped__get_serialized_size>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4604      	mov	r4, r0
 800c77c:	b148      	cbz	r0, 800c792 <_EncodersStamped__get_serialized_size+0x1a>
 800c77e:	2100      	movs	r1, #0
 800c780:	f002 ff1e 	bl	800f5c0 <get_serialized_size_std_msgs__msg__Header>
 800c784:	4605      	mov	r5, r0
 800c786:	4601      	mov	r1, r0
 800c788:	f104 0014 	add.w	r0, r4, #20
 800c78c:	f007 f8d0 	bl	8013930 <get_serialized_size_mobi_interfaces__msg__Encoders>
 800c790:	4428      	add	r0, r5
 800c792:	bd38      	pop	{r3, r4, r5, pc}

0800c794 <_EncodersStamped__max_serialized_size>:
 800c794:	b510      	push	{r4, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	2301      	movs	r3, #1
 800c79a:	2100      	movs	r1, #0
 800c79c:	f10d 0007 	add.w	r0, sp, #7
 800c7a0:	f88d 3007 	strb.w	r3, [sp, #7]
 800c7a4:	f002 ff84 	bl	800f6b0 <max_serialized_size_std_msgs__msg__Header>
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	4601      	mov	r1, r0
 800c7ac:	f10d 0007 	add.w	r0, sp, #7
 800c7b0:	f007 f944 	bl	8013a3c <max_serialized_size_mobi_interfaces__msg__Encoders>
 800c7b4:	4420      	add	r0, r4
 800c7b6:	b002      	add	sp, #8
 800c7b8:	bd10      	pop	{r4, pc}
 800c7ba:	bf00      	nop

0800c7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped>:
 800c7bc:	4800      	ldr	r0, [pc, #0]	@ (800c7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__EncodersStamped+0x4>)
 800c7be:	4770      	bx	lr
 800c7c0:	2000044c 	.word	0x2000044c

0800c7c4 <get_serialized_size_mobi_interfaces__msg__UltraRanges>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	b310      	cbz	r0, 800c810 <get_serialized_size_mobi_interfaces__msg__UltraRanges+0x4c>
 800c7ca:	460e      	mov	r6, r1
 800c7cc:	f002 fe30 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c7d0:	1835      	adds	r5, r6, r0
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800c7d8:	f002 fe2a 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c7dc:	4405      	add	r5, r0
 800c7de:	4629      	mov	r1, r5
 800c7e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c7e4:	f002 fe24 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c7e8:	4405      	add	r5, r0
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 800c7f0:	f002 fe1e 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c7f4:	4405      	add	r5, r0
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 800c7fc:	f002 fe18 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c800:	4405      	add	r5, r0
 800c802:	4629      	mov	r1, r5
 800c804:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 800c808:	f002 fe12 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c80c:	1b80      	subs	r0, r0, r6
 800c80e:	4428      	add	r0, r5
 800c810:	bd70      	pop	{r4, r5, r6, pc}
 800c812:	bf00      	nop

0800c814 <_UltraRanges__cdr_deserialize>:
 800c814:	b570      	push	{r4, r5, r6, lr}
 800c816:	460c      	mov	r4, r1
 800c818:	2900      	cmp	r1, #0
 800c81a:	d031      	beq.n	800c880 <_UltraRanges__cdr_deserialize+0x6c>
 800c81c:	4605      	mov	r5, r0
 800c81e:	f002 fea3 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c822:	6843      	ldr	r3, [r0, #4]
 800c824:	4621      	mov	r1, r4
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	4628      	mov	r0, r5
 800c82a:	4798      	blx	r3
 800c82c:	f002 fe9c 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c830:	6843      	ldr	r3, [r0, #4]
 800c832:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	4628      	mov	r0, r5
 800c83a:	4798      	blx	r3
 800c83c:	f002 fe94 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c840:	6843      	ldr	r3, [r0, #4]
 800c842:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	4628      	mov	r0, r5
 800c84a:	4798      	blx	r3
 800c84c:	f002 fe8c 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c850:	6843      	ldr	r3, [r0, #4]
 800c852:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	4628      	mov	r0, r5
 800c85a:	4798      	blx	r3
 800c85c:	f002 fe84 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c860:	6843      	ldr	r3, [r0, #4]
 800c862:	f104 01b0 	add.w	r1, r4, #176	@ 0xb0
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	4628      	mov	r0, r5
 800c86a:	4798      	blx	r3
 800c86c:	f002 fe7c 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c870:	6843      	ldr	r3, [r0, #4]
 800c872:	f104 01dc 	add.w	r1, r4, #220	@ 0xdc
 800c876:	4628      	mov	r0, r5
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c87e:	4718      	bx	r3
 800c880:	4608      	mov	r0, r1
 800c882:	bd70      	pop	{r4, r5, r6, pc}

0800c884 <_UltraRanges__cdr_serialize>:
 800c884:	2800      	cmp	r0, #0
 800c886:	d033      	beq.n	800c8f0 <_UltraRanges__cdr_serialize+0x6c>
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	460d      	mov	r5, r1
 800c88c:	4604      	mov	r4, r0
 800c88e:	f002 fe6b 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c892:	6843      	ldr	r3, [r0, #4]
 800c894:	4629      	mov	r1, r5
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	4620      	mov	r0, r4
 800c89a:	4798      	blx	r3
 800c89c:	f002 fe64 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c8a0:	6843      	ldr	r3, [r0, #4]
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800c8aa:	4798      	blx	r3
 800c8ac:	f002 fe5c 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c8b0:	6843      	ldr	r3, [r0, #4]
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c8ba:	4798      	blx	r3
 800c8bc:	f002 fe54 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c8c0:	6843      	ldr	r3, [r0, #4]
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 800c8ca:	4798      	blx	r3
 800c8cc:	f002 fe4c 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c8d0:	6843      	ldr	r3, [r0, #4]
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 800c8da:	4798      	blx	r3
 800c8dc:	f002 fe44 	bl	800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 800c8e0:	6843      	ldr	r3, [r0, #4]
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8ee:	4718      	bx	r3
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop

0800c8f4 <_UltraRanges__get_serialized_size>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	b308      	cbz	r0, 800c93e <_UltraRanges__get_serialized_size+0x4a>
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	f002 fd98 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c900:	4601      	mov	r1, r0
 800c902:	4604      	mov	r4, r0
 800c904:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 800c908:	f002 fd92 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c90c:	4404      	add	r4, r0
 800c90e:	4621      	mov	r1, r4
 800c910:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 800c914:	f002 fd8c 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c918:	4404      	add	r4, r0
 800c91a:	4621      	mov	r1, r4
 800c91c:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 800c920:	f002 fd86 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c924:	4404      	add	r4, r0
 800c926:	4621      	mov	r1, r4
 800c928:	f105 00b0 	add.w	r0, r5, #176	@ 0xb0
 800c92c:	f002 fd80 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c930:	4404      	add	r4, r0
 800c932:	4621      	mov	r1, r4
 800c934:	f105 00dc 	add.w	r0, r5, #220	@ 0xdc
 800c938:	f002 fd7a 	bl	800f430 <get_serialized_size_sensor_msgs__msg__Range>
 800c93c:	4420      	add	r0, r4
 800c93e:	bd38      	pop	{r3, r4, r5, pc}

0800c940 <_UltraRanges__max_serialized_size>:
 800c940:	b510      	push	{r4, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	2301      	movs	r3, #1
 800c946:	2100      	movs	r1, #0
 800c948:	f10d 0007 	add.w	r0, sp, #7
 800c94c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c950:	f002 fdd2 	bl	800f4f8 <max_serialized_size_sensor_msgs__msg__Range>
 800c954:	4601      	mov	r1, r0
 800c956:	4604      	mov	r4, r0
 800c958:	f10d 0007 	add.w	r0, sp, #7
 800c95c:	f002 fdcc 	bl	800f4f8 <max_serialized_size_sensor_msgs__msg__Range>
 800c960:	4404      	add	r4, r0
 800c962:	4621      	mov	r1, r4
 800c964:	f10d 0007 	add.w	r0, sp, #7
 800c968:	f002 fdc6 	bl	800f4f8 <max_serialized_size_sensor_msgs__msg__Range>
 800c96c:	4404      	add	r4, r0
 800c96e:	4621      	mov	r1, r4
 800c970:	f10d 0007 	add.w	r0, sp, #7
 800c974:	f002 fdc0 	bl	800f4f8 <max_serialized_size_sensor_msgs__msg__Range>
 800c978:	4404      	add	r4, r0
 800c97a:	4621      	mov	r1, r4
 800c97c:	f10d 0007 	add.w	r0, sp, #7
 800c980:	f002 fdba 	bl	800f4f8 <max_serialized_size_sensor_msgs__msg__Range>
 800c984:	4404      	add	r4, r0
 800c986:	4621      	mov	r1, r4
 800c988:	f10d 0007 	add.w	r0, sp, #7
 800c98c:	f002 fdb4 	bl	800f4f8 <max_serialized_size_sensor_msgs__msg__Range>
 800c990:	4420      	add	r0, r4
 800c992:	b002      	add	sp, #8
 800c994:	bd10      	pop	{r4, pc}
 800c996:	bf00      	nop

0800c998 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges>:
 800c998:	4800      	ldr	r0, [pc, #0]	@ (800c99c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__UltraRanges+0x4>)
 800c99a:	4770      	bx	lr
 800c99c:	20000480 	.word	0x20000480

0800c9a0 <rcl_get_zero_initialized_init_options>:
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	4770      	bx	lr

0800c9a4 <rcl_init_options_init>:
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	b570      	push	{r4, r5, r6, lr}
 800c9a8:	b09e      	sub	sp, #120	@ 0x78
 800c9aa:	ad23      	add	r5, sp, #140	@ 0x8c
 800c9ac:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d046      	beq.n	800ca42 <rcl_init_options_init+0x9e>
 800c9b4:	6803      	ldr	r3, [r0, #0]
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	b133      	cbz	r3, 800c9c8 <rcl_init_options_init+0x24>
 800c9ba:	2564      	movs	r5, #100	@ 0x64
 800c9bc:	4628      	mov	r0, r5
 800c9be:	b01e      	add	sp, #120	@ 0x78
 800c9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9c4:	b004      	add	sp, #16
 800c9c6:	4770      	bx	lr
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f001 f927 	bl	800dc1c <rcutils_allocator_is_valid>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d037      	beq.n	800ca42 <rcl_init_options_init+0x9e>
 800c9d2:	46ae      	mov	lr, r5
 800c9d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c9d8:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800c9dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9e0:	f8de 3000 	ldr.w	r3, [lr]
 800c9e4:	f8cc 3000 	str.w	r3, [ip]
 800c9e8:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800c9ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9ec:	2070      	movs	r0, #112	@ 0x70
 800c9ee:	4798      	blx	r3
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	6020      	str	r0, [r4, #0]
 800c9f4:	b338      	cbz	r0, 800ca46 <rcl_init_options_init+0xa2>
 800c9f6:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800c9fa:	4686      	mov	lr, r0
 800c9fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca04:	f8dc 3000 	ldr.w	r3, [ip]
 800ca08:	f8ce 3000 	str.w	r3, [lr]
 800ca0c:	a802      	add	r0, sp, #8
 800ca0e:	f001 f99b 	bl	800dd48 <rmw_get_zero_initialized_init_options>
 800ca12:	2258      	movs	r2, #88	@ 0x58
 800ca14:	a902      	add	r1, sp, #8
 800ca16:	f106 0018 	add.w	r0, r6, #24
 800ca1a:	f00e fa38 	bl	801ae8e <memcpy>
 800ca1e:	ab26      	add	r3, sp, #152	@ 0x98
 800ca20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ca24:	6826      	ldr	r6, [r4, #0]
 800ca26:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ca2a:	f106 0018 	add.w	r0, r6, #24
 800ca2e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ca32:	f001 fa19 	bl	800de68 <rmw_init_options_init>
 800ca36:	4605      	mov	r5, r0
 800ca38:	b938      	cbnz	r0, 800ca4a <rcl_init_options_init+0xa6>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800ca40:	e7bc      	b.n	800c9bc <rcl_init_options_init+0x18>
 800ca42:	250b      	movs	r5, #11
 800ca44:	e7ba      	b.n	800c9bc <rcl_init_options_init+0x18>
 800ca46:	250a      	movs	r5, #10
 800ca48:	e7b8      	b.n	800c9bc <rcl_init_options_init+0x18>
 800ca4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ca4c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800ca4e:	6820      	ldr	r0, [r4, #0]
 800ca50:	4798      	blx	r3
 800ca52:	4628      	mov	r0, r5
 800ca54:	f007 f8e6 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 800ca58:	4605      	mov	r5, r0
 800ca5a:	e7af      	b.n	800c9bc <rcl_init_options_init+0x18>

0800ca5c <rcl_init_options_fini>:
 800ca5c:	b530      	push	{r4, r5, lr}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	b1f0      	cbz	r0, 800caa0 <rcl_init_options_fini+0x44>
 800ca62:	6803      	ldr	r3, [r0, #0]
 800ca64:	4604      	mov	r4, r0
 800ca66:	b1db      	cbz	r3, 800caa0 <rcl_init_options_fini+0x44>
 800ca68:	469c      	mov	ip, r3
 800ca6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca6e:	f10d 0e04 	add.w	lr, sp, #4
 800ca72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca76:	f8dc 3000 	ldr.w	r3, [ip]
 800ca7a:	f8ce 3000 	str.w	r3, [lr]
 800ca7e:	a801      	add	r0, sp, #4
 800ca80:	f001 f8cc 	bl	800dc1c <rcutils_allocator_is_valid>
 800ca84:	b160      	cbz	r0, 800caa0 <rcl_init_options_fini+0x44>
 800ca86:	6820      	ldr	r0, [r4, #0]
 800ca88:	3018      	adds	r0, #24
 800ca8a:	f001 faaf 	bl	800dfec <rmw_init_options_fini>
 800ca8e:	4605      	mov	r5, r0
 800ca90:	b950      	cbnz	r0, 800caa8 <rcl_init_options_fini+0x4c>
 800ca92:	6820      	ldr	r0, [r4, #0]
 800ca94:	9b02      	ldr	r3, [sp, #8]
 800ca96:	9905      	ldr	r1, [sp, #20]
 800ca98:	4798      	blx	r3
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	b007      	add	sp, #28
 800ca9e:	bd30      	pop	{r4, r5, pc}
 800caa0:	250b      	movs	r5, #11
 800caa2:	4628      	mov	r0, r5
 800caa4:	b007      	add	sp, #28
 800caa6:	bd30      	pop	{r4, r5, pc}
 800caa8:	f007 f8bc 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 800caac:	4605      	mov	r5, r0
 800caae:	e7f8      	b.n	800caa2 <rcl_init_options_fini+0x46>

0800cab0 <rcl_init_options_copy>:
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	b09d      	sub	sp, #116	@ 0x74
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d04a      	beq.n	800cb4e <rcl_init_options_copy+0x9e>
 800cab8:	4604      	mov	r4, r0
 800caba:	6800      	ldr	r0, [r0, #0]
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d046      	beq.n	800cb4e <rcl_init_options_copy+0x9e>
 800cac0:	460d      	mov	r5, r1
 800cac2:	f001 f8ab 	bl	800dc1c <rcutils_allocator_is_valid>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d041      	beq.n	800cb4e <rcl_init_options_copy+0x9e>
 800caca:	2d00      	cmp	r5, #0
 800cacc:	d03f      	beq.n	800cb4e <rcl_init_options_copy+0x9e>
 800cace:	682b      	ldr	r3, [r5, #0]
 800cad0:	b11b      	cbz	r3, 800cada <rcl_init_options_copy+0x2a>
 800cad2:	2464      	movs	r4, #100	@ 0x64
 800cad4:	4620      	mov	r0, r4
 800cad6:	b01d      	add	sp, #116	@ 0x74
 800cad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cada:	6826      	ldr	r6, [r4, #0]
 800cadc:	46b6      	mov	lr, r6
 800cade:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cae2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800cae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800caea:	f8de 3000 	ldr.w	r3, [lr]
 800caee:	6837      	ldr	r7, [r6, #0]
 800caf0:	f8cc 3000 	str.w	r3, [ip]
 800caf4:	4619      	mov	r1, r3
 800caf6:	2070      	movs	r0, #112	@ 0x70
 800caf8:	47b8      	blx	r7
 800cafa:	4606      	mov	r6, r0
 800cafc:	6028      	str	r0, [r5, #0]
 800cafe:	b350      	cbz	r0, 800cb56 <rcl_init_options_copy+0xa6>
 800cb00:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800cb04:	4686      	mov	lr, r0
 800cb06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb0e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb12:	f8ce 3000 	str.w	r3, [lr]
 800cb16:	4668      	mov	r0, sp
 800cb18:	f001 f916 	bl	800dd48 <rmw_get_zero_initialized_init_options>
 800cb1c:	2258      	movs	r2, #88	@ 0x58
 800cb1e:	4669      	mov	r1, sp
 800cb20:	f106 0018 	add.w	r0, r6, #24
 800cb24:	f00e f9b3 	bl	801ae8e <memcpy>
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	6829      	ldr	r1, [r5, #0]
 800cb2c:	3018      	adds	r0, #24
 800cb2e:	3118      	adds	r1, #24
 800cb30:	f001 f9fc 	bl	800df2c <rmw_init_options_copy>
 800cb34:	4604      	mov	r4, r0
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d0cc      	beq.n	800cad4 <rcl_init_options_copy+0x24>
 800cb3a:	f001 f87d 	bl	800dc38 <rcutils_get_error_string>
 800cb3e:	f001 f893 	bl	800dc68 <rcutils_reset_error>
 800cb42:	4628      	mov	r0, r5
 800cb44:	f7ff ff8a 	bl	800ca5c <rcl_init_options_fini>
 800cb48:	b138      	cbz	r0, 800cb5a <rcl_init_options_copy+0xaa>
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	e7c2      	b.n	800cad4 <rcl_init_options_copy+0x24>
 800cb4e:	240b      	movs	r4, #11
 800cb50:	4620      	mov	r0, r4
 800cb52:	b01d      	add	sp, #116	@ 0x74
 800cb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb56:	240a      	movs	r4, #10
 800cb58:	e7bc      	b.n	800cad4 <rcl_init_options_copy+0x24>
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	b01d      	add	sp, #116	@ 0x74
 800cb5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb62:	f007 b85f 	b.w	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 800cb66:	bf00      	nop

0800cb68 <rcl_init_options_set_domain_id>:
 800cb68:	b120      	cbz	r0, 800cb74 <rcl_init_options_set_domain_id+0xc>
 800cb6a:	6803      	ldr	r3, [r0, #0]
 800cb6c:	b113      	cbz	r3, 800cb74 <rcl_init_options_set_domain_id+0xc>
 800cb6e:	6259      	str	r1, [r3, #36]	@ 0x24
 800cb70:	2000      	movs	r0, #0
 800cb72:	4770      	bx	lr
 800cb74:	200b      	movs	r0, #11
 800cb76:	4770      	bx	lr

0800cb78 <rcl_get_zero_initialized_publisher>:
 800cb78:	4b01      	ldr	r3, [pc, #4]	@ (800cb80 <rcl_get_zero_initialized_publisher+0x8>)
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	0801e38c 	.word	0x0801e38c

0800cb84 <rcl_publisher_init>:
 800cb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb88:	b088      	sub	sp, #32
 800cb8a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	d06a      	beq.n	800cc66 <rcl_publisher_init+0xe2>
 800cb90:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800cb94:	4604      	mov	r4, r0
 800cb96:	4648      	mov	r0, r9
 800cb98:	460e      	mov	r6, r1
 800cb9a:	4690      	mov	r8, r2
 800cb9c:	461f      	mov	r7, r3
 800cb9e:	f001 f83d 	bl	800dc1c <rcutils_allocator_is_valid>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d05f      	beq.n	800cc66 <rcl_publisher_init+0xe2>
 800cba6:	2c00      	cmp	r4, #0
 800cba8:	d05d      	beq.n	800cc66 <rcl_publisher_init+0xe2>
 800cbaa:	f8d4 a000 	ldr.w	sl, [r4]
 800cbae:	f1ba 0f00 	cmp.w	sl, #0
 800cbb2:	d004      	beq.n	800cbbe <rcl_publisher_init+0x3a>
 800cbb4:	2764      	movs	r7, #100	@ 0x64
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	b008      	add	sp, #32
 800cbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f007 fb54 	bl	801426c <rcl_node_is_valid>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d053      	beq.n	800cc70 <rcl_publisher_init+0xec>
 800cbc8:	f1b8 0f00 	cmp.w	r8, #0
 800cbcc:	d04b      	beq.n	800cc66 <rcl_publisher_init+0xe2>
 800cbce:	2f00      	cmp	r7, #0
 800cbd0:	d049      	beq.n	800cc66 <rcl_publisher_init+0xe2>
 800cbd2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800cbd6:	aa07      	add	r2, sp, #28
 800cbd8:	9205      	str	r2, [sp, #20]
 800cbda:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cbde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbe2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cbe6:	f8cd a01c 	str.w	sl, [sp, #28]
 800cbea:	4639      	mov	r1, r7
 800cbec:	e899 000c 	ldmia.w	r9, {r2, r3}
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f007 fbcb 	bl	801438c <rcl_node_resolve_name>
 800cbf6:	4607      	mov	r7, r0
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d150      	bne.n	800cc9e <rcl_publisher_init+0x11a>
 800cbfc:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800cc00:	21c8      	movs	r1, #200	@ 0xc8
 800cc02:	2001      	movs	r0, #1
 800cc04:	4798      	blx	r3
 800cc06:	6020      	str	r0, [r4, #0]
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d04e      	beq.n	800ccaa <rcl_publisher_init+0x126>
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f007 fb4f 	bl	80142b0 <rcl_node_get_rmw_handle>
 800cc12:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	9a07      	ldr	r2, [sp, #28]
 800cc1a:	6827      	ldr	r7, [r4, #0]
 800cc1c:	462b      	mov	r3, r5
 800cc1e:	4641      	mov	r1, r8
 800cc20:	f001 fcfc 	bl	800e61c <rmw_create_publisher>
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800cc2a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cc2e:	b370      	cbz	r0, 800cc8e <rcl_publisher_init+0x10a>
 800cc30:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800cc34:	f001 fdce 	bl	800e7d4 <rmw_publisher_get_actual_qos>
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	4607      	mov	r7, r0
 800cc3c:	b9d0      	cbnz	r0, 800cc74 <rcl_publisher_init+0xf0>
 800cc3e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800cc42:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800cc46:	4629      	mov	r1, r5
 800cc48:	2270      	movs	r2, #112	@ 0x70
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f00e f91f 	bl	801ae8e <memcpy>
 800cc50:	6832      	ldr	r2, [r6, #0]
 800cc52:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800cc56:	9807      	ldr	r0, [sp, #28]
 800cc58:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800cc5a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cc5c:	4798      	blx	r3
 800cc5e:	4638      	mov	r0, r7
 800cc60:	b008      	add	sp, #32
 800cc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc66:	270b      	movs	r7, #11
 800cc68:	4638      	mov	r0, r7
 800cc6a:	b008      	add	sp, #32
 800cc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc70:	27c8      	movs	r7, #200	@ 0xc8
 800cc72:	e7a0      	b.n	800cbb6 <rcl_publisher_init+0x32>
 800cc74:	b18b      	cbz	r3, 800cc9a <rcl_publisher_init+0x116>
 800cc76:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cc7a:	b142      	cbz	r2, 800cc8e <rcl_publisher_init+0x10a>
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f007 fb17 	bl	80142b0 <rcl_node_get_rmw_handle>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cc88:	f001 fdb2 	bl	800e7f0 <rmw_destroy_publisher>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800cc90:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cc92:	4618      	mov	r0, r3
 800cc94:	4790      	blx	r2
 800cc96:	2300      	movs	r3, #0
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	2701      	movs	r7, #1
 800cc9c:	e7db      	b.n	800cc56 <rcl_publisher_init+0xd2>
 800cc9e:	2867      	cmp	r0, #103	@ 0x67
 800cca0:	d0d9      	beq.n	800cc56 <rcl_publisher_init+0xd2>
 800cca2:	2869      	cmp	r0, #105	@ 0x69
 800cca4:	d003      	beq.n	800ccae <rcl_publisher_init+0x12a>
 800cca6:	280a      	cmp	r0, #10
 800cca8:	d1f7      	bne.n	800cc9a <rcl_publisher_init+0x116>
 800ccaa:	270a      	movs	r7, #10
 800ccac:	e7d3      	b.n	800cc56 <rcl_publisher_init+0xd2>
 800ccae:	2767      	movs	r7, #103	@ 0x67
 800ccb0:	e7d1      	b.n	800cc56 <rcl_publisher_init+0xd2>
 800ccb2:	bf00      	nop

0800ccb4 <rcl_publisher_get_default_options>:
 800ccb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb6:	4919      	ldr	r1, [pc, #100]	@ (800cd1c <rcl_publisher_get_default_options+0x68>)
 800ccb8:	4c19      	ldr	r4, [pc, #100]	@ (800cd20 <rcl_publisher_get_default_options+0x6c>)
 800ccba:	b08b      	sub	sp, #44	@ 0x2c
 800ccbc:	2250      	movs	r2, #80	@ 0x50
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	4818      	ldr	r0, [pc, #96]	@ (800cd24 <rcl_publisher_get_default_options+0x70>)
 800ccc2:	f00e f8e4 	bl	801ae8e <memcpy>
 800ccc6:	a802      	add	r0, sp, #8
 800ccc8:	f000 ff7c 	bl	800dbc4 <rcutils_get_default_allocator>
 800cccc:	f10d 0c08 	add.w	ip, sp, #8
 800ccd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccd6:	466f      	mov	r7, sp
 800ccd8:	f8dc 3000 	ldr.w	r3, [ip]
 800ccdc:	f844 3b04 	str.w	r3, [r4], #4
 800cce0:	4638      	mov	r0, r7
 800cce2:	f001 f859 	bl	800dd98 <rmw_get_default_publisher_options>
 800cce6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ccea:	2600      	movs	r6, #0
 800ccec:	e884 0003 	stmia.w	r4, {r0, r1}
 800ccf0:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800ccf4:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800ccf8:	f007 fae0 	bl	80142bc <rcl_get_disable_loaned_message>
 800ccfc:	b958      	cbnz	r0, 800cd16 <rcl_publisher_get_default_options+0x62>
 800ccfe:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800cd02:	4908      	ldr	r1, [pc, #32]	@ (800cd24 <rcl_publisher_get_default_options+0x70>)
 800cd04:	2270      	movs	r2, #112	@ 0x70
 800cd06:	4628      	mov	r0, r5
 800cd08:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800cd0c:	f00e f8bf 	bl	801ae8e <memcpy>
 800cd10:	4628      	mov	r0, r5
 800cd12:	b00b      	add	sp, #44	@ 0x2c
 800cd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd16:	f000 ffa7 	bl	800dc68 <rcutils_reset_error>
 800cd1a:	e7f2      	b.n	800cd02 <rcl_publisher_get_default_options+0x4e>
 800cd1c:	0801e390 	.word	0x0801e390
 800cd20:	20008928 	.word	0x20008928
 800cd24:	200088d8 	.word	0x200088d8

0800cd28 <rcl_publish>:
 800cd28:	b1f8      	cbz	r0, 800cd6a <rcl_publish+0x42>
 800cd2a:	6803      	ldr	r3, [r0, #0]
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	4604      	mov	r4, r0
 800cd30:	b1b3      	cbz	r3, 800cd60 <rcl_publish+0x38>
 800cd32:	4616      	mov	r6, r2
 800cd34:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cd38:	b192      	cbz	r2, 800cd60 <rcl_publish+0x38>
 800cd3a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cd3e:	460d      	mov	r5, r1
 800cd40:	f006 ff90 	bl	8013c64 <rcl_context_is_valid>
 800cd44:	b160      	cbz	r0, 800cd60 <rcl_publish+0x38>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cd4c:	b140      	cbz	r0, 800cd60 <rcl_publish+0x38>
 800cd4e:	b155      	cbz	r5, 800cd66 <rcl_publish+0x3e>
 800cd50:	4632      	mov	r2, r6
 800cd52:	4629      	mov	r1, r5
 800cd54:	f001 fc02 	bl	800e55c <rmw_publish>
 800cd58:	3800      	subs	r0, #0
 800cd5a:	bf18      	it	ne
 800cd5c:	2001      	movne	r0, #1
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
 800cd60:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cd64:	bd70      	pop	{r4, r5, r6, pc}
 800cd66:	200b      	movs	r0, #11
 800cd68:	bd70      	pop	{r4, r5, r6, pc}
 800cd6a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cd6e:	4770      	bx	lr

0800cd70 <rcl_publisher_is_valid>:
 800cd70:	b1a0      	cbz	r0, 800cd9c <rcl_publisher_is_valid+0x2c>
 800cd72:	6803      	ldr	r3, [r0, #0]
 800cd74:	b510      	push	{r4, lr}
 800cd76:	4604      	mov	r4, r0
 800cd78:	b173      	cbz	r3, 800cd98 <rcl_publisher_is_valid+0x28>
 800cd7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cd7e:	b15a      	cbz	r2, 800cd98 <rcl_publisher_is_valid+0x28>
 800cd80:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cd84:	f006 ff6e 	bl	8013c64 <rcl_context_is_valid>
 800cd88:	b130      	cbz	r0, 800cd98 <rcl_publisher_is_valid+0x28>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cd90:	3800      	subs	r0, #0
 800cd92:	bf18      	it	ne
 800cd94:	2001      	movne	r0, #1
 800cd96:	bd10      	pop	{r4, pc}
 800cd98:	2000      	movs	r0, #0
 800cd9a:	bd10      	pop	{r4, pc}
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	4770      	bx	lr

0800cda0 <rcl_publisher_is_valid_except_context>:
 800cda0:	b130      	cbz	r0, 800cdb0 <rcl_publisher_is_valid_except_context+0x10>
 800cda2:	6800      	ldr	r0, [r0, #0]
 800cda4:	b120      	cbz	r0, 800cdb0 <rcl_publisher_is_valid_except_context+0x10>
 800cda6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800cdaa:	3800      	subs	r0, #0
 800cdac:	bf18      	it	ne
 800cdae:	2001      	movne	r0, #1
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <_rclc_check_for_new_data>:
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d046      	beq.n	800ce46 <_rclc_check_for_new_data+0x92>
 800cdb8:	b510      	push	{r4, lr}
 800cdba:	7802      	ldrb	r2, [r0, #0]
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2a0a      	cmp	r2, #10
 800cdc2:	d842      	bhi.n	800ce4a <_rclc_check_for_new_data+0x96>
 800cdc4:	e8df f002 	tbb	[pc, r2]
 800cdc8:	14181212 	.word	0x14181212
 800cdcc:	06060614 	.word	0x06060614
 800cdd0:	2e1a      	.short	0x2e1a
 800cdd2:	16          	.byte	0x16
 800cdd3:	00          	.byte	0x00
 800cdd4:	6a0a      	ldr	r2, [r1, #32]
 800cdd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cdd8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cddc:	3a00      	subs	r2, #0
 800cdde:	bf18      	it	ne
 800cde0:	2201      	movne	r2, #1
 800cde2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800cde6:	2000      	movs	r0, #0
 800cde8:	b004      	add	sp, #16
 800cdea:	bd10      	pop	{r4, pc}
 800cdec:	680a      	ldr	r2, [r1, #0]
 800cdee:	e7f2      	b.n	800cdd6 <_rclc_check_for_new_data+0x22>
 800cdf0:	698a      	ldr	r2, [r1, #24]
 800cdf2:	e7f0      	b.n	800cdd6 <_rclc_check_for_new_data+0x22>
 800cdf4:	688a      	ldr	r2, [r1, #8]
 800cdf6:	e7ee      	b.n	800cdd6 <_rclc_check_for_new_data+0x22>
 800cdf8:	690a      	ldr	r2, [r1, #16]
 800cdfa:	e7ec      	b.n	800cdd6 <_rclc_check_for_new_data+0x22>
 800cdfc:	685c      	ldr	r4, [r3, #4]
 800cdfe:	4608      	mov	r0, r1
 800ce00:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800ce04:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800ce08:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800ce0c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ce16:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ce1a:	f104 0110 	add.w	r1, r4, #16
 800ce1e:	f009 f963 	bl	80160e8 <rcl_action_client_wait_set_get_entities_ready>
 800ce22:	e7e1      	b.n	800cde8 <_rclc_check_for_new_data+0x34>
 800ce24:	685c      	ldr	r4, [r3, #4]
 800ce26:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800ce2a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800ce2e:	e9cd 3200 	strd	r3, r2, [sp]
 800ce32:	4608      	mov	r0, r1
 800ce34:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ce38:	f104 0220 	add.w	r2, r4, #32
 800ce3c:	f104 0110 	add.w	r1, r4, #16
 800ce40:	f009 fb58 	bl	80164f4 <rcl_action_server_wait_set_get_entities_ready>
 800ce44:	e7d0      	b.n	800cde8 <_rclc_check_for_new_data+0x34>
 800ce46:	200b      	movs	r0, #11
 800ce48:	4770      	bx	lr
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	e7cc      	b.n	800cde8 <_rclc_check_for_new_data+0x34>
 800ce4e:	bf00      	nop

0800ce50 <_rclc_take_new_data>:
 800ce50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce52:	b099      	sub	sp, #100	@ 0x64
 800ce54:	2800      	cmp	r0, #0
 800ce56:	f000 8082 	beq.w	800cf5e <_rclc_take_new_data+0x10e>
 800ce5a:	7803      	ldrb	r3, [r0, #0]
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	2b0a      	cmp	r3, #10
 800ce60:	f200 815d 	bhi.w	800d11e <_rclc_take_new_data+0x2ce>
 800ce64:	e8df f003 	tbb	[pc, r3]
 800ce68:	31531f1f 	.word	0x31531f1f
 800ce6c:	06060631 	.word	0x06060631
 800ce70:	4555      	.short	0x4555
 800ce72:	53          	.byte	0x53
 800ce73:	00          	.byte	0x00
 800ce74:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ce76:	6a0b      	ldr	r3, [r1, #32]
 800ce78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d046      	beq.n	800cf0e <_rclc_take_new_data+0xbe>
 800ce80:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ce84:	f104 0110 	add.w	r1, r4, #16
 800ce88:	f007 fb2e 	bl	80144e8 <rcl_take_request>
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d03d      	beq.n	800cf0e <_rclc_take_new_data+0xbe>
 800ce92:	f240 2359 	movw	r3, #601	@ 0x259
 800ce96:	4298      	cmp	r0, r3
 800ce98:	d128      	bne.n	800ceec <_rclc_take_new_data+0x9c>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800cea0:	4628      	mov	r0, r5
 800cea2:	b019      	add	sp, #100	@ 0x64
 800cea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cea8:	680b      	ldr	r3, [r1, #0]
 800ceaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceae:	b373      	cbz	r3, 800cf0e <_rclc_take_new_data+0xbe>
 800ceb0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	aa0a      	add	r2, sp, #40	@ 0x28
 800ceb8:	f007 fd06 	bl	80148c8 <rcl_take>
 800cebc:	4605      	mov	r5, r0
 800cebe:	b330      	cbz	r0, 800cf0e <_rclc_take_new_data+0xbe>
 800cec0:	f240 1391 	movw	r3, #401	@ 0x191
 800cec4:	4298      	cmp	r0, r3
 800cec6:	d0e8      	beq.n	800ce9a <_rclc_take_new_data+0x4a>
 800cec8:	e010      	b.n	800ceec <_rclc_take_new_data+0x9c>
 800ceca:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cecc:	698b      	ldr	r3, [r1, #24]
 800cece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced2:	b1e3      	cbz	r3, 800cf0e <_rclc_take_new_data+0xbe>
 800ced4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ced8:	f104 0110 	add.w	r1, r4, #16
 800cedc:	f006 fe2c 	bl	8013b38 <rcl_take_response>
 800cee0:	4605      	mov	r5, r0
 800cee2:	b1a0      	cbz	r0, 800cf0e <_rclc_take_new_data+0xbe>
 800cee4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800cee8:	4298      	cmp	r0, r3
 800ceea:	d0d9      	beq.n	800cea0 <_rclc_take_new_data+0x50>
 800ceec:	f000 febc 	bl	800dc68 <rcutils_reset_error>
 800cef0:	e7d6      	b.n	800cea0 <_rclc_take_new_data+0x50>
 800cef2:	6840      	ldr	r0, [r0, #4]
 800cef4:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d15f      	bne.n	800cfbc <_rclc_take_new_data+0x16c>
 800cefc:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d179      	bne.n	800cff8 <_rclc_take_new_data+0x1a8>
 800cf04:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f040 8096 	bne.w	800d03a <_rclc_take_new_data+0x1ea>
 800cf0e:	2500      	movs	r5, #0
 800cf10:	e7c6      	b.n	800cea0 <_rclc_take_new_data+0x50>
 800cf12:	6840      	ldr	r0, [r0, #4]
 800cf14:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d138      	bne.n	800cf8e <_rclc_take_new_data+0x13e>
 800cf1c:	69c3      	ldr	r3, [r0, #28]
 800cf1e:	b113      	cbz	r3, 800cf26 <_rclc_take_new_data+0xd6>
 800cf20:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cf24:	b9fb      	cbnz	r3, 800cf66 <_rclc_take_new_data+0x116>
 800cf26:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f040 80a8 	bne.w	800d080 <_rclc_take_new_data+0x230>
 800cf30:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d0ea      	beq.n	800cf0e <_rclc_take_new_data+0xbe>
 800cf38:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800cf3a:	a90a      	add	r1, sp, #40	@ 0x28
 800cf3c:	3010      	adds	r0, #16
 800cf3e:	f008 ffb7 	bl	8015eb0 <rcl_action_take_result_response>
 800cf42:	4605      	mov	r5, r0
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d1d1      	bne.n	800ceec <_rclc_take_new_data+0x9c>
 800cf48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf4c:	6860      	ldr	r0, [r4, #4]
 800cf4e:	f009 fbf7 	bl	8016740 <rclc_action_find_handle_by_result_request_sequence_number>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d0db      	beq.n	800cf0e <_rclc_take_new_data+0xbe>
 800cf56:	2301      	movs	r3, #1
 800cf58:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800cf5c:	e7d7      	b.n	800cf0e <_rclc_take_new_data+0xbe>
 800cf5e:	250b      	movs	r5, #11
 800cf60:	4628      	mov	r0, r5
 800cf62:	b019      	add	sp, #100	@ 0x64
 800cf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf66:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cf68:	3010      	adds	r0, #16
 800cf6a:	f009 f81d 	bl	8015fa8 <rcl_action_take_feedback>
 800cf6e:	4605      	mov	r5, r0
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d1bb      	bne.n	800ceec <_rclc_take_new_data+0x9c>
 800cf74:	6860      	ldr	r0, [r4, #4]
 800cf76:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cf78:	f009 fba0 	bl	80166bc <rclc_action_find_goal_handle_by_uuid>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f000 80c4 	beq.w	800d10c <_rclc_take_new_data+0x2bc>
 800cf84:	2201      	movs	r2, #1
 800cf86:	6860      	ldr	r0, [r4, #4]
 800cf88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800cf8c:	e7cb      	b.n	800cf26 <_rclc_take_new_data+0xd6>
 800cf8e:	aa04      	add	r2, sp, #16
 800cf90:	a90a      	add	r1, sp, #40	@ 0x28
 800cf92:	3010      	adds	r0, #16
 800cf94:	f008 ff1c 	bl	8015dd0 <rcl_action_take_goal_response>
 800cf98:	4605      	mov	r5, r0
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d1a6      	bne.n	800ceec <_rclc_take_new_data+0x9c>
 800cf9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cfa2:	6860      	ldr	r0, [r4, #4]
 800cfa4:	f009 fbba 	bl	801671c <rclc_action_find_handle_by_goal_request_sequence_number>
 800cfa8:	b130      	cbz	r0, 800cfb8 <_rclc_take_new_data+0x168>
 800cfaa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cfae:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f880 2020 	strb.w	r2, [r0, #32]
 800cfb8:	6860      	ldr	r0, [r4, #4]
 800cfba:	e7af      	b.n	800cf1c <_rclc_take_new_data+0xcc>
 800cfbc:	f009 fb58 	bl	8016670 <rclc_action_take_goal_handle>
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	6860      	ldr	r0, [r4, #4]
 800cfc4:	2e00      	cmp	r6, #0
 800cfc6:	d099      	beq.n	800cefc <_rclc_take_new_data+0xac>
 800cfc8:	6070      	str	r0, [r6, #4]
 800cfca:	69f2      	ldr	r2, [r6, #28]
 800cfcc:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800cfd0:	3010      	adds	r0, #16
 800cfd2:	f009 f919 	bl	8016208 <rcl_action_take_goal_request>
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	f040 8099 	bne.w	800d110 <_rclc_take_new_data+0x2c0>
 800cfde:	69f7      	ldr	r7, [r6, #28]
 800cfe0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cfe2:	7235      	strb	r5, [r6, #8]
 800cfe4:	f8c6 0009 	str.w	r0, [r6, #9]
 800cfe8:	f8c6 100d 	str.w	r1, [r6, #13]
 800cfec:	6860      	ldr	r0, [r4, #4]
 800cfee:	f8c6 2011 	str.w	r2, [r6, #17]
 800cff2:	f8c6 3015 	str.w	r3, [r6, #21]
 800cff6:	e781      	b.n	800cefc <_rclc_take_new_data+0xac>
 800cff8:	aa04      	add	r2, sp, #16
 800cffa:	3010      	adds	r0, #16
 800cffc:	a90a      	add	r1, sp, #40	@ 0x28
 800cffe:	f009 f973 	bl	80162e8 <rcl_action_take_result_request>
 800d002:	4605      	mov	r5, r0
 800d004:	2800      	cmp	r0, #0
 800d006:	f47f af71 	bne.w	800ceec <_rclc_take_new_data+0x9c>
 800d00a:	6860      	ldr	r0, [r4, #4]
 800d00c:	a904      	add	r1, sp, #16
 800d00e:	f009 fb55 	bl	80166bc <rclc_action_find_goal_handle_by_uuid>
 800d012:	4607      	mov	r7, r0
 800d014:	b160      	cbz	r0, 800d030 <_rclc_take_new_data+0x1e0>
 800d016:	ad0a      	add	r5, sp, #40	@ 0x28
 800d018:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d01c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d01e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d020:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d024:	f04f 0c02 	mov.w	ip, #2
 800d028:	e886 0003 	stmia.w	r6, {r0, r1}
 800d02c:	f887 c008 	strb.w	ip, [r7, #8]
 800d030:	6860      	ldr	r0, [r4, #4]
 800d032:	2300      	movs	r3, #0
 800d034:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d038:	e764      	b.n	800cf04 <_rclc_take_new_data+0xb4>
 800d03a:	ae04      	add	r6, sp, #16
 800d03c:	aa0a      	add	r2, sp, #40	@ 0x28
 800d03e:	3010      	adds	r0, #16
 800d040:	4631      	mov	r1, r6
 800d042:	f009 f98f 	bl	8016364 <rcl_action_take_cancel_request>
 800d046:	4605      	mov	r5, r0
 800d048:	2800      	cmp	r0, #0
 800d04a:	f47f af4f 	bne.w	800ceec <_rclc_take_new_data+0x9c>
 800d04e:	6860      	ldr	r0, [r4, #4]
 800d050:	a90a      	add	r1, sp, #40	@ 0x28
 800d052:	f009 fb33 	bl	80166bc <rclc_action_find_goal_handle_by_uuid>
 800d056:	4605      	mov	r5, r0
 800d058:	2800      	cmp	r0, #0
 800d05a:	d04c      	beq.n	800d0f6 <_rclc_take_new_data+0x2a6>
 800d05c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d060:	2101      	movs	r1, #1
 800d062:	f009 fab3 	bl	80165cc <rcl_action_transition_goal_state>
 800d066:	2803      	cmp	r0, #3
 800d068:	4607      	mov	r7, r0
 800d06a:	d139      	bne.n	800d0e0 <_rclc_take_new_data+0x290>
 800d06c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d06e:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800d072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d074:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d078:	e884 0003 	stmia.w	r4, {r0, r1}
 800d07c:	722f      	strb	r7, [r5, #8]
 800d07e:	e746      	b.n	800cf0e <_rclc_take_new_data+0xbe>
 800d080:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d084:	a90a      	add	r1, sp, #40	@ 0x28
 800d086:	3010      	adds	r0, #16
 800d088:	f008 ff50 	bl	8015f2c <rcl_action_take_cancel_response>
 800d08c:	4605      	mov	r5, r0
 800d08e:	2800      	cmp	r0, #0
 800d090:	f47f af2c 	bne.w	800ceec <_rclc_take_new_data+0x9c>
 800d094:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d098:	6860      	ldr	r0, [r4, #4]
 800d09a:	f009 fb63 	bl	8016764 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d09e:	4606      	mov	r6, r0
 800d0a0:	6860      	ldr	r0, [r4, #4]
 800d0a2:	2e00      	cmp	r6, #0
 800d0a4:	f43f af44 	beq.w	800cf30 <_rclc_take_new_data+0xe0>
 800d0a8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d0aa:	2701      	movs	r7, #1
 800d0ac:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f43f af3e 	beq.w	800cf30 <_rclc_take_new_data+0xe0>
 800d0b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d0b6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d0ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d0be:	f009 fafd 	bl	80166bc <rclc_action_find_goal_handle_by_uuid>
 800d0c2:	b138      	cbz	r0, 800d0d4 <_rclc_take_new_data+0x284>
 800d0c4:	6860      	ldr	r0, [r4, #4]
 800d0c6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d0c8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d0cc:	3501      	adds	r5, #1
 800d0ce:	42ab      	cmp	r3, r5
 800d0d0:	d8f0      	bhi.n	800d0b4 <_rclc_take_new_data+0x264>
 800d0d2:	e72d      	b.n	800cf30 <_rclc_take_new_data+0xe0>
 800d0d4:	6860      	ldr	r0, [r4, #4]
 800d0d6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d0d8:	3501      	adds	r5, #1
 800d0da:	42ab      	cmp	r3, r5
 800d0dc:	d8ea      	bhi.n	800d0b4 <_rclc_take_new_data+0x264>
 800d0de:	e727      	b.n	800cf30 <_rclc_take_new_data+0xe0>
 800d0e0:	ab06      	add	r3, sp, #24
 800d0e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0e4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d0e8:	2103      	movs	r1, #3
 800d0ea:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d0ee:	6860      	ldr	r0, [r4, #4]
 800d0f0:	f009 fbae 	bl	8016850 <rclc_action_server_goal_cancel_reject>
 800d0f4:	e70b      	b.n	800cf0e <_rclc_take_new_data+0xbe>
 800d0f6:	ab06      	add	r3, sp, #24
 800d0f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d0fe:	2102      	movs	r1, #2
 800d100:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d104:	6860      	ldr	r0, [r4, #4]
 800d106:	f009 fba3 	bl	8016850 <rclc_action_server_goal_cancel_reject>
 800d10a:	e700      	b.n	800cf0e <_rclc_take_new_data+0xbe>
 800d10c:	6860      	ldr	r0, [r4, #4]
 800d10e:	e70a      	b.n	800cf26 <_rclc_take_new_data+0xd6>
 800d110:	6860      	ldr	r0, [r4, #4]
 800d112:	4631      	mov	r1, r6
 800d114:	f009 fabc 	bl	8016690 <rclc_action_remove_used_goal_handle>
 800d118:	f000 fda6 	bl	800dc68 <rcutils_reset_error>
 800d11c:	e6c0      	b.n	800cea0 <_rclc_take_new_data+0x50>
 800d11e:	2501      	movs	r5, #1
 800d120:	e6be      	b.n	800cea0 <_rclc_take_new_data+0x50>
 800d122:	bf00      	nop

0800d124 <rclc_executor_trigger_any>:
 800d124:	4603      	mov	r3, r0
 800d126:	b370      	cbz	r0, 800d186 <rclc_executor_trigger_any+0x62>
 800d128:	b379      	cbz	r1, 800d18a <rclc_executor_trigger_any+0x66>
 800d12a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d12e:	2200      	movs	r2, #0
 800d130:	b350      	cbz	r0, 800d188 <rclc_executor_trigger_any+0x64>
 800d132:	b430      	push	{r4, r5}
 800d134:	f893 c000 	ldrb.w	ip, [r3]
 800d138:	f1bc 0f08 	cmp.w	ip, #8
 800d13c:	d017      	beq.n	800d16e <rclc_executor_trigger_any+0x4a>
 800d13e:	f1bc 0f09 	cmp.w	ip, #9
 800d142:	d00d      	beq.n	800d160 <rclc_executor_trigger_any+0x3c>
 800d144:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d148:	b940      	cbnz	r0, 800d15c <rclc_executor_trigger_any+0x38>
 800d14a:	3201      	adds	r2, #1
 800d14c:	4291      	cmp	r1, r2
 800d14e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d152:	d003      	beq.n	800d15c <rclc_executor_trigger_any+0x38>
 800d154:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d158:	2800      	cmp	r0, #0
 800d15a:	d1eb      	bne.n	800d134 <rclc_executor_trigger_any+0x10>
 800d15c:	bc30      	pop	{r4, r5}
 800d15e:	4770      	bx	lr
 800d160:	685c      	ldr	r4, [r3, #4]
 800d162:	6a25      	ldr	r5, [r4, #32]
 800d164:	2d00      	cmp	r5, #0
 800d166:	d1f9      	bne.n	800d15c <rclc_executor_trigger_any+0x38>
 800d168:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d16c:	e7ec      	b.n	800d148 <rclc_executor_trigger_any+0x24>
 800d16e:	685c      	ldr	r4, [r3, #4]
 800d170:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d172:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d176:	d1f1      	bne.n	800d15c <rclc_executor_trigger_any+0x38>
 800d178:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d1ed      	bne.n	800d15c <rclc_executor_trigger_any+0x38>
 800d180:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d184:	e7e0      	b.n	800d148 <rclc_executor_trigger_any+0x24>
 800d186:	4770      	bx	lr
 800d188:	4770      	bx	lr
 800d18a:	4608      	mov	r0, r1
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop

0800d190 <_rclc_execute>:
 800d190:	2800      	cmp	r0, #0
 800d192:	f000 80da 	beq.w	800d34a <_rclc_execute+0x1ba>
 800d196:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d198:	7843      	ldrb	r3, [r0, #1]
 800d19a:	b087      	sub	sp, #28
 800d19c:	4604      	mov	r4, r0
 800d19e:	b123      	cbz	r3, 800d1aa <_rclc_execute+0x1a>
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d01c      	beq.n	800d1de <_rclc_execute+0x4e>
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	b007      	add	sp, #28
 800d1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1aa:	7803      	ldrb	r3, [r0, #0]
 800d1ac:	2b08      	cmp	r3, #8
 800d1ae:	f000 809e 	beq.w	800d2ee <_rclc_execute+0x15e>
 800d1b2:	2b09      	cmp	r3, #9
 800d1b4:	d024      	beq.n	800d200 <_rclc_execute+0x70>
 800d1b6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d0f2      	beq.n	800d1a4 <_rclc_execute+0x14>
 800d1be:	2b0a      	cmp	r3, #10
 800d1c0:	f200 8158 	bhi.w	800d474 <_rclc_execute+0x2e4>
 800d1c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1c8:	008c0071 	.word	0x008c0071
 800d1cc:	0071007e 	.word	0x0071007e
 800d1d0:	00590075 	.word	0x00590075
 800d1d4:	00590059 	.word	0x00590059
 800d1d8:	01560156 	.word	0x01560156
 800d1dc:	007b      	.short	0x007b
 800d1de:	7803      	ldrb	r3, [r0, #0]
 800d1e0:	2b0a      	cmp	r3, #10
 800d1e2:	f200 8147 	bhi.w	800d474 <_rclc_execute+0x2e4>
 800d1e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1ea:	00f7      	.short	0x00f7
 800d1ec:	006d0079 	.word	0x006d0079
 800d1f0:	00640060 	.word	0x00640060
 800d1f4:	00480048 	.word	0x00480048
 800d1f8:	00fe0048 	.word	0x00fe0048
 800d1fc:	006a0100 	.word	0x006a0100
 800d200:	6840      	ldr	r0, [r0, #4]
 800d202:	6a02      	ldr	r2, [r0, #32]
 800d204:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d208:	2a00      	cmp	r2, #0
 800d20a:	f040 80f1 	bne.w	800d3f0 <_rclc_execute+0x260>
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d0c8      	beq.n	800d1a4 <_rclc_execute+0x14>
 800d212:	e003      	b.n	800d21c <_rclc_execute+0x8c>
 800d214:	6858      	ldr	r0, [r3, #4]
 800d216:	f009 fa3b 	bl	8016690 <rclc_action_remove_used_goal_handle>
 800d21a:	6860      	ldr	r0, [r4, #4]
 800d21c:	f009 fa72 	bl	8016704 <rclc_action_find_first_terminated_handle>
 800d220:	4603      	mov	r3, r0
 800d222:	4601      	mov	r1, r0
 800d224:	2800      	cmp	r0, #0
 800d226:	d1f5      	bne.n	800d214 <_rclc_execute+0x84>
 800d228:	6860      	ldr	r0, [r4, #4]
 800d22a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800d22e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d232:	2b00      	cmp	r3, #0
 800d234:	f000 80e9 	beq.w	800d40a <_rclc_execute+0x27a>
 800d238:	f640 0634 	movw	r6, #2100	@ 0x834
 800d23c:	2701      	movs	r7, #1
 800d23e:	e007      	b.n	800d250 <_rclc_execute+0xc0>
 800d240:	4628      	mov	r0, r5
 800d242:	f009 fab9 	bl	80167b8 <rclc_action_server_response_goal_request>
 800d246:	6860      	ldr	r0, [r4, #4]
 800d248:	4629      	mov	r1, r5
 800d24a:	f009 fa21 	bl	8016690 <rclc_action_remove_used_goal_handle>
 800d24e:	6860      	ldr	r0, [r4, #4]
 800d250:	2100      	movs	r1, #0
 800d252:	f009 fa4b 	bl	80166ec <rclc_action_find_first_handle_by_status>
 800d256:	4605      	mov	r5, r0
 800d258:	2800      	cmp	r0, #0
 800d25a:	f000 80d3 	beq.w	800d404 <_rclc_execute+0x274>
 800d25e:	6863      	ldr	r3, [r4, #4]
 800d260:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	4798      	blx	r3
 800d266:	42b0      	cmp	r0, r6
 800d268:	f04f 0100 	mov.w	r1, #0
 800d26c:	d1e8      	bne.n	800d240 <_rclc_execute+0xb0>
 800d26e:	2101      	movs	r1, #1
 800d270:	4628      	mov	r0, r5
 800d272:	f009 faa1 	bl	80167b8 <rclc_action_server_response_goal_request>
 800d276:	722f      	strb	r7, [r5, #8]
 800d278:	e7e9      	b.n	800d24e <_rclc_execute+0xbe>
 800d27a:	2b06      	cmp	r3, #6
 800d27c:	68a0      	ldr	r0, [r4, #8]
 800d27e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d280:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800d282:	f000 80b9 	beq.w	800d3f8 <_rclc_execute+0x268>
 800d286:	2b07      	cmp	r3, #7
 800d288:	f000 80ef 	beq.w	800d46a <_rclc_execute+0x2da>
 800d28c:	47b0      	blx	r6
 800d28e:	f104 0510 	add.w	r5, r4, #16
 800d292:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d294:	6860      	ldr	r0, [r4, #4]
 800d296:	4629      	mov	r1, r5
 800d298:	f007 f976 	bl	8014588 <rcl_send_response>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d082      	beq.n	800d1a6 <_rclc_execute+0x16>
 800d2a0:	9005      	str	r0, [sp, #20]
 800d2a2:	f000 fce1 	bl	800dc68 <rcutils_reset_error>
 800d2a6:	9805      	ldr	r0, [sp, #20]
 800d2a8:	e77d      	b.n	800d1a6 <_rclc_execute+0x16>
 800d2aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d2ac:	68a0      	ldr	r0, [r4, #8]
 800d2ae:	4798      	blx	r3
 800d2b0:	e778      	b.n	800d1a4 <_rclc_execute+0x14>
 800d2b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d2b4:	68a0      	ldr	r0, [r4, #8]
 800d2b6:	f104 0110 	add.w	r1, r4, #16
 800d2ba:	4798      	blx	r3
 800d2bc:	e772      	b.n	800d1a4 <_rclc_execute+0x14>
 800d2be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d2c0:	4798      	blx	r3
 800d2c2:	e76f      	b.n	800d1a4 <_rclc_execute+0x14>
 800d2c4:	6860      	ldr	r0, [r4, #4]
 800d2c6:	f007 fe3b 	bl	8014f40 <rcl_timer_call>
 800d2ca:	f240 3321 	movw	r3, #801	@ 0x321
 800d2ce:	4298      	cmp	r0, r3
 800d2d0:	f43f af68 	beq.w	800d1a4 <_rclc_execute+0x14>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	f43f af66 	beq.w	800d1a6 <_rclc_execute+0x16>
 800d2da:	e7e1      	b.n	800d2a0 <_rclc_execute+0x110>
 800d2dc:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800d2e0:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d0e8      	beq.n	800d2ba <_rclc_execute+0x12a>
 800d2e8:	68a0      	ldr	r0, [r4, #8]
 800d2ea:	4798      	blx	r3
 800d2ec:	e75a      	b.n	800d1a4 <_rclc_execute+0x14>
 800d2ee:	6840      	ldr	r0, [r0, #4]
 800d2f0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d2f2:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800d2f6:	d107      	bne.n	800d308 <_rclc_execute+0x178>
 800d2f8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d2fc:	b923      	cbnz	r3, 800d308 <_rclc_execute+0x178>
 800d2fe:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d302:	2b00      	cmp	r3, #0
 800d304:	f43f af4e 	beq.w	800d1a4 <_rclc_execute+0x14>
 800d308:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d30c:	b303      	cbz	r3, 800d350 <_rclc_execute+0x1c0>
 800d30e:	2600      	movs	r6, #0
 800d310:	2701      	movs	r7, #1
 800d312:	e004      	b.n	800d31e <_rclc_execute+0x18e>
 800d314:	f009 f986 	bl	8016624 <rclc_action_send_result_request>
 800d318:	b990      	cbnz	r0, 800d340 <_rclc_execute+0x1b0>
 800d31a:	722f      	strb	r7, [r5, #8]
 800d31c:	6860      	ldr	r0, [r4, #4]
 800d31e:	f009 fa33 	bl	8016788 <rclc_action_find_first_handle_with_goal_response>
 800d322:	4605      	mov	r5, r0
 800d324:	b198      	cbz	r0, 800d34e <_rclc_execute+0x1be>
 800d326:	6863      	ldr	r3, [r4, #4]
 800d328:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d330:	f885 6020 	strb.w	r6, [r5, #32]
 800d334:	4798      	blx	r3
 800d336:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d33a:	4628      	mov	r0, r5
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e9      	bne.n	800d314 <_rclc_execute+0x184>
 800d340:	6860      	ldr	r0, [r4, #4]
 800d342:	4629      	mov	r1, r5
 800d344:	f009 f9a4 	bl	8016690 <rclc_action_remove_used_goal_handle>
 800d348:	e7e8      	b.n	800d31c <_rclc_execute+0x18c>
 800d34a:	200b      	movs	r0, #11
 800d34c:	4770      	bx	lr
 800d34e:	6860      	ldr	r0, [r4, #4]
 800d350:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d354:	b18b      	cbz	r3, 800d37a <_rclc_execute+0x1ea>
 800d356:	68c5      	ldr	r5, [r0, #12]
 800d358:	b32d      	cbz	r5, 800d3a6 <_rclc_execute+0x216>
 800d35a:	2600      	movs	r6, #0
 800d35c:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d360:	b143      	cbz	r3, 800d374 <_rclc_execute+0x1e4>
 800d362:	69c3      	ldr	r3, [r0, #28]
 800d364:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d368:	b123      	cbz	r3, 800d374 <_rclc_execute+0x1e4>
 800d36a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d36c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d36e:	4628      	mov	r0, r5
 800d370:	4798      	blx	r3
 800d372:	6860      	ldr	r0, [r4, #4]
 800d374:	682d      	ldr	r5, [r5, #0]
 800d376:	2d00      	cmp	r5, #0
 800d378:	d1f0      	bne.n	800d35c <_rclc_execute+0x1cc>
 800d37a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d37e:	b193      	cbz	r3, 800d3a6 <_rclc_execute+0x216>
 800d380:	68c5      	ldr	r5, [r0, #12]
 800d382:	b185      	cbz	r5, 800d3a6 <_rclc_execute+0x216>
 800d384:	2600      	movs	r6, #0
 800d386:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d38a:	b14b      	cbz	r3, 800d3a0 <_rclc_execute+0x210>
 800d38c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d38e:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d392:	b12b      	cbz	r3, 800d3a0 <_rclc_execute+0x210>
 800d394:	4628      	mov	r0, r5
 800d396:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d398:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d39c:	4798      	blx	r3
 800d39e:	6860      	ldr	r0, [r4, #4]
 800d3a0:	682d      	ldr	r5, [r5, #0]
 800d3a2:	2d00      	cmp	r5, #0
 800d3a4:	d1ef      	bne.n	800d386 <_rclc_execute+0x1f6>
 800d3a6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f43f aefa 	beq.w	800d1a4 <_rclc_execute+0x14>
 800d3b0:	2700      	movs	r7, #0
 800d3b2:	e00b      	b.n	800d3cc <_rclc_execute+0x23c>
 800d3b4:	6863      	ldr	r3, [r4, #4]
 800d3b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d3ba:	6a1e      	ldr	r6, [r3, #32]
 800d3bc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d3c0:	47b0      	blx	r6
 800d3c2:	6860      	ldr	r0, [r4, #4]
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	f009 f963 	bl	8016690 <rclc_action_remove_used_goal_handle>
 800d3ca:	6860      	ldr	r0, [r4, #4]
 800d3cc:	f009 f9e8 	bl	80167a0 <rclc_action_find_first_handle_with_result_response>
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d1ee      	bne.n	800d3b4 <_rclc_execute+0x224>
 800d3d6:	e6e5      	b.n	800d1a4 <_rclc_execute+0x14>
 800d3d8:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800d3dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f43f af65 	beq.w	800d2ae <_rclc_execute+0x11e>
 800d3e4:	e762      	b.n	800d2ac <_rclc_execute+0x11c>
 800d3e6:	6840      	ldr	r0, [r0, #4]
 800d3e8:	e78e      	b.n	800d308 <_rclc_execute+0x178>
 800d3ea:	6840      	ldr	r0, [r0, #4]
 800d3ec:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f43f af1c 	beq.w	800d22e <_rclc_execute+0x9e>
 800d3f6:	e711      	b.n	800d21c <_rclc_execute+0x8c>
 800d3f8:	f104 0510 	add.w	r5, r4, #16
 800d3fc:	460a      	mov	r2, r1
 800d3fe:	4629      	mov	r1, r5
 800d400:	47b0      	blx	r6
 800d402:	e746      	b.n	800d292 <_rclc_execute+0x102>
 800d404:	6860      	ldr	r0, [r4, #4]
 800d406:	f880 5020 	strb.w	r5, [r0, #32]
 800d40a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f43f aec8 	beq.w	800d1a4 <_rclc_execute+0x14>
 800d414:	68c5      	ldr	r5, [r0, #12]
 800d416:	b325      	cbz	r5, 800d462 <_rclc_execute+0x2d2>
 800d418:	2602      	movs	r6, #2
 800d41a:	e001      	b.n	800d420 <_rclc_execute+0x290>
 800d41c:	682d      	ldr	r5, [r5, #0]
 800d41e:	b305      	cbz	r5, 800d462 <_rclc_execute+0x2d2>
 800d420:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d424:	2b03      	cmp	r3, #3
 800d426:	d1f9      	bne.n	800d41c <_rclc_execute+0x28c>
 800d428:	69c3      	ldr	r3, [r0, #28]
 800d42a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d42c:	4628      	mov	r0, r5
 800d42e:	4798      	blx	r3
 800d430:	4603      	mov	r3, r0
 800d432:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d436:	4628      	mov	r0, r5
 800d438:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d43c:	b11b      	cbz	r3, 800d446 <_rclc_execute+0x2b6>
 800d43e:	f009 f9db 	bl	80167f8 <rclc_action_server_goal_cancel_accept>
 800d442:	6860      	ldr	r0, [r4, #4]
 800d444:	e7ea      	b.n	800d41c <_rclc_execute+0x28c>
 800d446:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d448:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d44c:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d454:	6860      	ldr	r0, [r4, #4]
 800d456:	2101      	movs	r1, #1
 800d458:	f009 f9fa 	bl	8016850 <rclc_action_server_goal_cancel_reject>
 800d45c:	722e      	strb	r6, [r5, #8]
 800d45e:	6860      	ldr	r0, [r4, #4]
 800d460:	e7dc      	b.n	800d41c <_rclc_execute+0x28c>
 800d462:	2300      	movs	r3, #0
 800d464:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d468:	e69c      	b.n	800d1a4 <_rclc_execute+0x14>
 800d46a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d46c:	47b0      	blx	r6
 800d46e:	f104 0510 	add.w	r5, r4, #16
 800d472:	e70e      	b.n	800d292 <_rclc_execute+0x102>
 800d474:	2001      	movs	r0, #1
 800d476:	e696      	b.n	800d1a6 <_rclc_execute+0x16>

0800d478 <rclc_executor_get_zero_initialized_executor>:
 800d478:	b510      	push	{r4, lr}
 800d47a:	4903      	ldr	r1, [pc, #12]	@ (800d488 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d47c:	4604      	mov	r4, r0
 800d47e:	2290      	movs	r2, #144	@ 0x90
 800d480:	f00d fd05 	bl	801ae8e <memcpy>
 800d484:	4620      	mov	r0, r4
 800d486:	bd10      	pop	{r4, pc}
 800d488:	0801e3e0 	.word	0x0801e3e0
 800d48c:	00000000 	.word	0x00000000

0800d490 <rclc_executor_init>:
 800d490:	2800      	cmp	r0, #0
 800d492:	d05a      	beq.n	800d54a <rclc_executor_init+0xba>
 800d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d498:	460d      	mov	r5, r1
 800d49a:	b0b2      	sub	sp, #200	@ 0xc8
 800d49c:	2900      	cmp	r1, #0
 800d49e:	d050      	beq.n	800d542 <rclc_executor_init+0xb2>
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	4616      	mov	r6, r2
 800d4a6:	461f      	mov	r7, r3
 800d4a8:	f000 fbb8 	bl	800dc1c <rcutils_allocator_is_valid>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d048      	beq.n	800d542 <rclc_executor_init+0xb2>
 800d4b0:	2e00      	cmp	r6, #0
 800d4b2:	d046      	beq.n	800d542 <rclc_executor_init+0xb2>
 800d4b4:	492a      	ldr	r1, [pc, #168]	@ (800d560 <rclc_executor_init+0xd0>)
 800d4b6:	2290      	movs	r2, #144	@ 0x90
 800d4b8:	a80e      	add	r0, sp, #56	@ 0x38
 800d4ba:	f00d fce8 	bl	801ae8e <memcpy>
 800d4be:	a90e      	add	r1, sp, #56	@ 0x38
 800d4c0:	2290      	movs	r2, #144	@ 0x90
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f00d fce3 	bl	801ae8e <memcpy>
 800d4c8:	6065      	str	r5, [r4, #4]
 800d4ca:	4668      	mov	r0, sp
 800d4cc:	60e6      	str	r6, [r4, #12]
 800d4ce:	466d      	mov	r5, sp
 800d4d0:	f007 fe28 	bl	8015124 <rcl_get_zero_initialized_wait_set>
 800d4d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4d6:	f104 0c18 	add.w	ip, r4, #24
 800d4da:	f8d7 8000 	ldr.w	r8, [r7]
 800d4de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4ee:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800d558 <rclc_executor_init+0xc8>
 800d4f2:	682b      	ldr	r3, [r5, #0]
 800d4f4:	f8cc 3000 	str.w	r3, [ip]
 800d4f8:	6939      	ldr	r1, [r7, #16]
 800d4fa:	6167      	str	r7, [r4, #20]
 800d4fc:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800d500:	01b0      	lsls	r0, r6, #6
 800d502:	47c0      	blx	r8
 800d504:	60a0      	str	r0, [r4, #8]
 800d506:	b310      	cbz	r0, 800d54e <rclc_executor_init+0xbe>
 800d508:	2500      	movs	r5, #0
 800d50a:	e000      	b.n	800d50e <rclc_executor_init+0x7e>
 800d50c:	68a0      	ldr	r0, [r4, #8]
 800d50e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800d512:	4631      	mov	r1, r6
 800d514:	3501      	adds	r5, #1
 800d516:	f000 fa25 	bl	800d964 <rclc_executor_handle_init>
 800d51a:	42ae      	cmp	r6, r5
 800d51c:	d1f6      	bne.n	800d50c <rclc_executor_init+0x7c>
 800d51e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800d522:	f000 fa15 	bl	800d950 <rclc_executor_handle_counters_zero_init>
 800d526:	490f      	ldr	r1, [pc, #60]	@ (800d564 <rclc_executor_init+0xd4>)
 800d528:	68a2      	ldr	r2, [r4, #8]
 800d52a:	2300      	movs	r3, #0
 800d52c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800d530:	b12a      	cbz	r2, 800d53e <rclc_executor_init+0xae>
 800d532:	6962      	ldr	r2, [r4, #20]
 800d534:	b11a      	cbz	r2, 800d53e <rclc_executor_init+0xae>
 800d536:	68e2      	ldr	r2, [r4, #12]
 800d538:	b10a      	cbz	r2, 800d53e <rclc_executor_init+0xae>
 800d53a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800d53e:	2000      	movs	r0, #0
 800d540:	e000      	b.n	800d544 <rclc_executor_init+0xb4>
 800d542:	200b      	movs	r0, #11
 800d544:	b032      	add	sp, #200	@ 0xc8
 800d546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54a:	200b      	movs	r0, #11
 800d54c:	4770      	bx	lr
 800d54e:	200a      	movs	r0, #10
 800d550:	e7f8      	b.n	800d544 <rclc_executor_init+0xb4>
 800d552:	bf00      	nop
 800d554:	f3af 8000 	nop.w
 800d558:	3b9aca00 	.word	0x3b9aca00
 800d55c:	00000000 	.word	0x00000000
 800d560:	0801e3e0 	.word	0x0801e3e0
 800d564:	0800d125 	.word	0x0800d125

0800d568 <rclc_executor_add_subscription>:
 800d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800d56e:	b338      	cbz	r0, 800d5c0 <rclc_executor_add_subscription+0x58>
 800d570:	b331      	cbz	r1, 800d5c0 <rclc_executor_add_subscription+0x58>
 800d572:	b32a      	cbz	r2, 800d5c0 <rclc_executor_add_subscription+0x58>
 800d574:	b323      	cbz	r3, 800d5c0 <rclc_executor_add_subscription+0x58>
 800d576:	4604      	mov	r4, r0
 800d578:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800d57c:	42a8      	cmp	r0, r5
 800d57e:	d301      	bcc.n	800d584 <rclc_executor_add_subscription+0x1c>
 800d580:	2001      	movs	r0, #1
 800d582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d584:	68a6      	ldr	r6, [r4, #8]
 800d586:	0187      	lsls	r7, r0, #6
 800d588:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800d58c:	2500      	movs	r5, #0
 800d58e:	55f5      	strb	r5, [r6, r7]
 800d590:	3001      	adds	r0, #1
 800d592:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d596:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800d59a:	2301      	movs	r3, #1
 800d59c:	f104 0518 	add.w	r5, r4, #24
 800d5a0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d5a4:	f88c e001 	strb.w	lr, [ip, #1]
 800d5a8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800d5ac:	6120      	str	r0, [r4, #16]
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f007 fdcc 	bl	801514c <rcl_wait_set_is_valid>
 800d5b4:	b930      	cbnz	r0, 800d5c4 <rclc_executor_add_subscription+0x5c>
 800d5b6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c0:	200b      	movs	r0, #11
 800d5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f007 fdc7 	bl	8015158 <rcl_wait_set_fini>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d0f3      	beq.n	800d5b6 <rclc_executor_add_subscription+0x4e>
 800d5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5d0 <rclc_executor_add_timer>:
 800d5d0:	b300      	cbz	r0, 800d614 <rclc_executor_add_timer+0x44>
 800d5d2:	b1f9      	cbz	r1, 800d614 <rclc_executor_add_timer+0x44>
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	4604      	mov	r4, r0
 800d5de:	d301      	bcc.n	800d5e4 <rclc_executor_add_timer+0x14>
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	6880      	ldr	r0, [r0, #8]
 800d5e6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d5ea:	019d      	lsls	r5, r3, #6
 800d5ec:	6051      	str	r1, [r2, #4]
 800d5ee:	2102      	movs	r1, #2
 800d5f0:	5341      	strh	r1, [r0, r5]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	f104 0518 	add.w	r5, r4, #24
 800d5fc:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d5fe:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d600:	4628      	mov	r0, r5
 800d602:	6123      	str	r3, [r4, #16]
 800d604:	f007 fda2 	bl	801514c <rcl_wait_set_is_valid>
 800d608:	b930      	cbnz	r0, 800d618 <rclc_executor_add_timer+0x48>
 800d60a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d60c:	3301      	adds	r3, #1
 800d60e:	2000      	movs	r0, #0
 800d610:	6523      	str	r3, [r4, #80]	@ 0x50
 800d612:	bd38      	pop	{r3, r4, r5, pc}
 800d614:	200b      	movs	r0, #11
 800d616:	4770      	bx	lr
 800d618:	4628      	mov	r0, r5
 800d61a:	f007 fd9d 	bl	8015158 <rcl_wait_set_fini>
 800d61e:	2800      	cmp	r0, #0
 800d620:	d0f3      	beq.n	800d60a <rclc_executor_add_timer+0x3a>
 800d622:	bd38      	pop	{r3, r4, r5, pc}

0800d624 <rclc_executor_prepare>:
 800d624:	2800      	cmp	r0, #0
 800d626:	d044      	beq.n	800d6b2 <rclc_executor_prepare+0x8e>
 800d628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d62a:	f100 0518 	add.w	r5, r0, #24
 800d62e:	b09b      	sub	sp, #108	@ 0x6c
 800d630:	4604      	mov	r4, r0
 800d632:	4628      	mov	r0, r5
 800d634:	f007 fd8a 	bl	801514c <rcl_wait_set_is_valid>
 800d638:	b110      	cbz	r0, 800d640 <rclc_executor_prepare+0x1c>
 800d63a:	2000      	movs	r0, #0
 800d63c:	b01b      	add	sp, #108	@ 0x6c
 800d63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d640:	4628      	mov	r0, r5
 800d642:	f007 fd89 	bl	8015158 <rcl_wait_set_fini>
 800d646:	2800      	cmp	r0, #0
 800d648:	d130      	bne.n	800d6ac <rclc_executor_prepare+0x88>
 800d64a:	a80c      	add	r0, sp, #48	@ 0x30
 800d64c:	f007 fd6a 	bl	8015124 <rcl_get_zero_initialized_wait_set>
 800d650:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d654:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d658:	46ae      	mov	lr, r5
 800d65a:	6967      	ldr	r7, [r4, #20]
 800d65c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d660:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d664:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d668:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d66c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d670:	f8dc 3000 	ldr.w	r3, [ip]
 800d674:	f8ce 3000 	str.w	r3, [lr]
 800d678:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d67a:	ae04      	add	r6, sp, #16
 800d67c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	6862      	ldr	r2, [r4, #4]
 800d682:	6033      	str	r3, [r6, #0]
 800d684:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800d686:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800d688:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d68c:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800d690:	e9cd 2100 	strd	r2, r1, [sp]
 800d694:	4628      	mov	r0, r5
 800d696:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d698:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800d69a:	f008 f879 	bl	8015790 <rcl_wait_set_init>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d0cc      	beq.n	800d63c <rclc_executor_prepare+0x18>
 800d6a2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d6a4:	f000 fae0 	bl	800dc68 <rcutils_reset_error>
 800d6a8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d6aa:	e7c7      	b.n	800d63c <rclc_executor_prepare+0x18>
 800d6ac:	f000 fadc 	bl	800dc68 <rcutils_reset_error>
 800d6b0:	e7cb      	b.n	800d64a <rclc_executor_prepare+0x26>
 800d6b2:	200b      	movs	r0, #11
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop

0800d6b8 <rclc_executor_spin_some>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	b083      	sub	sp, #12
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	f000 8091 	beq.w	800d7e6 <rclc_executor_spin_some+0x12e>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	6840      	ldr	r0, [r0, #4]
 800d6c8:	4690      	mov	r8, r2
 800d6ca:	4699      	mov	r9, r3
 800d6cc:	f006 faca 	bl	8013c64 <rcl_context_is_valid>
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d037      	beq.n	800d744 <rclc_executor_spin_some+0x8c>
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f104 0718 	add.w	r7, r4, #24
 800d6da:	f7ff ffa3 	bl	800d624 <rclc_executor_prepare>
 800d6de:	4638      	mov	r0, r7
 800d6e0:	f007 fe0a 	bl	80152f8 <rcl_wait_set_clear>
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d177      	bne.n	800d7da <rclc_executor_spin_some+0x122>
 800d6ea:	68e3      	ldr	r3, [r4, #12]
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	b1eb      	cbz	r3, 800d72c <rclc_executor_spin_some+0x74>
 800d6f0:	68a1      	ldr	r1, [r4, #8]
 800d6f2:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800d6f6:	01aa      	lsls	r2, r5, #6
 800d6f8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d6fc:	b1b3      	cbz	r3, 800d72c <rclc_executor_spin_some+0x74>
 800d6fe:	5c8b      	ldrb	r3, [r1, r2]
 800d700:	2b0a      	cmp	r3, #10
 800d702:	d81f      	bhi.n	800d744 <rclc_executor_spin_some+0x8c>
 800d704:	e8df f003 	tbb	[pc, r3]
 800d708:	253e3434 	.word	0x253e3434
 800d70c:	06060625 	.word	0x06060625
 800d710:	525d      	.short	0x525d
 800d712:	48          	.byte	0x48
 800d713:	00          	.byte	0x00
 800d714:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d718:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d71c:	4638      	mov	r0, r7
 800d71e:	f008 f94b 	bl	80159b8 <rcl_wait_set_add_service>
 800d722:	b9f8      	cbnz	r0, 800d764 <rclc_executor_spin_some+0xac>
 800d724:	68e3      	ldr	r3, [r4, #12]
 800d726:	3501      	adds	r5, #1
 800d728:	42ab      	cmp	r3, r5
 800d72a:	d8e1      	bhi.n	800d6f0 <rclc_executor_spin_some+0x38>
 800d72c:	4642      	mov	r2, r8
 800d72e:	464b      	mov	r3, r9
 800d730:	4638      	mov	r0, r7
 800d732:	f008 f96d 	bl	8015a10 <rcl_wait>
 800d736:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800d73a:	2d00      	cmp	r5, #0
 800d73c:	f000 80ab 	beq.w	800d896 <rclc_executor_spin_some+0x1de>
 800d740:	2d01      	cmp	r5, #1
 800d742:	d055      	beq.n	800d7f0 <rclc_executor_spin_some+0x138>
 800d744:	f000 fa90 	bl	800dc68 <rcutils_reset_error>
 800d748:	2601      	movs	r6, #1
 800d74a:	4630      	mov	r0, r6
 800d74c:	b003      	add	sp, #12
 800d74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d752:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d756:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d75a:	4638      	mov	r0, r7
 800d75c:	f008 f900 	bl	8015960 <rcl_wait_set_add_client>
 800d760:	2800      	cmp	r0, #0
 800d762:	d0df      	beq.n	800d724 <rclc_executor_spin_some+0x6c>
 800d764:	9001      	str	r0, [sp, #4]
 800d766:	f000 fa7f 	bl	800dc68 <rcutils_reset_error>
 800d76a:	9801      	ldr	r0, [sp, #4]
 800d76c:	4606      	mov	r6, r0
 800d76e:	e7ec      	b.n	800d74a <rclc_executor_spin_some+0x92>
 800d770:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d774:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d778:	4638      	mov	r0, r7
 800d77a:	f007 fd91 	bl	80152a0 <rcl_wait_set_add_subscription>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d0d0      	beq.n	800d724 <rclc_executor_spin_some+0x6c>
 800d782:	e7ef      	b.n	800d764 <rclc_executor_spin_some+0xac>
 800d784:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d788:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d78c:	4638      	mov	r0, r7
 800d78e:	f008 f8b7 	bl	8015900 <rcl_wait_set_add_timer>
 800d792:	2800      	cmp	r0, #0
 800d794:	d0c6      	beq.n	800d724 <rclc_executor_spin_some+0x6c>
 800d796:	e7e5      	b.n	800d764 <rclc_executor_spin_some+0xac>
 800d798:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d79c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	f008 f881 	bl	80158a8 <rcl_wait_set_add_guard_condition>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d0bc      	beq.n	800d724 <rclc_executor_spin_some+0x6c>
 800d7aa:	e7db      	b.n	800d764 <rclc_executor_spin_some+0xac>
 800d7ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d7b0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d7b4:	3110      	adds	r1, #16
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	f008 fe48 	bl	801644c <rcl_action_wait_set_add_action_server>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d0b1      	beq.n	800d724 <rclc_executor_spin_some+0x6c>
 800d7c0:	e7d0      	b.n	800d764 <rclc_executor_spin_some+0xac>
 800d7c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d7cc:	3110      	adds	r1, #16
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	f008 fc2a 	bl	8016028 <rcl_action_wait_set_add_action_client>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d0a5      	beq.n	800d724 <rclc_executor_spin_some+0x6c>
 800d7d8:	e7c4      	b.n	800d764 <rclc_executor_spin_some+0xac>
 800d7da:	f000 fa45 	bl	800dc68 <rcutils_reset_error>
 800d7de:	4630      	mov	r0, r6
 800d7e0:	b003      	add	sp, #12
 800d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e6:	260b      	movs	r6, #11
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	b003      	add	sp, #12
 800d7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f0:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800d7f4:	4663      	mov	r3, ip
 800d7f6:	4615      	mov	r5, r2
 800d7f8:	b1ca      	cbz	r2, 800d82e <rclc_executor_spin_some+0x176>
 800d7fa:	2500      	movs	r5, #0
 800d7fc:	46a8      	mov	r8, r5
 800d7fe:	f240 1991 	movw	r9, #401	@ 0x191
 800d802:	e00c      	b.n	800d81e <rclc_executor_spin_some+0x166>
 800d804:	f7ff fad6 	bl	800cdb4 <_rclc_check_for_new_data>
 800d808:	f108 0801 	add.w	r8, r8, #1
 800d80c:	4605      	mov	r5, r0
 800d80e:	b108      	cbz	r0, 800d814 <rclc_executor_spin_some+0x15c>
 800d810:	4548      	cmp	r0, r9
 800d812:	d13e      	bne.n	800d892 <rclc_executor_spin_some+0x1da>
 800d814:	68e2      	ldr	r2, [r4, #12]
 800d816:	4590      	cmp	r8, r2
 800d818:	f080 808b 	bcs.w	800d932 <rclc_executor_spin_some+0x27a>
 800d81c:	68a3      	ldr	r3, [r4, #8]
 800d81e:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800d822:	469c      	mov	ip, r3
 800d824:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d828:	4639      	mov	r1, r7
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1ea      	bne.n	800d804 <rclc_executor_spin_some+0x14c>
 800d82e:	4611      	mov	r1, r2
 800d830:	4660      	mov	r0, ip
 800d832:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800d836:	4798      	blx	r3
 800d838:	b358      	cbz	r0, 800d892 <rclc_executor_spin_some+0x1da>
 800d83a:	68e3      	ldr	r3, [r4, #12]
 800d83c:	b34b      	cbz	r3, 800d892 <rclc_executor_spin_some+0x1da>
 800d83e:	f04f 0800 	mov.w	r8, #0
 800d842:	f240 1991 	movw	r9, #401	@ 0x191
 800d846:	e00a      	b.n	800d85e <rclc_executor_spin_some+0x1a6>
 800d848:	f7ff fb02 	bl	800ce50 <_rclc_take_new_data>
 800d84c:	f108 0801 	add.w	r8, r8, #1
 800d850:	4605      	mov	r5, r0
 800d852:	b108      	cbz	r0, 800d858 <rclc_executor_spin_some+0x1a0>
 800d854:	4548      	cmp	r0, r9
 800d856:	d11c      	bne.n	800d892 <rclc_executor_spin_some+0x1da>
 800d858:	68e3      	ldr	r3, [r4, #12]
 800d85a:	4598      	cmp	r8, r3
 800d85c:	d26f      	bcs.n	800d93e <rclc_executor_spin_some+0x286>
 800d85e:	68a3      	ldr	r3, [r4, #8]
 800d860:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800d864:	4639      	mov	r1, r7
 800d866:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d86a:	2a00      	cmp	r2, #0
 800d86c:	d1ec      	bne.n	800d848 <rclc_executor_spin_some+0x190>
 800d86e:	2700      	movs	r7, #0
 800d870:	e009      	b.n	800d886 <rclc_executor_spin_some+0x1ce>
 800d872:	f7ff fc8d 	bl	800d190 <_rclc_execute>
 800d876:	3701      	adds	r7, #1
 800d878:	4605      	mov	r5, r0
 800d87a:	b950      	cbnz	r0, 800d892 <rclc_executor_spin_some+0x1da>
 800d87c:	68e3      	ldr	r3, [r4, #12]
 800d87e:	429f      	cmp	r7, r3
 800d880:	f4bf af63 	bcs.w	800d74a <rclc_executor_spin_some+0x92>
 800d884:	68a3      	ldr	r3, [r4, #8]
 800d886:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800d88a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1ef      	bne.n	800d872 <rclc_executor_spin_some+0x1ba>
 800d892:	462e      	mov	r6, r5
 800d894:	e759      	b.n	800d74a <rclc_executor_spin_some+0x92>
 800d896:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800d89a:	4663      	mov	r3, ip
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	d054      	beq.n	800d94a <rclc_executor_spin_some+0x292>
 800d8a0:	46a8      	mov	r8, r5
 800d8a2:	f240 1991 	movw	r9, #401	@ 0x191
 800d8a6:	e00b      	b.n	800d8c0 <rclc_executor_spin_some+0x208>
 800d8a8:	f7ff fa84 	bl	800cdb4 <_rclc_check_for_new_data>
 800d8ac:	f108 0801 	add.w	r8, r8, #1
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	b108      	cbz	r0, 800d8b8 <rclc_executor_spin_some+0x200>
 800d8b4:	4548      	cmp	r0, r9
 800d8b6:	d1ec      	bne.n	800d892 <rclc_executor_spin_some+0x1da>
 800d8b8:	68e2      	ldr	r2, [r4, #12]
 800d8ba:	4590      	cmp	r8, r2
 800d8bc:	d23c      	bcs.n	800d938 <rclc_executor_spin_some+0x280>
 800d8be:	68a3      	ldr	r3, [r4, #8]
 800d8c0:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800d8c4:	469c      	mov	ip, r3
 800d8c6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d1eb      	bne.n	800d8a8 <rclc_executor_spin_some+0x1f0>
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4660      	mov	r0, ip
 800d8d4:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800d8d8:	4798      	blx	r3
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d0d9      	beq.n	800d892 <rclc_executor_spin_some+0x1da>
 800d8de:	68e3      	ldr	r3, [r4, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d0d6      	beq.n	800d892 <rclc_executor_spin_some+0x1da>
 800d8e4:	f04f 0a00 	mov.w	sl, #0
 800d8e8:	f240 1891 	movw	r8, #401	@ 0x191
 800d8ec:	f240 2959 	movw	r9, #601	@ 0x259
 800d8f0:	e013      	b.n	800d91a <rclc_executor_spin_some+0x262>
 800d8f2:	f7ff faad 	bl	800ce50 <_rclc_take_new_data>
 800d8f6:	b118      	cbz	r0, 800d900 <rclc_executor_spin_some+0x248>
 800d8f8:	4540      	cmp	r0, r8
 800d8fa:	d001      	beq.n	800d900 <rclc_executor_spin_some+0x248>
 800d8fc:	4548      	cmp	r0, r9
 800d8fe:	d122      	bne.n	800d946 <rclc_executor_spin_some+0x28e>
 800d900:	68a0      	ldr	r0, [r4, #8]
 800d902:	4458      	add	r0, fp
 800d904:	f7ff fc44 	bl	800d190 <_rclc_execute>
 800d908:	f10a 0a01 	add.w	sl, sl, #1
 800d90c:	4605      	mov	r5, r0
 800d90e:	2800      	cmp	r0, #0
 800d910:	d1bf      	bne.n	800d892 <rclc_executor_spin_some+0x1da>
 800d912:	68e3      	ldr	r3, [r4, #12]
 800d914:	459a      	cmp	sl, r3
 800d916:	f4bf af18 	bcs.w	800d74a <rclc_executor_spin_some+0x92>
 800d91a:	68a0      	ldr	r0, [r4, #8]
 800d91c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d920:	4639      	mov	r1, r7
 800d922:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d926:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e1      	bne.n	800d8f2 <rclc_executor_spin_some+0x23a>
 800d92e:	462e      	mov	r6, r5
 800d930:	e70b      	b.n	800d74a <rclc_executor_spin_some+0x92>
 800d932:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800d936:	e77a      	b.n	800d82e <rclc_executor_spin_some+0x176>
 800d938:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800d93c:	e7c8      	b.n	800d8d0 <rclc_executor_spin_some+0x218>
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0a7      	beq.n	800d892 <rclc_executor_spin_some+0x1da>
 800d942:	68a3      	ldr	r3, [r4, #8]
 800d944:	e793      	b.n	800d86e <rclc_executor_spin_some+0x1b6>
 800d946:	4606      	mov	r6, r0
 800d948:	e6ff      	b.n	800d74a <rclc_executor_spin_some+0x92>
 800d94a:	4615      	mov	r5, r2
 800d94c:	e7c0      	b.n	800d8d0 <rclc_executor_spin_some+0x218>
 800d94e:	bf00      	nop

0800d950 <rclc_executor_handle_counters_zero_init>:
 800d950:	b130      	cbz	r0, 800d960 <rclc_executor_handle_counters_zero_init+0x10>
 800d952:	b508      	push	{r3, lr}
 800d954:	2220      	movs	r2, #32
 800d956:	2100      	movs	r1, #0
 800d958:	f00d f9b9 	bl	801acce <memset>
 800d95c:	2000      	movs	r0, #0
 800d95e:	bd08      	pop	{r3, pc}
 800d960:	200b      	movs	r0, #11
 800d962:	4770      	bx	lr

0800d964 <rclc_executor_handle_init>:
 800d964:	b158      	cbz	r0, 800d97e <rclc_executor_handle_init+0x1a>
 800d966:	2300      	movs	r3, #0
 800d968:	220b      	movs	r2, #11
 800d96a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d96e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800d972:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d976:	8002      	strh	r2, [r0, #0]
 800d978:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d97a:	4618      	mov	r0, r3
 800d97c:	4770      	bx	lr
 800d97e:	200b      	movs	r0, #11
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop

0800d984 <rclc_support_init_with_options>:
 800d984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d988:	b083      	sub	sp, #12
 800d98a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d98c:	b340      	cbz	r0, 800d9e0 <rclc_support_init_with_options+0x5c>
 800d98e:	461d      	mov	r5, r3
 800d990:	b333      	cbz	r3, 800d9e0 <rclc_support_init_with_options+0x5c>
 800d992:	b32e      	cbz	r6, 800d9e0 <rclc_support_init_with_options+0x5c>
 800d994:	46e9      	mov	r9, sp
 800d996:	4604      	mov	r4, r0
 800d998:	4648      	mov	r0, r9
 800d99a:	460f      	mov	r7, r1
 800d99c:	4690      	mov	r8, r2
 800d99e:	f006 f957 	bl	8013c50 <rcl_get_zero_initialized_context>
 800d9a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d9a6:	462a      	mov	r2, r5
 800d9a8:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9ac:	4623      	mov	r3, r4
 800d9ae:	4641      	mov	r1, r8
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	f006 f9bd 	bl	8013d30 <rcl_init>
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	b960      	cbnz	r0, 800d9d4 <rclc_support_init_with_options+0x50>
 800d9ba:	60a6      	str	r6, [r4, #8]
 800d9bc:	4632      	mov	r2, r6
 800d9be:	f104 010c 	add.w	r1, r4, #12
 800d9c2:	2003      	movs	r0, #3
 800d9c4:	f007 f80c 	bl	80149e0 <rcl_clock_init>
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	b918      	cbnz	r0, 800d9d4 <rclc_support_init_with_options+0x50>
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	b003      	add	sp, #12
 800d9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9d4:	f000 f948 	bl	800dc68 <rcutils_reset_error>
 800d9d8:	4628      	mov	r0, r5
 800d9da:	b003      	add	sp, #12
 800d9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9e0:	250b      	movs	r5, #11
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	b003      	add	sp, #12
 800d9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ea:	bf00      	nop

0800d9ec <rclc_node_init_default>:
 800d9ec:	b3b8      	cbz	r0, 800da5e <rclc_node_init_default+0x72>
 800d9ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f2:	460d      	mov	r5, r1
 800d9f4:	b0a1      	sub	sp, #132	@ 0x84
 800d9f6:	b329      	cbz	r1, 800da44 <rclc_node_init_default+0x58>
 800d9f8:	4616      	mov	r6, r2
 800d9fa:	b31a      	cbz	r2, 800da44 <rclc_node_init_default+0x58>
 800d9fc:	461f      	mov	r7, r3
 800d9fe:	b30b      	cbz	r3, 800da44 <rclc_node_init_default+0x58>
 800da00:	f10d 0810 	add.w	r8, sp, #16
 800da04:	4604      	mov	r4, r0
 800da06:	4640      	mov	r0, r8
 800da08:	f006 fad0 	bl	8013fac <rcl_get_zero_initialized_node>
 800da0c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800da10:	f10d 0918 	add.w	r9, sp, #24
 800da14:	e884 0003 	stmia.w	r4, {r0, r1}
 800da18:	4648      	mov	r0, r9
 800da1a:	f006 fc6f 	bl	80142fc <rcl_node_get_default_options>
 800da1e:	4640      	mov	r0, r8
 800da20:	f006 fac4 	bl	8013fac <rcl_get_zero_initialized_node>
 800da24:	f8cd 9000 	str.w	r9, [sp]
 800da28:	e898 0003 	ldmia.w	r8, {r0, r1}
 800da2c:	463b      	mov	r3, r7
 800da2e:	e884 0003 	stmia.w	r4, {r0, r1}
 800da32:	4632      	mov	r2, r6
 800da34:	4629      	mov	r1, r5
 800da36:	4620      	mov	r0, r4
 800da38:	f006 fac2 	bl	8013fc0 <rcl_node_init>
 800da3c:	b930      	cbnz	r0, 800da4c <rclc_node_init_default+0x60>
 800da3e:	b021      	add	sp, #132	@ 0x84
 800da40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da44:	200b      	movs	r0, #11
 800da46:	b021      	add	sp, #132	@ 0x84
 800da48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4c:	9003      	str	r0, [sp, #12]
 800da4e:	f000 f90b 	bl	800dc68 <rcutils_reset_error>
 800da52:	f000 f909 	bl	800dc68 <rcutils_reset_error>
 800da56:	9803      	ldr	r0, [sp, #12]
 800da58:	b021      	add	sp, #132	@ 0x84
 800da5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da5e:	200b      	movs	r0, #11
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop

0800da64 <rclc_publisher_init_default>:
 800da64:	b368      	cbz	r0, 800dac2 <rclc_publisher_init_default+0x5e>
 800da66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6a:	460d      	mov	r5, r1
 800da6c:	b0a0      	sub	sp, #128	@ 0x80
 800da6e:	b321      	cbz	r1, 800daba <rclc_publisher_init_default+0x56>
 800da70:	4616      	mov	r6, r2
 800da72:	b312      	cbz	r2, 800daba <rclc_publisher_init_default+0x56>
 800da74:	461f      	mov	r7, r3
 800da76:	b303      	cbz	r3, 800daba <rclc_publisher_init_default+0x56>
 800da78:	4604      	mov	r4, r0
 800da7a:	f7ff f87d 	bl	800cb78 <rcl_get_zero_initialized_publisher>
 800da7e:	f10d 0810 	add.w	r8, sp, #16
 800da82:	6020      	str	r0, [r4, #0]
 800da84:	4640      	mov	r0, r8
 800da86:	f7ff f915 	bl	800ccb4 <rcl_publisher_get_default_options>
 800da8a:	490f      	ldr	r1, [pc, #60]	@ (800dac8 <rclc_publisher_init_default+0x64>)
 800da8c:	2250      	movs	r2, #80	@ 0x50
 800da8e:	4640      	mov	r0, r8
 800da90:	f00d f9fd 	bl	801ae8e <memcpy>
 800da94:	f8cd 8000 	str.w	r8, [sp]
 800da98:	463b      	mov	r3, r7
 800da9a:	4632      	mov	r2, r6
 800da9c:	4629      	mov	r1, r5
 800da9e:	4620      	mov	r0, r4
 800daa0:	f7ff f870 	bl	800cb84 <rcl_publisher_init>
 800daa4:	b910      	cbnz	r0, 800daac <rclc_publisher_init_default+0x48>
 800daa6:	b020      	add	sp, #128	@ 0x80
 800daa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daac:	9003      	str	r0, [sp, #12]
 800daae:	f000 f8db 	bl	800dc68 <rcutils_reset_error>
 800dab2:	9803      	ldr	r0, [sp, #12]
 800dab4:	b020      	add	sp, #128	@ 0x80
 800dab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daba:	200b      	movs	r0, #11
 800dabc:	b020      	add	sp, #128	@ 0x80
 800dabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac2:	200b      	movs	r0, #11
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	0801e470 	.word	0x0801e470

0800dacc <rclc_subscription_init_default>:
 800dacc:	b368      	cbz	r0, 800db2a <rclc_subscription_init_default+0x5e>
 800dace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad2:	460d      	mov	r5, r1
 800dad4:	b0a2      	sub	sp, #136	@ 0x88
 800dad6:	b321      	cbz	r1, 800db22 <rclc_subscription_init_default+0x56>
 800dad8:	4616      	mov	r6, r2
 800dada:	b312      	cbz	r2, 800db22 <rclc_subscription_init_default+0x56>
 800dadc:	461f      	mov	r7, r3
 800dade:	b303      	cbz	r3, 800db22 <rclc_subscription_init_default+0x56>
 800dae0:	4604      	mov	r4, r0
 800dae2:	f006 fe15 	bl	8014710 <rcl_get_zero_initialized_subscription>
 800dae6:	f10d 0810 	add.w	r8, sp, #16
 800daea:	6020      	str	r0, [r4, #0]
 800daec:	4640      	mov	r0, r8
 800daee:	f006 febd 	bl	801486c <rcl_subscription_get_default_options>
 800daf2:	490f      	ldr	r1, [pc, #60]	@ (800db30 <rclc_subscription_init_default+0x64>)
 800daf4:	2250      	movs	r2, #80	@ 0x50
 800daf6:	4640      	mov	r0, r8
 800daf8:	f00d f9c9 	bl	801ae8e <memcpy>
 800dafc:	f8cd 8000 	str.w	r8, [sp]
 800db00:	463b      	mov	r3, r7
 800db02:	4632      	mov	r2, r6
 800db04:	4629      	mov	r1, r5
 800db06:	4620      	mov	r0, r4
 800db08:	f006 fe08 	bl	801471c <rcl_subscription_init>
 800db0c:	b910      	cbnz	r0, 800db14 <rclc_subscription_init_default+0x48>
 800db0e:	b022      	add	sp, #136	@ 0x88
 800db10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db14:	9003      	str	r0, [sp, #12]
 800db16:	f000 f8a7 	bl	800dc68 <rcutils_reset_error>
 800db1a:	9803      	ldr	r0, [sp, #12]
 800db1c:	b022      	add	sp, #136	@ 0x88
 800db1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db22:	200b      	movs	r0, #11
 800db24:	b022      	add	sp, #136	@ 0x88
 800db26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db2a:	200b      	movs	r0, #11
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	0801e4c0 	.word	0x0801e4c0

0800db34 <rclc_timer_init_default2>:
 800db34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db38:	b08c      	sub	sp, #48	@ 0x30
 800db3a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800db3e:	b330      	cbz	r0, 800db8e <rclc_timer_init_default2+0x5a>
 800db40:	460e      	mov	r6, r1
 800db42:	b321      	cbz	r1, 800db8e <rclc_timer_init_default2+0x5a>
 800db44:	4690      	mov	r8, r2
 800db46:	461f      	mov	r7, r3
 800db48:	4605      	mov	r5, r0
 800db4a:	f007 f933 	bl	8014db4 <rcl_get_zero_initialized_timer>
 800db4e:	9408      	str	r4, [sp, #32]
 800db50:	68b4      	ldr	r4, [r6, #8]
 800db52:	6028      	str	r0, [r5, #0]
 800db54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db56:	f10d 0c0c 	add.w	ip, sp, #12
 800db5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	f8cc 3000 	str.w	r3, [ip]
 800db64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db66:	9302      	str	r3, [sp, #8]
 800db68:	e9cd 8700 	strd	r8, r7, [sp]
 800db6c:	4628      	mov	r0, r5
 800db6e:	4632      	mov	r2, r6
 800db70:	f106 010c 	add.w	r1, r6, #12
 800db74:	f007 f924 	bl	8014dc0 <rcl_timer_init2>
 800db78:	b910      	cbnz	r0, 800db80 <rclc_timer_init_default2+0x4c>
 800db7a:	b00c      	add	sp, #48	@ 0x30
 800db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db80:	900b      	str	r0, [sp, #44]	@ 0x2c
 800db82:	f000 f871 	bl	800dc68 <rcutils_reset_error>
 800db86:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800db88:	b00c      	add	sp, #48	@ 0x30
 800db8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db8e:	200b      	movs	r0, #11
 800db90:	b00c      	add	sp, #48	@ 0x30
 800db92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db96:	bf00      	nop

0800db98 <__default_zero_allocate>:
 800db98:	f00b bef6 	b.w	8019988 <calloc>

0800db9c <__default_reallocate>:
 800db9c:	f00c b894 	b.w	8019cc8 <realloc>

0800dba0 <__default_deallocate>:
 800dba0:	f00b bf70 	b.w	8019a84 <free>

0800dba4 <__default_allocate>:
 800dba4:	f00b bf66 	b.w	8019a74 <malloc>

0800dba8 <rcutils_get_zero_initialized_allocator>:
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	4c05      	ldr	r4, [pc, #20]	@ (800dbc0 <rcutils_get_zero_initialized_allocator+0x18>)
 800dbac:	4686      	mov	lr, r0
 800dbae:	4684      	mov	ip, r0
 800dbb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	f8cc 3000 	str.w	r3, [ip]
 800dbbc:	4670      	mov	r0, lr
 800dbbe:	bd10      	pop	{r4, pc}
 800dbc0:	0801e510 	.word	0x0801e510

0800dbc4 <rcutils_get_default_allocator>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	4c05      	ldr	r4, [pc, #20]	@ (800dbdc <rcutils_get_default_allocator+0x18>)
 800dbc8:	4686      	mov	lr, r0
 800dbca:	4684      	mov	ip, r0
 800dbcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbd2:	6823      	ldr	r3, [r4, #0]
 800dbd4:	f8cc 3000 	str.w	r3, [ip]
 800dbd8:	4670      	mov	r0, lr
 800dbda:	bd10      	pop	{r4, pc}
 800dbdc:	200004b4 	.word	0x200004b4

0800dbe0 <rcutils_set_default_allocator>:
 800dbe0:	b1a8      	cbz	r0, 800dc0e <rcutils_set_default_allocator+0x2e>
 800dbe2:	6802      	ldr	r2, [r0, #0]
 800dbe4:	b1a2      	cbz	r2, 800dc10 <rcutils_set_default_allocator+0x30>
 800dbe6:	6841      	ldr	r1, [r0, #4]
 800dbe8:	b1a1      	cbz	r1, 800dc14 <rcutils_set_default_allocator+0x34>
 800dbea:	b410      	push	{r4}
 800dbec:	68c4      	ldr	r4, [r0, #12]
 800dbee:	b164      	cbz	r4, 800dc0a <rcutils_set_default_allocator+0x2a>
 800dbf0:	6880      	ldr	r0, [r0, #8]
 800dbf2:	b138      	cbz	r0, 800dc04 <rcutils_set_default_allocator+0x24>
 800dbf4:	4b08      	ldr	r3, [pc, #32]	@ (800dc18 <rcutils_set_default_allocator+0x38>)
 800dbf6:	601a      	str	r2, [r3, #0]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800dbfe:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800dc02:	2001      	movs	r0, #1
 800dc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	e7fa      	b.n	800dc04 <rcutils_set_default_allocator+0x24>
 800dc0e:	4770      	bx	lr
 800dc10:	4610      	mov	r0, r2
 800dc12:	4770      	bx	lr
 800dc14:	4608      	mov	r0, r1
 800dc16:	4770      	bx	lr
 800dc18:	200004b4 	.word	0x200004b4

0800dc1c <rcutils_allocator_is_valid>:
 800dc1c:	b158      	cbz	r0, 800dc36 <rcutils_allocator_is_valid+0x1a>
 800dc1e:	6803      	ldr	r3, [r0, #0]
 800dc20:	b143      	cbz	r3, 800dc34 <rcutils_allocator_is_valid+0x18>
 800dc22:	6843      	ldr	r3, [r0, #4]
 800dc24:	b133      	cbz	r3, 800dc34 <rcutils_allocator_is_valid+0x18>
 800dc26:	68c3      	ldr	r3, [r0, #12]
 800dc28:	b123      	cbz	r3, 800dc34 <rcutils_allocator_is_valid+0x18>
 800dc2a:	6880      	ldr	r0, [r0, #8]
 800dc2c:	3800      	subs	r0, #0
 800dc2e:	bf18      	it	ne
 800dc30:	2001      	movne	r0, #1
 800dc32:	4770      	bx	lr
 800dc34:	4618      	mov	r0, r3
 800dc36:	4770      	bx	lr

0800dc38 <rcutils_get_error_string>:
 800dc38:	4b06      	ldr	r3, [pc, #24]	@ (800dc54 <rcutils_get_error_string+0x1c>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	b13b      	cbz	r3, 800dc4e <rcutils_get_error_string+0x16>
 800dc3e:	4b06      	ldr	r3, [pc, #24]	@ (800dc58 <rcutils_get_error_string+0x20>)
 800dc40:	781a      	ldrb	r2, [r3, #0]
 800dc42:	b90a      	cbnz	r2, 800dc48 <rcutils_get_error_string+0x10>
 800dc44:	2201      	movs	r2, #1
 800dc46:	701a      	strb	r2, [r3, #0]
 800dc48:	4b04      	ldr	r3, [pc, #16]	@ (800dc5c <rcutils_get_error_string+0x24>)
 800dc4a:	7818      	ldrb	r0, [r3, #0]
 800dc4c:	4770      	bx	lr
 800dc4e:	4b04      	ldr	r3, [pc, #16]	@ (800dc60 <rcutils_get_error_string+0x28>)
 800dc50:	7818      	ldrb	r0, [r3, #0]
 800dc52:	4770      	bx	lr
 800dc54:	20008948 	.word	0x20008948
 800dc58:	2000894d 	.word	0x2000894d
 800dc5c:	2000894c 	.word	0x2000894c
 800dc60:	0801db90 	.word	0x0801db90
 800dc64:	00000000 	.word	0x00000000

0800dc68 <rcutils_reset_error>:
 800dc68:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800dc88 <rcutils_reset_error+0x20>
 800dc6c:	4a08      	ldr	r2, [pc, #32]	@ (800dc90 <rcutils_reset_error+0x28>)
 800dc6e:	4809      	ldr	r0, [pc, #36]	@ (800dc94 <rcutils_reset_error+0x2c>)
 800dc70:	4909      	ldr	r1, [pc, #36]	@ (800dc98 <rcutils_reset_error+0x30>)
 800dc72:	2300      	movs	r3, #0
 800dc74:	8013      	strh	r3, [r2, #0]
 800dc76:	ed82 7b02 	vstr	d7, [r2, #8]
 800dc7a:	4a08      	ldr	r2, [pc, #32]	@ (800dc9c <rcutils_reset_error+0x34>)
 800dc7c:	7003      	strb	r3, [r0, #0]
 800dc7e:	700b      	strb	r3, [r1, #0]
 800dc80:	7013      	strb	r3, [r2, #0]
 800dc82:	4770      	bx	lr
 800dc84:	f3af 8000 	nop.w
	...
 800dc90:	20008950 	.word	0x20008950
 800dc94:	2000894d 	.word	0x2000894d
 800dc98:	2000894c 	.word	0x2000894c
 800dc9c:	20008948 	.word	0x20008948

0800dca0 <rcutils_system_time_now>:
 800dca0:	b318      	cbz	r0, 800dcea <rcutils_system_time_now+0x4a>
 800dca2:	b570      	push	{r4, r5, r6, lr}
 800dca4:	b084      	sub	sp, #16
 800dca6:	4604      	mov	r4, r0
 800dca8:	4669      	mov	r1, sp
 800dcaa:	2001      	movs	r0, #1
 800dcac:	f7f4 fc64 	bl	8002578 <clock_gettime>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	db17      	blt.n	800dce4 <rcutils_system_time_now+0x44>
 800dcb4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dcb8:	2900      	cmp	r1, #0
 800dcba:	db13      	blt.n	800dce4 <rcutils_system_time_now+0x44>
 800dcbc:	9d02      	ldr	r5, [sp, #8]
 800dcbe:	2d00      	cmp	r5, #0
 800dcc0:	db0d      	blt.n	800dcde <rcutils_system_time_now+0x3e>
 800dcc2:	4e0b      	ldr	r6, [pc, #44]	@ (800dcf0 <rcutils_system_time_now+0x50>)
 800dcc4:	fba3 3206 	umull	r3, r2, r3, r6
 800dcc8:	195b      	adds	r3, r3, r5
 800dcca:	fb06 2201 	mla	r2, r6, r1, r2
 800dcce:	f04f 0000 	mov.w	r0, #0
 800dcd2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dcd6:	e9c4 3200 	strd	r3, r2, [r4]
 800dcda:	b004      	add	sp, #16
 800dcdc:	bd70      	pop	{r4, r5, r6, pc}
 800dcde:	ea53 0201 	orrs.w	r2, r3, r1
 800dce2:	d1ee      	bne.n	800dcc2 <rcutils_system_time_now+0x22>
 800dce4:	2002      	movs	r0, #2
 800dce6:	b004      	add	sp, #16
 800dce8:	bd70      	pop	{r4, r5, r6, pc}
 800dcea:	200b      	movs	r0, #11
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	3b9aca00 	.word	0x3b9aca00

0800dcf4 <rcutils_steady_time_now>:
 800dcf4:	b318      	cbz	r0, 800dd3e <rcutils_steady_time_now+0x4a>
 800dcf6:	b570      	push	{r4, r5, r6, lr}
 800dcf8:	b084      	sub	sp, #16
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	4669      	mov	r1, sp
 800dcfe:	2000      	movs	r0, #0
 800dd00:	f7f4 fc3a 	bl	8002578 <clock_gettime>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	db17      	blt.n	800dd38 <rcutils_steady_time_now+0x44>
 800dd08:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	db13      	blt.n	800dd38 <rcutils_steady_time_now+0x44>
 800dd10:	9d02      	ldr	r5, [sp, #8]
 800dd12:	2d00      	cmp	r5, #0
 800dd14:	db0d      	blt.n	800dd32 <rcutils_steady_time_now+0x3e>
 800dd16:	4e0b      	ldr	r6, [pc, #44]	@ (800dd44 <rcutils_steady_time_now+0x50>)
 800dd18:	fba3 3206 	umull	r3, r2, r3, r6
 800dd1c:	195b      	adds	r3, r3, r5
 800dd1e:	fb06 2201 	mla	r2, r6, r1, r2
 800dd22:	f04f 0000 	mov.w	r0, #0
 800dd26:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dd2a:	e9c4 3200 	strd	r3, r2, [r4]
 800dd2e:	b004      	add	sp, #16
 800dd30:	bd70      	pop	{r4, r5, r6, pc}
 800dd32:	ea53 0201 	orrs.w	r2, r3, r1
 800dd36:	d1ee      	bne.n	800dd16 <rcutils_steady_time_now+0x22>
 800dd38:	2002      	movs	r0, #2
 800dd3a:	b004      	add	sp, #16
 800dd3c:	bd70      	pop	{r4, r5, r6, pc}
 800dd3e:	200b      	movs	r0, #11
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	3b9aca00 	.word	0x3b9aca00

0800dd48 <rmw_get_zero_initialized_init_options>:
 800dd48:	b530      	push	{r4, r5, lr}
 800dd4a:	b08b      	sub	sp, #44	@ 0x2c
 800dd4c:	466d      	mov	r5, sp
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4628      	mov	r0, r5
 800dd52:	f000 f825 	bl	800dda0 <rmw_get_default_security_options>
 800dd56:	a802      	add	r0, sp, #8
 800dd58:	f009 f8f2 	bl	8016f40 <rmw_get_zero_initialized_discovery_options>
 800dd5c:	2258      	movs	r2, #88	@ 0x58
 800dd5e:	2100      	movs	r1, #0
 800dd60:	4620      	mov	r0, r4
 800dd62:	f00c ffb4 	bl	801acce <memset>
 800dd66:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dd6a:	f104 0310 	add.w	r3, r4, #16
 800dd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd72:	f10d 0c08 	add.w	ip, sp, #8
 800dd76:	e883 0003 	stmia.w	r3, {r0, r1}
 800dd7a:	60e2      	str	r2, [r4, #12]
 800dd7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dd80:	f104 0e1c 	add.w	lr, r4, #28
 800dd84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd88:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800dd8c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800dd90:	4620      	mov	r0, r4
 800dd92:	b00b      	add	sp, #44	@ 0x2c
 800dd94:	bd30      	pop	{r4, r5, pc}
 800dd96:	bf00      	nop

0800dd98 <rmw_get_default_publisher_options>:
 800dd98:	2200      	movs	r2, #0
 800dd9a:	6002      	str	r2, [r0, #0]
 800dd9c:	7102      	strb	r2, [r0, #4]
 800dd9e:	4770      	bx	lr

0800dda0 <rmw_get_default_security_options>:
 800dda0:	2200      	movs	r2, #0
 800dda2:	7002      	strb	r2, [r0, #0]
 800dda4:	6042      	str	r2, [r0, #4]
 800dda6:	4770      	bx	lr

0800dda8 <rmw_uros_set_custom_transport>:
 800dda8:	b470      	push	{r4, r5, r6}
 800ddaa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ddae:	b162      	cbz	r2, 800ddca <rmw_uros_set_custom_transport+0x22>
 800ddb0:	b15b      	cbz	r3, 800ddca <rmw_uros_set_custom_transport+0x22>
 800ddb2:	b155      	cbz	r5, 800ddca <rmw_uros_set_custom_transport+0x22>
 800ddb4:	b14e      	cbz	r6, 800ddca <rmw_uros_set_custom_transport+0x22>
 800ddb6:	4c06      	ldr	r4, [pc, #24]	@ (800ddd0 <rmw_uros_set_custom_transport+0x28>)
 800ddb8:	7020      	strb	r0, [r4, #0]
 800ddba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ddbe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ddc2:	6166      	str	r6, [r4, #20]
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	bc70      	pop	{r4, r5, r6}
 800ddc8:	4770      	bx	lr
 800ddca:	200b      	movs	r0, #11
 800ddcc:	bc70      	pop	{r4, r5, r6}
 800ddce:	4770      	bx	lr
 800ddd0:	20008960 	.word	0x20008960

0800ddd4 <rmw_uros_ping_agent>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	4b22      	ldr	r3, [pc, #136]	@ (800de60 <rmw_uros_ping_agent+0x8c>)
 800ddd8:	7b1a      	ldrb	r2, [r3, #12]
 800ddda:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ddde:	4605      	mov	r5, r0
 800dde0:	460e      	mov	r6, r1
 800dde2:	b10a      	cbz	r2, 800dde8 <rmw_uros_ping_agent+0x14>
 800dde4:	681c      	ldr	r4, [r3, #0]
 800dde6:	b9bc      	cbnz	r4, 800de18 <rmw_uros_ping_agent+0x44>
 800dde8:	4b1e      	ldr	r3, [pc, #120]	@ (800de64 <rmw_uros_ping_agent+0x90>)
 800ddea:	781a      	ldrb	r2, [r3, #0]
 800ddec:	6918      	ldr	r0, [r3, #16]
 800ddee:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	68da      	ldr	r2, [r3, #12]
 800ddfa:	909c      	str	r0, [sp, #624]	@ 0x270
 800ddfc:	6958      	ldr	r0, [r3, #20]
 800ddfe:	929b      	str	r2, [sp, #620]	@ 0x26c
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	909d      	str	r0, [sp, #628]	@ 0x274
 800de04:	466a      	mov	r2, sp
 800de06:	4608      	mov	r0, r1
 800de08:	939a      	str	r3, [sp, #616]	@ 0x268
 800de0a:	f000 fed5 	bl	800ebb8 <rmw_uxrce_transport_init>
 800de0e:	b198      	cbz	r0, 800de38 <rmw_uros_ping_agent+0x64>
 800de10:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800de14:	bd70      	pop	{r4, r5, r6, pc}
 800de16:	b9f0      	cbnz	r0, 800de56 <rmw_uros_ping_agent+0x82>
 800de18:	68a0      	ldr	r0, [r4, #8]
 800de1a:	4632      	mov	r2, r6
 800de1c:	4629      	mov	r1, r5
 800de1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de22:	f002 f897 	bl	800ff54 <uxr_ping_agent_session>
 800de26:	6864      	ldr	r4, [r4, #4]
 800de28:	2c00      	cmp	r4, #0
 800de2a:	d1f4      	bne.n	800de16 <rmw_uros_ping_agent+0x42>
 800de2c:	f080 0001 	eor.w	r0, r0, #1
 800de30:	b2c0      	uxtb	r0, r0
 800de32:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800de36:	bd70      	pop	{r4, r5, r6, pc}
 800de38:	4632      	mov	r2, r6
 800de3a:	4629      	mov	r1, r5
 800de3c:	a89e      	add	r0, sp, #632	@ 0x278
 800de3e:	f002 f8d9 	bl	800fff4 <uxr_ping_agent_attempts>
 800de42:	4604      	mov	r4, r0
 800de44:	4668      	mov	r0, sp
 800de46:	f002 f853 	bl	800fef0 <uxr_close_custom_transport>
 800de4a:	f084 0001 	eor.w	r0, r4, #1
 800de4e:	b2c0      	uxtb	r0, r0
 800de50:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800de54:	bd70      	pop	{r4, r5, r6, pc}
 800de56:	2000      	movs	r0, #0
 800de58:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	bf00      	nop
 800de60:	2000ce38 	.word	0x2000ce38
 800de64:	20008960 	.word	0x20008960

0800de68 <rmw_init_options_init>:
 800de68:	b084      	sub	sp, #16
 800de6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de6c:	b083      	sub	sp, #12
 800de6e:	ad09      	add	r5, sp, #36	@ 0x24
 800de70:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800de74:	b130      	cbz	r0, 800de84 <rmw_init_options_init+0x1c>
 800de76:	4604      	mov	r4, r0
 800de78:	4628      	mov	r0, r5
 800de7a:	f7ff fecf 	bl	800dc1c <rcutils_allocator_is_valid>
 800de7e:	b108      	cbz	r0, 800de84 <rmw_init_options_init+0x1c>
 800de80:	68a6      	ldr	r6, [r4, #8]
 800de82:	b12e      	cbz	r6, 800de90 <rmw_init_options_init+0x28>
 800de84:	200b      	movs	r0, #11
 800de86:	b003      	add	sp, #12
 800de88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de8c:	b004      	add	sp, #16
 800de8e:	4770      	bx	lr
 800de90:	2200      	movs	r2, #0
 800de92:	2300      	movs	r3, #0
 800de94:	e9c4 2300 	strd	r2, r3, [r4]
 800de98:	4b20      	ldr	r3, [pc, #128]	@ (800df1c <rmw_init_options_init+0xb4>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	60a3      	str	r3, [r4, #8]
 800de9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dea0:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 800dea4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dea8:	466f      	mov	r7, sp
 800deaa:	682b      	ldr	r3, [r5, #0]
 800deac:	f8cc 3000 	str.w	r3, [ip]
 800deb0:	4638      	mov	r0, r7
 800deb2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800deb4:	60e6      	str	r6, [r4, #12]
 800deb6:	f7ff ff73 	bl	800dda0 <rmw_get_default_security_options>
 800deba:	e897 0003 	ldmia.w	r7, {r0, r1}
 800debe:	f104 0310 	add.w	r3, r4, #16
 800dec2:	e883 0003 	stmia.w	r3, {r0, r1}
 800dec6:	2203      	movs	r2, #3
 800dec8:	4815      	ldr	r0, [pc, #84]	@ (800df20 <rmw_init_options_init+0xb8>)
 800deca:	4916      	ldr	r1, [pc, #88]	@ (800df24 <rmw_init_options_init+0xbc>)
 800decc:	7626      	strb	r6, [r4, #24]
 800dece:	f000 ffb9 	bl	800ee44 <rmw_uxrce_init_init_options_impl_memory>
 800ded2:	4813      	ldr	r0, [pc, #76]	@ (800df20 <rmw_init_options_init+0xb8>)
 800ded4:	f009 fb44 	bl	8017560 <get_memory>
 800ded8:	b1f0      	cbz	r0, 800df18 <rmw_init_options_init+0xb0>
 800deda:	4a13      	ldr	r2, [pc, #76]	@ (800df28 <rmw_init_options_init+0xc0>)
 800dedc:	6883      	ldr	r3, [r0, #8]
 800dede:	6851      	ldr	r1, [r2, #4]
 800dee0:	7810      	ldrb	r0, [r2, #0]
 800dee2:	6563      	str	r3, [r4, #84]	@ 0x54
 800dee4:	7418      	strb	r0, [r3, #16]
 800dee6:	6159      	str	r1, [r3, #20]
 800dee8:	68d1      	ldr	r1, [r2, #12]
 800deea:	61d9      	str	r1, [r3, #28]
 800deec:	6911      	ldr	r1, [r2, #16]
 800deee:	6219      	str	r1, [r3, #32]
 800def0:	6951      	ldr	r1, [r2, #20]
 800def2:	6892      	ldr	r2, [r2, #8]
 800def4:	619a      	str	r2, [r3, #24]
 800def6:	6259      	str	r1, [r3, #36]	@ 0x24
 800def8:	f004 f930 	bl	801215c <uxr_nanos>
 800defc:	f00b fe78 	bl	8019bf0 <srand>
 800df00:	f00b fea4 	bl	8019c4c <rand>
 800df04:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800df06:	6298      	str	r0, [r3, #40]	@ 0x28
 800df08:	2800      	cmp	r0, #0
 800df0a:	d0f9      	beq.n	800df00 <rmw_init_options_init+0x98>
 800df0c:	2000      	movs	r0, #0
 800df0e:	b003      	add	sp, #12
 800df10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df14:	b004      	add	sp, #16
 800df16:	4770      	bx	lr
 800df18:	2001      	movs	r0, #1
 800df1a:	e7b4      	b.n	800de86 <rmw_init_options_init+0x1e>
 800df1c:	0801ea7c 	.word	0x0801ea7c
 800df20:	20008b4c 	.word	0x20008b4c
 800df24:	20008ac8 	.word	0x20008ac8
 800df28:	20008960 	.word	0x20008960

0800df2c <rmw_init_options_copy>:
 800df2c:	b570      	push	{r4, r5, r6, lr}
 800df2e:	b088      	sub	sp, #32
 800df30:	b160      	cbz	r0, 800df4c <rmw_init_options_copy+0x20>
 800df32:	460d      	mov	r5, r1
 800df34:	b151      	cbz	r1, 800df4c <rmw_init_options_copy+0x20>
 800df36:	4604      	mov	r4, r0
 800df38:	6880      	ldr	r0, [r0, #8]
 800df3a:	b128      	cbz	r0, 800df48 <rmw_init_options_copy+0x1c>
 800df3c:	4b29      	ldr	r3, [pc, #164]	@ (800dfe4 <rmw_init_options_copy+0xb8>)
 800df3e:	6819      	ldr	r1, [r3, #0]
 800df40:	f7f2 f92e 	bl	80001a0 <strcmp>
 800df44:	2800      	cmp	r0, #0
 800df46:	d140      	bne.n	800dfca <rmw_init_options_copy+0x9e>
 800df48:	68ab      	ldr	r3, [r5, #8]
 800df4a:	b11b      	cbz	r3, 800df54 <rmw_init_options_copy+0x28>
 800df4c:	240b      	movs	r4, #11
 800df4e:	4620      	mov	r0, r4
 800df50:	b008      	add	sp, #32
 800df52:	bd70      	pop	{r4, r5, r6, pc}
 800df54:	2258      	movs	r2, #88	@ 0x58
 800df56:	4621      	mov	r1, r4
 800df58:	4628      	mov	r0, r5
 800df5a:	f00c ff98 	bl	801ae8e <memcpy>
 800df5e:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 800df62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800df66:	f10d 0c0c 	add.w	ip, sp, #12
 800df6a:	4666      	mov	r6, ip
 800df6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df70:	f8de 3000 	ldr.w	r3, [lr]
 800df74:	f8cc 3000 	str.w	r3, [ip]
 800df78:	4630      	mov	r0, r6
 800df7a:	f7ff fe4f 	bl	800dc1c <rcutils_allocator_is_valid>
 800df7e:	2800      	cmp	r0, #0
 800df80:	d0e4      	beq.n	800df4c <rmw_init_options_copy+0x20>
 800df82:	ab08      	add	r3, sp, #32
 800df84:	e913 0003 	ldmdb	r3, {r0, r1}
 800df88:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df8c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800df90:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800df92:	f008 fe59 	bl	8016c48 <rcutils_strdup>
 800df96:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800df98:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800df9a:	b103      	cbz	r3, 800df9e <rmw_init_options_copy+0x72>
 800df9c:	b1f8      	cbz	r0, 800dfde <rmw_init_options_copy+0xb2>
 800df9e:	4812      	ldr	r0, [pc, #72]	@ (800dfe8 <rmw_init_options_copy+0xbc>)
 800dfa0:	f009 fade 	bl	8017560 <get_memory>
 800dfa4:	b1a8      	cbz	r0, 800dfd2 <rmw_init_options_copy+0xa6>
 800dfa6:	6883      	ldr	r3, [r0, #8]
 800dfa8:	656b      	str	r3, [r5, #84]	@ 0x54
 800dfaa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dfac:	f102 0c10 	add.w	ip, r2, #16
 800dfb0:	f103 0510 	add.w	r5, r3, #16
 800dfb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dfb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfba:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800dfbe:	2400      	movs	r4, #0
 800dfc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	b008      	add	sp, #32
 800dfc8:	bd70      	pop	{r4, r5, r6, pc}
 800dfca:	240c      	movs	r4, #12
 800dfcc:	4620      	mov	r0, r4
 800dfce:	b008      	add	sp, #32
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
 800dfd2:	9b04      	ldr	r3, [sp, #16]
 800dfd4:	9907      	ldr	r1, [sp, #28]
 800dfd6:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 800dfd8:	4798      	blx	r3
 800dfda:	2401      	movs	r4, #1
 800dfdc:	e7b7      	b.n	800df4e <rmw_init_options_copy+0x22>
 800dfde:	240a      	movs	r4, #10
 800dfe0:	e7b5      	b.n	800df4e <rmw_init_options_copy+0x22>
 800dfe2:	bf00      	nop
 800dfe4:	0801ea7c 	.word	0x0801ea7c
 800dfe8:	20008b4c 	.word	0x20008b4c

0800dfec <rmw_init_options_fini>:
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d031      	beq.n	800e054 <rmw_init_options_fini+0x68>
 800dff0:	b510      	push	{r4, lr}
 800dff2:	4604      	mov	r4, r0
 800dff4:	b096      	sub	sp, #88	@ 0x58
 800dff6:	3040      	adds	r0, #64	@ 0x40
 800dff8:	f7ff fe10 	bl	800dc1c <rcutils_allocator_is_valid>
 800dffc:	b310      	cbz	r0, 800e044 <rmw_init_options_fini+0x58>
 800dffe:	68a0      	ldr	r0, [r4, #8]
 800e000:	b120      	cbz	r0, 800e00c <rmw_init_options_fini+0x20>
 800e002:	4b15      	ldr	r3, [pc, #84]	@ (800e058 <rmw_init_options_fini+0x6c>)
 800e004:	6819      	ldr	r1, [r3, #0]
 800e006:	f7f2 f8cb 	bl	80001a0 <strcmp>
 800e00a:	bb08      	cbnz	r0, 800e050 <rmw_init_options_fini+0x64>
 800e00c:	4b13      	ldr	r3, [pc, #76]	@ (800e05c <rmw_init_options_fini+0x70>)
 800e00e:	6819      	ldr	r1, [r3, #0]
 800e010:	b1d9      	cbz	r1, 800e04a <rmw_init_options_fini+0x5e>
 800e012:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e014:	e001      	b.n	800e01a <rmw_init_options_fini+0x2e>
 800e016:	6849      	ldr	r1, [r1, #4]
 800e018:	b1b9      	cbz	r1, 800e04a <rmw_init_options_fini+0x5e>
 800e01a:	688b      	ldr	r3, [r1, #8]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d1fa      	bne.n	800e016 <rmw_init_options_fini+0x2a>
 800e020:	480e      	ldr	r0, [pc, #56]	@ (800e05c <rmw_init_options_fini+0x70>)
 800e022:	f009 faad 	bl	8017580 <put_memory>
 800e026:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e028:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800e02a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e02c:	4798      	blx	r3
 800e02e:	4668      	mov	r0, sp
 800e030:	f7ff fe8a 	bl	800dd48 <rmw_get_zero_initialized_init_options>
 800e034:	2258      	movs	r2, #88	@ 0x58
 800e036:	4669      	mov	r1, sp
 800e038:	4620      	mov	r0, r4
 800e03a:	f00c ff28 	bl	801ae8e <memcpy>
 800e03e:	2000      	movs	r0, #0
 800e040:	b016      	add	sp, #88	@ 0x58
 800e042:	bd10      	pop	{r4, pc}
 800e044:	200b      	movs	r0, #11
 800e046:	b016      	add	sp, #88	@ 0x58
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	2001      	movs	r0, #1
 800e04c:	b016      	add	sp, #88	@ 0x58
 800e04e:	bd10      	pop	{r4, pc}
 800e050:	200c      	movs	r0, #12
 800e052:	e7f5      	b.n	800e040 <rmw_init_options_fini+0x54>
 800e054:	200b      	movs	r0, #11
 800e056:	4770      	bx	lr
 800e058:	0801ea7c 	.word	0x0801ea7c
 800e05c:	20008b4c 	.word	0x20008b4c

0800e060 <rmw_init>:
 800e060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e064:	b083      	sub	sp, #12
 800e066:	2800      	cmp	r0, #0
 800e068:	f000 80d4 	beq.w	800e214 <rmw_init+0x1b4>
 800e06c:	460e      	mov	r6, r1
 800e06e:	2900      	cmp	r1, #0
 800e070:	f000 80d0 	beq.w	800e214 <rmw_init+0x1b4>
 800e074:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800e076:	4605      	mov	r5, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 80cb 	beq.w	800e214 <rmw_init+0x1b4>
 800e07e:	4b77      	ldr	r3, [pc, #476]	@ (800e25c <rmw_init+0x1fc>)
 800e080:	6880      	ldr	r0, [r0, #8]
 800e082:	681f      	ldr	r7, [r3, #0]
 800e084:	b128      	cbz	r0, 800e092 <rmw_init+0x32>
 800e086:	4639      	mov	r1, r7
 800e088:	f7f2 f88a 	bl	80001a0 <strcmp>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	f040 80d3 	bne.w	800e238 <rmw_init+0x1d8>
 800e092:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e096:	4c72      	ldr	r4, [pc, #456]	@ (800e260 <rmw_init+0x200>)
 800e098:	4972      	ldr	r1, [pc, #456]	@ (800e264 <rmw_init+0x204>)
 800e09a:	4873      	ldr	r0, [pc, #460]	@ (800e268 <rmw_init+0x208>)
 800e09c:	60b7      	str	r7, [r6, #8]
 800e09e:	e9c6 2300 	strd	r2, r3, [r6]
 800e0a2:	68eb      	ldr	r3, [r5, #12]
 800e0a4:	66b3      	str	r3, [r6, #104]	@ 0x68
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f000 fe6c 	bl	800ed84 <rmw_uxrce_init_session_memory>
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	496f      	ldr	r1, [pc, #444]	@ (800e26c <rmw_init+0x20c>)
 800e0b0:	2204      	movs	r2, #4
 800e0b2:	f000 fea7 	bl	800ee04 <rmw_uxrce_init_static_input_buffer_memory>
 800e0b6:	f04f 0800 	mov.w	r8, #0
 800e0ba:	486b      	ldr	r0, [pc, #428]	@ (800e268 <rmw_init+0x208>)
 800e0bc:	f884 800d 	strb.w	r8, [r4, #13]
 800e0c0:	f009 fa4e 	bl	8017560 <get_memory>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	f000 80b2 	beq.w	800e22e <rmw_init+0x1ce>
 800e0ca:	6884      	ldr	r4, [r0, #8]
 800e0cc:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800e0ce:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800e0d0:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e0d4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e0d8:	9101      	str	r1, [sp, #4]
 800e0da:	6a00      	ldr	r0, [r0, #32]
 800e0dc:	9000      	str	r0, [sp, #0]
 800e0de:	f104 0910 	add.w	r9, r4, #16
 800e0e2:	4661      	mov	r1, ip
 800e0e4:	4648      	mov	r0, r9
 800e0e6:	f001 fec1 	bl	800fe6c <uxr_set_custom_transport_callbacks>
 800e0ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e0ee:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 800e0f2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e0f6:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800e0fa:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800e0fe:	495c      	ldr	r1, [pc, #368]	@ (800e270 <rmw_init+0x210>)
 800e100:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800e104:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800e108:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e10c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e110:	4858      	ldr	r0, [pc, #352]	@ (800e274 <rmw_init+0x214>)
 800e112:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e116:	2201      	movs	r2, #1
 800e118:	66f4      	str	r4, [r6, #108]	@ 0x6c
 800e11a:	f000 fe13 	bl	800ed44 <rmw_uxrce_init_node_memory>
 800e11e:	4956      	ldr	r1, [pc, #344]	@ (800e278 <rmw_init+0x218>)
 800e120:	4856      	ldr	r0, [pc, #344]	@ (800e27c <rmw_init+0x21c>)
 800e122:	2202      	movs	r2, #2
 800e124:	f000 fdee 	bl	800ed04 <rmw_uxrce_init_subscription_memory>
 800e128:	4955      	ldr	r1, [pc, #340]	@ (800e280 <rmw_init+0x220>)
 800e12a:	4856      	ldr	r0, [pc, #344]	@ (800e284 <rmw_init+0x224>)
 800e12c:	2208      	movs	r2, #8
 800e12e:	f000 fdc9 	bl	800ecc4 <rmw_uxrce_init_publisher_memory>
 800e132:	4955      	ldr	r1, [pc, #340]	@ (800e288 <rmw_init+0x228>)
 800e134:	4855      	ldr	r0, [pc, #340]	@ (800e28c <rmw_init+0x22c>)
 800e136:	2201      	movs	r2, #1
 800e138:	f000 fd84 	bl	800ec44 <rmw_uxrce_init_service_memory>
 800e13c:	4954      	ldr	r1, [pc, #336]	@ (800e290 <rmw_init+0x230>)
 800e13e:	4855      	ldr	r0, [pc, #340]	@ (800e294 <rmw_init+0x234>)
 800e140:	2201      	movs	r2, #1
 800e142:	f000 fd9f 	bl	800ec84 <rmw_uxrce_init_client_memory>
 800e146:	4954      	ldr	r1, [pc, #336]	@ (800e298 <rmw_init+0x238>)
 800e148:	4854      	ldr	r0, [pc, #336]	@ (800e29c <rmw_init+0x23c>)
 800e14a:	220a      	movs	r2, #10
 800e14c:	f000 fe3a 	bl	800edc4 <rmw_uxrce_init_topic_memory>
 800e150:	4953      	ldr	r1, [pc, #332]	@ (800e2a0 <rmw_init+0x240>)
 800e152:	4854      	ldr	r0, [pc, #336]	@ (800e2a4 <rmw_init+0x244>)
 800e154:	2203      	movs	r2, #3
 800e156:	f000 fe75 	bl	800ee44 <rmw_uxrce_init_init_options_impl_memory>
 800e15a:	4953      	ldr	r1, [pc, #332]	@ (800e2a8 <rmw_init+0x248>)
 800e15c:	4853      	ldr	r0, [pc, #332]	@ (800e2ac <rmw_init+0x24c>)
 800e15e:	2204      	movs	r2, #4
 800e160:	f000 fe90 	bl	800ee84 <rmw_uxrce_init_wait_set_memory>
 800e164:	4952      	ldr	r1, [pc, #328]	@ (800e2b0 <rmw_init+0x250>)
 800e166:	4853      	ldr	r0, [pc, #332]	@ (800e2b4 <rmw_init+0x254>)
 800e168:	2204      	movs	r2, #4
 800e16a:	f000 feab 	bl	800eec4 <rmw_uxrce_init_guard_condition_memory>
 800e16e:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800e170:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800e172:	4642      	mov	r2, r8
 800e174:	f000 fd20 	bl	800ebb8 <rmw_uxrce_transport_init>
 800e178:	4607      	mov	r7, r0
 800e17a:	2800      	cmp	r0, #0
 800e17c:	d161      	bne.n	800e242 <rmw_init+0x1e2>
 800e17e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e180:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e184:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e186:	4628      	mov	r0, r5
 800e188:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e18c:	f002 f9b0 	bl	80104f0 <uxr_init_session>
 800e190:	4628      	mov	r0, r5
 800e192:	4949      	ldr	r1, [pc, #292]	@ (800e2b8 <rmw_init+0x258>)
 800e194:	4622      	mov	r2, r4
 800e196:	f002 f9cf 	bl	8010538 <uxr_set_topic_callback>
 800e19a:	4628      	mov	r0, r5
 800e19c:	4947      	ldr	r1, [pc, #284]	@ (800e2bc <rmw_init+0x25c>)
 800e19e:	463a      	mov	r2, r7
 800e1a0:	f002 f9c6 	bl	8010530 <uxr_set_status_callback>
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	4946      	ldr	r1, [pc, #280]	@ (800e2c0 <rmw_init+0x260>)
 800e1a8:	463a      	mov	r2, r7
 800e1aa:	f002 f9c9 	bl	8010540 <uxr_set_request_callback>
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	4944      	ldr	r1, [pc, #272]	@ (800e2c4 <rmw_init+0x264>)
 800e1b2:	463a      	mov	r2, r7
 800e1b4:	f002 f9c8 	bl	8010548 <uxr_set_reply_callback>
 800e1b8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e1bc:	2304      	movs	r3, #4
 800e1be:	0092      	lsls	r2, r2, #2
 800e1c0:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f002 f9ed 	bl	80105a4 <uxr_create_input_reliable_stream>
 800e1ca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e1ce:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e1d2:	2304      	movs	r3, #4
 800e1d4:	0092      	lsls	r2, r2, #2
 800e1d6:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f002 f9ca 	bl	8010574 <uxr_create_output_reliable_stream>
 800e1e0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f002 f9d7 	bl	8010598 <uxr_create_input_best_effort_stream>
 800e1ea:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e1ee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e1f2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e1f6:	3114      	adds	r1, #20
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f002 f9a9 	bl	8010550 <uxr_create_output_best_effort_stream>
 800e1fe:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e202:	4628      	mov	r0, r5
 800e204:	f002 ff7a 	bl	80110fc <uxr_create_session>
 800e208:	4605      	mov	r5, r0
 800e20a:	b140      	cbz	r0, 800e21e <rmw_init+0x1be>
 800e20c:	4638      	mov	r0, r7
 800e20e:	b003      	add	sp, #12
 800e210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e214:	270b      	movs	r7, #11
 800e216:	4638      	mov	r0, r7
 800e218:	b003      	add	sp, #12
 800e21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e21e:	4648      	mov	r0, r9
 800e220:	f001 fe66 	bl	800fef0 <uxr_close_custom_transport>
 800e224:	4810      	ldr	r0, [pc, #64]	@ (800e268 <rmw_init+0x208>)
 800e226:	4621      	mov	r1, r4
 800e228:	f009 f9aa 	bl	8017580 <put_memory>
 800e22c:	66f5      	str	r5, [r6, #108]	@ 0x6c
 800e22e:	2701      	movs	r7, #1
 800e230:	4638      	mov	r0, r7
 800e232:	b003      	add	sp, #12
 800e234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e238:	270c      	movs	r7, #12
 800e23a:	4638      	mov	r0, r7
 800e23c:	b003      	add	sp, #12
 800e23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e242:	4648      	mov	r0, r9
 800e244:	f001 fe54 	bl	800fef0 <uxr_close_custom_transport>
 800e248:	4807      	ldr	r0, [pc, #28]	@ (800e268 <rmw_init+0x208>)
 800e24a:	4621      	mov	r1, r4
 800e24c:	f009 f998 	bl	8017580 <put_memory>
 800e250:	4638      	mov	r0, r7
 800e252:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 800e256:	b003      	add	sp, #12
 800e258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e25c:	0801ea7c 	.word	0x0801ea7c
 800e260:	2000ac60 	.word	0x2000ac60
 800e264:	2000b890 	.word	0x2000b890
 800e268:	2000ce38 	.word	0x2000ce38
 800e26c:	20008b60 	.word	0x20008b60
 800e270:	2000b7d8 	.word	0x2000b7d8
 800e274:	2000b87c 	.word	0x2000b87c
 800e278:	2000af48 	.word	0x2000af48
 800e27c:	2000b0f8 	.word	0x2000b0f8
 800e280:	2000b108 	.word	0x2000b108
 800e284:	2000b7c8 	.word	0x2000b7c8
 800e288:	2000ae70 	.word	0x2000ae70
 800e28c:	2000af38 	.word	0x2000af38
 800e290:	2000ad98 	.word	0x2000ad98
 800e294:	2000ae60 	.word	0x2000ae60
 800e298:	2000ac70 	.word	0x2000ac70
 800e29c:	2000ad88 	.word	0x2000ad88
 800e2a0:	20008ac8 	.word	0x20008ac8
 800e2a4:	20008b4c 	.word	0x20008b4c
 800e2a8:	20008a48 	.word	0x20008a48
 800e2ac:	20008ab8 	.word	0x20008ab8
 800e2b0:	200089b8 	.word	0x200089b8
 800e2b4:	20008a38 	.word	0x20008a38
 800e2b8:	08017399 	.word	0x08017399
 800e2bc:	08017391 	.word	0x08017391
 800e2c0:	08017431 	.word	0x08017431
 800e2c4:	080174cd 	.word	0x080174cd

0800e2c8 <rmw_context_fini>:
 800e2c8:	4b17      	ldr	r3, [pc, #92]	@ (800e328 <rmw_context_fini+0x60>)
 800e2ca:	b570      	push	{r4, r5, r6, lr}
 800e2cc:	681c      	ldr	r4, [r3, #0]
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 800e2d2:	b33c      	cbz	r4, 800e324 <rmw_context_fini+0x5c>
 800e2d4:	2600      	movs	r6, #0
 800e2d6:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 800e2da:	691a      	ldr	r2, [r3, #16]
 800e2dc:	4282      	cmp	r2, r0
 800e2de:	d018      	beq.n	800e312 <rmw_context_fini+0x4a>
 800e2e0:	2c00      	cmp	r4, #0
 800e2e2:	d1f8      	bne.n	800e2d6 <rmw_context_fini+0xe>
 800e2e4:	b188      	cbz	r0, 800e30a <rmw_context_fini+0x42>
 800e2e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e2ea:	789b      	ldrb	r3, [r3, #2]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	bf14      	ite	ne
 800e2f0:	210a      	movne	r1, #10
 800e2f2:	2100      	moveq	r1, #0
 800e2f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e2f8:	f002 fed8 	bl	80110ac <uxr_delete_session_retries>
 800e2fc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800e2fe:	f000 fe01 	bl	800ef04 <rmw_uxrce_fini_session_memory>
 800e302:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800e304:	3010      	adds	r0, #16
 800e306:	f001 fdf3 	bl	800fef0 <uxr_close_custom_transport>
 800e30a:	2300      	movs	r3, #0
 800e30c:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800e30e:	4630      	mov	r0, r6
 800e310:	bd70      	pop	{r4, r5, r6, pc}
 800e312:	f103 0018 	add.w	r0, r3, #24
 800e316:	f000 f89b 	bl	800e450 <rmw_destroy_node>
 800e31a:	4606      	mov	r6, r0
 800e31c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 800e31e:	2c00      	cmp	r4, #0
 800e320:	d1d9      	bne.n	800e2d6 <rmw_context_fini+0xe>
 800e322:	e7df      	b.n	800e2e4 <rmw_context_fini+0x1c>
 800e324:	4626      	mov	r6, r4
 800e326:	e7dd      	b.n	800e2e4 <rmw_context_fini+0x1c>
 800e328:	2000b87c 	.word	0x2000b87c

0800e32c <create_node>:
 800e32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e330:	b083      	sub	sp, #12
 800e332:	2b00      	cmp	r3, #0
 800e334:	d063      	beq.n	800e3fe <create_node+0xd2>
 800e336:	4606      	mov	r6, r0
 800e338:	4836      	ldr	r0, [pc, #216]	@ (800e414 <create_node+0xe8>)
 800e33a:	460f      	mov	r7, r1
 800e33c:	4690      	mov	r8, r2
 800e33e:	461d      	mov	r5, r3
 800e340:	f009 f90e 	bl	8017560 <get_memory>
 800e344:	2800      	cmp	r0, #0
 800e346:	d05a      	beq.n	800e3fe <create_node+0xd2>
 800e348:	6884      	ldr	r4, [r0, #8]
 800e34a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800e34c:	6123      	str	r3, [r4, #16]
 800e34e:	f009 f98d 	bl	801766c <rmw_get_implementation_identifier>
 800e352:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e356:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e35a:	f8c4 9020 	str.w	r9, [r4, #32]
 800e35e:	4630      	mov	r0, r6
 800e360:	f7f1 ff7e 	bl	8000260 <strlen>
 800e364:	1c42      	adds	r2, r0, #1
 800e366:	2a3c      	cmp	r2, #60	@ 0x3c
 800e368:	f104 0518 	add.w	r5, r4, #24
 800e36c:	d844      	bhi.n	800e3f8 <create_node+0xcc>
 800e36e:	4648      	mov	r0, r9
 800e370:	4631      	mov	r1, r6
 800e372:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e376:	f00c fd8a 	bl	801ae8e <memcpy>
 800e37a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e37e:	4638      	mov	r0, r7
 800e380:	f7f1 ff6e 	bl	8000260 <strlen>
 800e384:	1c42      	adds	r2, r0, #1
 800e386:	2a3c      	cmp	r2, #60	@ 0x3c
 800e388:	d836      	bhi.n	800e3f8 <create_node+0xcc>
 800e38a:	4639      	mov	r1, r7
 800e38c:	4648      	mov	r0, r9
 800e38e:	f00c fd7e 	bl	801ae8e <memcpy>
 800e392:	6923      	ldr	r3, [r4, #16]
 800e394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e398:	2101      	movs	r1, #1
 800e39a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e39e:	1842      	adds	r2, r0, r1
 800e3a0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e3a4:	f001 fda8 	bl	800fef8 <uxr_object_id>
 800e3a8:	6160      	str	r0, [r4, #20]
 800e3aa:	783b      	ldrb	r3, [r7, #0]
 800e3ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800e3ae:	d128      	bne.n	800e402 <create_node+0xd6>
 800e3b0:	787b      	ldrb	r3, [r7, #1]
 800e3b2:	bb33      	cbnz	r3, 800e402 <create_node+0xd6>
 800e3b4:	4a18      	ldr	r2, [pc, #96]	@ (800e418 <create_node+0xec>)
 800e3b6:	4819      	ldr	r0, [pc, #100]	@ (800e41c <create_node+0xf0>)
 800e3b8:	4633      	mov	r3, r6
 800e3ba:	213c      	movs	r1, #60	@ 0x3c
 800e3bc:	f00c fb16 	bl	801a9ec <sniprintf>
 800e3c0:	6920      	ldr	r0, [r4, #16]
 800e3c2:	4916      	ldr	r1, [pc, #88]	@ (800e41c <create_node+0xf0>)
 800e3c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e3c8:	9100      	str	r1, [sp, #0]
 800e3ca:	2106      	movs	r1, #6
 800e3cc:	9101      	str	r1, [sp, #4]
 800e3ce:	6811      	ldr	r1, [r2, #0]
 800e3d0:	6962      	ldr	r2, [r4, #20]
 800e3d2:	fa1f f388 	uxth.w	r3, r8
 800e3d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e3da:	f001 fb3d 	bl	800fa58 <uxr_buffer_create_participant_bin>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	6920      	ldr	r0, [r4, #16]
 800e3e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e3e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e3ea:	f000 ff0b 	bl	800f204 <run_xrce_session>
 800e3ee:	b118      	cbz	r0, 800e3f8 <create_node+0xcc>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	b003      	add	sp, #12
 800e3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	f000 fd89 	bl	800ef10 <rmw_uxrce_fini_node_memory>
 800e3fe:	2500      	movs	r5, #0
 800e400:	e7f6      	b.n	800e3f0 <create_node+0xc4>
 800e402:	4a07      	ldr	r2, [pc, #28]	@ (800e420 <create_node+0xf4>)
 800e404:	9600      	str	r6, [sp, #0]
 800e406:	463b      	mov	r3, r7
 800e408:	213c      	movs	r1, #60	@ 0x3c
 800e40a:	4804      	ldr	r0, [pc, #16]	@ (800e41c <create_node+0xf0>)
 800e40c:	f00c faee 	bl	801a9ec <sniprintf>
 800e410:	e7d6      	b.n	800e3c0 <create_node+0x94>
 800e412:	bf00      	nop
 800e414:	2000b87c 	.word	0x2000b87c
 800e418:	0801db4c 	.word	0x0801db4c
 800e41c:	2000897c 	.word	0x2000897c
 800e420:	0801db34 	.word	0x0801db34

0800e424 <rmw_create_node>:
 800e424:	b191      	cbz	r1, 800e44c <rmw_create_node+0x28>
 800e426:	b410      	push	{r4}
 800e428:	4614      	mov	r4, r2
 800e42a:	780a      	ldrb	r2, [r1, #0]
 800e42c:	4603      	mov	r3, r0
 800e42e:	4608      	mov	r0, r1
 800e430:	b142      	cbz	r2, 800e444 <rmw_create_node+0x20>
 800e432:	b13c      	cbz	r4, 800e444 <rmw_create_node+0x20>
 800e434:	7822      	ldrb	r2, [r4, #0]
 800e436:	b12a      	cbz	r2, 800e444 <rmw_create_node+0x20>
 800e438:	4621      	mov	r1, r4
 800e43a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e440:	f7ff bf74 	b.w	800e32c <create_node>
 800e444:	2000      	movs	r0, #0
 800e446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	2000      	movs	r0, #0
 800e44e:	4770      	bx	lr

0800e450 <rmw_destroy_node>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	b328      	cbz	r0, 800e4a0 <rmw_destroy_node+0x50>
 800e454:	4607      	mov	r7, r0
 800e456:	6800      	ldr	r0, [r0, #0]
 800e458:	b120      	cbz	r0, 800e464 <rmw_destroy_node+0x14>
 800e45a:	4b36      	ldr	r3, [pc, #216]	@ (800e534 <rmw_destroy_node+0xe4>)
 800e45c:	6819      	ldr	r1, [r3, #0]
 800e45e:	f7f1 fe9f 	bl	80001a0 <strcmp>
 800e462:	b9e8      	cbnz	r0, 800e4a0 <rmw_destroy_node+0x50>
 800e464:	687d      	ldr	r5, [r7, #4]
 800e466:	b1dd      	cbz	r5, 800e4a0 <rmw_destroy_node+0x50>
 800e468:	4b33      	ldr	r3, [pc, #204]	@ (800e538 <rmw_destroy_node+0xe8>)
 800e46a:	681c      	ldr	r4, [r3, #0]
 800e46c:	2c00      	cmp	r4, #0
 800e46e:	d05f      	beq.n	800e530 <rmw_destroy_node+0xe0>
 800e470:	2600      	movs	r6, #0
 800e472:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e476:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e47a:	429d      	cmp	r5, r3
 800e47c:	d013      	beq.n	800e4a6 <rmw_destroy_node+0x56>
 800e47e:	2c00      	cmp	r4, #0
 800e480:	d1f7      	bne.n	800e472 <rmw_destroy_node+0x22>
 800e482:	4b2e      	ldr	r3, [pc, #184]	@ (800e53c <rmw_destroy_node+0xec>)
 800e484:	681c      	ldr	r4, [r3, #0]
 800e486:	b1c4      	cbz	r4, 800e4ba <rmw_destroy_node+0x6a>
 800e488:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e48c:	6a0b      	ldr	r3, [r1, #32]
 800e48e:	429d      	cmp	r5, r3
 800e490:	d1f9      	bne.n	800e486 <rmw_destroy_node+0x36>
 800e492:	317c      	adds	r1, #124	@ 0x7c
 800e494:	4638      	mov	r0, r7
 800e496:	f000 fb2f 	bl	800eaf8 <rmw_destroy_subscription>
 800e49a:	2801      	cmp	r0, #1
 800e49c:	4606      	mov	r6, r0
 800e49e:	d1f2      	bne.n	800e486 <rmw_destroy_node+0x36>
 800e4a0:	2601      	movs	r6, #1
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4a6:	3184      	adds	r1, #132	@ 0x84
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	f000 f9a1 	bl	800e7f0 <rmw_destroy_publisher>
 800e4ae:	2801      	cmp	r0, #1
 800e4b0:	4606      	mov	r6, r0
 800e4b2:	d0f5      	beq.n	800e4a0 <rmw_destroy_node+0x50>
 800e4b4:	2c00      	cmp	r4, #0
 800e4b6:	d1dc      	bne.n	800e472 <rmw_destroy_node+0x22>
 800e4b8:	e7e3      	b.n	800e482 <rmw_destroy_node+0x32>
 800e4ba:	4b21      	ldr	r3, [pc, #132]	@ (800e540 <rmw_destroy_node+0xf0>)
 800e4bc:	681c      	ldr	r4, [r3, #0]
 800e4be:	b16c      	cbz	r4, 800e4dc <rmw_destroy_node+0x8c>
 800e4c0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e4c4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e4c6:	429d      	cmp	r5, r3
 800e4c8:	d1f9      	bne.n	800e4be <rmw_destroy_node+0x6e>
 800e4ca:	317c      	adds	r1, #124	@ 0x7c
 800e4cc:	4638      	mov	r0, r7
 800e4ce:	f000 f9e1 	bl	800e894 <rmw_destroy_service>
 800e4d2:	2801      	cmp	r0, #1
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	d0e3      	beq.n	800e4a0 <rmw_destroy_node+0x50>
 800e4d8:	2c00      	cmp	r4, #0
 800e4da:	d1f1      	bne.n	800e4c0 <rmw_destroy_node+0x70>
 800e4dc:	4b19      	ldr	r3, [pc, #100]	@ (800e544 <rmw_destroy_node+0xf4>)
 800e4de:	681c      	ldr	r4, [r3, #0]
 800e4e0:	b16c      	cbz	r4, 800e4fe <rmw_destroy_node+0xae>
 800e4e2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e4e6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e4e8:	429d      	cmp	r5, r3
 800e4ea:	d1f9      	bne.n	800e4e0 <rmw_destroy_node+0x90>
 800e4ec:	317c      	adds	r1, #124	@ 0x7c
 800e4ee:	4638      	mov	r0, r7
 800e4f0:	f009 f85a 	bl	80175a8 <rmw_destroy_client>
 800e4f4:	2801      	cmp	r0, #1
 800e4f6:	4606      	mov	r6, r0
 800e4f8:	d0d2      	beq.n	800e4a0 <rmw_destroy_node+0x50>
 800e4fa:	2c00      	cmp	r4, #0
 800e4fc:	d1f1      	bne.n	800e4e2 <rmw_destroy_node+0x92>
 800e4fe:	6928      	ldr	r0, [r5, #16]
 800e500:	696a      	ldr	r2, [r5, #20]
 800e502:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e506:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e50a:	6819      	ldr	r1, [r3, #0]
 800e50c:	f001 fa5a 	bl	800f9c4 <uxr_buffer_delete_entity>
 800e510:	4602      	mov	r2, r0
 800e512:	6928      	ldr	r0, [r5, #16]
 800e514:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e518:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e51c:	f000 fe72 	bl	800f204 <run_xrce_session>
 800e520:	2800      	cmp	r0, #0
 800e522:	bf08      	it	eq
 800e524:	2602      	moveq	r6, #2
 800e526:	4638      	mov	r0, r7
 800e528:	f000 fcf2 	bl	800ef10 <rmw_uxrce_fini_node_memory>
 800e52c:	4630      	mov	r0, r6
 800e52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e530:	4626      	mov	r6, r4
 800e532:	e7a6      	b.n	800e482 <rmw_destroy_node+0x32>
 800e534:	0801ea7c 	.word	0x0801ea7c
 800e538:	2000b7c8 	.word	0x2000b7c8
 800e53c:	2000b0f8 	.word	0x2000b0f8
 800e540:	2000af38 	.word	0x2000af38
 800e544:	2000ae60 	.word	0x2000ae60

0800e548 <rmw_node_get_graph_guard_condition>:
 800e548:	6843      	ldr	r3, [r0, #4]
 800e54a:	6918      	ldr	r0, [r3, #16]
 800e54c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop

0800e554 <flush_session>:
 800e554:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e556:	f002 bbe5 	b.w	8010d24 <uxr_run_session_until_confirm_delivery>
 800e55a:	bf00      	nop

0800e55c <rmw_publish>:
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d053      	beq.n	800e608 <rmw_publish+0xac>
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	460d      	mov	r5, r1
 800e564:	b08e      	sub	sp, #56	@ 0x38
 800e566:	2900      	cmp	r1, #0
 800e568:	d04b      	beq.n	800e602 <rmw_publish+0xa6>
 800e56a:	4604      	mov	r4, r0
 800e56c:	6800      	ldr	r0, [r0, #0]
 800e56e:	f000 fecf 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800e572:	2800      	cmp	r0, #0
 800e574:	d045      	beq.n	800e602 <rmw_publish+0xa6>
 800e576:	6866      	ldr	r6, [r4, #4]
 800e578:	2e00      	cmp	r6, #0
 800e57a:	d042      	beq.n	800e602 <rmw_publish+0xa6>
 800e57c:	69b4      	ldr	r4, [r6, #24]
 800e57e:	4628      	mov	r0, r5
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	4798      	blx	r3
 800e584:	69f3      	ldr	r3, [r6, #28]
 800e586:	9005      	str	r0, [sp, #20]
 800e588:	b113      	cbz	r3, 800e590 <rmw_publish+0x34>
 800e58a:	a805      	add	r0, sp, #20
 800e58c:	4798      	blx	r3
 800e58e:	9805      	ldr	r0, [sp, #20]
 800e590:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	9000      	str	r0, [sp, #0]
 800e598:	6972      	ldr	r2, [r6, #20]
 800e59a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e59c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e5a0:	ab06      	add	r3, sp, #24
 800e5a2:	f003 fe7d 	bl	80122a0 <uxr_prepare_output_stream>
 800e5a6:	b1d8      	cbz	r0, 800e5e0 <rmw_publish+0x84>
 800e5a8:	68a3      	ldr	r3, [r4, #8]
 800e5aa:	a906      	add	r1, sp, #24
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	4798      	blx	r3
 800e5b0:	6a33      	ldr	r3, [r6, #32]
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	b10b      	cbz	r3, 800e5ba <rmw_publish+0x5e>
 800e5b6:	a806      	add	r0, sp, #24
 800e5b8:	4798      	blx	r3
 800e5ba:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e5be:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	6910      	ldr	r0, [r2, #16]
 800e5c6:	d021      	beq.n	800e60c <rmw_publish+0xb0>
 800e5c8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e5ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5ce:	f002 fba9 	bl	8010d24 <uxr_run_session_until_confirm_delivery>
 800e5d2:	4004      	ands	r4, r0
 800e5d4:	b2e4      	uxtb	r4, r4
 800e5d6:	f084 0001 	eor.w	r0, r4, #1
 800e5da:	b2c0      	uxtb	r0, r0
 800e5dc:	b00e      	add	sp, #56	@ 0x38
 800e5de:	bd70      	pop	{r4, r5, r6, pc}
 800e5e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e5e4:	6918      	ldr	r0, [r3, #16]
 800e5e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e618 <rmw_publish+0xbc>)
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	9b05      	ldr	r3, [sp, #20]
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	9602      	str	r6, [sp, #8]
 800e5f0:	6972      	ldr	r2, [r6, #20]
 800e5f2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e5f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5f8:	ab06      	add	r3, sp, #24
 800e5fa:	f003 fe81 	bl	8012300 <uxr_prepare_output_stream_fragmented>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d1d2      	bne.n	800e5a8 <rmw_publish+0x4c>
 800e602:	2001      	movs	r0, #1
 800e604:	b00e      	add	sp, #56	@ 0x38
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	2001      	movs	r0, #1
 800e60a:	4770      	bx	lr
 800e60c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e610:	f001 fff0 	bl	80105f4 <uxr_flash_output_streams>
 800e614:	e7df      	b.n	800e5d6 <rmw_publish+0x7a>
 800e616:	bf00      	nop
 800e618:	0800e555 	.word	0x0800e555

0800e61c <rmw_create_publisher>:
 800e61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	b087      	sub	sp, #28
 800e622:	2800      	cmp	r0, #0
 800e624:	f000 80c9 	beq.w	800e7ba <rmw_create_publisher+0x19e>
 800e628:	460f      	mov	r7, r1
 800e62a:	2900      	cmp	r1, #0
 800e62c:	f000 80c5 	beq.w	800e7ba <rmw_create_publisher+0x19e>
 800e630:	4604      	mov	r4, r0
 800e632:	6800      	ldr	r0, [r0, #0]
 800e634:	4615      	mov	r5, r2
 800e636:	461e      	mov	r6, r3
 800e638:	f000 fe6a 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	f000 80bc 	beq.w	800e7ba <rmw_create_publisher+0x19e>
 800e642:	2d00      	cmp	r5, #0
 800e644:	f000 80b9 	beq.w	800e7ba <rmw_create_publisher+0x19e>
 800e648:	782b      	ldrb	r3, [r5, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f000 80b5 	beq.w	800e7ba <rmw_create_publisher+0x19e>
 800e650:	2e00      	cmp	r6, #0
 800e652:	f000 80b2 	beq.w	800e7ba <rmw_create_publisher+0x19e>
 800e656:	485c      	ldr	r0, [pc, #368]	@ (800e7c8 <rmw_create_publisher+0x1ac>)
 800e658:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e65c:	f008 ff80 	bl	8017560 <get_memory>
 800e660:	2800      	cmp	r0, #0
 800e662:	f000 80aa 	beq.w	800e7ba <rmw_create_publisher+0x19e>
 800e666:	6884      	ldr	r4, [r0, #8]
 800e668:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e66c:	f008 fffe 	bl	801766c <rmw_get_implementation_identifier>
 800e670:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e674:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e678:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e67c:	4628      	mov	r0, r5
 800e67e:	f7f1 fdef 	bl	8000260 <strlen>
 800e682:	3001      	adds	r0, #1
 800e684:	283c      	cmp	r0, #60	@ 0x3c
 800e686:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800e68a:	f200 808f 	bhi.w	800e7ac <rmw_create_publisher+0x190>
 800e68e:	4a4f      	ldr	r2, [pc, #316]	@ (800e7cc <rmw_create_publisher+0x1b0>)
 800e690:	462b      	mov	r3, r5
 800e692:	213c      	movs	r1, #60	@ 0x3c
 800e694:	4650      	mov	r0, sl
 800e696:	f00c f9a9 	bl	801a9ec <sniprintf>
 800e69a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e69e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e6a0:	4631      	mov	r1, r6
 800e6a2:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e6a6:	2250      	movs	r2, #80	@ 0x50
 800e6a8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e6ac:	f00c fbef 	bl	801ae8e <memcpy>
 800e6b0:	7a33      	ldrb	r3, [r6, #8]
 800e6b2:	4947      	ldr	r1, [pc, #284]	@ (800e7d0 <rmw_create_publisher+0x1b4>)
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6ba:	bf0c      	ite	eq
 800e6bc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e6c0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e6c4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	f000 fe2d 	bl	800f32c <get_message_typesupport_handle>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d06a      	beq.n	800e7ac <rmw_create_publisher+0x190>
 800e6d6:	6842      	ldr	r2, [r0, #4]
 800e6d8:	61a2      	str	r2, [r4, #24]
 800e6da:	2a00      	cmp	r2, #0
 800e6dc:	d066      	beq.n	800e7ac <rmw_create_publisher+0x190>
 800e6de:	4629      	mov	r1, r5
 800e6e0:	4633      	mov	r3, r6
 800e6e2:	4648      	mov	r0, r9
 800e6e4:	f008 ffc8 	bl	8017678 <create_topic>
 800e6e8:	6260      	str	r0, [r4, #36]	@ 0x24
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	d062      	beq.n	800e7b4 <rmw_create_publisher+0x198>
 800e6ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6f6:	2103      	movs	r1, #3
 800e6f8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e6fc:	1c42      	adds	r2, r0, #1
 800e6fe:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e702:	f001 fbf9 	bl	800fef8 <uxr_object_id>
 800e706:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e70a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e70e:	6120      	str	r0, [r4, #16]
 800e710:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e714:	6910      	ldr	r0, [r2, #16]
 800e716:	2506      	movs	r5, #6
 800e718:	9500      	str	r5, [sp, #0]
 800e71a:	6819      	ldr	r1, [r3, #0]
 800e71c:	6922      	ldr	r2, [r4, #16]
 800e71e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e722:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e726:	f001 f9fd 	bl	800fb24 <uxr_buffer_create_publisher_bin>
 800e72a:	4602      	mov	r2, r0
 800e72c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e730:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e734:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e738:	f000 fd64 	bl	800f204 <run_xrce_session>
 800e73c:	b3b0      	cbz	r0, 800e7ac <rmw_create_publisher+0x190>
 800e73e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e746:	2105      	movs	r1, #5
 800e748:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e74c:	1c42      	adds	r2, r0, #1
 800e74e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e752:	f001 fbd1 	bl	800fef8 <uxr_object_id>
 800e756:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e75a:	6160      	str	r0, [r4, #20]
 800e75c:	4631      	mov	r1, r6
 800e75e:	af04      	add	r7, sp, #16
 800e760:	691e      	ldr	r6, [r3, #16]
 800e762:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e766:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e76a:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800e76e:	4638      	mov	r0, r7
 800e770:	f000 fd68 	bl	800f244 <convert_qos_profile>
 800e774:	9503      	str	r5, [sp, #12]
 800e776:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e77a:	9001      	str	r0, [sp, #4]
 800e77c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e780:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e78a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e78e:	f8da 1000 	ldr.w	r1, [sl]
 800e792:	4630      	mov	r0, r6
 800e794:	f001 fa24 	bl	800fbe0 <uxr_buffer_create_datawriter_bin>
 800e798:	4602      	mov	r2, r0
 800e79a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e79e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e7a2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e7a6:	f000 fd2d 	bl	800f204 <run_xrce_session>
 800e7aa:	b940      	cbnz	r0, 800e7be <rmw_create_publisher+0x1a2>
 800e7ac:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e7ae:	b108      	cbz	r0, 800e7b4 <rmw_create_publisher+0x198>
 800e7b0:	f000 fc1e 	bl	800eff0 <rmw_uxrce_fini_topic_memory>
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	f000 fbc3 	bl	800ef40 <rmw_uxrce_fini_publisher_memory>
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	4640      	mov	r0, r8
 800e7c0:	b007      	add	sp, #28
 800e7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c6:	bf00      	nop
 800e7c8:	2000b7c8 	.word	0x2000b7c8
 800e7cc:	0801db4c 	.word	0x0801db4c
 800e7d0:	0801d86c 	.word	0x0801d86c

0800e7d4 <rmw_publisher_get_actual_qos>:
 800e7d4:	b508      	push	{r3, lr}
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	b140      	cbz	r0, 800e7ec <rmw_publisher_get_actual_qos+0x18>
 800e7da:	4608      	mov	r0, r1
 800e7dc:	b131      	cbz	r1, 800e7ec <rmw_publisher_get_actual_qos+0x18>
 800e7de:	6859      	ldr	r1, [r3, #4]
 800e7e0:	2250      	movs	r2, #80	@ 0x50
 800e7e2:	3128      	adds	r1, #40	@ 0x28
 800e7e4:	f00c fb53 	bl	801ae8e <memcpy>
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	bd08      	pop	{r3, pc}
 800e7ec:	200b      	movs	r0, #11
 800e7ee:	bd08      	pop	{r3, pc}

0800e7f0 <rmw_destroy_publisher>:
 800e7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f4:	b128      	cbz	r0, 800e802 <rmw_destroy_publisher+0x12>
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	6800      	ldr	r0, [r0, #0]
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	f000 fd88 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800e800:	b918      	cbnz	r0, 800e80a <rmw_destroy_publisher+0x1a>
 800e802:	2401      	movs	r4, #1
 800e804:	4620      	mov	r0, r4
 800e806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e80a:	6863      	ldr	r3, [r4, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d0f8      	beq.n	800e802 <rmw_destroy_publisher+0x12>
 800e810:	2d00      	cmp	r5, #0
 800e812:	d0f6      	beq.n	800e802 <rmw_destroy_publisher+0x12>
 800e814:	6828      	ldr	r0, [r5, #0]
 800e816:	f000 fd7b 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d0f1      	beq.n	800e802 <rmw_destroy_publisher+0x12>
 800e81e:	686c      	ldr	r4, [r5, #4]
 800e820:	2c00      	cmp	r4, #0
 800e822:	d0ee      	beq.n	800e802 <rmw_destroy_publisher+0x12>
 800e824:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e826:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e82a:	f008 ff79 	bl	8017720 <destroy_topic>
 800e82e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e832:	6962      	ldr	r2, [r4, #20]
 800e834:	6918      	ldr	r0, [r3, #16]
 800e836:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e83a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e83e:	6819      	ldr	r1, [r3, #0]
 800e840:	f001 f8c0 	bl	800f9c4 <uxr_buffer_delete_entity>
 800e844:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e848:	6922      	ldr	r2, [r4, #16]
 800e84a:	4680      	mov	r8, r0
 800e84c:	6918      	ldr	r0, [r3, #16]
 800e84e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e852:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e856:	6819      	ldr	r1, [r3, #0]
 800e858:	f001 f8b4 	bl	800f9c4 <uxr_buffer_delete_entity>
 800e85c:	4606      	mov	r6, r0
 800e85e:	6938      	ldr	r0, [r7, #16]
 800e860:	4642      	mov	r2, r8
 800e862:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e866:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e86a:	f000 fccb 	bl	800f204 <run_xrce_session>
 800e86e:	4604      	mov	r4, r0
 800e870:	6938      	ldr	r0, [r7, #16]
 800e872:	4632      	mov	r2, r6
 800e874:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e878:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e87c:	f000 fcc2 	bl	800f204 <run_xrce_session>
 800e880:	4004      	ands	r4, r0
 800e882:	f084 0401 	eor.w	r4, r4, #1
 800e886:	b2e4      	uxtb	r4, r4
 800e888:	4628      	mov	r0, r5
 800e88a:	0064      	lsls	r4, r4, #1
 800e88c:	f000 fb58 	bl	800ef40 <rmw_uxrce_fini_publisher_memory>
 800e890:	e7b8      	b.n	800e804 <rmw_destroy_publisher+0x14>
 800e892:	bf00      	nop

0800e894 <rmw_destroy_service>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	b128      	cbz	r0, 800e8a4 <rmw_destroy_service+0x10>
 800e898:	4604      	mov	r4, r0
 800e89a:	6800      	ldr	r0, [r0, #0]
 800e89c:	460d      	mov	r5, r1
 800e89e:	f000 fd37 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800e8a2:	b910      	cbnz	r0, 800e8aa <rmw_destroy_service+0x16>
 800e8a4:	2401      	movs	r4, #1
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	bd70      	pop	{r4, r5, r6, pc}
 800e8aa:	6863      	ldr	r3, [r4, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0f9      	beq.n	800e8a4 <rmw_destroy_service+0x10>
 800e8b0:	2d00      	cmp	r5, #0
 800e8b2:	d0f7      	beq.n	800e8a4 <rmw_destroy_service+0x10>
 800e8b4:	6828      	ldr	r0, [r5, #0]
 800e8b6:	f000 fd2b 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d0f2      	beq.n	800e8a4 <rmw_destroy_service+0x10>
 800e8be:	686e      	ldr	r6, [r5, #4]
 800e8c0:	2e00      	cmp	r6, #0
 800e8c2:	d0ef      	beq.n	800e8a4 <rmw_destroy_service+0x10>
 800e8c4:	6864      	ldr	r4, [r4, #4]
 800e8c6:	6932      	ldr	r2, [r6, #16]
 800e8c8:	6920      	ldr	r0, [r4, #16]
 800e8ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e8ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8d2:	6819      	ldr	r1, [r3, #0]
 800e8d4:	f001 fc80 	bl	80101d8 <uxr_buffer_cancel_data>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	6920      	ldr	r0, [r4, #16]
 800e8dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e8e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e8e4:	f000 fc8e 	bl	800f204 <run_xrce_session>
 800e8e8:	6920      	ldr	r0, [r4, #16]
 800e8ea:	6932      	ldr	r2, [r6, #16]
 800e8ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e8f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8f4:	6819      	ldr	r1, [r3, #0]
 800e8f6:	f001 f865 	bl	800f9c4 <uxr_buffer_delete_entity>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	6920      	ldr	r0, [r4, #16]
 800e8fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e902:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e906:	f000 fc7d 	bl	800f204 <run_xrce_session>
 800e90a:	f080 0401 	eor.w	r4, r0, #1
 800e90e:	b2e4      	uxtb	r4, r4
 800e910:	4628      	mov	r0, r5
 800e912:	0064      	lsls	r4, r4, #1
 800e914:	f000 fb40 	bl	800ef98 <rmw_uxrce_fini_service_memory>
 800e918:	e7c5      	b.n	800e8a6 <rmw_destroy_service+0x12>
 800e91a:	bf00      	nop

0800e91c <rmw_create_subscription>:
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	b08d      	sub	sp, #52	@ 0x34
 800e922:	2800      	cmp	r0, #0
 800e924:	f000 80d1 	beq.w	800eaca <rmw_create_subscription+0x1ae>
 800e928:	460f      	mov	r7, r1
 800e92a:	2900      	cmp	r1, #0
 800e92c:	f000 80cd 	beq.w	800eaca <rmw_create_subscription+0x1ae>
 800e930:	4604      	mov	r4, r0
 800e932:	6800      	ldr	r0, [r0, #0]
 800e934:	4615      	mov	r5, r2
 800e936:	461e      	mov	r6, r3
 800e938:	f000 fcea 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	f000 80c4 	beq.w	800eaca <rmw_create_subscription+0x1ae>
 800e942:	2d00      	cmp	r5, #0
 800e944:	f000 80c1 	beq.w	800eaca <rmw_create_subscription+0x1ae>
 800e948:	782b      	ldrb	r3, [r5, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	f000 80bd 	beq.w	800eaca <rmw_create_subscription+0x1ae>
 800e950:	2e00      	cmp	r6, #0
 800e952:	f000 80ba 	beq.w	800eaca <rmw_create_subscription+0x1ae>
 800e956:	485e      	ldr	r0, [pc, #376]	@ (800ead0 <rmw_create_subscription+0x1b4>)
 800e958:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e95c:	f008 fe00 	bl	8017560 <get_memory>
 800e960:	2800      	cmp	r0, #0
 800e962:	f000 80b2 	beq.w	800eaca <rmw_create_subscription+0x1ae>
 800e966:	6884      	ldr	r4, [r0, #8]
 800e968:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 800e96c:	f008 fe7e 	bl	801766c <rmw_get_implementation_identifier>
 800e970:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800e974:	67e0      	str	r0, [r4, #124]	@ 0x7c
 800e976:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 800e97a:	4628      	mov	r0, r5
 800e97c:	f7f1 fc70 	bl	8000260 <strlen>
 800e980:	3001      	adds	r0, #1
 800e982:	283c      	cmp	r0, #60	@ 0x3c
 800e984:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 800e988:	f200 8098 	bhi.w	800eabc <rmw_create_subscription+0x1a0>
 800e98c:	4a51      	ldr	r2, [pc, #324]	@ (800ead4 <rmw_create_subscription+0x1b8>)
 800e98e:	462b      	mov	r3, r5
 800e990:	213c      	movs	r1, #60	@ 0x3c
 800e992:	4650      	mov	r0, sl
 800e994:	f00c f82a 	bl	801a9ec <sniprintf>
 800e998:	4631      	mov	r1, r6
 800e99a:	f8c4 9020 	str.w	r9, [r4, #32]
 800e99e:	2250      	movs	r2, #80	@ 0x50
 800e9a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e9a4:	f00c fa73 	bl	801ae8e <memcpy>
 800e9a8:	494b      	ldr	r1, [pc, #300]	@ (800ead8 <rmw_create_subscription+0x1bc>)
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	f000 fcbe 	bl	800f32c <get_message_typesupport_handle>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	f000 8083 	beq.w	800eabc <rmw_create_subscription+0x1a0>
 800e9b6:	6842      	ldr	r2, [r0, #4]
 800e9b8:	61a2      	str	r2, [r4, #24]
 800e9ba:	2a00      	cmp	r2, #0
 800e9bc:	d07e      	beq.n	800eabc <rmw_create_subscription+0x1a0>
 800e9be:	4629      	mov	r1, r5
 800e9c0:	4633      	mov	r3, r6
 800e9c2:	4648      	mov	r0, r9
 800e9c4:	f008 fe58 	bl	8017678 <create_topic>
 800e9c8:	61e0      	str	r0, [r4, #28]
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d07a      	beq.n	800eac4 <rmw_create_subscription+0x1a8>
 800e9ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9d6:	2104      	movs	r1, #4
 800e9d8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800e9dc:	1c42      	adds	r2, r0, #1
 800e9de:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800e9e2:	f001 fa89 	bl	800fef8 <uxr_object_id>
 800e9e6:	6120      	str	r0, [r4, #16]
 800e9e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e9ec:	2506      	movs	r5, #6
 800e9ee:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800e9f2:	9500      	str	r5, [sp, #0]
 800e9f4:	6819      	ldr	r1, [r3, #0]
 800e9f6:	6922      	ldr	r2, [r4, #16]
 800e9f8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e9fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea00:	f001 f8be 	bl	800fb80 <uxr_buffer_create_subscriber_bin>
 800ea04:	4602      	mov	r2, r0
 800ea06:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ea0a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ea0e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ea12:	f000 fbf7 	bl	800f204 <run_xrce_session>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d050      	beq.n	800eabc <rmw_create_subscription+0x1a0>
 800ea1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea22:	4629      	mov	r1, r5
 800ea24:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800ea28:	1c42      	adds	r2, r0, #1
 800ea2a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800ea2e:	f001 fa63 	bl	800fef8 <uxr_object_id>
 800ea32:	af08      	add	r7, sp, #32
 800ea34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea38:	69e3      	ldr	r3, [r4, #28]
 800ea3a:	6160      	str	r0, [r4, #20]
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4638      	mov	r0, r7
 800ea40:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800ea44:	9305      	str	r3, [sp, #20]
 800ea46:	f000 fbfd 	bl	800f244 <convert_qos_profile>
 800ea4a:	9503      	str	r5, [sp, #12]
 800ea4c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ea50:	9b05      	ldr	r3, [sp, #20]
 800ea52:	9001      	str	r0, [sp, #4]
 800ea54:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ea58:	691b      	ldr	r3, [r3, #16]
 800ea5a:	9300      	str	r3, [sp, #0]
 800ea5c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ea60:	f8db 1000 	ldr.w	r1, [fp]
 800ea64:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800ea68:	f001 f91e 	bl	800fca8 <uxr_buffer_create_datareader_bin>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ea72:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ea76:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ea7a:	f000 fbc3 	bl	800f204 <run_xrce_session>
 800ea7e:	b1e8      	cbz	r0, 800eabc <rmw_create_subscription+0x1a0>
 800ea80:	7a33      	ldrb	r3, [r6, #8]
 800ea82:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	bf0c      	ite	eq
 800ea8a:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800ea8e:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800ea92:	9307      	str	r3, [sp, #28]
 800ea94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ea98:	2200      	movs	r2, #0
 800ea9a:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800ea9e:	ab0a      	add	r3, sp, #40	@ 0x28
 800eaa0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	6962      	ldr	r2, [r4, #20]
 800eaa8:	9b07      	ldr	r3, [sp, #28]
 800eaaa:	6809      	ldr	r1, [r1, #0]
 800eaac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eab0:	f001 fb5a 	bl	8010168 <uxr_buffer_request_data>
 800eab4:	4640      	mov	r0, r8
 800eab6:	b00d      	add	sp, #52	@ 0x34
 800eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabc:	69e0      	ldr	r0, [r4, #28]
 800eabe:	b108      	cbz	r0, 800eac4 <rmw_create_subscription+0x1a8>
 800eac0:	f000 fa96 	bl	800eff0 <rmw_uxrce_fini_topic_memory>
 800eac4:	4640      	mov	r0, r8
 800eac6:	f000 fa51 	bl	800ef6c <rmw_uxrce_fini_subscription_memory>
 800eaca:	f04f 0800 	mov.w	r8, #0
 800eace:	e7f1      	b.n	800eab4 <rmw_create_subscription+0x198>
 800ead0:	2000b0f8 	.word	0x2000b0f8
 800ead4:	0801db4c 	.word	0x0801db4c
 800ead8:	0801d86c 	.word	0x0801d86c

0800eadc <rmw_subscription_get_actual_qos>:
 800eadc:	b508      	push	{r3, lr}
 800eade:	4603      	mov	r3, r0
 800eae0:	b140      	cbz	r0, 800eaf4 <rmw_subscription_get_actual_qos+0x18>
 800eae2:	4608      	mov	r0, r1
 800eae4:	b131      	cbz	r1, 800eaf4 <rmw_subscription_get_actual_qos+0x18>
 800eae6:	6859      	ldr	r1, [r3, #4]
 800eae8:	2250      	movs	r2, #80	@ 0x50
 800eaea:	3128      	adds	r1, #40	@ 0x28
 800eaec:	f00c f9cf 	bl	801ae8e <memcpy>
 800eaf0:	2000      	movs	r0, #0
 800eaf2:	bd08      	pop	{r3, pc}
 800eaf4:	200b      	movs	r0, #11
 800eaf6:	bd08      	pop	{r3, pc}

0800eaf8 <rmw_destroy_subscription>:
 800eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafc:	b128      	cbz	r0, 800eb0a <rmw_destroy_subscription+0x12>
 800eafe:	4604      	mov	r4, r0
 800eb00:	6800      	ldr	r0, [r0, #0]
 800eb02:	460d      	mov	r5, r1
 800eb04:	f000 fc04 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800eb08:	b918      	cbnz	r0, 800eb12 <rmw_destroy_subscription+0x1a>
 800eb0a:	2401      	movs	r4, #1
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb12:	6863      	ldr	r3, [r4, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0f8      	beq.n	800eb0a <rmw_destroy_subscription+0x12>
 800eb18:	2d00      	cmp	r5, #0
 800eb1a:	d0f6      	beq.n	800eb0a <rmw_destroy_subscription+0x12>
 800eb1c:	6828      	ldr	r0, [r5, #0]
 800eb1e:	f000 fbf7 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d0f1      	beq.n	800eb0a <rmw_destroy_subscription+0x12>
 800eb26:	686c      	ldr	r4, [r5, #4]
 800eb28:	2c00      	cmp	r4, #0
 800eb2a:	d0ee      	beq.n	800eb0a <rmw_destroy_subscription+0x12>
 800eb2c:	6a26      	ldr	r6, [r4, #32]
 800eb2e:	6962      	ldr	r2, [r4, #20]
 800eb30:	6930      	ldr	r0, [r6, #16]
 800eb32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb3a:	6819      	ldr	r1, [r3, #0]
 800eb3c:	f001 fb4c 	bl	80101d8 <uxr_buffer_cancel_data>
 800eb40:	4602      	mov	r2, r0
 800eb42:	6930      	ldr	r0, [r6, #16]
 800eb44:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eb48:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eb4c:	f000 fb5a 	bl	800f204 <run_xrce_session>
 800eb50:	69e0      	ldr	r0, [r4, #28]
 800eb52:	f008 fde5 	bl	8017720 <destroy_topic>
 800eb56:	6a23      	ldr	r3, [r4, #32]
 800eb58:	6962      	ldr	r2, [r4, #20]
 800eb5a:	6918      	ldr	r0, [r3, #16]
 800eb5c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb64:	6819      	ldr	r1, [r3, #0]
 800eb66:	f000 ff2d 	bl	800f9c4 <uxr_buffer_delete_entity>
 800eb6a:	6a23      	ldr	r3, [r4, #32]
 800eb6c:	6922      	ldr	r2, [r4, #16]
 800eb6e:	4680      	mov	r8, r0
 800eb70:	6918      	ldr	r0, [r3, #16]
 800eb72:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb7a:	6819      	ldr	r1, [r3, #0]
 800eb7c:	f000 ff22 	bl	800f9c4 <uxr_buffer_delete_entity>
 800eb80:	4607      	mov	r7, r0
 800eb82:	6930      	ldr	r0, [r6, #16]
 800eb84:	4642      	mov	r2, r8
 800eb86:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eb8a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eb8e:	f000 fb39 	bl	800f204 <run_xrce_session>
 800eb92:	4604      	mov	r4, r0
 800eb94:	6930      	ldr	r0, [r6, #16]
 800eb96:	463a      	mov	r2, r7
 800eb98:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eb9c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eba0:	f000 fb30 	bl	800f204 <run_xrce_session>
 800eba4:	4004      	ands	r4, r0
 800eba6:	f084 0401 	eor.w	r4, r4, #1
 800ebaa:	b2e4      	uxtb	r4, r4
 800ebac:	4628      	mov	r0, r5
 800ebae:	0064      	lsls	r4, r4, #1
 800ebb0:	f000 f9dc 	bl	800ef6c <rmw_uxrce_fini_subscription_memory>
 800ebb4:	e7aa      	b.n	800eb0c <rmw_destroy_subscription+0x14>
 800ebb6:	bf00      	nop

0800ebb8 <rmw_uxrce_transport_init>:
 800ebb8:	b508      	push	{r3, lr}
 800ebba:	b108      	cbz	r0, 800ebc0 <rmw_uxrce_transport_init+0x8>
 800ebbc:	f100 0210 	add.w	r2, r0, #16
 800ebc0:	b139      	cbz	r1, 800ebd2 <rmw_uxrce_transport_init+0x1a>
 800ebc2:	6949      	ldr	r1, [r1, #20]
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	f001 f95f 	bl	800fe88 <uxr_init_custom_transport>
 800ebca:	f080 0001 	eor.w	r0, r0, #1
 800ebce:	b2c0      	uxtb	r0, r0
 800ebd0:	bd08      	pop	{r3, pc}
 800ebd2:	4b04      	ldr	r3, [pc, #16]	@ (800ebe4 <rmw_uxrce_transport_init+0x2c>)
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	6859      	ldr	r1, [r3, #4]
 800ebd8:	f001 f956 	bl	800fe88 <uxr_init_custom_transport>
 800ebdc:	f080 0001 	eor.w	r0, r0, #1
 800ebe0:	b2c0      	uxtb	r0, r0
 800ebe2:	bd08      	pop	{r3, pc}
 800ebe4:	20008960 	.word	0x20008960

0800ebe8 <rmw_uros_epoch_millis>:
 800ebe8:	4b05      	ldr	r3, [pc, #20]	@ (800ec00 <rmw_uros_epoch_millis+0x18>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	b123      	cbz	r3, 800ebf8 <rmw_uros_epoch_millis+0x10>
 800ebee:	6898      	ldr	r0, [r3, #8]
 800ebf0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebf4:	f001 bce2 	b.w	80105bc <uxr_epoch_millis>
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop
 800ec00:	2000ce38 	.word	0x2000ce38

0800ec04 <rmw_uros_epoch_nanos>:
 800ec04:	4b05      	ldr	r3, [pc, #20]	@ (800ec1c <rmw_uros_epoch_nanos+0x18>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	b123      	cbz	r3, 800ec14 <rmw_uros_epoch_nanos+0x10>
 800ec0a:	6898      	ldr	r0, [r3, #8]
 800ec0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec10:	f001 bce6 	b.w	80105e0 <uxr_epoch_nanos>
 800ec14:	2000      	movs	r0, #0
 800ec16:	2100      	movs	r1, #0
 800ec18:	4770      	bx	lr
 800ec1a:	bf00      	nop
 800ec1c:	2000ce38 	.word	0x2000ce38

0800ec20 <rmw_uros_sync_session>:
 800ec20:	b508      	push	{r3, lr}
 800ec22:	4b07      	ldr	r3, [pc, #28]	@ (800ec40 <rmw_uros_sync_session+0x20>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	b14b      	cbz	r3, 800ec3c <rmw_uros_sync_session+0x1c>
 800ec28:	4601      	mov	r1, r0
 800ec2a:	6898      	ldr	r0, [r3, #8]
 800ec2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec30:	f002 f8f2 	bl	8010e18 <uxr_sync_session>
 800ec34:	f080 0001 	eor.w	r0, r0, #1
 800ec38:	b2c0      	uxtb	r0, r0
 800ec3a:	bd08      	pop	{r3, pc}
 800ec3c:	2001      	movs	r0, #1
 800ec3e:	bd08      	pop	{r3, pc}
 800ec40:	2000ce38 	.word	0x2000ce38

0800ec44 <rmw_uxrce_init_service_memory>:
 800ec44:	b1e2      	cbz	r2, 800ec80 <rmw_uxrce_init_service_memory+0x3c>
 800ec46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec4a:	7b05      	ldrb	r5, [r0, #12]
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	b9ad      	cbnz	r5, 800ec7c <rmw_uxrce_init_service_memory+0x38>
 800ec50:	23c8      	movs	r3, #200	@ 0xc8
 800ec52:	e9c0 5500 	strd	r5, r5, [r0]
 800ec56:	6083      	str	r3, [r0, #8]
 800ec58:	f240 1301 	movw	r3, #257	@ 0x101
 800ec5c:	4617      	mov	r7, r2
 800ec5e:	8183      	strh	r3, [r0, #12]
 800ec60:	460c      	mov	r4, r1
 800ec62:	46a8      	mov	r8, r5
 800ec64:	4621      	mov	r1, r4
 800ec66:	4630      	mov	r0, r6
 800ec68:	3501      	adds	r5, #1
 800ec6a:	f008 fc89 	bl	8017580 <put_memory>
 800ec6e:	42af      	cmp	r7, r5
 800ec70:	60a4      	str	r4, [r4, #8]
 800ec72:	f884 800c 	strb.w	r8, [r4, #12]
 800ec76:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ec7a:	d1f3      	bne.n	800ec64 <rmw_uxrce_init_service_memory+0x20>
 800ec7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop

0800ec84 <rmw_uxrce_init_client_memory>:
 800ec84:	b1e2      	cbz	r2, 800ecc0 <rmw_uxrce_init_client_memory+0x3c>
 800ec86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8a:	7b05      	ldrb	r5, [r0, #12]
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	b9ad      	cbnz	r5, 800ecbc <rmw_uxrce_init_client_memory+0x38>
 800ec90:	23c8      	movs	r3, #200	@ 0xc8
 800ec92:	e9c0 5500 	strd	r5, r5, [r0]
 800ec96:	6083      	str	r3, [r0, #8]
 800ec98:	f240 1301 	movw	r3, #257	@ 0x101
 800ec9c:	4617      	mov	r7, r2
 800ec9e:	8183      	strh	r3, [r0, #12]
 800eca0:	460c      	mov	r4, r1
 800eca2:	46a8      	mov	r8, r5
 800eca4:	4621      	mov	r1, r4
 800eca6:	4630      	mov	r0, r6
 800eca8:	3501      	adds	r5, #1
 800ecaa:	f008 fc69 	bl	8017580 <put_memory>
 800ecae:	42af      	cmp	r7, r5
 800ecb0:	60a4      	str	r4, [r4, #8]
 800ecb2:	f884 800c 	strb.w	r8, [r4, #12]
 800ecb6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ecba:	d1f3      	bne.n	800eca4 <rmw_uxrce_init_client_memory+0x20>
 800ecbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop

0800ecc4 <rmw_uxrce_init_publisher_memory>:
 800ecc4:	b1e2      	cbz	r2, 800ed00 <rmw_uxrce_init_publisher_memory+0x3c>
 800ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecca:	7b05      	ldrb	r5, [r0, #12]
 800eccc:	4606      	mov	r6, r0
 800ecce:	b9ad      	cbnz	r5, 800ecfc <rmw_uxrce_init_publisher_memory+0x38>
 800ecd0:	23d8      	movs	r3, #216	@ 0xd8
 800ecd2:	e9c0 5500 	strd	r5, r5, [r0]
 800ecd6:	6083      	str	r3, [r0, #8]
 800ecd8:	f240 1301 	movw	r3, #257	@ 0x101
 800ecdc:	4617      	mov	r7, r2
 800ecde:	8183      	strh	r3, [r0, #12]
 800ece0:	460c      	mov	r4, r1
 800ece2:	46a8      	mov	r8, r5
 800ece4:	4621      	mov	r1, r4
 800ece6:	4630      	mov	r0, r6
 800ece8:	3501      	adds	r5, #1
 800ecea:	f008 fc49 	bl	8017580 <put_memory>
 800ecee:	42af      	cmp	r7, r5
 800ecf0:	60a4      	str	r4, [r4, #8]
 800ecf2:	f884 800c 	strb.w	r8, [r4, #12]
 800ecf6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ecfa:	d1f3      	bne.n	800ece4 <rmw_uxrce_init_publisher_memory+0x20>
 800ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop

0800ed04 <rmw_uxrce_init_subscription_memory>:
 800ed04:	b1e2      	cbz	r2, 800ed40 <rmw_uxrce_init_subscription_memory+0x3c>
 800ed06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed0a:	7b05      	ldrb	r5, [r0, #12]
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	b9ad      	cbnz	r5, 800ed3c <rmw_uxrce_init_subscription_memory+0x38>
 800ed10:	23d8      	movs	r3, #216	@ 0xd8
 800ed12:	e9c0 5500 	strd	r5, r5, [r0]
 800ed16:	6083      	str	r3, [r0, #8]
 800ed18:	f240 1301 	movw	r3, #257	@ 0x101
 800ed1c:	4617      	mov	r7, r2
 800ed1e:	8183      	strh	r3, [r0, #12]
 800ed20:	460c      	mov	r4, r1
 800ed22:	46a8      	mov	r8, r5
 800ed24:	4621      	mov	r1, r4
 800ed26:	4630      	mov	r0, r6
 800ed28:	3501      	adds	r5, #1
 800ed2a:	f008 fc29 	bl	8017580 <put_memory>
 800ed2e:	42af      	cmp	r7, r5
 800ed30:	60a4      	str	r4, [r4, #8]
 800ed32:	f884 800c 	strb.w	r8, [r4, #12]
 800ed36:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ed3a:	d1f3      	bne.n	800ed24 <rmw_uxrce_init_subscription_memory+0x20>
 800ed3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop

0800ed44 <rmw_uxrce_init_node_memory>:
 800ed44:	b1e2      	cbz	r2, 800ed80 <rmw_uxrce_init_node_memory+0x3c>
 800ed46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4a:	7b05      	ldrb	r5, [r0, #12]
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	b9ad      	cbnz	r5, 800ed7c <rmw_uxrce_init_node_memory+0x38>
 800ed50:	23a4      	movs	r3, #164	@ 0xa4
 800ed52:	e9c0 5500 	strd	r5, r5, [r0]
 800ed56:	6083      	str	r3, [r0, #8]
 800ed58:	f240 1301 	movw	r3, #257	@ 0x101
 800ed5c:	4617      	mov	r7, r2
 800ed5e:	8183      	strh	r3, [r0, #12]
 800ed60:	460c      	mov	r4, r1
 800ed62:	46a8      	mov	r8, r5
 800ed64:	4621      	mov	r1, r4
 800ed66:	4630      	mov	r0, r6
 800ed68:	3501      	adds	r5, #1
 800ed6a:	f008 fc09 	bl	8017580 <put_memory>
 800ed6e:	42af      	cmp	r7, r5
 800ed70:	60a4      	str	r4, [r4, #8]
 800ed72:	f884 800c 	strb.w	r8, [r4, #12]
 800ed76:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ed7a:	d1f3      	bne.n	800ed64 <rmw_uxrce_init_node_memory+0x20>
 800ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop

0800ed84 <rmw_uxrce_init_session_memory>:
 800ed84:	b1ea      	cbz	r2, 800edc2 <rmw_uxrce_init_session_memory+0x3e>
 800ed86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed8a:	7b05      	ldrb	r5, [r0, #12]
 800ed8c:	4606      	mov	r6, r0
 800ed8e:	b9b5      	cbnz	r5, 800edbe <rmw_uxrce_init_session_memory+0x3a>
 800ed90:	e9c0 5500 	strd	r5, r5, [r0]
 800ed94:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ed98:	f240 1301 	movw	r3, #257	@ 0x101
 800ed9c:	4617      	mov	r7, r2
 800ed9e:	f8c0 8008 	str.w	r8, [r0, #8]
 800eda2:	460c      	mov	r4, r1
 800eda4:	8183      	strh	r3, [r0, #12]
 800eda6:	46a9      	mov	r9, r5
 800eda8:	4621      	mov	r1, r4
 800edaa:	4630      	mov	r0, r6
 800edac:	3501      	adds	r5, #1
 800edae:	f008 fbe7 	bl	8017580 <put_memory>
 800edb2:	42af      	cmp	r7, r5
 800edb4:	60a4      	str	r4, [r4, #8]
 800edb6:	f884 900c 	strb.w	r9, [r4, #12]
 800edba:	4444      	add	r4, r8
 800edbc:	d1f4      	bne.n	800eda8 <rmw_uxrce_init_session_memory+0x24>
 800edbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edc2:	4770      	bx	lr

0800edc4 <rmw_uxrce_init_topic_memory>:
 800edc4:	b1e2      	cbz	r2, 800ee00 <rmw_uxrce_init_topic_memory+0x3c>
 800edc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edca:	7b05      	ldrb	r5, [r0, #12]
 800edcc:	4606      	mov	r6, r0
 800edce:	b9ad      	cbnz	r5, 800edfc <rmw_uxrce_init_topic_memory+0x38>
 800edd0:	231c      	movs	r3, #28
 800edd2:	e9c0 5500 	strd	r5, r5, [r0]
 800edd6:	6083      	str	r3, [r0, #8]
 800edd8:	f240 1301 	movw	r3, #257	@ 0x101
 800eddc:	4617      	mov	r7, r2
 800edde:	8183      	strh	r3, [r0, #12]
 800ede0:	460c      	mov	r4, r1
 800ede2:	46a8      	mov	r8, r5
 800ede4:	4621      	mov	r1, r4
 800ede6:	4630      	mov	r0, r6
 800ede8:	3501      	adds	r5, #1
 800edea:	f008 fbc9 	bl	8017580 <put_memory>
 800edee:	42af      	cmp	r7, r5
 800edf0:	60a4      	str	r4, [r4, #8]
 800edf2:	f884 800c 	strb.w	r8, [r4, #12]
 800edf6:	f104 041c 	add.w	r4, r4, #28
 800edfa:	d1f3      	bne.n	800ede4 <rmw_uxrce_init_topic_memory+0x20>
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop

0800ee04 <rmw_uxrce_init_static_input_buffer_memory>:
 800ee04:	b1ea      	cbz	r2, 800ee42 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ee06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0a:	7b05      	ldrb	r5, [r0, #12]
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	b9b5      	cbnz	r5, 800ee3e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ee10:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ee14:	e9c0 5500 	strd	r5, r5, [r0]
 800ee18:	6083      	str	r3, [r0, #8]
 800ee1a:	f240 1301 	movw	r3, #257	@ 0x101
 800ee1e:	4617      	mov	r7, r2
 800ee20:	8183      	strh	r3, [r0, #12]
 800ee22:	460c      	mov	r4, r1
 800ee24:	46a8      	mov	r8, r5
 800ee26:	4621      	mov	r1, r4
 800ee28:	4630      	mov	r0, r6
 800ee2a:	3501      	adds	r5, #1
 800ee2c:	f008 fba8 	bl	8017580 <put_memory>
 800ee30:	42af      	cmp	r7, r5
 800ee32:	60a4      	str	r4, [r4, #8]
 800ee34:	f884 800c 	strb.w	r8, [r4, #12]
 800ee38:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ee3c:	d1f3      	bne.n	800ee26 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ee3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee42:	4770      	bx	lr

0800ee44 <rmw_uxrce_init_init_options_impl_memory>:
 800ee44:	b1e2      	cbz	r2, 800ee80 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ee46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4a:	7b05      	ldrb	r5, [r0, #12]
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	b9ad      	cbnz	r5, 800ee7c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ee50:	232c      	movs	r3, #44	@ 0x2c
 800ee52:	e9c0 5500 	strd	r5, r5, [r0]
 800ee56:	6083      	str	r3, [r0, #8]
 800ee58:	f240 1301 	movw	r3, #257	@ 0x101
 800ee5c:	4617      	mov	r7, r2
 800ee5e:	8183      	strh	r3, [r0, #12]
 800ee60:	460c      	mov	r4, r1
 800ee62:	46a8      	mov	r8, r5
 800ee64:	4621      	mov	r1, r4
 800ee66:	4630      	mov	r0, r6
 800ee68:	3501      	adds	r5, #1
 800ee6a:	f008 fb89 	bl	8017580 <put_memory>
 800ee6e:	42af      	cmp	r7, r5
 800ee70:	60a4      	str	r4, [r4, #8]
 800ee72:	f884 800c 	strb.w	r8, [r4, #12]
 800ee76:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ee7a:	d1f3      	bne.n	800ee64 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ee7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop

0800ee84 <rmw_uxrce_init_wait_set_memory>:
 800ee84:	b1e2      	cbz	r2, 800eec0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ee86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8a:	7b05      	ldrb	r5, [r0, #12]
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	b9ad      	cbnz	r5, 800eebc <rmw_uxrce_init_wait_set_memory+0x38>
 800ee90:	231c      	movs	r3, #28
 800ee92:	e9c0 5500 	strd	r5, r5, [r0]
 800ee96:	6083      	str	r3, [r0, #8]
 800ee98:	f240 1301 	movw	r3, #257	@ 0x101
 800ee9c:	4617      	mov	r7, r2
 800ee9e:	8183      	strh	r3, [r0, #12]
 800eea0:	460c      	mov	r4, r1
 800eea2:	46a8      	mov	r8, r5
 800eea4:	4621      	mov	r1, r4
 800eea6:	4630      	mov	r0, r6
 800eea8:	3501      	adds	r5, #1
 800eeaa:	f008 fb69 	bl	8017580 <put_memory>
 800eeae:	42af      	cmp	r7, r5
 800eeb0:	60a4      	str	r4, [r4, #8]
 800eeb2:	f884 800c 	strb.w	r8, [r4, #12]
 800eeb6:	f104 041c 	add.w	r4, r4, #28
 800eeba:	d1f3      	bne.n	800eea4 <rmw_uxrce_init_wait_set_memory+0x20>
 800eebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop

0800eec4 <rmw_uxrce_init_guard_condition_memory>:
 800eec4:	b1e2      	cbz	r2, 800ef00 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800eec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeca:	7b05      	ldrb	r5, [r0, #12]
 800eecc:	4606      	mov	r6, r0
 800eece:	b9ad      	cbnz	r5, 800eefc <rmw_uxrce_init_guard_condition_memory+0x38>
 800eed0:	2320      	movs	r3, #32
 800eed2:	e9c0 5500 	strd	r5, r5, [r0]
 800eed6:	6083      	str	r3, [r0, #8]
 800eed8:	f240 1301 	movw	r3, #257	@ 0x101
 800eedc:	4617      	mov	r7, r2
 800eede:	8183      	strh	r3, [r0, #12]
 800eee0:	460c      	mov	r4, r1
 800eee2:	46a8      	mov	r8, r5
 800eee4:	4621      	mov	r1, r4
 800eee6:	4630      	mov	r0, r6
 800eee8:	3501      	adds	r5, #1
 800eeea:	f008 fb49 	bl	8017580 <put_memory>
 800eeee:	42af      	cmp	r7, r5
 800eef0:	60a4      	str	r4, [r4, #8]
 800eef2:	f884 800c 	strb.w	r8, [r4, #12]
 800eef6:	f104 0420 	add.w	r4, r4, #32
 800eefa:	d1f3      	bne.n	800eee4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800eefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop

0800ef04 <rmw_uxrce_fini_session_memory>:
 800ef04:	4601      	mov	r1, r0
 800ef06:	4801      	ldr	r0, [pc, #4]	@ (800ef0c <rmw_uxrce_fini_session_memory+0x8>)
 800ef08:	f008 bb3a 	b.w	8017580 <put_memory>
 800ef0c:	2000ce38 	.word	0x2000ce38

0800ef10 <rmw_uxrce_fini_node_memory>:
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	4604      	mov	r4, r0
 800ef14:	6800      	ldr	r0, [r0, #0]
 800ef16:	b128      	cbz	r0, 800ef24 <rmw_uxrce_fini_node_memory+0x14>
 800ef18:	4b07      	ldr	r3, [pc, #28]	@ (800ef38 <rmw_uxrce_fini_node_memory+0x28>)
 800ef1a:	6819      	ldr	r1, [r3, #0]
 800ef1c:	f7f1 f940 	bl	80001a0 <strcmp>
 800ef20:	b940      	cbnz	r0, 800ef34 <rmw_uxrce_fini_node_memory+0x24>
 800ef22:	6020      	str	r0, [r4, #0]
 800ef24:	6861      	ldr	r1, [r4, #4]
 800ef26:	b129      	cbz	r1, 800ef34 <rmw_uxrce_fini_node_memory+0x24>
 800ef28:	2500      	movs	r5, #0
 800ef2a:	4804      	ldr	r0, [pc, #16]	@ (800ef3c <rmw_uxrce_fini_node_memory+0x2c>)
 800ef2c:	610d      	str	r5, [r1, #16]
 800ef2e:	f008 fb27 	bl	8017580 <put_memory>
 800ef32:	6065      	str	r5, [r4, #4]
 800ef34:	bd38      	pop	{r3, r4, r5, pc}
 800ef36:	bf00      	nop
 800ef38:	0801ea7c 	.word	0x0801ea7c
 800ef3c:	2000b87c 	.word	0x2000b87c

0800ef40 <rmw_uxrce_fini_publisher_memory>:
 800ef40:	b510      	push	{r4, lr}
 800ef42:	4604      	mov	r4, r0
 800ef44:	6800      	ldr	r0, [r0, #0]
 800ef46:	b128      	cbz	r0, 800ef54 <rmw_uxrce_fini_publisher_memory+0x14>
 800ef48:	4b06      	ldr	r3, [pc, #24]	@ (800ef64 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ef4a:	6819      	ldr	r1, [r3, #0]
 800ef4c:	f7f1 f928 	bl	80001a0 <strcmp>
 800ef50:	b938      	cbnz	r0, 800ef62 <rmw_uxrce_fini_publisher_memory+0x22>
 800ef52:	6020      	str	r0, [r4, #0]
 800ef54:	6861      	ldr	r1, [r4, #4]
 800ef56:	b121      	cbz	r1, 800ef62 <rmw_uxrce_fini_publisher_memory+0x22>
 800ef58:	4803      	ldr	r0, [pc, #12]	@ (800ef68 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ef5a:	f008 fb11 	bl	8017580 <put_memory>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	6063      	str	r3, [r4, #4]
 800ef62:	bd10      	pop	{r4, pc}
 800ef64:	0801ea7c 	.word	0x0801ea7c
 800ef68:	2000b7c8 	.word	0x2000b7c8

0800ef6c <rmw_uxrce_fini_subscription_memory>:
 800ef6c:	b510      	push	{r4, lr}
 800ef6e:	4604      	mov	r4, r0
 800ef70:	6800      	ldr	r0, [r0, #0]
 800ef72:	b128      	cbz	r0, 800ef80 <rmw_uxrce_fini_subscription_memory+0x14>
 800ef74:	4b06      	ldr	r3, [pc, #24]	@ (800ef90 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ef76:	6819      	ldr	r1, [r3, #0]
 800ef78:	f7f1 f912 	bl	80001a0 <strcmp>
 800ef7c:	b938      	cbnz	r0, 800ef8e <rmw_uxrce_fini_subscription_memory+0x22>
 800ef7e:	6020      	str	r0, [r4, #0]
 800ef80:	6861      	ldr	r1, [r4, #4]
 800ef82:	b121      	cbz	r1, 800ef8e <rmw_uxrce_fini_subscription_memory+0x22>
 800ef84:	4803      	ldr	r0, [pc, #12]	@ (800ef94 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ef86:	f008 fafb 	bl	8017580 <put_memory>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	6063      	str	r3, [r4, #4]
 800ef8e:	bd10      	pop	{r4, pc}
 800ef90:	0801ea7c 	.word	0x0801ea7c
 800ef94:	2000b0f8 	.word	0x2000b0f8

0800ef98 <rmw_uxrce_fini_service_memory>:
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	6800      	ldr	r0, [r0, #0]
 800ef9e:	b128      	cbz	r0, 800efac <rmw_uxrce_fini_service_memory+0x14>
 800efa0:	4b06      	ldr	r3, [pc, #24]	@ (800efbc <rmw_uxrce_fini_service_memory+0x24>)
 800efa2:	6819      	ldr	r1, [r3, #0]
 800efa4:	f7f1 f8fc 	bl	80001a0 <strcmp>
 800efa8:	b938      	cbnz	r0, 800efba <rmw_uxrce_fini_service_memory+0x22>
 800efaa:	6020      	str	r0, [r4, #0]
 800efac:	6861      	ldr	r1, [r4, #4]
 800efae:	b121      	cbz	r1, 800efba <rmw_uxrce_fini_service_memory+0x22>
 800efb0:	4803      	ldr	r0, [pc, #12]	@ (800efc0 <rmw_uxrce_fini_service_memory+0x28>)
 800efb2:	f008 fae5 	bl	8017580 <put_memory>
 800efb6:	2300      	movs	r3, #0
 800efb8:	6063      	str	r3, [r4, #4]
 800efba:	bd10      	pop	{r4, pc}
 800efbc:	0801ea7c 	.word	0x0801ea7c
 800efc0:	2000af38 	.word	0x2000af38

0800efc4 <rmw_uxrce_fini_client_memory>:
 800efc4:	b510      	push	{r4, lr}
 800efc6:	4604      	mov	r4, r0
 800efc8:	6800      	ldr	r0, [r0, #0]
 800efca:	b128      	cbz	r0, 800efd8 <rmw_uxrce_fini_client_memory+0x14>
 800efcc:	4b06      	ldr	r3, [pc, #24]	@ (800efe8 <rmw_uxrce_fini_client_memory+0x24>)
 800efce:	6819      	ldr	r1, [r3, #0]
 800efd0:	f7f1 f8e6 	bl	80001a0 <strcmp>
 800efd4:	b938      	cbnz	r0, 800efe6 <rmw_uxrce_fini_client_memory+0x22>
 800efd6:	6020      	str	r0, [r4, #0]
 800efd8:	6861      	ldr	r1, [r4, #4]
 800efda:	b121      	cbz	r1, 800efe6 <rmw_uxrce_fini_client_memory+0x22>
 800efdc:	4803      	ldr	r0, [pc, #12]	@ (800efec <rmw_uxrce_fini_client_memory+0x28>)
 800efde:	f008 facf 	bl	8017580 <put_memory>
 800efe2:	2300      	movs	r3, #0
 800efe4:	6063      	str	r3, [r4, #4]
 800efe6:	bd10      	pop	{r4, pc}
 800efe8:	0801ea7c 	.word	0x0801ea7c
 800efec:	2000ae60 	.word	0x2000ae60

0800eff0 <rmw_uxrce_fini_topic_memory>:
 800eff0:	b510      	push	{r4, lr}
 800eff2:	4604      	mov	r4, r0
 800eff4:	4621      	mov	r1, r4
 800eff6:	4803      	ldr	r0, [pc, #12]	@ (800f004 <rmw_uxrce_fini_topic_memory+0x14>)
 800eff8:	f008 fac2 	bl	8017580 <put_memory>
 800effc:	2300      	movs	r3, #0
 800effe:	61a3      	str	r3, [r4, #24]
 800f000:	bd10      	pop	{r4, pc}
 800f002:	bf00      	nop
 800f004:	2000ad88 	.word	0x2000ad88

0800f008 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f008:	b082      	sub	sp, #8
 800f00a:	b530      	push	{r4, r5, lr}
 800f00c:	4929      	ldr	r1, [pc, #164]	@ (800f0b4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800f00e:	ac03      	add	r4, sp, #12
 800f010:	e884 000c 	stmia.w	r4, {r2, r3}
 800f014:	680c      	ldr	r4, [r1, #0]
 800f016:	461d      	mov	r5, r3
 800f018:	4602      	mov	r2, r0
 800f01a:	2c00      	cmp	r4, #0
 800f01c:	d043      	beq.n	800f0a6 <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800f01e:	4620      	mov	r0, r4
 800f020:	2100      	movs	r1, #0
 800f022:	6883      	ldr	r3, [r0, #8]
 800f024:	6840      	ldr	r0, [r0, #4]
 800f026:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800f02a:	429a      	cmp	r2, r3
 800f02c:	bf08      	it	eq
 800f02e:	3101      	addeq	r1, #1
 800f030:	2800      	cmp	r0, #0
 800f032:	d1f6      	bne.n	800f022 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800f034:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f038:	2b02      	cmp	r3, #2
 800f03a:	d027      	beq.n	800f08c <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800f03c:	d906      	bls.n	800f04c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f03e:	2b03      	cmp	r3, #3
 800f040:	d004      	beq.n	800f04c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f046:	2000      	movs	r0, #0
 800f048:	b002      	add	sp, #8
 800f04a:	4770      	bx	lr
 800f04c:	b1fd      	cbz	r5, 800f08e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f04e:	428d      	cmp	r5, r1
 800f050:	d81d      	bhi.n	800f08e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f052:	2c00      	cmp	r4, #0
 800f054:	d0f5      	beq.n	800f042 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f056:	2000      	movs	r0, #0
 800f058:	f04f 3cff 	mov.w	ip, #4294967295
 800f05c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800f060:	e001      	b.n	800f066 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800f062:	6864      	ldr	r4, [r4, #4]
 800f064:	b1dc      	cbz	r4, 800f09e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f066:	68a3      	ldr	r3, [r4, #8]
 800f068:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800f06c:	428a      	cmp	r2, r1
 800f06e:	d1f8      	bne.n	800f062 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f070:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800f074:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f078:	4561      	cmp	r1, ip
 800f07a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f07e:	eb73 0e05 	sbcs.w	lr, r3, r5
 800f082:	daee      	bge.n	800f062 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f084:	468c      	mov	ip, r1
 800f086:	461d      	mov	r5, r3
 800f088:	4620      	mov	r0, r4
 800f08a:	e7ea      	b.n	800f062 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f08c:	b92d      	cbnz	r5, 800f09a <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800f08e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f092:	4808      	ldr	r0, [pc, #32]	@ (800f0b4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800f094:	b002      	add	sp, #8
 800f096:	f008 ba63 	b.w	8017560 <get_memory>
 800f09a:	428d      	cmp	r5, r1
 800f09c:	d8f7      	bhi.n	800f08e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f09e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0a2:	b002      	add	sp, #8
 800f0a4:	4770      	bx	lr
 800f0a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d0ef      	beq.n	800f08e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f0ae:	d9ee      	bls.n	800f08e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	e7c4      	b.n	800f03e <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800f0b4:	2000ac60 	.word	0x2000ac60

0800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f0b8:	4b11      	ldr	r3, [pc, #68]	@ (800f100 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	b1eb      	cbz	r3, 800f0fa <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f0be:	b530      	push	{r4, r5, lr}
 800f0c0:	4684      	mov	ip, r0
 800f0c2:	f04f 34ff 	mov.w	r4, #4294967295
 800f0c6:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	e001      	b.n	800f0d2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	b193      	cbz	r3, 800f0f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800f0d2:	689a      	ldr	r2, [r3, #8]
 800f0d4:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f0d8:	458c      	cmp	ip, r1
 800f0da:	d1f8      	bne.n	800f0ce <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800f0dc:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f0e0:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f0e4:	42a1      	cmp	r1, r4
 800f0e6:	eb72 050e 	sbcs.w	r5, r2, lr
 800f0ea:	daf0      	bge.n	800f0ce <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	4696      	mov	lr, r2
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1ec      	bne.n	800f0d2 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800f0f8:	bd30      	pop	{r4, r5, pc}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	2000ac60 	.word	0x2000ac60
 800f104:	00000000 	.word	0x00000000

0800f108 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	4b3c      	ldr	r3, [pc, #240]	@ (800f200 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f10e:	ed2d 8b06 	vpush	{d8-d10}
 800f112:	f8d3 8000 	ldr.w	r8, [r3]
 800f116:	b08d      	sub	sp, #52	@ 0x34
 800f118:	f7ff fd74 	bl	800ec04 <rmw_uros_epoch_nanos>
 800f11c:	f1b8 0f00 	cmp.w	r8, #0
 800f120:	d05c      	beq.n	800f1dc <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800f122:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f126:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f12a:	2b04      	cmp	r3, #4
 800f12c:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800f1e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f130:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800f1f0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f134:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800f1f8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f138:	4683      	mov	fp, r0
 800f13a:	ac04      	add	r4, sp, #16
 800f13c:	468a      	mov	sl, r1
 800f13e:	d03f      	beq.n	800f1c0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800f140:	2b05      	cmp	r3, #5
 800f142:	d044      	beq.n	800f1ce <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800f144:	2b03      	cmp	r3, #3
 800f146:	d03b      	beq.n	800f1c0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800f148:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f14c:	ed8d ab06 	vstr	d10, [sp, #24]
 800f150:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f154:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f158:	ab08      	add	r3, sp, #32
 800f15a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f15c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f160:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f164:	f007 ff58 	bl	8017018 <rmw_time_equal>
 800f168:	b118      	cbz	r0, 800f172 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800f16a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f16e:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f172:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f176:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800f17a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800f17e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800f182:	f007 ff9d 	bl	80170c0 <rmw_time_total_nsec>
 800f186:	183f      	adds	r7, r7, r0
 800f188:	eb46 0601 	adc.w	r6, r6, r1
 800f18c:	455f      	cmp	r7, fp
 800f18e:	eb76 060a 	sbcs.w	r6, r6, sl
 800f192:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f196:	db05      	blt.n	800f1a4 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800f198:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f19c:	4593      	cmp	fp, r2
 800f19e:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f1a2:	da03      	bge.n	800f1ac <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800f1a4:	4816      	ldr	r0, [pc, #88]	@ (800f200 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f1a6:	4641      	mov	r1, r8
 800f1a8:	f008 f9ea 	bl	8017580 <put_memory>
 800f1ac:	f1b9 0f00 	cmp.w	r9, #0
 800f1b0:	d014      	beq.n	800f1dc <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800f1b2:	46c8      	mov	r8, r9
 800f1b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f1b8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f1bc:	2b04      	cmp	r3, #4
 800f1be:	d1bf      	bne.n	800f140 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800f1c0:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f1c4:	3340      	adds	r3, #64	@ 0x40
 800f1c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f1cc:	e7c0      	b.n	800f150 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800f1ce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f1d2:	3348      	adds	r3, #72	@ 0x48
 800f1d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f1da:	e7b9      	b.n	800f150 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800f1dc:	b00d      	add	sp, #52	@ 0x34
 800f1de:	ecbd 8b06 	vpop	{d8-d10}
 800f1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e6:	bf00      	nop
	...
 800f1f0:	00000001 	.word	0x00000001
 800f1f4:	00000000 	.word	0x00000000
 800f1f8:	0000001e 	.word	0x0000001e
 800f1fc:	00000000 	.word	0x00000000
 800f200:	2000ac60 	.word	0x2000ac60

0800f204 <run_xrce_session>:
 800f204:	b500      	push	{lr}
 800f206:	f891 c002 	ldrb.w	ip, [r1, #2]
 800f20a:	b087      	sub	sp, #28
 800f20c:	f1bc 0f01 	cmp.w	ip, #1
 800f210:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f214:	d00f      	beq.n	800f236 <run_xrce_session+0x32>
 800f216:	4619      	mov	r1, r3
 800f218:	2301      	movs	r3, #1
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	f10d 020e 	add.w	r2, sp, #14
 800f220:	f10d 0317 	add.w	r3, sp, #23
 800f224:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f228:	f001 fda2 	bl	8010d70 <uxr_run_session_until_all_status>
 800f22c:	b100      	cbz	r0, 800f230 <run_xrce_session+0x2c>
 800f22e:	2001      	movs	r0, #1
 800f230:	b007      	add	sp, #28
 800f232:	f85d fb04 	ldr.w	pc, [sp], #4
 800f236:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f23a:	f001 f9db 	bl	80105f4 <uxr_flash_output_streams>
 800f23e:	2001      	movs	r0, #1
 800f240:	e7f6      	b.n	800f230 <run_xrce_session+0x2c>
 800f242:	bf00      	nop

0800f244 <convert_qos_profile>:
 800f244:	780a      	ldrb	r2, [r1, #0]
 800f246:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f24a:	f1a2 0202 	sub.w	r2, r2, #2
 800f24e:	fab2 f282 	clz	r2, r2
 800f252:	0952      	lsrs	r2, r2, #5
 800f254:	7082      	strb	r2, [r0, #2]
 800f256:	7a4a      	ldrb	r2, [r1, #9]
 800f258:	8889      	ldrh	r1, [r1, #4]
 800f25a:	8081      	strh	r1, [r0, #4]
 800f25c:	f1a2 0202 	sub.w	r2, r2, #2
 800f260:	f1ac 0c02 	sub.w	ip, ip, #2
 800f264:	fab2 f282 	clz	r2, r2
 800f268:	fabc fc8c 	clz	ip, ip
 800f26c:	0952      	lsrs	r2, r2, #5
 800f26e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f272:	0052      	lsls	r2, r2, #1
 800f274:	f880 c001 	strb.w	ip, [r0, #1]
 800f278:	7002      	strb	r2, [r0, #0]
 800f27a:	4770      	bx	lr

0800f27c <generate_type_name>:
 800f27c:	b530      	push	{r4, r5, lr}
 800f27e:	2300      	movs	r3, #0
 800f280:	700b      	strb	r3, [r1, #0]
 800f282:	6803      	ldr	r3, [r0, #0]
 800f284:	b087      	sub	sp, #28
 800f286:	4614      	mov	r4, r2
 800f288:	b1d3      	cbz	r3, 800f2c0 <generate_type_name+0x44>
 800f28a:	4a0f      	ldr	r2, [pc, #60]	@ (800f2c8 <generate_type_name+0x4c>)
 800f28c:	4615      	mov	r5, r2
 800f28e:	9203      	str	r2, [sp, #12]
 800f290:	9500      	str	r5, [sp, #0]
 800f292:	6842      	ldr	r2, [r0, #4]
 800f294:	480d      	ldr	r0, [pc, #52]	@ (800f2cc <generate_type_name+0x50>)
 800f296:	9001      	str	r0, [sp, #4]
 800f298:	4608      	mov	r0, r1
 800f29a:	490d      	ldr	r1, [pc, #52]	@ (800f2d0 <generate_type_name+0x54>)
 800f29c:	9204      	str	r2, [sp, #16]
 800f29e:	9105      	str	r1, [sp, #20]
 800f2a0:	9102      	str	r1, [sp, #8]
 800f2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800f2d4 <generate_type_name+0x58>)
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	f00b fba1 	bl	801a9ec <sniprintf>
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	db05      	blt.n	800f2ba <generate_type_name+0x3e>
 800f2ae:	4284      	cmp	r4, r0
 800f2b0:	bfd4      	ite	le
 800f2b2:	2000      	movle	r0, #0
 800f2b4:	2001      	movgt	r0, #1
 800f2b6:	b007      	add	sp, #28
 800f2b8:	bd30      	pop	{r4, r5, pc}
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	b007      	add	sp, #28
 800f2be:	bd30      	pop	{r4, r5, pc}
 800f2c0:	4b05      	ldr	r3, [pc, #20]	@ (800f2d8 <generate_type_name+0x5c>)
 800f2c2:	4a01      	ldr	r2, [pc, #4]	@ (800f2c8 <generate_type_name+0x4c>)
 800f2c4:	461d      	mov	r5, r3
 800f2c6:	e7e2      	b.n	800f28e <generate_type_name+0x12>
 800f2c8:	0801db3c 	.word	0x0801db3c
 800f2cc:	0801db54 	.word	0x0801db54
 800f2d0:	0801db50 	.word	0x0801db50
 800f2d4:	0801db40 	.word	0x0801db40
 800f2d8:	0801e18c 	.word	0x0801e18c

0800f2dc <generate_topic_name>:
 800f2dc:	b510      	push	{r4, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	4614      	mov	r4, r2
 800f2e2:	9000      	str	r0, [sp, #0]
 800f2e4:	4b08      	ldr	r3, [pc, #32]	@ (800f308 <generate_topic_name+0x2c>)
 800f2e6:	4a09      	ldr	r2, [pc, #36]	@ (800f30c <generate_topic_name+0x30>)
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	f00b fb7e 	bl	801a9ec <sniprintf>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	db05      	blt.n	800f300 <generate_topic_name+0x24>
 800f2f4:	4284      	cmp	r4, r0
 800f2f6:	bfd4      	ite	le
 800f2f8:	2000      	movle	r0, #0
 800f2fa:	2001      	movgt	r0, #1
 800f2fc:	b002      	add	sp, #8
 800f2fe:	bd10      	pop	{r4, pc}
 800f300:	2000      	movs	r0, #0
 800f302:	b002      	add	sp, #8
 800f304:	bd10      	pop	{r4, pc}
 800f306:	bf00      	nop
 800f308:	0801e524 	.word	0x0801e524
 800f30c:	0801db58 	.word	0x0801db58

0800f310 <is_uxrce_rmw_identifier_valid>:
 800f310:	b510      	push	{r4, lr}
 800f312:	4604      	mov	r4, r0
 800f314:	b140      	cbz	r0, 800f328 <is_uxrce_rmw_identifier_valid+0x18>
 800f316:	f008 f9a9 	bl	801766c <rmw_get_implementation_identifier>
 800f31a:	4601      	mov	r1, r0
 800f31c:	4620      	mov	r0, r4
 800f31e:	f7f0 ff3f 	bl	80001a0 <strcmp>
 800f322:	fab0 f080 	clz	r0, r0
 800f326:	0940      	lsrs	r0, r0, #5
 800f328:	bd10      	pop	{r4, pc}
 800f32a:	bf00      	nop

0800f32c <get_message_typesupport_handle>:
 800f32c:	6883      	ldr	r3, [r0, #8]
 800f32e:	4718      	bx	r3

0800f330 <get_message_typesupport_handle_function>:
 800f330:	b510      	push	{r4, lr}
 800f332:	4604      	mov	r4, r0
 800f334:	6800      	ldr	r0, [r0, #0]
 800f336:	f7f0 ff33 	bl	80001a0 <strcmp>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	bf0c      	ite	eq
 800f33e:	4620      	moveq	r0, r4
 800f340:	2000      	movne	r0, #0
 800f342:	bd10      	pop	{r4, pc}

0800f344 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f348:	6805      	ldr	r5, [r0, #0]
 800f34a:	4604      	mov	r4, r0
 800f34c:	4628      	mov	r0, r5
 800f34e:	460e      	mov	r6, r1
 800f350:	f7f0 ff26 	bl	80001a0 <strcmp>
 800f354:	b308      	cbz	r0, 800f39a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800f356:	4b12      	ldr	r3, [pc, #72]	@ (800f3a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800f358:	4628      	mov	r0, r5
 800f35a:	6819      	ldr	r1, [r3, #0]
 800f35c:	f7f0 ff20 	bl	80001a0 <strcmp>
 800f360:	4605      	mov	r5, r0
 800f362:	b980      	cbnz	r0, 800f386 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800f364:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f368:	f8d8 4000 	ldr.w	r4, [r8]
 800f36c:	b1ac      	cbz	r4, 800f39a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800f36e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800f372:	3f04      	subs	r7, #4
 800f374:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800f378:	4631      	mov	r1, r6
 800f37a:	f7f0 ff11 	bl	80001a0 <strcmp>
 800f37e:	b128      	cbz	r0, 800f38c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800f380:	3501      	adds	r5, #1
 800f382:	42a5      	cmp	r5, r4
 800f384:	d1f6      	bne.n	800f374 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800f386:	2000      	movs	r0, #0
 800f388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f38c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f390:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f398:	4718      	bx	r3
 800f39a:	4620      	mov	r0, r4
 800f39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a0:	200004c8 	.word	0x200004c8

0800f3a4 <sensor_msgs__msg__Range__rosidl_typesupport_introspection_c__Range_init_function>:
 800f3a4:	f008 bd7a 	b.w	8017e9c <sensor_msgs__msg__Range__init>

0800f3a8 <sensor_msgs__msg__Range__rosidl_typesupport_introspection_c__Range_fini_function>:
 800f3a8:	f008 bd86 	b.w	8017eb8 <sensor_msgs__msg__Range__fini>

0800f3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>:
 800f3ac:	b508      	push	{r3, lr}
 800f3ae:	f000 f8e3 	bl	800f578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f3b2:	4b06      	ldr	r3, [pc, #24]	@ (800f3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x20>)
 800f3b4:	4906      	ldr	r1, [pc, #24]	@ (800f3d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x24>)
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	60c8      	str	r0, [r1, #12]
 800f3ba:	b10a      	cbz	r2, 800f3c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x14>
 800f3bc:	4803      	ldr	r0, [pc, #12]	@ (800f3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x20>)
 800f3be:	bd08      	pop	{r3, pc}
 800f3c0:	4a04      	ldr	r2, [pc, #16]	@ (800f3d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x28>)
 800f3c2:	4802      	ldr	r0, [pc, #8]	@ (800f3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x20>)
 800f3c4:	6812      	ldr	r2, [r2, #0]
 800f3c6:	601a      	str	r2, [r3, #0]
 800f3c8:	bd08      	pop	{r3, pc}
 800f3ca:	bf00      	nop
 800f3cc:	200004d0 	.word	0x200004d0
 800f3d0:	200004e8 	.word	0x200004e8
 800f3d4:	200004cc 	.word	0x200004cc

0800f3d8 <get_serialized_size_sensor_msgs__msg__Range.part.0>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	460c      	mov	r4, r1
 800f3dc:	f000 f8f0 	bl	800f5c0 <get_serialized_size_std_msgs__msg__Header>
 800f3e0:	1826      	adds	r6, r4, r0
 800f3e2:	2101      	movs	r1, #1
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f7fd f8a7 	bl	800c538 <ucdr_alignment>
 800f3ea:	1c45      	adds	r5, r0, #1
 800f3ec:	4435      	add	r5, r6
 800f3ee:	2104      	movs	r1, #4
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	f7fd f8a1 	bl	800c538 <ucdr_alignment>
 800f3f6:	1d06      	adds	r6, r0, #4
 800f3f8:	442e      	add	r6, r5
 800f3fa:	2104      	movs	r1, #4
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f7fd f89b 	bl	800c538 <ucdr_alignment>
 800f402:	1d05      	adds	r5, r0, #4
 800f404:	4435      	add	r5, r6
 800f406:	2104      	movs	r1, #4
 800f408:	4628      	mov	r0, r5
 800f40a:	f7fd f895 	bl	800c538 <ucdr_alignment>
 800f40e:	1d06      	adds	r6, r0, #4
 800f410:	442e      	add	r6, r5
 800f412:	2104      	movs	r1, #4
 800f414:	4630      	mov	r0, r6
 800f416:	f7fd f88f 	bl	800c538 <ucdr_alignment>
 800f41a:	1d05      	adds	r5, r0, #4
 800f41c:	4435      	add	r5, r6
 800f41e:	2104      	movs	r1, #4
 800f420:	4628      	mov	r0, r5
 800f422:	f7fd f889 	bl	800c538 <ucdr_alignment>
 800f426:	f1c4 0404 	rsb	r4, r4, #4
 800f42a:	4420      	add	r0, r4
 800f42c:	4428      	add	r0, r5
 800f42e:	bd70      	pop	{r4, r5, r6, pc}

0800f430 <get_serialized_size_sensor_msgs__msg__Range>:
 800f430:	b108      	cbz	r0, 800f436 <get_serialized_size_sensor_msgs__msg__Range+0x6>
 800f432:	f7ff bfd1 	b.w	800f3d8 <get_serialized_size_sensor_msgs__msg__Range.part.0>
 800f436:	4770      	bx	lr

0800f438 <_Range__get_serialized_size>:
 800f438:	b110      	cbz	r0, 800f440 <_Range__get_serialized_size+0x8>
 800f43a:	2100      	movs	r1, #0
 800f43c:	f7ff bfcc 	b.w	800f3d8 <get_serialized_size_sensor_msgs__msg__Range.part.0>
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop

0800f444 <_Range__cdr_deserialize>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	460c      	mov	r4, r1
 800f448:	b339      	cbz	r1, 800f49a <_Range__cdr_deserialize+0x56>
 800f44a:	4605      	mov	r5, r0
 800f44c:	f000 f93a 	bl	800f6c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f450:	6843      	ldr	r3, [r0, #4]
 800f452:	4621      	mov	r1, r4
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	4628      	mov	r0, r5
 800f458:	4798      	blx	r3
 800f45a:	f104 0114 	add.w	r1, r4, #20
 800f45e:	4628      	mov	r0, r5
 800f460:	f7fb fe24 	bl	800b0ac <ucdr_deserialize_uint8_t>
 800f464:	f104 0118 	add.w	r1, r4, #24
 800f468:	4628      	mov	r0, r5
 800f46a:	f7fc fdf9 	bl	800c060 <ucdr_deserialize_float>
 800f46e:	f104 011c 	add.w	r1, r4, #28
 800f472:	4628      	mov	r0, r5
 800f474:	f7fc fdf4 	bl	800c060 <ucdr_deserialize_float>
 800f478:	f104 0120 	add.w	r1, r4, #32
 800f47c:	4628      	mov	r0, r5
 800f47e:	f7fc fdef 	bl	800c060 <ucdr_deserialize_float>
 800f482:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 800f486:	4628      	mov	r0, r5
 800f488:	f7fc fdea 	bl	800c060 <ucdr_deserialize_float>
 800f48c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800f490:	4628      	mov	r0, r5
 800f492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f496:	f7fc bde3 	b.w	800c060 <ucdr_deserialize_float>
 800f49a:	4608      	mov	r0, r1
 800f49c:	bd38      	pop	{r3, r4, r5, pc}
 800f49e:	bf00      	nop

0800f4a0 <_Range__cdr_serialize>:
 800f4a0:	b340      	cbz	r0, 800f4f4 <_Range__cdr_serialize+0x54>
 800f4a2:	b538      	push	{r3, r4, r5, lr}
 800f4a4:	460d      	mov	r5, r1
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	f000 f90c 	bl	800f6c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f4ac:	6843      	ldr	r3, [r0, #4]
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	4798      	blx	r3
 800f4b6:	7d21      	ldrb	r1, [r4, #20]
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	f7fb fde1 	bl	800b080 <ucdr_serialize_uint8_t>
 800f4be:	ed94 0a06 	vldr	s0, [r4, #24]
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	f7fc fd32 	bl	800bf2c <ucdr_serialize_float>
 800f4c8:	ed94 0a07 	vldr	s0, [r4, #28]
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f7fc fd2d 	bl	800bf2c <ucdr_serialize_float>
 800f4d2:	ed94 0a08 	vldr	s0, [r4, #32]
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	f7fc fd28 	bl	800bf2c <ucdr_serialize_float>
 800f4dc:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f7fc fd23 	bl	800bf2c <ucdr_serialize_float>
 800f4e6:	ed94 0a0a 	vldr	s0, [r4, #40]	@ 0x28
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4f0:	f7fc bd1c 	b.w	800bf2c <ucdr_serialize_float>
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop

0800f4f8 <max_serialized_size_sensor_msgs__msg__Range>:
 800f4f8:	b570      	push	{r4, r5, r6, lr}
 800f4fa:	2501      	movs	r5, #1
 800f4fc:	7005      	strb	r5, [r0, #0]
 800f4fe:	460c      	mov	r4, r1
 800f500:	f000 f8d6 	bl	800f6b0 <max_serialized_size_std_msgs__msg__Header>
 800f504:	1826      	adds	r6, r4, r0
 800f506:	4629      	mov	r1, r5
 800f508:	4630      	mov	r0, r6
 800f50a:	f7fd f815 	bl	800c538 <ucdr_alignment>
 800f50e:	1945      	adds	r5, r0, r5
 800f510:	4435      	add	r5, r6
 800f512:	2104      	movs	r1, #4
 800f514:	4628      	mov	r0, r5
 800f516:	f7fd f80f 	bl	800c538 <ucdr_alignment>
 800f51a:	1d06      	adds	r6, r0, #4
 800f51c:	442e      	add	r6, r5
 800f51e:	2104      	movs	r1, #4
 800f520:	4630      	mov	r0, r6
 800f522:	f7fd f809 	bl	800c538 <ucdr_alignment>
 800f526:	1d05      	adds	r5, r0, #4
 800f528:	4435      	add	r5, r6
 800f52a:	2104      	movs	r1, #4
 800f52c:	4628      	mov	r0, r5
 800f52e:	f7fd f803 	bl	800c538 <ucdr_alignment>
 800f532:	1d06      	adds	r6, r0, #4
 800f534:	442e      	add	r6, r5
 800f536:	2104      	movs	r1, #4
 800f538:	4630      	mov	r0, r6
 800f53a:	f7fc fffd 	bl	800c538 <ucdr_alignment>
 800f53e:	1d05      	adds	r5, r0, #4
 800f540:	4435      	add	r5, r6
 800f542:	2104      	movs	r1, #4
 800f544:	4628      	mov	r0, r5
 800f546:	f7fc fff7 	bl	800c538 <ucdr_alignment>
 800f54a:	f1c4 0404 	rsb	r4, r4, #4
 800f54e:	4420      	add	r0, r4
 800f550:	4428      	add	r0, r5
 800f552:	bd70      	pop	{r4, r5, r6, pc}

0800f554 <_Range__max_serialized_size>:
 800f554:	b500      	push	{lr}
 800f556:	b083      	sub	sp, #12
 800f558:	2100      	movs	r1, #0
 800f55a:	f10d 0007 	add.w	r0, sp, #7
 800f55e:	f7ff ffcb 	bl	800f4f8 <max_serialized_size_sensor_msgs__msg__Range>
 800f562:	b003      	add	sp, #12
 800f564:	f85d fb04 	ldr.w	pc, [sp], #4

0800f568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>:
 800f568:	4800      	ldr	r0, [pc, #0]	@ (800f56c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x4>)
 800f56a:	4770      	bx	lr
 800f56c:	2000068c 	.word	0x2000068c

0800f570 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800f570:	f008 bcee 	b.w	8017f50 <std_msgs__msg__Header__init>

0800f574 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800f574:	f008 bd0c 	b.w	8017f90 <std_msgs__msg__Header__fini>

0800f578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f578:	b508      	push	{r3, lr}
 800f57a:	f000 f8ab 	bl	800f6d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f57e:	4b06      	ldr	r3, [pc, #24]	@ (800f598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f580:	4906      	ldr	r1, [pc, #24]	@ (800f59c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	60c8      	str	r0, [r1, #12]
 800f586:	b10a      	cbz	r2, 800f58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800f588:	4803      	ldr	r0, [pc, #12]	@ (800f598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f58a:	bd08      	pop	{r3, pc}
 800f58c:	4a04      	ldr	r2, [pc, #16]	@ (800f5a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800f58e:	4802      	ldr	r0, [pc, #8]	@ (800f598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f590:	6812      	ldr	r2, [r2, #0]
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	bd08      	pop	{r3, pc}
 800f596:	bf00      	nop
 800f598:	200006c0 	.word	0x200006c0
 800f59c:	200006d8 	.word	0x200006d8
 800f5a0:	200004cc 	.word	0x200004cc

0800f5a4 <_Header__max_serialized_size>:
 800f5a4:	b500      	push	{lr}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	f10d 0007 	add.w	r0, sp, #7
 800f5b0:	f88d 3007 	strb.w	r3, [sp, #7]
 800f5b4:	f000 f8ec 	bl	800f790 <max_serialized_size_builtin_interfaces__msg__Time>
 800f5b8:	b003      	add	sp, #12
 800f5ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5be:	bf00      	nop

0800f5c0 <get_serialized_size_std_msgs__msg__Header>:
 800f5c0:	b570      	push	{r4, r5, r6, lr}
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	b168      	cbz	r0, 800f5e2 <get_serialized_size_std_msgs__msg__Header+0x22>
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	f000 f892 	bl	800f6f0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f5cc:	1826      	adds	r6, r4, r0
 800f5ce:	2104      	movs	r1, #4
 800f5d0:	4630      	mov	r0, r6
 800f5d2:	f7fc ffb1 	bl	800c538 <ucdr_alignment>
 800f5d6:	68eb      	ldr	r3, [r5, #12]
 800f5d8:	f1c4 0405 	rsb	r4, r4, #5
 800f5dc:	441c      	add	r4, r3
 800f5de:	4404      	add	r4, r0
 800f5e0:	19a0      	adds	r0, r4, r6
 800f5e2:	bd70      	pop	{r4, r5, r6, pc}

0800f5e4 <_Header__cdr_deserialize>:
 800f5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	b083      	sub	sp, #12
 800f5ea:	b1e1      	cbz	r1, 800f626 <_Header__cdr_deserialize+0x42>
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	f000 f8e3 	bl	800f7b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f5f2:	6843      	ldr	r3, [r0, #4]
 800f5f4:	4621      	mov	r1, r4
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	4798      	blx	r3
 800f5fc:	6927      	ldr	r7, [r4, #16]
 800f5fe:	68a1      	ldr	r1, [r4, #8]
 800f600:	ab01      	add	r3, sp, #4
 800f602:	463a      	mov	r2, r7
 800f604:	4630      	mov	r0, r6
 800f606:	f000 f993 	bl	800f930 <ucdr_deserialize_sequence_char>
 800f60a:	9b01      	ldr	r3, [sp, #4]
 800f60c:	4605      	mov	r5, r0
 800f60e:	b920      	cbnz	r0, 800f61a <_Header__cdr_deserialize+0x36>
 800f610:	429f      	cmp	r7, r3
 800f612:	d30c      	bcc.n	800f62e <_Header__cdr_deserialize+0x4a>
 800f614:	4628      	mov	r0, r5
 800f616:	b003      	add	sp, #12
 800f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61a:	b103      	cbz	r3, 800f61e <_Header__cdr_deserialize+0x3a>
 800f61c:	3b01      	subs	r3, #1
 800f61e:	4628      	mov	r0, r5
 800f620:	60e3      	str	r3, [r4, #12]
 800f622:	b003      	add	sp, #12
 800f624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f626:	460d      	mov	r5, r1
 800f628:	4628      	mov	r0, r5
 800f62a:	b003      	add	sp, #12
 800f62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f62e:	2101      	movs	r1, #1
 800f630:	75b0      	strb	r0, [r6, #22]
 800f632:	7571      	strb	r1, [r6, #21]
 800f634:	60e0      	str	r0, [r4, #12]
 800f636:	4630      	mov	r0, r6
 800f638:	f7fc ff94 	bl	800c564 <ucdr_align_to>
 800f63c:	4630      	mov	r0, r6
 800f63e:	9901      	ldr	r1, [sp, #4]
 800f640:	f7fc ffc6 	bl	800c5d0 <ucdr_advance_buffer>
 800f644:	4628      	mov	r0, r5
 800f646:	b003      	add	sp, #12
 800f648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f64a:	bf00      	nop

0800f64c <_Header__cdr_serialize>:
 800f64c:	b1f8      	cbz	r0, 800f68e <_Header__cdr_serialize+0x42>
 800f64e:	b570      	push	{r4, r5, r6, lr}
 800f650:	4604      	mov	r4, r0
 800f652:	460d      	mov	r5, r1
 800f654:	f000 f8b0 	bl	800f7b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f658:	6843      	ldr	r3, [r0, #4]
 800f65a:	4629      	mov	r1, r5
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	4620      	mov	r0, r4
 800f660:	4798      	blx	r3
 800f662:	68a6      	ldr	r6, [r4, #8]
 800f664:	b156      	cbz	r6, 800f67c <_Header__cdr_serialize+0x30>
 800f666:	4630      	mov	r0, r6
 800f668:	f7f0 fdfa 	bl	8000260 <strlen>
 800f66c:	4631      	mov	r1, r6
 800f66e:	60e0      	str	r0, [r4, #12]
 800f670:	1c42      	adds	r2, r0, #1
 800f672:	4628      	mov	r0, r5
 800f674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f678:	f000 b948 	b.w	800f90c <ucdr_serialize_sequence_char>
 800f67c:	4630      	mov	r0, r6
 800f67e:	60e0      	str	r0, [r4, #12]
 800f680:	4632      	mov	r2, r6
 800f682:	4631      	mov	r1, r6
 800f684:	4628      	mov	r0, r5
 800f686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f68a:	f000 b93f 	b.w	800f90c <ucdr_serialize_sequence_char>
 800f68e:	4770      	bx	lr

0800f690 <_Header__get_serialized_size>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4604      	mov	r4, r0
 800f694:	b150      	cbz	r0, 800f6ac <_Header__get_serialized_size+0x1c>
 800f696:	2100      	movs	r1, #0
 800f698:	f000 f82a 	bl	800f6f0 <get_serialized_size_builtin_interfaces__msg__Time>
 800f69c:	2104      	movs	r1, #4
 800f69e:	4605      	mov	r5, r0
 800f6a0:	f7fc ff4a 	bl	800c538 <ucdr_alignment>
 800f6a4:	68e4      	ldr	r4, [r4, #12]
 800f6a6:	3405      	adds	r4, #5
 800f6a8:	442c      	add	r4, r5
 800f6aa:	4420      	add	r0, r4
 800f6ac:	bd38      	pop	{r3, r4, r5, pc}
 800f6ae:	bf00      	nop

0800f6b0 <max_serialized_size_std_msgs__msg__Header>:
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	7003      	strb	r3, [r0, #0]
 800f6b8:	f000 f86a 	bl	800f790 <max_serialized_size_builtin_interfaces__msg__Time>
 800f6bc:	2300      	movs	r3, #0
 800f6be:	7023      	strb	r3, [r4, #0]
 800f6c0:	bd10      	pop	{r4, pc}
 800f6c2:	bf00      	nop

0800f6c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f6c4:	4800      	ldr	r0, [pc, #0]	@ (800f6c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800f6c6:	4770      	bx	lr
 800f6c8:	20000750 	.word	0x20000750

0800f6cc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800f6cc:	f008 bc9c 	b.w	8018008 <builtin_interfaces__msg__Time__init>

0800f6d0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800f6d0:	f008 bc9e 	b.w	8018010 <builtin_interfaces__msg__Time__fini>

0800f6d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f6d4:	4b04      	ldr	r3, [pc, #16]	@ (800f6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	b10a      	cbz	r2, 800f6de <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800f6da:	4803      	ldr	r0, [pc, #12]	@ (800f6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f6dc:	4770      	bx	lr
 800f6de:	4a03      	ldr	r2, [pc, #12]	@ (800f6ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800f6e0:	4801      	ldr	r0, [pc, #4]	@ (800f6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f6e2:	6812      	ldr	r2, [r2, #0]
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	4770      	bx	lr
 800f6e8:	20000784 	.word	0x20000784
 800f6ec:	200004cc 	.word	0x200004cc

0800f6f0 <get_serialized_size_builtin_interfaces__msg__Time>:
 800f6f0:	b180      	cbz	r0, 800f714 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f6f2:	b538      	push	{r3, r4, r5, lr}
 800f6f4:	460d      	mov	r5, r1
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	2104      	movs	r1, #4
 800f6fa:	f7fc ff1d 	bl	800c538 <ucdr_alignment>
 800f6fe:	2104      	movs	r1, #4
 800f700:	186c      	adds	r4, r5, r1
 800f702:	4404      	add	r4, r0
 800f704:	4620      	mov	r0, r4
 800f706:	f7fc ff17 	bl	800c538 <ucdr_alignment>
 800f70a:	f1c5 0504 	rsb	r5, r5, #4
 800f70e:	4405      	add	r5, r0
 800f710:	1928      	adds	r0, r5, r4
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop

0800f718 <_Time__cdr_deserialize>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	460c      	mov	r4, r1
 800f71c:	b141      	cbz	r1, 800f730 <_Time__cdr_deserialize+0x18>
 800f71e:	4605      	mov	r5, r0
 800f720:	f7fc fb76 	bl	800be10 <ucdr_deserialize_int32_t>
 800f724:	1d21      	adds	r1, r4, #4
 800f726:	4628      	mov	r0, r5
 800f728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72c:	f7fb bfee 	b.w	800b70c <ucdr_deserialize_uint32_t>
 800f730:	4608      	mov	r0, r1
 800f732:	bd38      	pop	{r3, r4, r5, pc}

0800f734 <_Time__cdr_serialize>:
 800f734:	b160      	cbz	r0, 800f750 <_Time__cdr_serialize+0x1c>
 800f736:	b538      	push	{r3, r4, r5, lr}
 800f738:	460d      	mov	r5, r1
 800f73a:	4604      	mov	r4, r0
 800f73c:	6801      	ldr	r1, [r0, #0]
 800f73e:	4628      	mov	r0, r5
 800f740:	f7fc facc 	bl	800bcdc <ucdr_serialize_int32_t>
 800f744:	6861      	ldr	r1, [r4, #4]
 800f746:	4628      	mov	r0, r5
 800f748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f74c:	f7fb beb4 	b.w	800b4b8 <ucdr_serialize_uint32_t>
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop

0800f754 <_Time__get_serialized_size>:
 800f754:	b160      	cbz	r0, 800f770 <_Time__get_serialized_size+0x1c>
 800f756:	b510      	push	{r4, lr}
 800f758:	2104      	movs	r1, #4
 800f75a:	2000      	movs	r0, #0
 800f75c:	f7fc feec 	bl	800c538 <ucdr_alignment>
 800f760:	1d04      	adds	r4, r0, #4
 800f762:	2104      	movs	r1, #4
 800f764:	4620      	mov	r0, r4
 800f766:	f7fc fee7 	bl	800c538 <ucdr_alignment>
 800f76a:	3004      	adds	r0, #4
 800f76c:	4420      	add	r0, r4
 800f76e:	bd10      	pop	{r4, pc}
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop

0800f774 <_Time__max_serialized_size>:
 800f774:	b510      	push	{r4, lr}
 800f776:	2104      	movs	r1, #4
 800f778:	2000      	movs	r0, #0
 800f77a:	f7fc fedd 	bl	800c538 <ucdr_alignment>
 800f77e:	1d04      	adds	r4, r0, #4
 800f780:	2104      	movs	r1, #4
 800f782:	4620      	mov	r0, r4
 800f784:	f7fc fed8 	bl	800c538 <ucdr_alignment>
 800f788:	3004      	adds	r0, #4
 800f78a:	4420      	add	r0, r4
 800f78c:	bd10      	pop	{r4, pc}
 800f78e:	bf00      	nop

0800f790 <max_serialized_size_builtin_interfaces__msg__Time>:
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	460c      	mov	r4, r1
 800f794:	2301      	movs	r3, #1
 800f796:	7003      	strb	r3, [r0, #0]
 800f798:	2104      	movs	r1, #4
 800f79a:	4620      	mov	r0, r4
 800f79c:	f7fc fecc 	bl	800c538 <ucdr_alignment>
 800f7a0:	2104      	movs	r1, #4
 800f7a2:	1863      	adds	r3, r4, r1
 800f7a4:	18c5      	adds	r5, r0, r3
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f7fc fec6 	bl	800c538 <ucdr_alignment>
 800f7ac:	f1c4 0404 	rsb	r4, r4, #4
 800f7b0:	4420      	add	r0, r4
 800f7b2:	4428      	add	r0, r5
 800f7b4:	bd38      	pop	{r3, r4, r5, pc}
 800f7b6:	bf00      	nop

0800f7b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f7b8:	4800      	ldr	r0, [pc, #0]	@ (800f7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f7ba:	4770      	bx	lr
 800f7bc:	20000814 	.word	0x20000814

0800f7c0 <geometry_msgs__msg__Twist__get_type_hash>:
 800f7c0:	4800      	ldr	r0, [pc, #0]	@ (800f7c4 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 800f7c2:	4770      	bx	lr
 800f7c4:	20000848 	.word	0x20000848

0800f7c8 <geometry_msgs__msg__Twist__get_type_description>:
 800f7c8:	b510      	push	{r4, lr}
 800f7ca:	4c08      	ldr	r4, [pc, #32]	@ (800f7ec <geometry_msgs__msg__Twist__get_type_description+0x24>)
 800f7cc:	7820      	ldrb	r0, [r4, #0]
 800f7ce:	b108      	cbz	r0, 800f7d4 <geometry_msgs__msg__Twist__get_type_description+0xc>
 800f7d0:	4807      	ldr	r0, [pc, #28]	@ (800f7f0 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800f7d2:	bd10      	pop	{r4, pc}
 800f7d4:	f000 f868 	bl	800f8a8 <geometry_msgs__msg__Vector3__get_type_description>
 800f7d8:	300c      	adds	r0, #12
 800f7da:	c807      	ldmia	r0, {r0, r1, r2}
 800f7dc:	4b05      	ldr	r3, [pc, #20]	@ (800f7f4 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 800f7de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	4802      	ldr	r0, [pc, #8]	@ (800f7f0 <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800f7e6:	7023      	strb	r3, [r4, #0]
 800f7e8:	bd10      	pop	{r4, pc}
 800f7ea:	bf00      	nop
 800f7ec:	2000ce91 	.word	0x2000ce91
 800f7f0:	0801e5b8 	.word	0x0801e5b8
 800f7f4:	200008f0 	.word	0x200008f0

0800f7f8 <geometry_msgs__msg__Twist__get_type_description_sources>:
 800f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fa:	4e0f      	ldr	r6, [pc, #60]	@ (800f838 <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 800f7fc:	7837      	ldrb	r7, [r6, #0]
 800f7fe:	b10f      	cbz	r7, 800f804 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 800f800:	480e      	ldr	r0, [pc, #56]	@ (800f83c <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800f802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f804:	4d0e      	ldr	r5, [pc, #56]	@ (800f840 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 800f806:	4c0f      	ldr	r4, [pc, #60]	@ (800f844 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 800f808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f80a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f80c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f80e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f810:	682b      	ldr	r3, [r5, #0]
 800f812:	f844 3b04 	str.w	r3, [r4], #4
 800f816:	4638      	mov	r0, r7
 800f818:	f000 f852 	bl	800f8c0 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800f81c:	2301      	movs	r3, #1
 800f81e:	4684      	mov	ip, r0
 800f820:	7033      	strb	r3, [r6, #0]
 800f822:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f828:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f82c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f82e:	f8dc 3000 	ldr.w	r3, [ip]
 800f832:	4802      	ldr	r0, [pc, #8]	@ (800f83c <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f838:	2000ce90 	.word	0x2000ce90
 800f83c:	0801e588 	.word	0x0801e588
 800f840:	0801e594 	.word	0x0801e594
 800f844:	2000ce48 	.word	0x2000ce48

0800f848 <geometry_msgs__msg__Twist__init>:
 800f848:	b1d8      	cbz	r0, 800f882 <geometry_msgs__msg__Twist__init+0x3a>
 800f84a:	b538      	push	{r3, r4, r5, lr}
 800f84c:	4604      	mov	r4, r0
 800f84e:	f000 f857 	bl	800f900 <geometry_msgs__msg__Vector3__init>
 800f852:	b130      	cbz	r0, 800f862 <geometry_msgs__msg__Twist__init+0x1a>
 800f854:	f104 0518 	add.w	r5, r4, #24
 800f858:	4628      	mov	r0, r5
 800f85a:	f000 f851 	bl	800f900 <geometry_msgs__msg__Vector3__init>
 800f85e:	b148      	cbz	r0, 800f874 <geometry_msgs__msg__Twist__init+0x2c>
 800f860:	bd38      	pop	{r3, r4, r5, pc}
 800f862:	4620      	mov	r0, r4
 800f864:	f000 f850 	bl	800f908 <geometry_msgs__msg__Vector3__fini>
 800f868:	f104 0018 	add.w	r0, r4, #24
 800f86c:	f000 f84c 	bl	800f908 <geometry_msgs__msg__Vector3__fini>
 800f870:	2000      	movs	r0, #0
 800f872:	bd38      	pop	{r3, r4, r5, pc}
 800f874:	4620      	mov	r0, r4
 800f876:	f000 f847 	bl	800f908 <geometry_msgs__msg__Vector3__fini>
 800f87a:	4628      	mov	r0, r5
 800f87c:	f000 f844 	bl	800f908 <geometry_msgs__msg__Vector3__fini>
 800f880:	e7f6      	b.n	800f870 <geometry_msgs__msg__Twist__init+0x28>
 800f882:	2000      	movs	r0, #0
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop

0800f888 <geometry_msgs__msg__Twist__fini>:
 800f888:	b148      	cbz	r0, 800f89e <geometry_msgs__msg__Twist__fini+0x16>
 800f88a:	b510      	push	{r4, lr}
 800f88c:	4604      	mov	r4, r0
 800f88e:	f000 f83b 	bl	800f908 <geometry_msgs__msg__Vector3__fini>
 800f892:	f104 0018 	add.w	r0, r4, #24
 800f896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f89a:	f000 b835 	b.w	800f908 <geometry_msgs__msg__Vector3__fini>
 800f89e:	4770      	bx	lr

0800f8a0 <geometry_msgs__msg__Vector3__get_type_hash>:
 800f8a0:	4800      	ldr	r0, [pc, #0]	@ (800f8a4 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 800f8a2:	4770      	bx	lr
 800f8a4:	200009d4 	.word	0x200009d4

0800f8a8 <geometry_msgs__msg__Vector3__get_type_description>:
 800f8a8:	4b03      	ldr	r3, [pc, #12]	@ (800f8b8 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 800f8aa:	781a      	ldrb	r2, [r3, #0]
 800f8ac:	b90a      	cbnz	r2, 800f8b2 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	701a      	strb	r2, [r3, #0]
 800f8b2:	4802      	ldr	r0, [pc, #8]	@ (800f8bc <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	2000ceb9 	.word	0x2000ceb9
 800f8bc:	0801e60c 	.word	0x0801e60c

0800f8c0 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 800f8c0:	4800      	ldr	r0, [pc, #0]	@ (800f8c4 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 800f8c2:	4770      	bx	lr
 800f8c4:	0801e5e8 	.word	0x0801e5e8

0800f8c8 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 800f8c8:	4b09      	ldr	r3, [pc, #36]	@ (800f8f0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 800f8ca:	781a      	ldrb	r2, [r3, #0]
 800f8cc:	b96a      	cbnz	r2, 800f8ea <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 800f8ce:	b430      	push	{r4, r5}
 800f8d0:	4d08      	ldr	r5, [pc, #32]	@ (800f8f4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 800f8d2:	4c09      	ldr	r4, [pc, #36]	@ (800f8f8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	701a      	strb	r2, [r3, #0]
 800f8d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8e0:	682b      	ldr	r3, [r5, #0]
 800f8e2:	4806      	ldr	r0, [pc, #24]	@ (800f8fc <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	bc30      	pop	{r4, r5}
 800f8e8:	4770      	bx	lr
 800f8ea:	4804      	ldr	r0, [pc, #16]	@ (800f8fc <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	2000ceb8 	.word	0x2000ceb8
 800f8f4:	0801e5e8 	.word	0x0801e5e8
 800f8f8:	2000ce94 	.word	0x2000ce94
 800f8fc:	0801e5dc 	.word	0x0801e5dc

0800f900 <geometry_msgs__msg__Vector3__init>:
 800f900:	3800      	subs	r0, #0
 800f902:	bf18      	it	ne
 800f904:	2001      	movne	r0, #1
 800f906:	4770      	bx	lr

0800f908 <geometry_msgs__msg__Vector3__fini>:
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop

0800f90c <ucdr_serialize_sequence_char>:
 800f90c:	b570      	push	{r4, r5, r6, lr}
 800f90e:	460e      	mov	r6, r1
 800f910:	4615      	mov	r5, r2
 800f912:	7d01      	ldrb	r1, [r0, #20]
 800f914:	4604      	mov	r4, r0
 800f916:	f7fb fe69 	bl	800b5ec <ucdr_serialize_endian_uint32_t>
 800f91a:	b90d      	cbnz	r5, 800f920 <ucdr_serialize_sequence_char+0x14>
 800f91c:	2001      	movs	r0, #1
 800f91e:	bd70      	pop	{r4, r5, r6, pc}
 800f920:	7d21      	ldrb	r1, [r4, #20]
 800f922:	462b      	mov	r3, r5
 800f924:	4632      	mov	r2, r6
 800f926:	4620      	mov	r0, r4
 800f928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f92c:	f008 bb72 	b.w	8018014 <ucdr_serialize_endian_array_char>

0800f930 <ucdr_deserialize_sequence_char>:
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	461d      	mov	r5, r3
 800f936:	4616      	mov	r6, r2
 800f938:	460f      	mov	r7, r1
 800f93a:	461a      	mov	r2, r3
 800f93c:	7d01      	ldrb	r1, [r0, #20]
 800f93e:	4604      	mov	r4, r0
 800f940:	f7fb ff72 	bl	800b828 <ucdr_deserialize_endian_uint32_t>
 800f944:	682b      	ldr	r3, [r5, #0]
 800f946:	429e      	cmp	r6, r3
 800f948:	d208      	bcs.n	800f95c <ucdr_deserialize_sequence_char+0x2c>
 800f94a:	2201      	movs	r2, #1
 800f94c:	75a2      	strb	r2, [r4, #22]
 800f94e:	7d21      	ldrb	r1, [r4, #20]
 800f950:	463a      	mov	r2, r7
 800f952:	4620      	mov	r0, r4
 800f954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f958:	f008 bb8e 	b.w	8018078 <ucdr_deserialize_endian_array_char>
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1f6      	bne.n	800f94e <ucdr_deserialize_sequence_char+0x1e>
 800f960:	2001      	movs	r0, #1
 800f962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f966:	bf00      	nop

0800f968 <ucdr_serialize_sequence_uint8_t>:
 800f968:	b570      	push	{r4, r5, r6, lr}
 800f96a:	460e      	mov	r6, r1
 800f96c:	4615      	mov	r5, r2
 800f96e:	7d01      	ldrb	r1, [r0, #20]
 800f970:	4604      	mov	r4, r0
 800f972:	f7fb fe3b 	bl	800b5ec <ucdr_serialize_endian_uint32_t>
 800f976:	b90d      	cbnz	r5, 800f97c <ucdr_serialize_sequence_uint8_t+0x14>
 800f978:	2001      	movs	r0, #1
 800f97a:	bd70      	pop	{r4, r5, r6, pc}
 800f97c:	7d21      	ldrb	r1, [r4, #20]
 800f97e:	462b      	mov	r3, r5
 800f980:	4632      	mov	r2, r6
 800f982:	4620      	mov	r0, r4
 800f984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f988:	f008 bbda 	b.w	8018140 <ucdr_serialize_endian_array_uint8_t>

0800f98c <ucdr_deserialize_sequence_uint8_t>:
 800f98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f990:	461d      	mov	r5, r3
 800f992:	4616      	mov	r6, r2
 800f994:	460f      	mov	r7, r1
 800f996:	461a      	mov	r2, r3
 800f998:	7d01      	ldrb	r1, [r0, #20]
 800f99a:	4604      	mov	r4, r0
 800f99c:	f7fb ff44 	bl	800b828 <ucdr_deserialize_endian_uint32_t>
 800f9a0:	682b      	ldr	r3, [r5, #0]
 800f9a2:	429e      	cmp	r6, r3
 800f9a4:	d208      	bcs.n	800f9b8 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	75a2      	strb	r2, [r4, #22]
 800f9aa:	7d21      	ldrb	r1, [r4, #20]
 800f9ac:	463a      	mov	r2, r7
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b4:	f008 bc28 	b.w	8018208 <ucdr_deserialize_endian_array_uint8_t>
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1f6      	bne.n	800f9aa <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f9bc:	2001      	movs	r0, #1
 800f9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c2:	bf00      	nop

0800f9c4 <uxr_buffer_delete_entity>:
 800f9c4:	b510      	push	{r4, lr}
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	b08e      	sub	sp, #56	@ 0x38
 800f9ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f9ce:	2303      	movs	r3, #3
 800f9d0:	9300      	str	r3, [sp, #0]
 800f9d2:	2204      	movs	r2, #4
 800f9d4:	ab06      	add	r3, sp, #24
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	f001 fc76 	bl	80112c8 <uxr_prepare_stream_to_write_submessage>
 800f9dc:	b918      	cbnz	r0, 800f9e6 <uxr_buffer_delete_entity+0x22>
 800f9de:	4604      	mov	r4, r0
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	b00e      	add	sp, #56	@ 0x38
 800f9e4:	bd10      	pop	{r4, pc}
 800f9e6:	9902      	ldr	r1, [sp, #8]
 800f9e8:	aa05      	add	r2, sp, #20
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f001 fda6 	bl	801153c <uxr_init_base_object_request>
 800f9f0:	a905      	add	r1, sp, #20
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	a806      	add	r0, sp, #24
 800f9f6:	f003 fc2d 	bl	8013254 <uxr_serialize_DELETE_Payload>
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	b00e      	add	sp, #56	@ 0x38
 800f9fe:	bd10      	pop	{r4, pc}

0800fa00 <uxr_common_create_entity>:
 800fa00:	b510      	push	{r4, lr}
 800fa02:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fa06:	b08c      	sub	sp, #48	@ 0x30
 800fa08:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fa0c:	f1bc 0f01 	cmp.w	ip, #1
 800fa10:	bf08      	it	eq
 800fa12:	f003 0201 	andeq.w	r2, r3, #1
 800fa16:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fa1a:	bf18      	it	ne
 800fa1c:	2200      	movne	r2, #0
 800fa1e:	330e      	adds	r3, #14
 800fa20:	441a      	add	r2, r3
 800fa22:	2301      	movs	r3, #1
 800fa24:	e9cd 3100 	strd	r3, r1, [sp]
 800fa28:	b292      	uxth	r2, r2
 800fa2a:	9903      	ldr	r1, [sp, #12]
 800fa2c:	ab04      	add	r3, sp, #16
 800fa2e:	4604      	mov	r4, r0
 800fa30:	f001 fc4a 	bl	80112c8 <uxr_prepare_stream_to_write_submessage>
 800fa34:	b918      	cbnz	r0, 800fa3e <uxr_common_create_entity+0x3e>
 800fa36:	4604      	mov	r4, r0
 800fa38:	4620      	mov	r0, r4
 800fa3a:	b00c      	add	sp, #48	@ 0x30
 800fa3c:	bd10      	pop	{r4, pc}
 800fa3e:	9902      	ldr	r1, [sp, #8]
 800fa40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fa42:	4620      	mov	r0, r4
 800fa44:	f001 fd7a 	bl	801153c <uxr_init_base_object_request>
 800fa48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	a804      	add	r0, sp, #16
 800fa4e:	f003 fb4b 	bl	80130e8 <uxr_serialize_CREATE_Payload>
 800fa52:	4620      	mov	r0, r4
 800fa54:	b00c      	add	sp, #48	@ 0x30
 800fa56:	bd10      	pop	{r4, pc}

0800fa58 <uxr_buffer_create_participant_bin>:
 800fa58:	b570      	push	{r4, r5, r6, lr}
 800fa5a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fa5e:	ac11      	add	r4, sp, #68	@ 0x44
 800fa60:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fa64:	2303      	movs	r3, #3
 800fa66:	7223      	strb	r3, [r4, #8]
 800fa68:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800fa6a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fa6e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fa72:	2201      	movs	r2, #1
 800fa74:	2100      	movs	r1, #0
 800fa76:	4605      	mov	r5, r0
 800fa78:	7122      	strb	r2, [r4, #4]
 800fa7a:	f88d 1014 	strb.w	r1, [sp, #20]
 800fa7e:	b1cb      	cbz	r3, 800fab4 <uxr_buffer_create_participant_bin+0x5c>
 800fa80:	f88d 201c 	strb.w	r2, [sp, #28]
 800fa84:	9308      	str	r3, [sp, #32]
 800fa86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa8a:	a915      	add	r1, sp, #84	@ 0x54
 800fa8c:	a809      	add	r0, sp, #36	@ 0x24
 800fa8e:	f7fc fd4f 	bl	800c530 <ucdr_init_buffer>
 800fa92:	a905      	add	r1, sp, #20
 800fa94:	a809      	add	r0, sp, #36	@ 0x24
 800fa96:	f002 ff2f 	bl	80128f8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fa9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa9c:	9600      	str	r6, [sp, #0]
 800fa9e:	9401      	str	r4, [sp, #4]
 800faa0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800faa4:	60e3      	str	r3, [r4, #12]
 800faa6:	4628      	mov	r0, r5
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	f7ff ffa9 	bl	800fa00 <uxr_common_create_entity>
 800faae:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fab2:	bd70      	pop	{r4, r5, r6, pc}
 800fab4:	f88d 301c 	strb.w	r3, [sp, #28]
 800fab8:	e7e5      	b.n	800fa86 <uxr_buffer_create_participant_bin+0x2e>
 800faba:	bf00      	nop

0800fabc <uxr_buffer_create_topic_bin>:
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fac2:	4605      	mov	r5, r0
 800fac4:	9105      	str	r1, [sp, #20]
 800fac6:	4618      	mov	r0, r3
 800fac8:	a997      	add	r1, sp, #604	@ 0x25c
 800faca:	2302      	movs	r3, #2
 800facc:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fad0:	9204      	str	r2, [sp, #16]
 800fad2:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fad6:	f000 fa31 	bl	800ff3c <uxr_object_id_to_raw>
 800fada:	2303      	movs	r3, #3
 800fadc:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fae0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fae2:	9306      	str	r3, [sp, #24]
 800fae4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fae6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fae8:	2301      	movs	r3, #1
 800faea:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800faee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faf2:	2300      	movs	r3, #0
 800faf4:	a917      	add	r1, sp, #92	@ 0x5c
 800faf6:	a80b      	add	r0, sp, #44	@ 0x2c
 800faf8:	f88d 301c 	strb.w	r3, [sp, #28]
 800fafc:	f7fc fd18 	bl	800c530 <ucdr_init_buffer>
 800fb00:	a906      	add	r1, sp, #24
 800fb02:	a80b      	add	r0, sp, #44	@ 0x2c
 800fb04:	f002 ff1a 	bl	801293c <uxr_serialize_OBJK_Topic_Binary>
 800fb08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb0a:	9316      	str	r3, [sp, #88]	@ 0x58
 800fb0c:	ac13      	add	r4, sp, #76	@ 0x4c
 800fb0e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb12:	9600      	str	r6, [sp, #0]
 800fb14:	9401      	str	r4, [sp, #4]
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	4628      	mov	r0, r5
 800fb1a:	f7ff ff71 	bl	800fa00 <uxr_common_create_entity>
 800fb1e:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fb22:	bd70      	pop	{r4, r5, r6, pc}

0800fb24 <uxr_buffer_create_publisher_bin>:
 800fb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb26:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	9105      	str	r1, [sp, #20]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	2603      	movs	r6, #3
 800fb32:	a992      	add	r1, sp, #584	@ 0x248
 800fb34:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fb38:	9204      	str	r2, [sp, #16]
 800fb3a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800fb3e:	f000 f9fd 	bl	800ff3c <uxr_object_id_to_raw>
 800fb42:	2300      	movs	r3, #0
 800fb44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb48:	a912      	add	r1, sp, #72	@ 0x48
 800fb4a:	a806      	add	r0, sp, #24
 800fb4c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fb50:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fb54:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fb58:	f7fc fcea 	bl	800c530 <ucdr_init_buffer>
 800fb5c:	a993      	add	r1, sp, #588	@ 0x24c
 800fb5e:	a806      	add	r0, sp, #24
 800fb60:	f002 ffa2 	bl	8012aa8 <uxr_serialize_OBJK_Publisher_Binary>
 800fb64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb66:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb68:	ac0e      	add	r4, sp, #56	@ 0x38
 800fb6a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb6e:	9700      	str	r7, [sp, #0]
 800fb70:	9401      	str	r4, [sp, #4]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	4628      	mov	r0, r5
 800fb76:	f7ff ff43 	bl	800fa00 <uxr_common_create_entity>
 800fb7a:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb80 <uxr_buffer_create_subscriber_bin>:
 800fb80:	b570      	push	{r4, r5, r6, lr}
 800fb82:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800fb86:	4605      	mov	r5, r0
 800fb88:	9105      	str	r1, [sp, #20]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	a992      	add	r1, sp, #584	@ 0x248
 800fb8e:	2304      	movs	r3, #4
 800fb90:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800fb94:	9204      	str	r2, [sp, #16]
 800fb96:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800fb9a:	f000 f9cf 	bl	800ff3c <uxr_object_id_to_raw>
 800fb9e:	2203      	movs	r2, #3
 800fba0:	2300      	movs	r3, #0
 800fba2:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800fba6:	a912      	add	r1, sp, #72	@ 0x48
 800fba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbac:	a806      	add	r0, sp, #24
 800fbae:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fbb2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fbb6:	f7fc fcbb 	bl	800c530 <ucdr_init_buffer>
 800fbba:	a993      	add	r1, sp, #588	@ 0x24c
 800fbbc:	a806      	add	r0, sp, #24
 800fbbe:	f003 f825 	bl	8012c0c <uxr_serialize_OBJK_Subscriber_Binary>
 800fbc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbc4:	9311      	str	r3, [sp, #68]	@ 0x44
 800fbc6:	ac0e      	add	r4, sp, #56	@ 0x38
 800fbc8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fbcc:	9600      	str	r6, [sp, #0]
 800fbce:	9401      	str	r4, [sp, #4]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f7ff ff14 	bl	800fa00 <uxr_common_create_entity>
 800fbd8:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800fbdc:	bd70      	pop	{r4, r5, r6, pc}
 800fbde:	bf00      	nop

0800fbe0 <uxr_buffer_create_datawriter_bin>:
 800fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbe2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800fbe6:	ac1d      	add	r4, sp, #116	@ 0x74
 800fbe8:	9105      	str	r1, [sp, #20]
 800fbea:	4605      	mov	r5, r0
 800fbec:	a9a1      	add	r1, sp, #644	@ 0x284
 800fbee:	4618      	mov	r0, r3
 800fbf0:	2305      	movs	r3, #5
 800fbf2:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800fbf6:	9204      	str	r2, [sp, #16]
 800fbf8:	7123      	strb	r3, [r4, #4]
 800fbfa:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800fbfe:	f000 f99d 	bl	800ff3c <uxr_object_id_to_raw>
 800fc02:	2303      	movs	r3, #3
 800fc04:	a90e      	add	r1, sp, #56	@ 0x38
 800fc06:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fc08:	7223      	strb	r3, [r4, #8]
 800fc0a:	f000 f997 	bl	800ff3c <uxr_object_id_to_raw>
 800fc0e:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800fc12:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800fc16:	2200      	movs	r2, #0
 800fc18:	3f00      	subs	r7, #0
 800fc1a:	fab3 f383 	clz	r3, r3
 800fc1e:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800fc22:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800fc26:	bf18      	it	ne
 800fc28:	2701      	movne	r7, #1
 800fc2a:	095b      	lsrs	r3, r3, #5
 800fc2c:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800fc30:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800fc34:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800fc3e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc42:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800fc46:	b919      	cbnz	r1, 800fc50 <uxr_buffer_create_datawriter_bin+0x70>
 800fc48:	f043 0302 	orr.w	r3, r3, #2
 800fc4c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc50:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800fc54:	2a01      	cmp	r2, #1
 800fc56:	d022      	beq.n	800fc9e <uxr_buffer_create_datawriter_bin+0xbe>
 800fc58:	2a03      	cmp	r2, #3
 800fc5a:	d01b      	beq.n	800fc94 <uxr_buffer_create_datawriter_bin+0xb4>
 800fc5c:	b91a      	cbnz	r2, 800fc66 <uxr_buffer_create_datawriter_bin+0x86>
 800fc5e:	f043 0308 	orr.w	r3, r3, #8
 800fc62:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc6a:	a921      	add	r1, sp, #132	@ 0x84
 800fc6c:	a806      	add	r0, sp, #24
 800fc6e:	f7fc fc5f 	bl	800c530 <ucdr_init_buffer>
 800fc72:	a90e      	add	r1, sp, #56	@ 0x38
 800fc74:	a806      	add	r0, sp, #24
 800fc76:	f003 f86b 	bl	8012d50 <uxr_serialize_OBJK_DataWriter_Binary>
 800fc7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc7c:	9600      	str	r6, [sp, #0]
 800fc7e:	9401      	str	r4, [sp, #4]
 800fc80:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc84:	60e3      	str	r3, [r4, #12]
 800fc86:	4628      	mov	r0, r5
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	f7ff feb9 	bl	800fa00 <uxr_common_create_entity>
 800fc8e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800fc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc94:	f043 0320 	orr.w	r3, r3, #32
 800fc98:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc9c:	e7e3      	b.n	800fc66 <uxr_buffer_create_datawriter_bin+0x86>
 800fc9e:	f043 0310 	orr.w	r3, r3, #16
 800fca2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fca6:	e7de      	b.n	800fc66 <uxr_buffer_create_datawriter_bin+0x86>

0800fca8 <uxr_buffer_create_datareader_bin>:
 800fca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcaa:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800fcae:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fcb0:	9105      	str	r1, [sp, #20]
 800fcb2:	4605      	mov	r5, r0
 800fcb4:	a9a3      	add	r1, sp, #652	@ 0x28c
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	2306      	movs	r3, #6
 800fcba:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800fcbe:	9204      	str	r2, [sp, #16]
 800fcc0:	7123      	strb	r3, [r4, #4]
 800fcc2:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800fcc6:	f000 f939 	bl	800ff3c <uxr_object_id_to_raw>
 800fcca:	2303      	movs	r3, #3
 800fccc:	a90e      	add	r1, sp, #56	@ 0x38
 800fcce:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800fcd0:	7223      	strb	r3, [r4, #8]
 800fcd2:	f000 f933 	bl	800ff3c <uxr_object_id_to_raw>
 800fcd6:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800fcda:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800fcde:	2200      	movs	r2, #0
 800fce0:	3f00      	subs	r7, #0
 800fce2:	fab3 f383 	clz	r3, r3
 800fce6:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800fcea:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800fcee:	bf18      	it	ne
 800fcf0:	2701      	movne	r7, #1
 800fcf2:	095b      	lsrs	r3, r3, #5
 800fcf4:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800fcf8:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800fcfc:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800fd00:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800fd04:	2201      	movs	r2, #1
 800fd06:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800fd0a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd0e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800fd12:	b919      	cbnz	r1, 800fd1c <uxr_buffer_create_datareader_bin+0x74>
 800fd14:	f043 0302 	orr.w	r3, r3, #2
 800fd18:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd1c:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800fd20:	2a01      	cmp	r2, #1
 800fd22:	d022      	beq.n	800fd6a <uxr_buffer_create_datareader_bin+0xc2>
 800fd24:	2a03      	cmp	r2, #3
 800fd26:	d01b      	beq.n	800fd60 <uxr_buffer_create_datareader_bin+0xb8>
 800fd28:	b91a      	cbnz	r2, 800fd32 <uxr_buffer_create_datareader_bin+0x8a>
 800fd2a:	f043 0308 	orr.w	r3, r3, #8
 800fd2e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd36:	a923      	add	r1, sp, #140	@ 0x8c
 800fd38:	a806      	add	r0, sp, #24
 800fd3a:	f7fc fbf9 	bl	800c530 <ucdr_init_buffer>
 800fd3e:	a90e      	add	r1, sp, #56	@ 0x38
 800fd40:	a806      	add	r0, sp, #24
 800fd42:	f002 ffc9 	bl	8012cd8 <uxr_serialize_OBJK_DataReader_Binary>
 800fd46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd48:	9600      	str	r6, [sp, #0]
 800fd4a:	9401      	str	r4, [sp, #4]
 800fd4c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd50:	60e3      	str	r3, [r4, #12]
 800fd52:	4628      	mov	r0, r5
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	f7ff fe53 	bl	800fa00 <uxr_common_create_entity>
 800fd5a:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800fd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd60:	f043 0320 	orr.w	r3, r3, #32
 800fd64:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd68:	e7e3      	b.n	800fd32 <uxr_buffer_create_datareader_bin+0x8a>
 800fd6a:	f043 0310 	orr.w	r3, r3, #16
 800fd6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd72:	e7de      	b.n	800fd32 <uxr_buffer_create_datareader_bin+0x8a>

0800fd74 <get_custom_error>:
 800fd74:	4b01      	ldr	r3, [pc, #4]	@ (800fd7c <get_custom_error+0x8>)
 800fd76:	7818      	ldrb	r0, [r3, #0]
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	2000ceba 	.word	0x2000ceba

0800fd80 <recv_custom_msg>:
 800fd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd84:	b089      	sub	sp, #36	@ 0x24
 800fd86:	4693      	mov	fp, r2
 800fd88:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fd8c:	9104      	str	r1, [sp, #16]
 800fd8e:	2100      	movs	r1, #0
 800fd90:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800fd94:	9305      	str	r3, [sp, #20]
 800fd96:	4604      	mov	r4, r0
 800fd98:	f88d 101e 	strb.w	r1, [sp, #30]
 800fd9c:	b332      	cbz	r2, 800fdec <recv_custom_msg+0x6c>
 800fd9e:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800fda2:	f10d 091f 	add.w	r9, sp, #31
 800fda6:	f10d 0814 	add.w	r8, sp, #20
 800fdaa:	f10d 071e 	add.w	r7, sp, #30
 800fdae:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800fdb2:	e004      	b.n	800fdbe <recv_custom_msg+0x3e>
 800fdb4:	9b05      	ldr	r3, [sp, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	dd10      	ble.n	800fddc <recv_custom_msg+0x5c>
 800fdba:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800fdbe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fdc2:	e9cd 6700 	strd	r6, r7, [sp]
 800fdc6:	4623      	mov	r3, r4
 800fdc8:	4622      	mov	r2, r4
 800fdca:	4629      	mov	r1, r5
 800fdcc:	4650      	mov	r0, sl
 800fdce:	f001 fdc7 	bl	8011960 <uxr_read_framed_msg>
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	d0ee      	beq.n	800fdb4 <recv_custom_msg+0x34>
 800fdd6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fdda:	b1a3      	cbz	r3, 800fe06 <recv_custom_msg+0x86>
 800fddc:	4b0e      	ldr	r3, [pc, #56]	@ (800fe18 <recv_custom_msg+0x98>)
 800fdde:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	2000      	movs	r0, #0
 800fde6:	b009      	add	sp, #36	@ 0x24
 800fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdec:	f10d 021f 	add.w	r2, sp, #31
 800fdf0:	9200      	str	r2, [sp, #0]
 800fdf2:	4601      	mov	r1, r0
 800fdf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdf8:	47a8      	blx	r5
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d0ee      	beq.n	800fddc <recv_custom_msg+0x5c>
 800fdfe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1ea      	bne.n	800fddc <recv_custom_msg+0x5c>
 800fe06:	9b04      	ldr	r3, [sp, #16]
 800fe08:	f8cb 0000 	str.w	r0, [fp]
 800fe0c:	2001      	movs	r0, #1
 800fe0e:	601c      	str	r4, [r3, #0]
 800fe10:	b009      	add	sp, #36	@ 0x24
 800fe12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe16:	bf00      	nop
 800fe18:	2000ceba 	.word	0x2000ceba

0800fe1c <send_custom_msg>:
 800fe1c:	b570      	push	{r4, r5, r6, lr}
 800fe1e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800fe22:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fe26:	b086      	sub	sp, #24
 800fe28:	4616      	mov	r6, r2
 800fe2a:	b965      	cbnz	r5, 800fe46 <send_custom_msg+0x2a>
 800fe2c:	f10d 0317 	add.w	r3, sp, #23
 800fe30:	47a0      	blx	r4
 800fe32:	b108      	cbz	r0, 800fe38 <send_custom_msg+0x1c>
 800fe34:	42b0      	cmp	r0, r6
 800fe36:	d014      	beq.n	800fe62 <send_custom_msg+0x46>
 800fe38:	4b0b      	ldr	r3, [pc, #44]	@ (800fe68 <send_custom_msg+0x4c>)
 800fe3a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fe3e:	701a      	strb	r2, [r3, #0]
 800fe40:	2000      	movs	r0, #0
 800fe42:	b006      	add	sp, #24
 800fe44:	bd70      	pop	{r4, r5, r6, pc}
 800fe46:	f10d 0217 	add.w	r2, sp, #23
 800fe4a:	9202      	str	r2, [sp, #8]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	e9cd 6200 	strd	r6, r2, [sp]
 800fe52:	460b      	mov	r3, r1
 800fe54:	4602      	mov	r2, r0
 800fe56:	4621      	mov	r1, r4
 800fe58:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800fe5c:	f001 fba2 	bl	80115a4 <uxr_write_framed_msg>
 800fe60:	e7e7      	b.n	800fe32 <send_custom_msg+0x16>
 800fe62:	2001      	movs	r0, #1
 800fe64:	b006      	add	sp, #24
 800fe66:	bd70      	pop	{r4, r5, r6, pc}
 800fe68:	2000ceba 	.word	0x2000ceba

0800fe6c <uxr_set_custom_transport_callbacks>:
 800fe6c:	b410      	push	{r4}
 800fe6e:	9c01      	ldr	r4, [sp, #4]
 800fe70:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800fe74:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800fe78:	9b02      	ldr	r3, [sp, #8]
 800fe7a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800fe7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe82:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800fe86:	4770      	bx	lr

0800fe88 <uxr_init_custom_transport>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800fe8e:	b303      	cbz	r3, 800fed2 <uxr_init_custom_transport+0x4a>
 800fe90:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fe94:	4604      	mov	r4, r0
 800fe96:	b1e2      	cbz	r2, 800fed2 <uxr_init_custom_transport+0x4a>
 800fe98:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fe9c:	b1ca      	cbz	r2, 800fed2 <uxr_init_custom_transport+0x4a>
 800fe9e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fea2:	b1b2      	cbz	r2, 800fed2 <uxr_init_custom_transport+0x4a>
 800fea4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800fea8:	4798      	blx	r3
 800feaa:	4605      	mov	r5, r0
 800feac:	b188      	cbz	r0, 800fed2 <uxr_init_custom_transport+0x4a>
 800feae:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800feb2:	b98b      	cbnz	r3, 800fed8 <uxr_init_custom_transport+0x50>
 800feb4:	490b      	ldr	r1, [pc, #44]	@ (800fee4 <uxr_init_custom_transport+0x5c>)
 800feb6:	4b0c      	ldr	r3, [pc, #48]	@ (800fee8 <uxr_init_custom_transport+0x60>)
 800feb8:	4a0c      	ldr	r2, [pc, #48]	@ (800feec <uxr_init_custom_transport+0x64>)
 800feba:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800febe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fec2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800fec6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800feca:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800fece:	4628      	mov	r0, r5
 800fed0:	bd38      	pop	{r3, r4, r5, pc}
 800fed2:	2500      	movs	r5, #0
 800fed4:	4628      	mov	r0, r5
 800fed6:	bd38      	pop	{r3, r4, r5, pc}
 800fed8:	2100      	movs	r1, #0
 800feda:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800fede:	f001 fb5b 	bl	8011598 <uxr_init_framing_io>
 800fee2:	e7e7      	b.n	800feb4 <uxr_init_custom_transport+0x2c>
 800fee4:	0800fe1d 	.word	0x0800fe1d
 800fee8:	0800fd81 	.word	0x0800fd81
 800feec:	0800fd75 	.word	0x0800fd75

0800fef0 <uxr_close_custom_transport>:
 800fef0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800fef4:	4718      	bx	r3
 800fef6:	bf00      	nop

0800fef8 <uxr_object_id>:
 800fef8:	b082      	sub	sp, #8
 800fefa:	2300      	movs	r3, #0
 800fefc:	f88d 1006 	strb.w	r1, [sp, #6]
 800ff00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff04:	f360 030f 	bfi	r3, r0, #0, #16
 800ff08:	f362 431f 	bfi	r3, r2, #16, #16
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	b002      	add	sp, #8
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop

0800ff14 <uxr_object_id_from_raw>:
 800ff14:	7843      	ldrb	r3, [r0, #1]
 800ff16:	7801      	ldrb	r1, [r0, #0]
 800ff18:	b082      	sub	sp, #8
 800ff1a:	f003 020f 	and.w	r2, r3, #15
 800ff1e:	f88d 2006 	strb.w	r2, [sp, #6]
 800ff22:	091b      	lsrs	r3, r3, #4
 800ff24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff28:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	f363 000f 	bfi	r0, r3, #0, #16
 800ff32:	f362 401f 	bfi	r0, r2, #16, #16
 800ff36:	b002      	add	sp, #8
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop

0800ff3c <uxr_object_id_to_raw>:
 800ff3c:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ff40:	b082      	sub	sp, #8
 800ff42:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800ff46:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800ff4a:	700a      	strb	r2, [r1, #0]
 800ff4c:	704b      	strb	r3, [r1, #1]
 800ff4e:	b002      	add	sp, #8
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop

0800ff54 <uxr_ping_agent_session>:
 800ff54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff58:	4616      	mov	r6, r2
 800ff5a:	b091      	sub	sp, #68	@ 0x44
 800ff5c:	2210      	movs	r2, #16
 800ff5e:	4605      	mov	r5, r0
 800ff60:	460f      	mov	r7, r1
 800ff62:	a808      	add	r0, sp, #32
 800ff64:	eb0d 0102 	add.w	r1, sp, r2
 800ff68:	f7fc fae2 	bl	800c530 <ucdr_init_buffer>
 800ff6c:	4b20      	ldr	r3, [pc, #128]	@ (800fff0 <uxr_ping_agent_session+0x9c>)
 800ff6e:	2400      	movs	r4, #0
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	f8ad 300a 	strh.w	r3, [sp, #10]
 800ff76:	9400      	str	r4, [sp, #0]
 800ff78:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ff7c:	f04f 0802 	mov.w	r8, #2
 800ff80:	7829      	ldrb	r1, [r5, #0]
 800ff82:	f8ad 3008 	strh.w	r3, [sp, #8]
 800ff86:	4622      	mov	r2, r4
 800ff88:	4623      	mov	r3, r4
 800ff8a:	a808      	add	r0, sp, #32
 800ff8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff90:	f002 fa82 	bl	8012498 <uxr_serialize_message_header>
 800ff94:	4641      	mov	r1, r8
 800ff96:	4623      	mov	r3, r4
 800ff98:	2208      	movs	r2, #8
 800ff9a:	a808      	add	r0, sp, #32
 800ff9c:	f002 f87e 	bl	801209c <uxr_buffer_submessage_header>
 800ffa0:	a902      	add	r1, sp, #8
 800ffa2:	4680      	mov	r8, r0
 800ffa4:	a808      	add	r0, sp, #32
 800ffa6:	f003 f92d 	bl	8013204 <uxr_serialize_GET_INFO_Payload>
 800ffaa:	f1b8 0f00 	cmp.w	r8, #0
 800ffae:	d000      	beq.n	800ffb2 <uxr_ping_agent_session+0x5e>
 800ffb0:	b918      	cbnz	r0, 800ffba <uxr_ping_agent_session+0x66>
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	b011      	add	sp, #68	@ 0x44
 800ffb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffba:	a808      	add	r0, sp, #32
 800ffbc:	f7fc fae4 	bl	800c588 <ucdr_buffer_length>
 800ffc0:	4680      	mov	r8, r0
 800ffc2:	2e00      	cmp	r6, #0
 800ffc4:	d0f5      	beq.n	800ffb2 <uxr_ping_agent_session+0x5e>
 800ffc6:	46a1      	mov	r9, r4
 800ffc8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ffca:	4642      	mov	r2, r8
 800ffcc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ffd0:	a904      	add	r1, sp, #16
 800ffd2:	47a0      	blx	r4
 800ffd4:	4639      	mov	r1, r7
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	4628      	mov	r0, r5
 800ffda:	f000 ff69 	bl	8010eb0 <uxr_run_session_until_pong>
 800ffde:	4020      	ands	r0, r4
 800ffe0:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800ffe4:	f109 0901 	add.w	r9, r9, #1
 800ffe8:	d1e4      	bne.n	800ffb4 <uxr_ping_agent_session+0x60>
 800ffea:	454e      	cmp	r6, r9
 800ffec:	d1ec      	bne.n	800ffc8 <uxr_ping_agent_session+0x74>
 800ffee:	e7e0      	b.n	800ffb2 <uxr_ping_agent_session+0x5e>
 800fff0:	0801d3b8 	.word	0x0801d3b8

0800fff4 <uxr_ping_agent_attempts>:
 800fff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff8:	b0d3      	sub	sp, #332	@ 0x14c
 800fffa:	4606      	mov	r6, r0
 800fffc:	4688      	mov	r8, r1
 800fffe:	a810      	add	r0, sp, #64	@ 0x40
 8010000:	a90c      	add	r1, sp, #48	@ 0x30
 8010002:	4692      	mov	sl, r2
 8010004:	2210      	movs	r2, #16
 8010006:	f7fc fa93 	bl	800c530 <ucdr_init_buffer>
 801000a:	4b56      	ldr	r3, [pc, #344]	@ (8010164 <uxr_ping_agent_attempts+0x170>)
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 8010012:	2400      	movs	r4, #0
 8010014:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8010018:	2502      	movs	r5, #2
 801001a:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 801001e:	4622      	mov	r2, r4
 8010020:	4623      	mov	r3, r4
 8010022:	2180      	movs	r1, #128	@ 0x80
 8010024:	a810      	add	r0, sp, #64	@ 0x40
 8010026:	9400      	str	r4, [sp, #0]
 8010028:	9521      	str	r5, [sp, #132]	@ 0x84
 801002a:	f002 fa35 	bl	8012498 <uxr_serialize_message_header>
 801002e:	4629      	mov	r1, r5
 8010030:	4623      	mov	r3, r4
 8010032:	2208      	movs	r2, #8
 8010034:	a810      	add	r0, sp, #64	@ 0x40
 8010036:	f002 f831 	bl	801209c <uxr_buffer_submessage_header>
 801003a:	a920      	add	r1, sp, #128	@ 0x80
 801003c:	4605      	mov	r5, r0
 801003e:	a810      	add	r0, sp, #64	@ 0x40
 8010040:	f003 f8e0 	bl	8013204 <uxr_serialize_GET_INFO_Payload>
 8010044:	4005      	ands	r5, r0
 8010046:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 801004a:	d104      	bne.n	8010056 <uxr_ping_agent_attempts+0x62>
 801004c:	2500      	movs	r5, #0
 801004e:	4628      	mov	r0, r5
 8010050:	b053      	add	sp, #332	@ 0x14c
 8010052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010056:	a810      	add	r0, sp, #64	@ 0x40
 8010058:	f7fc fa96 	bl	800c588 <ucdr_buffer_length>
 801005c:	9004      	str	r0, [sp, #16]
 801005e:	f1ba 0f00 	cmp.w	sl, #0
 8010062:	d0f3      	beq.n	801004c <uxr_ping_agent_attempts+0x58>
 8010064:	9505      	str	r5, [sp, #20]
 8010066:	46a1      	mov	r9, r4
 8010068:	4627      	mov	r7, r4
 801006a:	4655      	mov	r5, sl
 801006c:	e9d6 0300 	ldrd	r0, r3, [r6]
 8010070:	9a04      	ldr	r2, [sp, #16]
 8010072:	a90c      	add	r1, sp, #48	@ 0x30
 8010074:	4798      	blx	r3
 8010076:	f002 f857 	bl	8012128 <uxr_millis>
 801007a:	46c2      	mov	sl, r8
 801007c:	4604      	mov	r4, r0
 801007e:	9503      	str	r5, [sp, #12]
 8010080:	6830      	ldr	r0, [r6, #0]
 8010082:	68b5      	ldr	r5, [r6, #8]
 8010084:	9708      	str	r7, [sp, #32]
 8010086:	4643      	mov	r3, r8
 8010088:	aa09      	add	r2, sp, #36	@ 0x24
 801008a:	a908      	add	r1, sp, #32
 801008c:	47a8      	blx	r5
 801008e:	4683      	mov	fp, r0
 8010090:	b998      	cbnz	r0, 80100ba <uxr_ping_agent_attempts+0xc6>
 8010092:	f002 f849 	bl	8012128 <uxr_millis>
 8010096:	1b00      	subs	r0, r0, r4
 8010098:	ebaa 0a00 	sub.w	sl, sl, r0
 801009c:	f002 f844 	bl	8012128 <uxr_millis>
 80100a0:	f1ba 0f00 	cmp.w	sl, #0
 80100a4:	4604      	mov	r4, r0
 80100a6:	dceb      	bgt.n	8010080 <uxr_ping_agent_attempts+0x8c>
 80100a8:	9d03      	ldr	r5, [sp, #12]
 80100aa:	f109 0901 	add.w	r9, r9, #1
 80100ae:	f1bb 0f00 	cmp.w	fp, #0
 80100b2:	d12a      	bne.n	801010a <uxr_ping_agent_attempts+0x116>
 80100b4:	45a9      	cmp	r9, r5
 80100b6:	d1d9      	bne.n	801006c <uxr_ping_agent_attempts+0x78>
 80100b8:	e7c8      	b.n	801004c <uxr_ping_agent_attempts+0x58>
 80100ba:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80100be:	a818      	add	r0, sp, #96	@ 0x60
 80100c0:	f7fc fa36 	bl	800c530 <ucdr_init_buffer>
 80100c4:	ab07      	add	r3, sp, #28
 80100c6:	f10d 0219 	add.w	r2, sp, #25
 80100ca:	a918      	add	r1, sp, #96	@ 0x60
 80100cc:	a80a      	add	r0, sp, #40	@ 0x28
 80100ce:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 80100d2:	f001 f9ed 	bl	80114b0 <uxr_read_session_header>
 80100d6:	22c8      	movs	r2, #200	@ 0xc8
 80100d8:	2100      	movs	r1, #0
 80100da:	a820      	add	r0, sp, #128	@ 0x80
 80100dc:	f00a fdf7 	bl	801acce <memset>
 80100e0:	a818      	add	r0, sp, #96	@ 0x60
 80100e2:	f7fc fa55 	bl	800c590 <ucdr_buffer_remaining>
 80100e6:	2804      	cmp	r0, #4
 80100e8:	d814      	bhi.n	8010114 <uxr_ping_agent_attempts+0x120>
 80100ea:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 80100ee:	f002 f81b 	bl	8012128 <uxr_millis>
 80100f2:	1b00      	subs	r0, r0, r4
 80100f4:	ebaa 0a00 	sub.w	sl, sl, r0
 80100f8:	f002 f816 	bl	8012128 <uxr_millis>
 80100fc:	f1ba 0f00 	cmp.w	sl, #0
 8010100:	4604      	mov	r4, r0
 8010102:	dd28      	ble.n	8010156 <uxr_ping_agent_attempts+0x162>
 8010104:	f1bb 0f00 	cmp.w	fp, #0
 8010108:	d0ba      	beq.n	8010080 <uxr_ping_agent_attempts+0x8c>
 801010a:	9d05      	ldr	r5, [sp, #20]
 801010c:	4628      	mov	r0, r5
 801010e:	b053      	add	sp, #332	@ 0x14c
 8010110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010114:	f10d 031e 	add.w	r3, sp, #30
 8010118:	f10d 021b 	add.w	r2, sp, #27
 801011c:	f10d 011a 	add.w	r1, sp, #26
 8010120:	a818      	add	r0, sp, #96	@ 0x60
 8010122:	f88d 701a 	strb.w	r7, [sp, #26]
 8010126:	f88d 701b 	strb.w	r7, [sp, #27]
 801012a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801012e:	f002 fa03 	bl	8012538 <uxr_deserialize_submessage_header>
 8010132:	a818      	add	r0, sp, #96	@ 0x60
 8010134:	f7fc fa2c 	bl	800c590 <ucdr_buffer_remaining>
 8010138:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801013c:	4298      	cmp	r0, r3
 801013e:	d3d4      	bcc.n	80100ea <uxr_ping_agent_attempts+0xf6>
 8010140:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8010144:	2b06      	cmp	r3, #6
 8010146:	d1d0      	bne.n	80100ea <uxr_ping_agent_attempts+0xf6>
 8010148:	a918      	add	r1, sp, #96	@ 0x60
 801014a:	a820      	add	r0, sp, #128	@ 0x80
 801014c:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 8010150:	f000 fabc 	bl	80106cc <read_submessage_info>
 8010154:	e7c9      	b.n	80100ea <uxr_ping_agent_attempts+0xf6>
 8010156:	f1bb 0b00 	subs.w	fp, fp, #0
 801015a:	9d03      	ldr	r5, [sp, #12]
 801015c:	bf18      	it	ne
 801015e:	f04f 0b01 	movne.w	fp, #1
 8010162:	e7a2      	b.n	80100aa <uxr_ping_agent_attempts+0xb6>
 8010164:	0801d3b8 	.word	0x0801d3b8

08010168 <uxr_buffer_request_data>:
 8010168:	b530      	push	{r4, r5, lr}
 801016a:	b095      	sub	sp, #84	@ 0x54
 801016c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010170:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010172:	f88d 301c 	strb.w	r3, [sp, #28]
 8010176:	2200      	movs	r2, #0
 8010178:	2d00      	cmp	r5, #0
 801017a:	bf14      	ite	ne
 801017c:	2101      	movne	r1, #1
 801017e:	4611      	moveq	r1, r2
 8010180:	4604      	mov	r4, r0
 8010182:	f88d 201d 	strb.w	r2, [sp, #29]
 8010186:	f88d 201e 	strb.w	r2, [sp, #30]
 801018a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801018e:	d021      	beq.n	80101d4 <uxr_buffer_request_data+0x6c>
 8010190:	682a      	ldr	r2, [r5, #0]
 8010192:	686b      	ldr	r3, [r5, #4]
 8010194:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010198:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801019c:	2210      	movs	r2, #16
 801019e:	2308      	movs	r3, #8
 80101a0:	2100      	movs	r1, #0
 80101a2:	e9cd 3100 	strd	r3, r1, [sp]
 80101a6:	4620      	mov	r0, r4
 80101a8:	9905      	ldr	r1, [sp, #20]
 80101aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80101ac:	f001 f88c 	bl	80112c8 <uxr_prepare_stream_to_write_submessage>
 80101b0:	b918      	cbnz	r0, 80101ba <uxr_buffer_request_data+0x52>
 80101b2:	4604      	mov	r4, r0
 80101b4:	4620      	mov	r0, r4
 80101b6:	b015      	add	sp, #84	@ 0x54
 80101b8:	bd30      	pop	{r4, r5, pc}
 80101ba:	9904      	ldr	r1, [sp, #16]
 80101bc:	aa06      	add	r2, sp, #24
 80101be:	4620      	mov	r0, r4
 80101c0:	f001 f9bc 	bl	801153c <uxr_init_base_object_request>
 80101c4:	a906      	add	r1, sp, #24
 80101c6:	4604      	mov	r4, r0
 80101c8:	a80c      	add	r0, sp, #48	@ 0x30
 80101ca:	f003 f8ed 	bl	80133a8 <uxr_serialize_READ_DATA_Payload>
 80101ce:	4620      	mov	r0, r4
 80101d0:	b015      	add	sp, #84	@ 0x54
 80101d2:	bd30      	pop	{r4, r5, pc}
 80101d4:	2208      	movs	r2, #8
 80101d6:	e7e2      	b.n	801019e <uxr_buffer_request_data+0x36>

080101d8 <uxr_buffer_cancel_data>:
 80101d8:	b510      	push	{r4, lr}
 80101da:	b094      	sub	sp, #80	@ 0x50
 80101dc:	2300      	movs	r3, #0
 80101de:	9301      	str	r3, [sp, #4]
 80101e0:	9205      	str	r2, [sp, #20]
 80101e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f88d 301e 	strb.w	r3, [sp, #30]
 80101ec:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80101f0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80101f4:	2308      	movs	r3, #8
 80101f6:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	2210      	movs	r2, #16
 80101fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8010200:	4604      	mov	r4, r0
 8010202:	f001 f861 	bl	80112c8 <uxr_prepare_stream_to_write_submessage>
 8010206:	b918      	cbnz	r0, 8010210 <uxr_buffer_cancel_data+0x38>
 8010208:	4604      	mov	r4, r0
 801020a:	4620      	mov	r0, r4
 801020c:	b014      	add	sp, #80	@ 0x50
 801020e:	bd10      	pop	{r4, pc}
 8010210:	9905      	ldr	r1, [sp, #20]
 8010212:	aa06      	add	r2, sp, #24
 8010214:	4620      	mov	r0, r4
 8010216:	f001 f991 	bl	801153c <uxr_init_base_object_request>
 801021a:	a906      	add	r1, sp, #24
 801021c:	4604      	mov	r4, r0
 801021e:	a80c      	add	r0, sp, #48	@ 0x30
 8010220:	f003 f8c2 	bl	80133a8 <uxr_serialize_READ_DATA_Payload>
 8010224:	4620      	mov	r0, r4
 8010226:	b014      	add	sp, #80	@ 0x50
 8010228:	bd10      	pop	{r4, pc}
 801022a:	bf00      	nop

0801022c <read_submessage_format>:
 801022c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010230:	b095      	sub	sp, #84	@ 0x54
 8010232:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8010236:	b113      	cbz	r3, 801023e <read_submessage_format+0x12>
 8010238:	b015      	add	sp, #84	@ 0x54
 801023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801023e:	460c      	mov	r4, r1
 8010240:	4616      	mov	r6, r2
 8010242:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010246:	461d      	mov	r5, r3
 8010248:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801024a:	9304      	str	r3, [sp, #16]
 801024c:	1a52      	subs	r2, r2, r1
 801024e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010250:	9305      	str	r3, [sp, #20]
 8010252:	4680      	mov	r8, r0
 8010254:	a80c      	add	r0, sp, #48	@ 0x30
 8010256:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 801025a:	f7fc f969 	bl	800c530 <ucdr_init_buffer>
 801025e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010262:	a80c      	add	r0, sp, #48	@ 0x30
 8010264:	f7fc f938 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 8010268:	69e3      	ldr	r3, [r4, #28]
 801026a:	b35b      	cbz	r3, 80102c4 <read_submessage_format+0x98>
 801026c:	f1b9 0f07 	cmp.w	r9, #7
 8010270:	751d      	strb	r5, [r3, #20]
 8010272:	d043      	beq.n	80102fc <read_submessage_format+0xd0>
 8010274:	f1b9 0f08 	cmp.w	r9, #8
 8010278:	d032      	beq.n	80102e0 <read_submessage_format+0xb4>
 801027a:	f1b9 0f06 	cmp.w	r9, #6
 801027e:	d008      	beq.n	8010292 <read_submessage_format+0x66>
 8010280:	2201      	movs	r2, #1
 8010282:	751a      	strb	r2, [r3, #20]
 8010284:	4631      	mov	r1, r6
 8010286:	4620      	mov	r0, r4
 8010288:	f7fc f9a2 	bl	800c5d0 <ucdr_advance_buffer>
 801028c:	b015      	add	sp, #84	@ 0x54
 801028e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010292:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8010296:	2d00      	cmp	r5, #0
 8010298:	d0f2      	beq.n	8010280 <read_submessage_format+0x54>
 801029a:	ab0c      	add	r3, sp, #48	@ 0x30
 801029c:	e9cd 3600 	strd	r3, r6, [sp]
 80102a0:	2306      	movs	r3, #6
 80102a2:	f88d 3016 	strb.w	r3, [sp, #22]
 80102a6:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 80102aa:	9302      	str	r3, [sp, #8]
 80102ac:	463a      	mov	r2, r7
 80102ae:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80102b2:	4640      	mov	r0, r8
 80102b4:	47a8      	blx	r5
 80102b6:	69e3      	ldr	r3, [r4, #28]
 80102b8:	2201      	movs	r2, #1
 80102ba:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1de      	bne.n	8010280 <read_submessage_format+0x54>
 80102c2:	e7df      	b.n	8010284 <read_submessage_format+0x58>
 80102c4:	f1b9 0f07 	cmp.w	r9, #7
 80102c8:	d032      	beq.n	8010330 <read_submessage_format+0x104>
 80102ca:	f1b9 0f08 	cmp.w	r9, #8
 80102ce:	d02a      	beq.n	8010326 <read_submessage_format+0xfa>
 80102d0:	f1b9 0f06 	cmp.w	r9, #6
 80102d4:	d1d6      	bne.n	8010284 <read_submessage_format+0x58>
 80102d6:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80102da:	2d00      	cmp	r5, #0
 80102dc:	d1dd      	bne.n	801029a <read_submessage_format+0x6e>
 80102de:	e7d1      	b.n	8010284 <read_submessage_format+0x58>
 80102e0:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 80102e4:	2a00      	cmp	r2, #0
 80102e6:	d0cb      	beq.n	8010280 <read_submessage_format+0x54>
 80102e8:	a906      	add	r1, sp, #24
 80102ea:	a80c      	add	r0, sp, #48	@ 0x30
 80102ec:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80102ee:	f003 f92f 	bl	8013550 <uxr_deserialize_SampleIdentity>
 80102f2:	bb28      	cbnz	r0, 8010340 <read_submessage_format+0x114>
 80102f4:	69e3      	ldr	r3, [r4, #28]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1c2      	bne.n	8010280 <read_submessage_format+0x54>
 80102fa:	e7c3      	b.n	8010284 <read_submessage_format+0x58>
 80102fc:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8010300:	b16a      	cbz	r2, 801031e <read_submessage_format+0xf2>
 8010302:	a906      	add	r1, sp, #24
 8010304:	a80c      	add	r0, sp, #48	@ 0x30
 8010306:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010308:	f002 fdee 	bl	8012ee8 <uxr_deserialize_BaseObjectRequest>
 801030c:	2800      	cmp	r0, #0
 801030e:	d13a      	bne.n	8010386 <read_submessage_format+0x15a>
 8010310:	68a2      	ldr	r2, [r4, #8]
 8010312:	69e3      	ldr	r3, [r4, #28]
 8010314:	4432      	add	r2, r6
 8010316:	60a2      	str	r2, [r4, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1b1      	bne.n	8010280 <read_submessage_format+0x54>
 801031c:	e7b2      	b.n	8010284 <read_submessage_format+0x58>
 801031e:	68a2      	ldr	r2, [r4, #8]
 8010320:	4432      	add	r2, r6
 8010322:	60a2      	str	r2, [r4, #8]
 8010324:	e7ac      	b.n	8010280 <read_submessage_format+0x54>
 8010326:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801032a:	2b00      	cmp	r3, #0
 801032c:	d1dc      	bne.n	80102e8 <read_submessage_format+0xbc>
 801032e:	e7a9      	b.n	8010284 <read_submessage_format+0x58>
 8010330:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1e4      	bne.n	8010302 <read_submessage_format+0xd6>
 8010338:	68a3      	ldr	r3, [r4, #8]
 801033a:	4433      	add	r3, r6
 801033c:	60a3      	str	r3, [r4, #8]
 801033e:	e7a1      	b.n	8010284 <read_submessage_format+0x58>
 8010340:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010344:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010346:	1a52      	subs	r2, r2, r1
 8010348:	1aed      	subs	r5, r5, r3
 801034a:	a80c      	add	r0, sp, #48	@ 0x30
 801034c:	f7fc f8f0 	bl	800c530 <ucdr_init_buffer>
 8010350:	4435      	add	r5, r6
 8010352:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010356:	a80c      	add	r0, sp, #48	@ 0x30
 8010358:	f7fc f8be 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 801035c:	b2ad      	uxth	r5, r5
 801035e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010360:	9300      	str	r3, [sp, #0]
 8010362:	9501      	str	r5, [sp, #4]
 8010364:	2108      	movs	r1, #8
 8010366:	f88d 1016 	strb.w	r1, [sp, #22]
 801036a:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 801036e:	9102      	str	r1, [sp, #8]
 8010370:	ab06      	add	r3, sp, #24
 8010372:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 8010376:	9905      	ldr	r1, [sp, #20]
 8010378:	463a      	mov	r2, r7
 801037a:	4640      	mov	r0, r8
 801037c:	47a8      	blx	r5
 801037e:	2301      	movs	r3, #1
 8010380:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8010384:	e7b6      	b.n	80102f4 <read_submessage_format+0xc8>
 8010386:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801038a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801038c:	1a52      	subs	r2, r2, r1
 801038e:	1aed      	subs	r5, r5, r3
 8010390:	a80c      	add	r0, sp, #48	@ 0x30
 8010392:	f7fc f8cd 	bl	800c530 <ucdr_init_buffer>
 8010396:	4435      	add	r5, r6
 8010398:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801039c:	a80c      	add	r0, sp, #48	@ 0x30
 801039e:	f7fc f89b 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 80103a2:	b2ad      	uxth	r5, r5
 80103a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	9501      	str	r5, [sp, #4]
 80103aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80103ae:	2107      	movs	r1, #7
 80103b0:	f88d 1016 	strb.w	r1, [sp, #22]
 80103b4:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 80103b8:	9102      	str	r1, [sp, #8]
 80103ba:	ba5b      	rev16	r3, r3
 80103bc:	b29b      	uxth	r3, r3
 80103be:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 80103c2:	9905      	ldr	r1, [sp, #20]
 80103c4:	463a      	mov	r2, r7
 80103c6:	4640      	mov	r0, r8
 80103c8:	47a8      	blx	r5
 80103ca:	2301      	movs	r3, #1
 80103cc:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80103d0:	e79e      	b.n	8010310 <read_submessage_format+0xe4>
 80103d2:	bf00      	nop

080103d4 <on_get_fragmentation_info>:
 80103d4:	b500      	push	{lr}
 80103d6:	b08b      	sub	sp, #44	@ 0x2c
 80103d8:	4601      	mov	r1, r0
 80103da:	2204      	movs	r2, #4
 80103dc:	a802      	add	r0, sp, #8
 80103de:	f7fc f8a7 	bl	800c530 <ucdr_init_buffer>
 80103e2:	f10d 0305 	add.w	r3, sp, #5
 80103e6:	f10d 0206 	add.w	r2, sp, #6
 80103ea:	a901      	add	r1, sp, #4
 80103ec:	a802      	add	r0, sp, #8
 80103ee:	f001 fe6f 	bl	80120d0 <uxr_read_submessage_header>
 80103f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80103f6:	2b0d      	cmp	r3, #13
 80103f8:	d003      	beq.n	8010402 <on_get_fragmentation_info+0x2e>
 80103fa:	2000      	movs	r0, #0
 80103fc:	b00b      	add	sp, #44	@ 0x2c
 80103fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010402:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010406:	f013 0f02 	tst.w	r3, #2
 801040a:	bf0c      	ite	eq
 801040c:	2001      	moveq	r0, #1
 801040e:	2002      	movne	r0, #2
 8010410:	b00b      	add	sp, #44	@ 0x2c
 8010412:	f85d fb04 	ldr.w	pc, [sp], #4
 8010416:	bf00      	nop

08010418 <read_submessage_get_info>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	2500      	movs	r5, #0
 801041c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010420:	4604      	mov	r4, r0
 8010422:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010426:	460e      	mov	r6, r1
 8010428:	a810      	add	r0, sp, #64	@ 0x40
 801042a:	4629      	mov	r1, r5
 801042c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010430:	f00a fc4d 	bl	801acce <memset>
 8010434:	a903      	add	r1, sp, #12
 8010436:	4630      	mov	r0, r6
 8010438:	f002 fef8 	bl	801322c <uxr_deserialize_GET_INFO_Payload>
 801043c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010440:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010444:	4620      	mov	r0, r4
 8010446:	f001 f871 	bl	801152c <uxr_session_header_offset>
 801044a:	462b      	mov	r3, r5
 801044c:	9000      	str	r0, [sp, #0]
 801044e:	220c      	movs	r2, #12
 8010450:	a905      	add	r1, sp, #20
 8010452:	a808      	add	r0, sp, #32
 8010454:	f7fc f85a 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8010458:	a910      	add	r1, sp, #64	@ 0x40
 801045a:	a808      	add	r0, sp, #32
 801045c:	f002 ff58 	bl	8013310 <uxr_serialize_INFO_Payload>
 8010460:	9b08      	ldr	r3, [sp, #32]
 8010462:	462a      	mov	r2, r5
 8010464:	4629      	mov	r1, r5
 8010466:	4620      	mov	r0, r4
 8010468:	f001 f80c 	bl	8011484 <uxr_stamp_session_header>
 801046c:	a808      	add	r0, sp, #32
 801046e:	f7fc f88b 	bl	800c588 <ucdr_buffer_length>
 8010472:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010474:	4602      	mov	r2, r0
 8010476:	a905      	add	r1, sp, #20
 8010478:	e9d3 0400 	ldrd	r0, r4, [r3]
 801047c:	47a0      	blx	r4
 801047e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010482:	bd70      	pop	{r4, r5, r6, pc}

08010484 <write_submessage_acknack.isra.0>:
 8010484:	b570      	push	{r4, r5, r6, lr}
 8010486:	b092      	sub	sp, #72	@ 0x48
 8010488:	4605      	mov	r5, r0
 801048a:	460e      	mov	r6, r1
 801048c:	4614      	mov	r4, r2
 801048e:	f001 f84d 	bl	801152c <uxr_session_header_offset>
 8010492:	a905      	add	r1, sp, #20
 8010494:	9000      	str	r0, [sp, #0]
 8010496:	2300      	movs	r3, #0
 8010498:	a80a      	add	r0, sp, #40	@ 0x28
 801049a:	2211      	movs	r2, #17
 801049c:	f7fc f836 	bl	800c50c <ucdr_init_buffer_origin_offset>
 80104a0:	2318      	movs	r3, #24
 80104a2:	fb03 5404 	mla	r4, r3, r4, r5
 80104a6:	2205      	movs	r2, #5
 80104a8:	2300      	movs	r3, #0
 80104aa:	3450      	adds	r4, #80	@ 0x50
 80104ac:	210a      	movs	r1, #10
 80104ae:	a80a      	add	r0, sp, #40	@ 0x28
 80104b0:	f001 fdf4 	bl	801209c <uxr_buffer_submessage_header>
 80104b4:	a903      	add	r1, sp, #12
 80104b6:	4620      	mov	r0, r4
 80104b8:	f008 f884 	bl	80185c4 <uxr_compute_acknack>
 80104bc:	ba40      	rev16	r0, r0
 80104be:	f8ad 000e 	strh.w	r0, [sp, #14]
 80104c2:	a903      	add	r1, sp, #12
 80104c4:	a80a      	add	r0, sp, #40	@ 0x28
 80104c6:	f88d 6010 	strb.w	r6, [sp, #16]
 80104ca:	f002 ff91 	bl	80133f0 <uxr_serialize_ACKNACK_Payload>
 80104ce:	2200      	movs	r2, #0
 80104d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104d2:	4611      	mov	r1, r2
 80104d4:	4628      	mov	r0, r5
 80104d6:	f000 ffd5 	bl	8011484 <uxr_stamp_session_header>
 80104da:	a80a      	add	r0, sp, #40	@ 0x28
 80104dc:	f7fc f854 	bl	800c588 <ucdr_buffer_length>
 80104e0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80104e2:	4602      	mov	r2, r0
 80104e4:	a905      	add	r1, sp, #20
 80104e6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80104ea:	47a0      	blx	r4
 80104ec:	b012      	add	sp, #72	@ 0x48
 80104ee:	bd70      	pop	{r4, r5, r6, pc}

080104f0 <uxr_init_session>:
 80104f0:	b510      	push	{r4, lr}
 80104f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010528 <uxr_init_session+0x38>
 80104f6:	2300      	movs	r3, #0
 80104f8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80104fc:	4604      	mov	r4, r0
 80104fe:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010502:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010506:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801050a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801050e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010512:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010516:	2181      	movs	r1, #129	@ 0x81
 8010518:	f000 ff18 	bl	801134c <uxr_init_session_info>
 801051c:	f104 0008 	add.w	r0, r4, #8
 8010520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010524:	f001 bcd6 	b.w	8011ed4 <uxr_init_stream_storage>
	...

08010530 <uxr_set_status_callback>:
 8010530:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop

08010538 <uxr_set_topic_callback>:
 8010538:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop

08010540 <uxr_set_request_callback>:
 8010540:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <uxr_set_reply_callback>:
 8010548:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop

08010550 <uxr_create_output_best_effort_stream>:
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	4604      	mov	r4, r0
 8010556:	460d      	mov	r5, r1
 8010558:	4616      	mov	r6, r2
 801055a:	f000 ffe7 	bl	801152c <uxr_session_header_offset>
 801055e:	4632      	mov	r2, r6
 8010560:	4603      	mov	r3, r0
 8010562:	4629      	mov	r1, r5
 8010564:	f104 0008 	add.w	r0, r4, #8
 8010568:	b002      	add	sp, #8
 801056a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801056e:	f001 bcfb 	b.w	8011f68 <uxr_add_output_best_effort_buffer>
 8010572:	bf00      	nop

08010574 <uxr_create_output_reliable_stream>:
 8010574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010576:	b085      	sub	sp, #20
 8010578:	4604      	mov	r4, r0
 801057a:	460d      	mov	r5, r1
 801057c:	4616      	mov	r6, r2
 801057e:	461f      	mov	r7, r3
 8010580:	f000 ffd4 	bl	801152c <uxr_session_header_offset>
 8010584:	463b      	mov	r3, r7
 8010586:	9000      	str	r0, [sp, #0]
 8010588:	4632      	mov	r2, r6
 801058a:	4629      	mov	r1, r5
 801058c:	f104 0008 	add.w	r0, r4, #8
 8010590:	f001 fcfe 	bl	8011f90 <uxr_add_output_reliable_buffer>
 8010594:	b005      	add	sp, #20
 8010596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010598 <uxr_create_input_best_effort_stream>:
 8010598:	b082      	sub	sp, #8
 801059a:	3008      	adds	r0, #8
 801059c:	b002      	add	sp, #8
 801059e:	f001 bd11 	b.w	8011fc4 <uxr_add_input_best_effort_buffer>
 80105a2:	bf00      	nop

080105a4 <uxr_create_input_reliable_stream>:
 80105a4:	b510      	push	{r4, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	4c03      	ldr	r4, [pc, #12]	@ (80105b8 <uxr_create_input_reliable_stream+0x14>)
 80105aa:	9400      	str	r4, [sp, #0]
 80105ac:	3008      	adds	r0, #8
 80105ae:	f001 fd1f 	bl	8011ff0 <uxr_add_input_reliable_buffer>
 80105b2:	b004      	add	sp, #16
 80105b4:	bd10      	pop	{r4, pc}
 80105b6:	bf00      	nop
 80105b8:	080103d5 	.word	0x080103d5

080105bc <uxr_epoch_millis>:
 80105bc:	b510      	push	{r4, lr}
 80105be:	4604      	mov	r4, r0
 80105c0:	f001 fdcc 	bl	801215c <uxr_nanos>
 80105c4:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80105c8:	1ac0      	subs	r0, r0, r3
 80105ca:	4a04      	ldr	r2, [pc, #16]	@ (80105dc <uxr_epoch_millis+0x20>)
 80105cc:	f04f 0300 	mov.w	r3, #0
 80105d0:	eb61 0104 	sbc.w	r1, r1, r4
 80105d4:	f7f0 fb30 	bl	8000c38 <__aeabi_ldivmod>
 80105d8:	bd10      	pop	{r4, pc}
 80105da:	bf00      	nop
 80105dc:	000f4240 	.word	0x000f4240

080105e0 <uxr_epoch_nanos>:
 80105e0:	b510      	push	{r4, lr}
 80105e2:	4604      	mov	r4, r0
 80105e4:	f001 fdba 	bl	801215c <uxr_nanos>
 80105e8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80105ec:	1ac0      	subs	r0, r0, r3
 80105ee:	eb61 0102 	sbc.w	r1, r1, r2
 80105f2:	bd10      	pop	{r4, pc}

080105f4 <uxr_flash_output_streams>:
 80105f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f8:	7e03      	ldrb	r3, [r0, #24]
 80105fa:	b084      	sub	sp, #16
 80105fc:	4604      	mov	r4, r0
 80105fe:	b373      	cbz	r3, 801065e <uxr_flash_output_streams+0x6a>
 8010600:	2500      	movs	r5, #0
 8010602:	f100 0908 	add.w	r9, r0, #8
 8010606:	f10d 0802 	add.w	r8, sp, #2
 801060a:	4628      	mov	r0, r5
 801060c:	af03      	add	r7, sp, #12
 801060e:	ae02      	add	r6, sp, #8
 8010610:	e006      	b.n	8010620 <uxr_flash_output_streams+0x2c>
 8010612:	7e23      	ldrb	r3, [r4, #24]
 8010614:	3501      	adds	r5, #1
 8010616:	b2e8      	uxtb	r0, r5
 8010618:	4283      	cmp	r3, r0
 801061a:	f109 0910 	add.w	r9, r9, #16
 801061e:	d91e      	bls.n	801065e <uxr_flash_output_streams+0x6a>
 8010620:	2201      	movs	r2, #1
 8010622:	4611      	mov	r1, r2
 8010624:	f001 fc1e 	bl	8011e64 <uxr_stream_id>
 8010628:	4643      	mov	r3, r8
 801062a:	4684      	mov	ip, r0
 801062c:	463a      	mov	r2, r7
 801062e:	4631      	mov	r1, r6
 8010630:	4648      	mov	r0, r9
 8010632:	f8cd c004 	str.w	ip, [sp, #4]
 8010636:	f008 f849 	bl	80186cc <uxr_prepare_best_effort_buffer_to_send>
 801063a:	2800      	cmp	r0, #0
 801063c:	d0e9      	beq.n	8010612 <uxr_flash_output_streams+0x1e>
 801063e:	9b02      	ldr	r3, [sp, #8]
 8010640:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010644:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010648:	4620      	mov	r0, r4
 801064a:	f000 ff1b 	bl	8011484 <uxr_stamp_session_header>
 801064e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010650:	9a03      	ldr	r2, [sp, #12]
 8010652:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010656:	9902      	ldr	r1, [sp, #8]
 8010658:	6818      	ldr	r0, [r3, #0]
 801065a:	47d0      	blx	sl
 801065c:	e7d9      	b.n	8010612 <uxr_flash_output_streams+0x1e>
 801065e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010662:	b37b      	cbz	r3, 80106c4 <uxr_flash_output_streams+0xd0>
 8010664:	f04f 0900 	mov.w	r9, #0
 8010668:	f104 0520 	add.w	r5, r4, #32
 801066c:	f10d 0802 	add.w	r8, sp, #2
 8010670:	af03      	add	r7, sp, #12
 8010672:	ae02      	add	r6, sp, #8
 8010674:	4648      	mov	r0, r9
 8010676:	2201      	movs	r2, #1
 8010678:	2102      	movs	r1, #2
 801067a:	f001 fbf3 	bl	8011e64 <uxr_stream_id>
 801067e:	9001      	str	r0, [sp, #4]
 8010680:	e00e      	b.n	80106a0 <uxr_flash_output_streams+0xac>
 8010682:	9b02      	ldr	r3, [sp, #8]
 8010684:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010688:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801068c:	4620      	mov	r0, r4
 801068e:	f000 fef9 	bl	8011484 <uxr_stamp_session_header>
 8010692:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010694:	9a03      	ldr	r2, [sp, #12]
 8010696:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801069a:	9902      	ldr	r1, [sp, #8]
 801069c:	6818      	ldr	r0, [r3, #0]
 801069e:	47d0      	blx	sl
 80106a0:	4643      	mov	r3, r8
 80106a2:	463a      	mov	r2, r7
 80106a4:	4631      	mov	r1, r6
 80106a6:	4628      	mov	r0, r5
 80106a8:	f008 fa24 	bl	8018af4 <uxr_prepare_next_reliable_buffer_to_send>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d1e8      	bne.n	8010682 <uxr_flash_output_streams+0x8e>
 80106b0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80106b4:	f109 0901 	add.w	r9, r9, #1
 80106b8:	fa5f f089 	uxtb.w	r0, r9
 80106bc:	4283      	cmp	r3, r0
 80106be:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 80106c2:	d8d8      	bhi.n	8010676 <uxr_flash_output_streams+0x82>
 80106c4:	b004      	add	sp, #16
 80106c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ca:	bf00      	nop

080106cc <read_submessage_info>:
 80106cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d0:	460d      	mov	r5, r1
 80106d2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80106d6:	4669      	mov	r1, sp
 80106d8:	4607      	mov	r7, r0
 80106da:	4628      	mov	r0, r5
 80106dc:	f002 fca2 	bl	8013024 <uxr_deserialize_BaseObjectReply>
 80106e0:	a902      	add	r1, sp, #8
 80106e2:	4604      	mov	r4, r0
 80106e4:	4628      	mov	r0, r5
 80106e6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80106ea:	f7fa fcb1 	bl	800b050 <ucdr_deserialize_bool>
 80106ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80106f2:	4004      	ands	r4, r0
 80106f4:	b2e4      	uxtb	r4, r4
 80106f6:	b95b      	cbnz	r3, 8010710 <read_submessage_info+0x44>
 80106f8:	a987      	add	r1, sp, #540	@ 0x21c
 80106fa:	4628      	mov	r0, r5
 80106fc:	f7fa fca8 	bl	800b050 <ucdr_deserialize_bool>
 8010700:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010704:	4606      	mov	r6, r0
 8010706:	b94b      	cbnz	r3, 801071c <read_submessage_info+0x50>
 8010708:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	a903      	add	r1, sp, #12
 8010712:	4628      	mov	r0, r5
 8010714:	f002 fb48 	bl	8012da8 <uxr_deserialize_ObjectVariant>
 8010718:	4004      	ands	r4, r0
 801071a:	e7ed      	b.n	80106f8 <read_submessage_info+0x2c>
 801071c:	a988      	add	r1, sp, #544	@ 0x220
 801071e:	4628      	mov	r0, r5
 8010720:	f7fa fcc4 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8010724:	4234      	tst	r4, r6
 8010726:	d0ef      	beq.n	8010708 <read_submessage_info+0x3c>
 8010728:	2800      	cmp	r0, #0
 801072a:	d0ed      	beq.n	8010708 <read_submessage_info+0x3c>
 801072c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010730:	2b0d      	cmp	r3, #13
 8010732:	d1e9      	bne.n	8010708 <read_submessage_info+0x3c>
 8010734:	a98a      	add	r1, sp, #552	@ 0x228
 8010736:	4628      	mov	r0, r5
 8010738:	f7fb fa54 	bl	800bbe4 <ucdr_deserialize_int16_t>
 801073c:	b140      	cbz	r0, 8010750 <read_submessage_info+0x84>
 801073e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010742:	2b00      	cmp	r3, #0
 8010744:	dd07      	ble.n	8010756 <read_submessage_info+0x8a>
 8010746:	f1b8 0f00 	cmp.w	r8, #0
 801074a:	bf0c      	ite	eq
 801074c:	2002      	moveq	r0, #2
 801074e:	2001      	movne	r0, #1
 8010750:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010754:	e7d8      	b.n	8010708 <read_submessage_info+0x3c>
 8010756:	2000      	movs	r0, #0
 8010758:	e7fa      	b.n	8010750 <read_submessage_info+0x84>
 801075a:	bf00      	nop

0801075c <read_submessage_list>:
 801075c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010760:	b097      	sub	sp, #92	@ 0x5c
 8010762:	4604      	mov	r4, r0
 8010764:	460d      	mov	r5, r1
 8010766:	9209      	str	r2, [sp, #36]	@ 0x24
 8010768:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801076c:	aa0c      	add	r2, sp, #48	@ 0x30
 801076e:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010772:	4628      	mov	r0, r5
 8010774:	f001 fcac 	bl	80120d0 <uxr_read_submessage_header>
 8010778:	2800      	cmp	r0, #0
 801077a:	f000 812c 	beq.w	80109d6 <read_submessage_list+0x27a>
 801077e:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8010782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010784:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8010788:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 801078c:	3902      	subs	r1, #2
 801078e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010792:	290d      	cmp	r1, #13
 8010794:	d8e8      	bhi.n	8010768 <read_submessage_list+0xc>
 8010796:	a201      	add	r2, pc, #4	@ (adr r2, 801079c <read_submessage_list+0x40>)
 8010798:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 801079c:	080109cd 	.word	0x080109cd
 80107a0:	08010769 	.word	0x08010769
 80107a4:	080109bd 	.word	0x080109bd
 80107a8:	0801095f 	.word	0x0801095f
 80107ac:	08010955 	.word	0x08010955
 80107b0:	08010769 	.word	0x08010769
 80107b4:	08010769 	.word	0x08010769
 80107b8:	080108d9 	.word	0x080108d9
 80107bc:	08010871 	.word	0x08010871
 80107c0:	08010831 	.word	0x08010831
 80107c4:	08010769 	.word	0x08010769
 80107c8:	08010769 	.word	0x08010769
 80107cc:	08010769 	.word	0x08010769
 80107d0:	080107d5 	.word	0x080107d5
 80107d4:	a910      	add	r1, sp, #64	@ 0x40
 80107d6:	4628      	mov	r0, r5
 80107d8:	f002 fe68 	bl	80134ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80107dc:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 80107e0:	2e00      	cmp	r6, #0
 80107e2:	f000 8100 	beq.w	80109e6 <read_submessage_list+0x28a>
 80107e6:	f001 fcb9 	bl	801215c <uxr_nanos>
 80107ea:	f04f 0800 	mov.w	r8, #0
 80107ee:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80107f0:	4602      	mov	r2, r0
 80107f2:	460b      	mov	r3, r1
 80107f4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80107f6:	4990      	ldr	r1, [pc, #576]	@ (8010a38 <read_submessage_list+0x2dc>)
 80107f8:	46c4      	mov	ip, r8
 80107fa:	fbc0 7c01 	smlal	r7, ip, r0, r1
 80107fe:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010802:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010804:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010806:	46c6      	mov	lr, r8
 8010808:	fbc0 7e01 	smlal	r7, lr, r0, r1
 801080c:	46bc      	mov	ip, r7
 801080e:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010812:	fbc0 7801 	smlal	r7, r8, r0, r1
 8010816:	e9cd ce02 	strd	ip, lr, [sp, #8]
 801081a:	e9cd 7800 	strd	r7, r8, [sp]
 801081e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010822:	9106      	str	r1, [sp, #24]
 8010824:	4620      	mov	r0, r4
 8010826:	47b0      	blx	r6
 8010828:	2301      	movs	r3, #1
 801082a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801082e:	e79b      	b.n	8010768 <read_submessage_list+0xc>
 8010830:	a910      	add	r1, sp, #64	@ 0x40
 8010832:	4628      	mov	r0, r5
 8010834:	f002 fe1a 	bl	801346c <uxr_deserialize_HEARTBEAT_Payload>
 8010838:	2100      	movs	r1, #0
 801083a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801083e:	f001 fb2d 	bl	8011e9c <uxr_stream_id_from_raw>
 8010842:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010846:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010848:	4631      	mov	r1, r6
 801084a:	f104 0008 	add.w	r0, r4, #8
 801084e:	f001 fc05 	bl	801205c <uxr_get_input_reliable_stream>
 8010852:	2800      	cmp	r0, #0
 8010854:	d088      	beq.n	8010768 <read_submessage_list+0xc>
 8010856:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801085a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801085e:	f007 fea5 	bl	80185ac <uxr_process_heartbeat>
 8010862:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010866:	4632      	mov	r2, r6
 8010868:	4620      	mov	r0, r4
 801086a:	f7ff fe0b 	bl	8010484 <write_submessage_acknack.isra.0>
 801086e:	e77b      	b.n	8010768 <read_submessage_list+0xc>
 8010870:	a910      	add	r1, sp, #64	@ 0x40
 8010872:	4628      	mov	r0, r5
 8010874:	f002 fdd2 	bl	801341c <uxr_deserialize_ACKNACK_Payload>
 8010878:	2100      	movs	r1, #0
 801087a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801087e:	f001 fb0d 	bl	8011e9c <uxr_stream_id_from_raw>
 8010882:	900d      	str	r0, [sp, #52]	@ 0x34
 8010884:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010888:	f104 0008 	add.w	r0, r4, #8
 801088c:	f001 fbd2 	bl	8012034 <uxr_get_output_reliable_stream>
 8010890:	4606      	mov	r6, r0
 8010892:	2800      	cmp	r0, #0
 8010894:	f43f af68 	beq.w	8010768 <read_submessage_list+0xc>
 8010898:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 801089c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80108a0:	ba49      	rev16	r1, r1
 80108a2:	b289      	uxth	r1, r1
 80108a4:	f008 f9d0 	bl	8018c48 <uxr_process_acknack>
 80108a8:	4630      	mov	r0, r6
 80108aa:	f008 f991 	bl	8018bd0 <uxr_begin_output_nack_buffer_it>
 80108ae:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80108b2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80108b6:	e005      	b.n	80108c4 <read_submessage_list+0x168>
 80108b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80108ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80108bc:	685f      	ldr	r7, [r3, #4]
 80108be:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80108c0:	6818      	ldr	r0, [r3, #0]
 80108c2:	47b8      	blx	r7
 80108c4:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80108c8:	aa0f      	add	r2, sp, #60	@ 0x3c
 80108ca:	4641      	mov	r1, r8
 80108cc:	4630      	mov	r0, r6
 80108ce:	f008 f981 	bl	8018bd4 <uxr_next_reliable_nack_buffer_to_send>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d1f0      	bne.n	80108b8 <read_submessage_list+0x15c>
 80108d6:	e747      	b.n	8010768 <read_submessage_list+0xc>
 80108d8:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80108dc:	4641      	mov	r1, r8
 80108de:	900d      	str	r0, [sp, #52]	@ 0x34
 80108e0:	4628      	mov	r0, r5
 80108e2:	f002 fb01 	bl	8012ee8 <uxr_deserialize_BaseObjectRequest>
 80108e6:	3e04      	subs	r6, #4
 80108e8:	4640      	mov	r0, r8
 80108ea:	a90f      	add	r1, sp, #60	@ 0x3c
 80108ec:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80108f0:	f000 fe42 	bl	8011578 <uxr_parse_base_object_request>
 80108f4:	fa1f f886 	uxth.w	r8, r6
 80108f8:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 80108fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80108fe:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8010902:	9110      	str	r1, [sp, #64]	@ 0x40
 8010904:	f007 070e 	and.w	r7, r7, #14
 8010908:	b136      	cbz	r6, 8010918 <read_submessage_list+0x1bc>
 801090a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	464a      	mov	r2, r9
 8010912:	2300      	movs	r3, #0
 8010914:	4620      	mov	r0, r4
 8010916:	47b0      	blx	r6
 8010918:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 801091a:	b16b      	cbz	r3, 8010938 <read_submessage_list+0x1dc>
 801091c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801091e:	2100      	movs	r1, #0
 8010920:	3802      	subs	r0, #2
 8010922:	e002      	b.n	801092a <read_submessage_list+0x1ce>
 8010924:	3101      	adds	r1, #1
 8010926:	428b      	cmp	r3, r1
 8010928:	d006      	beq.n	8010938 <read_submessage_list+0x1dc>
 801092a:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 801092e:	454e      	cmp	r6, r9
 8010930:	d1f8      	bne.n	8010924 <read_submessage_list+0x1c8>
 8010932:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010934:	2200      	movs	r2, #0
 8010936:	545a      	strb	r2, [r3, r1]
 8010938:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801093c:	9102      	str	r1, [sp, #8]
 801093e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010940:	9101      	str	r1, [sp, #4]
 8010942:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010944:	9100      	str	r1, [sp, #0]
 8010946:	463b      	mov	r3, r7
 8010948:	4642      	mov	r2, r8
 801094a:	4629      	mov	r1, r5
 801094c:	4620      	mov	r0, r4
 801094e:	f7ff fc6d 	bl	801022c <read_submessage_format>
 8010952:	e709      	b.n	8010768 <read_submessage_list+0xc>
 8010954:	4629      	mov	r1, r5
 8010956:	4620      	mov	r0, r4
 8010958:	f7ff feb8 	bl	80106cc <read_submessage_info>
 801095c:	e704      	b.n	8010768 <read_submessage_list+0xc>
 801095e:	2b00      	cmp	r3, #0
 8010960:	d03c      	beq.n	80109dc <read_submessage_list+0x280>
 8010962:	a910      	add	r1, sp, #64	@ 0x40
 8010964:	4628      	mov	r0, r5
 8010966:	f002 fcb5 	bl	80132d4 <uxr_deserialize_STATUS_Payload>
 801096a:	a90e      	add	r1, sp, #56	@ 0x38
 801096c:	a810      	add	r0, sp, #64	@ 0x40
 801096e:	aa0d      	add	r2, sp, #52	@ 0x34
 8010970:	f000 fe02 	bl	8011578 <uxr_parse_base_object_request>
 8010974:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8010978:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801097a:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 801097e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010982:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010984:	b136      	cbz	r6, 8010994 <read_submessage_list+0x238>
 8010986:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801098a:	9300      	str	r3, [sp, #0]
 801098c:	463a      	mov	r2, r7
 801098e:	4643      	mov	r3, r8
 8010990:	4620      	mov	r0, r4
 8010992:	47b0      	blx	r6
 8010994:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010996:	2a00      	cmp	r2, #0
 8010998:	f43f aee6 	beq.w	8010768 <read_submessage_list+0xc>
 801099c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801099e:	2100      	movs	r1, #0
 80109a0:	3802      	subs	r0, #2
 80109a2:	e003      	b.n	80109ac <read_submessage_list+0x250>
 80109a4:	3101      	adds	r1, #1
 80109a6:	4291      	cmp	r1, r2
 80109a8:	f43f aede 	beq.w	8010768 <read_submessage_list+0xc>
 80109ac:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80109b0:	42be      	cmp	r6, r7
 80109b2:	d1f7      	bne.n	80109a4 <read_submessage_list+0x248>
 80109b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80109b6:	f803 8001 	strb.w	r8, [r3, r1]
 80109ba:	e6d5      	b.n	8010768 <read_submessage_list+0xc>
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f47f aed3 	bne.w	8010768 <read_submessage_list+0xc>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4620      	mov	r0, r4
 80109c6:	f000 fd1f 	bl	8011408 <uxr_read_create_session_status>
 80109ca:	e6cd      	b.n	8010768 <read_submessage_list+0xc>
 80109cc:	4629      	mov	r1, r5
 80109ce:	4620      	mov	r0, r4
 80109d0:	f7ff fd22 	bl	8010418 <read_submessage_get_info>
 80109d4:	e6c8      	b.n	8010768 <read_submessage_list+0xc>
 80109d6:	b017      	add	sp, #92	@ 0x5c
 80109d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109dc:	4629      	mov	r1, r5
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 fd20 	bl	8011424 <uxr_read_delete_session_status>
 80109e4:	e6c0      	b.n	8010768 <read_submessage_list+0xc>
 80109e6:	f001 fbb9 	bl	801215c <uxr_nanos>
 80109ea:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 80109ee:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8010a38 <read_submessage_list+0x2dc>
 80109f2:	4633      	mov	r3, r6
 80109f4:	fbc7 230c 	smlal	r2, r3, r7, ip
 80109f8:	1810      	adds	r0, r2, r0
 80109fa:	eb43 0301 	adc.w	r3, r3, r1
 80109fe:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8010a02:	46b6      	mov	lr, r6
 8010a04:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 8010a08:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8010a0c:	fbc1 760c 	smlal	r7, r6, r1, ip
 8010a10:	19d2      	adds	r2, r2, r7
 8010a12:	eb4e 0106 	adc.w	r1, lr, r6
 8010a16:	1a80      	subs	r0, r0, r2
 8010a18:	eb63 0301 	sbc.w	r3, r3, r1
 8010a1c:	0fda      	lsrs	r2, r3, #31
 8010a1e:	1812      	adds	r2, r2, r0
 8010a20:	f143 0300 	adc.w	r3, r3, #0
 8010a24:	0852      	lsrs	r2, r2, #1
 8010a26:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010a2a:	105b      	asrs	r3, r3, #1
 8010a2c:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010a30:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010a34:	e6f8      	b.n	8010828 <read_submessage_list+0xcc>
 8010a36:	bf00      	nop
 8010a38:	3b9aca00 	.word	0x3b9aca00

08010a3c <listen_message_reliably>:
 8010a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a40:	f1b1 0b00 	subs.w	fp, r1, #0
 8010a44:	b09f      	sub	sp, #124	@ 0x7c
 8010a46:	4606      	mov	r6, r0
 8010a48:	bfb8      	it	lt
 8010a4a:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8010a4e:	f001 fb6b 	bl	8012128 <uxr_millis>
 8010a52:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010a56:	9003      	str	r0, [sp, #12]
 8010a58:	9104      	str	r1, [sp, #16]
 8010a5a:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8010a5e:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f000 80a4 	beq.w	8010bb0 <listen_message_reliably+0x174>
 8010a68:	2500      	movs	r5, #0
 8010a6a:	e9cd b806 	strd	fp, r8, [sp, #24]
 8010a6e:	f106 0420 	add.w	r4, r6, #32
 8010a72:	f04f 37ff 	mov.w	r7, #4294967295
 8010a76:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	e011      	b.n	8010aa2 <listen_message_reliably+0x66>
 8010a7e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8010a82:	42ba      	cmp	r2, r7
 8010a84:	eb73 0109 	sbcs.w	r1, r3, r9
 8010a88:	bfb8      	it	lt
 8010a8a:	4699      	movlt	r9, r3
 8010a8c:	f105 0501 	add.w	r5, r5, #1
 8010a90:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010a94:	b2e8      	uxtb	r0, r5
 8010a96:	bfb8      	it	lt
 8010a98:	4617      	movlt	r7, r2
 8010a9a:	4283      	cmp	r3, r0
 8010a9c:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8010aa0:	d94a      	bls.n	8010b38 <listen_message_reliably+0xfc>
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	2102      	movs	r1, #2
 8010aa6:	f001 f9dd 	bl	8011e64 <uxr_stream_id>
 8010aaa:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8010aae:	4601      	mov	r1, r0
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010ab4:	f008 f85c 	bl	8018b70 <uxr_update_output_stream_heartbeat_timestamp>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d0e0      	beq.n	8010a7e <listen_message_reliably+0x42>
 8010abc:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8010ac0:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8010ac4:	9305      	str	r3, [sp, #20]
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f000 fd30 	bl	801152c <uxr_session_header_offset>
 8010acc:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8010ad0:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8010ad4:	9000      	str	r0, [sp, #0]
 8010ad6:	a90e      	add	r1, sp, #56	@ 0x38
 8010ad8:	4640      	mov	r0, r8
 8010ada:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8010ade:	2300      	movs	r3, #0
 8010ae0:	2211      	movs	r2, #17
 8010ae2:	f7fb fd13 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	2205      	movs	r2, #5
 8010aea:	210b      	movs	r1, #11
 8010aec:	4640      	mov	r0, r8
 8010aee:	f001 fad5 	bl	801209c <uxr_buffer_submessage_header>
 8010af2:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 8010af6:	2101      	movs	r1, #1
 8010af8:	f008 f8fc 	bl	8018cf4 <uxr_seq_num_add>
 8010afc:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8010b00:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010b04:	4602      	mov	r2, r0
 8010b06:	9b05      	ldr	r3, [sp, #20]
 8010b08:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8010b0c:	a90c      	add	r1, sp, #48	@ 0x30
 8010b0e:	4640      	mov	r0, r8
 8010b10:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010b14:	f002 fc96 	bl	8013444 <uxr_serialize_HEARTBEAT_Payload>
 8010b18:	2200      	movs	r2, #0
 8010b1a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f000 fcb0 	bl	8011484 <uxr_stamp_session_header>
 8010b24:	4640      	mov	r0, r8
 8010b26:	f7fb fd2f 	bl	800c588 <ucdr_buffer_length>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8010b2e:	a90e      	add	r1, sp, #56	@ 0x38
 8010b30:	e9d0 0300 	ldrd	r0, r3, [r0]
 8010b34:	4798      	blx	r3
 8010b36:	e7a2      	b.n	8010a7e <listen_message_reliably+0x42>
 8010b38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b3c:	4599      	cmp	r9, r3
 8010b3e:	bf08      	it	eq
 8010b40:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 8010b44:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 8010b48:	d032      	beq.n	8010bb0 <listen_message_reliably+0x174>
 8010b4a:	9b03      	ldr	r3, [sp, #12]
 8010b4c:	1aff      	subs	r7, r7, r3
 8010b4e:	2f00      	cmp	r7, #0
 8010b50:	bf08      	it	eq
 8010b52:	2701      	moveq	r7, #1
 8010b54:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8010b56:	455f      	cmp	r7, fp
 8010b58:	bfa8      	it	ge
 8010b5a:	465f      	movge	r7, fp
 8010b5c:	689c      	ldr	r4, [r3, #8]
 8010b5e:	6818      	ldr	r0, [r3, #0]
 8010b60:	4642      	mov	r2, r8
 8010b62:	463b      	mov	r3, r7
 8010b64:	4651      	mov	r1, sl
 8010b66:	47a0      	blx	r4
 8010b68:	ebab 0b07 	sub.w	fp, fp, r7
 8010b6c:	b958      	cbnz	r0, 8010b86 <listen_message_reliably+0x14a>
 8010b6e:	f1bb 0f00 	cmp.w	fp, #0
 8010b72:	dd44      	ble.n	8010bfe <listen_message_reliably+0x1c2>
 8010b74:	f001 fad8 	bl	8012128 <uxr_millis>
 8010b78:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d03c      	beq.n	8010bfa <listen_message_reliably+0x1be>
 8010b80:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8010b84:	e770      	b.n	8010a68 <listen_message_reliably+0x2c>
 8010b86:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	a80e      	add	r0, sp, #56	@ 0x38
 8010b8e:	f7fb fccf 	bl	800c530 <ucdr_init_buffer>
 8010b92:	2500      	movs	r5, #0
 8010b94:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8010b98:	aa08      	add	r2, sp, #32
 8010b9a:	a90e      	add	r1, sp, #56	@ 0x38
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f88d 5020 	strb.w	r5, [sp, #32]
 8010ba2:	f000 fc85 	bl	80114b0 <uxr_read_session_header>
 8010ba6:	b928      	cbnz	r0, 8010bb4 <listen_message_reliably+0x178>
 8010ba8:	4620      	mov	r0, r4
 8010baa:	b01f      	add	sp, #124	@ 0x7c
 8010bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb0:	465f      	mov	r7, fp
 8010bb2:	e7cc      	b.n	8010b4e <listen_message_reliably+0x112>
 8010bb4:	4629      	mov	r1, r5
 8010bb6:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8010bba:	f001 f96f 	bl	8011e9c <uxr_stream_id_from_raw>
 8010bbe:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010bc2:	2f01      	cmp	r7, #1
 8010bc4:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8010bc8:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8010bcc:	fa5f f880 	uxtb.w	r8, r0
 8010bd0:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010bd4:	d050      	beq.n	8010c78 <listen_message_reliably+0x23c>
 8010bd6:	2f02      	cmp	r7, #2
 8010bd8:	d016      	beq.n	8010c08 <listen_message_reliably+0x1cc>
 8010bda:	2f00      	cmp	r7, #0
 8010bdc:	d1e4      	bne.n	8010ba8 <listen_message_reliably+0x16c>
 8010bde:	4639      	mov	r1, r7
 8010be0:	4638      	mov	r0, r7
 8010be2:	f001 f95b 	bl	8011e9c <uxr_stream_id_from_raw>
 8010be6:	a90e      	add	r1, sp, #56	@ 0x38
 8010be8:	4602      	mov	r2, r0
 8010bea:	4630      	mov	r0, r6
 8010bec:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bee:	f7ff fdb5 	bl	801075c <read_submessage_list>
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	b01f      	add	sp, #124	@ 0x7c
 8010bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfa:	465f      	mov	r7, fp
 8010bfc:	e7aa      	b.n	8010b54 <listen_message_reliably+0x118>
 8010bfe:	4604      	mov	r4, r0
 8010c00:	4620      	mov	r0, r4
 8010c02:	b01f      	add	sp, #124	@ 0x7c
 8010c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c08:	4629      	mov	r1, r5
 8010c0a:	f106 0008 	add.w	r0, r6, #8
 8010c0e:	f001 fa25 	bl	801205c <uxr_get_input_reliable_stream>
 8010c12:	4681      	mov	r9, r0
 8010c14:	b338      	cbz	r0, 8010c66 <listen_message_reliably+0x22a>
 8010c16:	a80e      	add	r0, sp, #56	@ 0x38
 8010c18:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8010c1c:	f7fb fcb8 	bl	800c590 <ucdr_buffer_remaining>
 8010c20:	4603      	mov	r3, r0
 8010c22:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8010c26:	9000      	str	r0, [sp, #0]
 8010c28:	465a      	mov	r2, fp
 8010c2a:	4651      	mov	r1, sl
 8010c2c:	4648      	mov	r0, r9
 8010c2e:	f007 fbcb 	bl	80183c8 <uxr_receive_reliable_message>
 8010c32:	b1c0      	cbz	r0, 8010c66 <listen_message_reliably+0x22a>
 8010c34:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8010c38:	b393      	cbz	r3, 8010ca0 <listen_message_reliably+0x264>
 8010c3a:	af16      	add	r7, sp, #88	@ 0x58
 8010c3c:	f04f 0a02 	mov.w	sl, #2
 8010c40:	e00a      	b.n	8010c58 <listen_message_reliably+0x21c>
 8010c42:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8010c46:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 8010c4a:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8010c4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010c50:	4639      	mov	r1, r7
 8010c52:	4630      	mov	r0, r6
 8010c54:	f7ff fd82 	bl	801075c <read_submessage_list>
 8010c58:	2204      	movs	r2, #4
 8010c5a:	4639      	mov	r1, r7
 8010c5c:	4648      	mov	r0, r9
 8010c5e:	f007 fc2d 	bl	80184bc <uxr_next_input_reliable_buffer_available>
 8010c62:	2800      	cmp	r0, #0
 8010c64:	d1ed      	bne.n	8010c42 <listen_message_reliably+0x206>
 8010c66:	4630      	mov	r0, r6
 8010c68:	462a      	mov	r2, r5
 8010c6a:	4641      	mov	r1, r8
 8010c6c:	f7ff fc0a 	bl	8010484 <write_submessage_acknack.isra.0>
 8010c70:	4620      	mov	r0, r4
 8010c72:	b01f      	add	sp, #124	@ 0x7c
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c78:	4629      	mov	r1, r5
 8010c7a:	f106 0008 	add.w	r0, r6, #8
 8010c7e:	f001 f9e3 	bl	8012048 <uxr_get_input_best_effort_stream>
 8010c82:	2800      	cmp	r0, #0
 8010c84:	d090      	beq.n	8010ba8 <listen_message_reliably+0x16c>
 8010c86:	4651      	mov	r1, sl
 8010c88:	f007 fb0e 	bl	80182a8 <uxr_receive_best_effort_message>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d08b      	beq.n	8010ba8 <listen_message_reliably+0x16c>
 8010c90:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8010c94:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010c96:	a90e      	add	r1, sp, #56	@ 0x38
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f7ff fd5f 	bl	801075c <read_submessage_list>
 8010c9e:	e783      	b.n	8010ba8 <listen_message_reliably+0x16c>
 8010ca0:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8010ca4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010ca6:	a90e      	add	r1, sp, #56	@ 0x38
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f7ff fd57 	bl	801075c <read_submessage_list>
 8010cae:	e7c4      	b.n	8010c3a <listen_message_reliably+0x1fe>

08010cb0 <uxr_run_session_timeout>:
 8010cb0:	b570      	push	{r4, r5, r6, lr}
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	460d      	mov	r5, r1
 8010cb6:	f001 fa37 	bl	8012128 <uxr_millis>
 8010cba:	4606      	mov	r6, r0
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f7ff fc99 	bl	80105f4 <uxr_flash_output_streams>
 8010cc2:	4629      	mov	r1, r5
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f7ff feb9 	bl	8010a3c <listen_message_reliably>
 8010cca:	f001 fa2d 	bl	8012128 <uxr_millis>
 8010cce:	1b81      	subs	r1, r0, r6
 8010cd0:	1a69      	subs	r1, r5, r1
 8010cd2:	2900      	cmp	r1, #0
 8010cd4:	dcf6      	bgt.n	8010cc4 <uxr_run_session_timeout+0x14>
 8010cd6:	f104 0008 	add.w	r0, r4, #8
 8010cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cde:	f001 b9c7 	b.w	8012070 <uxr_output_streams_confirmed>
 8010ce2:	bf00      	nop

08010ce4 <uxr_run_session_until_data>:
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	460d      	mov	r5, r1
 8010cea:	f001 fa1d 	bl	8012128 <uxr_millis>
 8010cee:	4606      	mov	r6, r0
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f7ff fc7f 	bl	80105f4 <uxr_flash_output_streams>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	e005      	b.n	8010d0c <uxr_run_session_until_data+0x28>
 8010d00:	f001 fa12 	bl	8012128 <uxr_millis>
 8010d04:	1b81      	subs	r1, r0, r6
 8010d06:	1a69      	subs	r1, r5, r1
 8010d08:	2900      	cmp	r1, #0
 8010d0a:	dd07      	ble.n	8010d1c <uxr_run_session_until_data+0x38>
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f7ff fe95 	bl	8010a3c <listen_message_reliably>
 8010d12:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d0f2      	beq.n	8010d00 <uxr_run_session_until_data+0x1c>
 8010d1a:	bd70      	pop	{r4, r5, r6, pc}
 8010d1c:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010d20:	bd70      	pop	{r4, r5, r6, pc}
 8010d22:	bf00      	nop

08010d24 <uxr_run_session_until_confirm_delivery>:
 8010d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d28:	4606      	mov	r6, r0
 8010d2a:	460d      	mov	r5, r1
 8010d2c:	f001 f9fc 	bl	8012128 <uxr_millis>
 8010d30:	4607      	mov	r7, r0
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ff fc5e 	bl	80105f4 <uxr_flash_output_streams>
 8010d38:	2d00      	cmp	r5, #0
 8010d3a:	db16      	blt.n	8010d6a <uxr_run_session_until_confirm_delivery+0x46>
 8010d3c:	462c      	mov	r4, r5
 8010d3e:	f106 0808 	add.w	r8, r6, #8
 8010d42:	e008      	b.n	8010d56 <uxr_run_session_until_confirm_delivery+0x32>
 8010d44:	4621      	mov	r1, r4
 8010d46:	4630      	mov	r0, r6
 8010d48:	f7ff fe78 	bl	8010a3c <listen_message_reliably>
 8010d4c:	f001 f9ec 	bl	8012128 <uxr_millis>
 8010d50:	1bc1      	subs	r1, r0, r7
 8010d52:	1a6c      	subs	r4, r5, r1
 8010d54:	d404      	bmi.n	8010d60 <uxr_run_session_until_confirm_delivery+0x3c>
 8010d56:	4640      	mov	r0, r8
 8010d58:	f001 f98a 	bl	8012070 <uxr_output_streams_confirmed>
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d0f1      	beq.n	8010d44 <uxr_run_session_until_confirm_delivery+0x20>
 8010d60:	4640      	mov	r0, r8
 8010d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d66:	f001 b983 	b.w	8012070 <uxr_output_streams_confirmed>
 8010d6a:	f106 0808 	add.w	r8, r6, #8
 8010d6e:	e7f7      	b.n	8010d60 <uxr_run_session_until_confirm_delivery+0x3c>

08010d70 <uxr_run_session_until_all_status>:
 8010d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d74:	9c08      	ldr	r4, [sp, #32]
 8010d76:	4605      	mov	r5, r0
 8010d78:	460f      	mov	r7, r1
 8010d7a:	4690      	mov	r8, r2
 8010d7c:	461e      	mov	r6, r3
 8010d7e:	f7ff fc39 	bl	80105f4 <uxr_flash_output_streams>
 8010d82:	b124      	cbz	r4, 8010d8e <uxr_run_session_until_all_status+0x1e>
 8010d84:	4622      	mov	r2, r4
 8010d86:	21ff      	movs	r1, #255	@ 0xff
 8010d88:	4630      	mov	r0, r6
 8010d8a:	f009 ffa0 	bl	801acce <memset>
 8010d8e:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8010d92:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8010d94:	f001 f9c8 	bl	8012128 <uxr_millis>
 8010d98:	4639      	mov	r1, r7
 8010d9a:	4681      	mov	r9, r0
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	f7ff fe4d 	bl	8010a3c <listen_message_reliably>
 8010da2:	f001 f9c1 	bl	8012128 <uxr_millis>
 8010da6:	eba0 0109 	sub.w	r1, r0, r9
 8010daa:	1a79      	subs	r1, r7, r1
 8010dac:	b36c      	cbz	r4, 8010e0a <uxr_run_session_until_all_status+0x9a>
 8010dae:	1e70      	subs	r0, r6, #1
 8010db0:	46c6      	mov	lr, r8
 8010db2:	1902      	adds	r2, r0, r4
 8010db4:	4684      	mov	ip, r0
 8010db6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010dba:	2bff      	cmp	r3, #255	@ 0xff
 8010dbc:	d007      	beq.n	8010dce <uxr_run_session_until_all_status+0x5e>
 8010dbe:	4594      	cmp	ip, r2
 8010dc0:	d00f      	beq.n	8010de2 <uxr_run_session_until_all_status+0x72>
 8010dc2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010dc6:	2bff      	cmp	r3, #255	@ 0xff
 8010dc8:	f10e 0e02 	add.w	lr, lr, #2
 8010dcc:	d1f7      	bne.n	8010dbe <uxr_run_session_until_all_status+0x4e>
 8010dce:	4594      	cmp	ip, r2
 8010dd0:	f8be 3000 	ldrh.w	r3, [lr]
 8010dd4:	d014      	beq.n	8010e00 <uxr_run_session_until_all_status+0x90>
 8010dd6:	f10e 0e02 	add.w	lr, lr, #2
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d0eb      	beq.n	8010db6 <uxr_run_session_until_all_status+0x46>
 8010dde:	2900      	cmp	r1, #0
 8010de0:	dcdc      	bgt.n	8010d9c <uxr_run_session_until_all_status+0x2c>
 8010de2:	2300      	movs	r3, #0
 8010de4:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8010de6:	e001      	b.n	8010dec <uxr_run_session_until_all_status+0x7c>
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d812      	bhi.n	8010e12 <uxr_run_session_until_all_status+0xa2>
 8010dec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010df0:	4290      	cmp	r0, r2
 8010df2:	d1f9      	bne.n	8010de8 <uxr_run_session_until_all_status+0x78>
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	bf8c      	ite	hi
 8010df8:	2000      	movhi	r0, #0
 8010dfa:	2001      	movls	r0, #1
 8010dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e00:	2900      	cmp	r1, #0
 8010e02:	ddee      	ble.n	8010de2 <uxr_run_session_until_all_status+0x72>
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d1c9      	bne.n	8010d9c <uxr_run_session_until_all_status+0x2c>
 8010e08:	e7eb      	b.n	8010de2 <uxr_run_session_until_all_status+0x72>
 8010e0a:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8010e0c:	2001      	movs	r0, #1
 8010e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e12:	2000      	movs	r0, #0
 8010e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010e18 <uxr_sync_session>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	b092      	sub	sp, #72	@ 0x48
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	460d      	mov	r5, r1
 8010e20:	f000 fb84 	bl	801152c <uxr_session_header_offset>
 8010e24:	2214      	movs	r2, #20
 8010e26:	eb0d 0102 	add.w	r1, sp, r2
 8010e2a:	9000      	str	r0, [sp, #0]
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	a80a      	add	r0, sp, #40	@ 0x28
 8010e30:	f7fb fb6c 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8010e34:	2300      	movs	r3, #0
 8010e36:	2208      	movs	r2, #8
 8010e38:	210e      	movs	r1, #14
 8010e3a:	a80a      	add	r0, sp, #40	@ 0x28
 8010e3c:	f001 f92e 	bl	801209c <uxr_buffer_submessage_header>
 8010e40:	f001 f98c 	bl	801215c <uxr_nanos>
 8010e44:	a318      	add	r3, pc, #96	@ (adr r3, 8010ea8 <uxr_sync_session+0x90>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	f7ef fef5 	bl	8000c38 <__aeabi_ldivmod>
 8010e4e:	a903      	add	r1, sp, #12
 8010e50:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8010e54:	a80a      	add	r0, sp, #40	@ 0x28
 8010e56:	f002 fb1b 	bl	8013490 <uxr_serialize_TIMESTAMP_Payload>
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e60:	4620      	mov	r0, r4
 8010e62:	f000 fb0f 	bl	8011484 <uxr_stamp_session_header>
 8010e66:	a80a      	add	r0, sp, #40	@ 0x28
 8010e68:	f7fb fb8e 	bl	800c588 <ucdr_buffer_length>
 8010e6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e6e:	4602      	mov	r2, r0
 8010e70:	a905      	add	r1, sp, #20
 8010e72:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010e76:	47b0      	blx	r6
 8010e78:	f001 f956 	bl	8012128 <uxr_millis>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	4606      	mov	r6, r0
 8010e80:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010e84:	4629      	mov	r1, r5
 8010e86:	e000      	b.n	8010e8a <uxr_sync_session+0x72>
 8010e88:	b950      	cbnz	r0, 8010ea0 <uxr_sync_session+0x88>
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	f7ff fdd6 	bl	8010a3c <listen_message_reliably>
 8010e90:	f001 f94a 	bl	8012128 <uxr_millis>
 8010e94:	1b81      	subs	r1, r0, r6
 8010e96:	1a69      	subs	r1, r5, r1
 8010e98:	2900      	cmp	r1, #0
 8010e9a:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8010e9e:	dcf3      	bgt.n	8010e88 <uxr_sync_session+0x70>
 8010ea0:	b012      	add	sp, #72	@ 0x48
 8010ea2:	bd70      	pop	{r4, r5, r6, pc}
 8010ea4:	f3af 8000 	nop.w
 8010ea8:	3b9aca00 	.word	0x3b9aca00
 8010eac:	00000000 	.word	0x00000000

08010eb0 <uxr_run_session_until_pong>:
 8010eb0:	b570      	push	{r4, r5, r6, lr}
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	460d      	mov	r5, r1
 8010eb6:	f001 f937 	bl	8012128 <uxr_millis>
 8010eba:	4606      	mov	r6, r0
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f7ff fb99 	bl	80105f4 <uxr_flash_output_streams>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8010ec8:	4629      	mov	r1, r5
 8010eca:	e005      	b.n	8010ed8 <uxr_run_session_until_pong+0x28>
 8010ecc:	f001 f92c 	bl	8012128 <uxr_millis>
 8010ed0:	1b81      	subs	r1, r0, r6
 8010ed2:	1a69      	subs	r1, r5, r1
 8010ed4:	2900      	cmp	r1, #0
 8010ed6:	dd0c      	ble.n	8010ef2 <uxr_run_session_until_pong+0x42>
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f7ff fdaf 	bl	8010a3c <listen_message_reliably>
 8010ede:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	d0f2      	beq.n	8010ecc <uxr_run_session_until_pong+0x1c>
 8010ee6:	f1a0 0001 	sub.w	r0, r0, #1
 8010eea:	fab0 f080 	clz	r0, r0
 8010eee:	0940      	lsrs	r0, r0, #5
 8010ef0:	bd70      	pop	{r4, r5, r6, pc}
 8010ef2:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010ef6:	f1a0 0001 	sub.w	r0, r0, #1
 8010efa:	fab0 f080 	clz	r0, r0
 8010efe:	0940      	lsrs	r0, r0, #5
 8010f00:	bd70      	pop	{r4, r5, r6, pc}
 8010f02:	bf00      	nop

08010f04 <wait_session_status>:
 8010f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f08:	4604      	mov	r4, r0
 8010f0a:	20ff      	movs	r0, #255	@ 0xff
 8010f0c:	b09f      	sub	sp, #124	@ 0x7c
 8010f0e:	7160      	strb	r0, [r4, #5]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f000 80bb 	beq.w	801108c <wait_session_status+0x188>
 8010f16:	4692      	mov	sl, r2
 8010f18:	469b      	mov	fp, r3
 8010f1a:	f04f 0800 	mov.w	r8, #0
 8010f1e:	9105      	str	r1, [sp, #20]
 8010f20:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f22:	9905      	ldr	r1, [sp, #20]
 8010f24:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010f28:	4652      	mov	r2, sl
 8010f2a:	47a8      	blx	r5
 8010f2c:	f001 f8fc 	bl	8012128 <uxr_millis>
 8010f30:	2700      	movs	r7, #0
 8010f32:	4605      	mov	r5, r0
 8010f34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f38:	e009      	b.n	8010f4e <wait_session_status+0x4a>
 8010f3a:	f001 f8f5 	bl	8012128 <uxr_millis>
 8010f3e:	1b43      	subs	r3, r0, r5
 8010f40:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	7962      	ldrb	r2, [r4, #5]
 8010f48:	dd3d      	ble.n	8010fc6 <wait_session_status+0xc2>
 8010f4a:	2aff      	cmp	r2, #255	@ 0xff
 8010f4c:	d13b      	bne.n	8010fc6 <wait_session_status+0xc2>
 8010f4e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010f50:	a90a      	add	r1, sp, #40	@ 0x28
 8010f52:	6896      	ldr	r6, [r2, #8]
 8010f54:	6810      	ldr	r0, [r2, #0]
 8010f56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010f58:	47b0      	blx	r6
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d0ed      	beq.n	8010f3a <wait_session_status+0x36>
 8010f5e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8010f62:	a80e      	add	r0, sp, #56	@ 0x38
 8010f64:	f7fb fae4 	bl	800c530 <ucdr_init_buffer>
 8010f68:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8010f6c:	aa09      	add	r2, sp, #36	@ 0x24
 8010f6e:	a90e      	add	r1, sp, #56	@ 0x38
 8010f70:	4620      	mov	r0, r4
 8010f72:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8010f76:	f000 fa9b 	bl	80114b0 <uxr_read_session_header>
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d0dd      	beq.n	8010f3a <wait_session_status+0x36>
 8010f7e:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8010f82:	2100      	movs	r1, #0
 8010f84:	f000 ff8a 	bl	8011e9c <uxr_stream_id_from_raw>
 8010f88:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8010f8c:	9304      	str	r3, [sp, #16]
 8010f8e:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8010f92:	b2c3      	uxtb	r3, r0
 8010f94:	f1b9 0f01 	cmp.w	r9, #1
 8010f98:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8010f9c:	9303      	str	r3, [sp, #12]
 8010f9e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010fa2:	d05d      	beq.n	8011060 <wait_session_status+0x15c>
 8010fa4:	f1b9 0f02 	cmp.w	r9, #2
 8010fa8:	d01a      	beq.n	8010fe0 <wait_session_status+0xdc>
 8010faa:	f1b9 0f00 	cmp.w	r9, #0
 8010fae:	d1c4      	bne.n	8010f3a <wait_session_status+0x36>
 8010fb0:	4649      	mov	r1, r9
 8010fb2:	4648      	mov	r0, r9
 8010fb4:	f000 ff72 	bl	8011e9c <uxr_stream_id_from_raw>
 8010fb8:	a90e      	add	r1, sp, #56	@ 0x38
 8010fba:	4602      	mov	r2, r0
 8010fbc:	900d      	str	r0, [sp, #52]	@ 0x34
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7ff fbcc 	bl	801075c <read_submessage_list>
 8010fc4:	e7b9      	b.n	8010f3a <wait_session_status+0x36>
 8010fc6:	f108 0801 	add.w	r8, r8, #1
 8010fca:	45c3      	cmp	fp, r8
 8010fcc:	d001      	beq.n	8010fd2 <wait_session_status+0xce>
 8010fce:	2aff      	cmp	r2, #255	@ 0xff
 8010fd0:	d0a6      	beq.n	8010f20 <wait_session_status+0x1c>
 8010fd2:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8010fd6:	bf18      	it	ne
 8010fd8:	2001      	movne	r0, #1
 8010fda:	b01f      	add	sp, #124	@ 0x7c
 8010fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	f104 0008 	add.w	r0, r4, #8
 8010fe6:	f001 f839 	bl	801205c <uxr_get_input_reliable_stream>
 8010fea:	9006      	str	r0, [sp, #24]
 8010fec:	2800      	cmp	r0, #0
 8010fee:	d031      	beq.n	8011054 <wait_session_status+0x150>
 8010ff0:	aa0e      	add	r2, sp, #56	@ 0x38
 8010ff2:	4610      	mov	r0, r2
 8010ff4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010ff6:	9207      	str	r2, [sp, #28]
 8010ff8:	f7fb faca 	bl	800c590 <ucdr_buffer_remaining>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8011002:	9000      	str	r0, [sp, #0]
 8011004:	9a07      	ldr	r2, [sp, #28]
 8011006:	9904      	ldr	r1, [sp, #16]
 8011008:	9806      	ldr	r0, [sp, #24]
 801100a:	f007 f9dd 	bl	80183c8 <uxr_receive_reliable_message>
 801100e:	b308      	cbz	r0, 8011054 <wait_session_status+0x150>
 8011010:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011014:	2b00      	cmp	r3, #0
 8011016:	d041      	beq.n	801109c <wait_session_status+0x198>
 8011018:	f8cd 8010 	str.w	r8, [sp, #16]
 801101c:	9507      	str	r5, [sp, #28]
 801101e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011022:	9d06      	ldr	r5, [sp, #24]
 8011024:	f04f 0902 	mov.w	r9, #2
 8011028:	e00a      	b.n	8011040 <wait_session_status+0x13c>
 801102a:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 801102e:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8011032:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8011036:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011038:	a916      	add	r1, sp, #88	@ 0x58
 801103a:	4620      	mov	r0, r4
 801103c:	f7ff fb8e 	bl	801075c <read_submessage_list>
 8011040:	2204      	movs	r2, #4
 8011042:	a916      	add	r1, sp, #88	@ 0x58
 8011044:	4628      	mov	r0, r5
 8011046:	f007 fa39 	bl	80184bc <uxr_next_input_reliable_buffer_available>
 801104a:	2800      	cmp	r0, #0
 801104c:	d1ed      	bne.n	801102a <wait_session_status+0x126>
 801104e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011052:	9d07      	ldr	r5, [sp, #28]
 8011054:	9903      	ldr	r1, [sp, #12]
 8011056:	4632      	mov	r2, r6
 8011058:	4620      	mov	r0, r4
 801105a:	f7ff fa13 	bl	8010484 <write_submessage_acknack.isra.0>
 801105e:	e76c      	b.n	8010f3a <wait_session_status+0x36>
 8011060:	4631      	mov	r1, r6
 8011062:	f104 0008 	add.w	r0, r4, #8
 8011066:	f000 ffef 	bl	8012048 <uxr_get_input_best_effort_stream>
 801106a:	2800      	cmp	r0, #0
 801106c:	f43f af65 	beq.w	8010f3a <wait_session_status+0x36>
 8011070:	9904      	ldr	r1, [sp, #16]
 8011072:	f007 f919 	bl	80182a8 <uxr_receive_best_effort_message>
 8011076:	2800      	cmp	r0, #0
 8011078:	f43f af5f 	beq.w	8010f3a <wait_session_status+0x36>
 801107c:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8011080:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011082:	a90e      	add	r1, sp, #56	@ 0x38
 8011084:	4620      	mov	r0, r4
 8011086:	f7ff fb69 	bl	801075c <read_submessage_list>
 801108a:	e756      	b.n	8010f3a <wait_session_status+0x36>
 801108c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801108e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011092:	47a0      	blx	r4
 8011094:	2001      	movs	r0, #1
 8011096:	b01f      	add	sp, #124	@ 0x7c
 8011098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109c:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 80110a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110a2:	a90e      	add	r1, sp, #56	@ 0x38
 80110a4:	4620      	mov	r0, r4
 80110a6:	f7ff fb59 	bl	801075c <read_submessage_list>
 80110aa:	e7b5      	b.n	8011018 <wait_session_status+0x114>

080110ac <uxr_delete_session_retries>:
 80110ac:	b530      	push	{r4, r5, lr}
 80110ae:	b08f      	sub	sp, #60	@ 0x3c
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	f000 fa3a 	bl	801152c <uxr_session_header_offset>
 80110b8:	2300      	movs	r3, #0
 80110ba:	2210      	movs	r2, #16
 80110bc:	9000      	str	r0, [sp, #0]
 80110be:	a902      	add	r1, sp, #8
 80110c0:	a806      	add	r0, sp, #24
 80110c2:	f7fb fa23 	bl	800c50c <ucdr_init_buffer_origin_offset>
 80110c6:	a906      	add	r1, sp, #24
 80110c8:	4620      	mov	r0, r4
 80110ca:	f000 f981 	bl	80113d0 <uxr_buffer_delete_session>
 80110ce:	2200      	movs	r2, #0
 80110d0:	4611      	mov	r1, r2
 80110d2:	9b06      	ldr	r3, [sp, #24]
 80110d4:	4620      	mov	r0, r4
 80110d6:	f000 f9d5 	bl	8011484 <uxr_stamp_session_header>
 80110da:	a806      	add	r0, sp, #24
 80110dc:	f7fb fa54 	bl	800c588 <ucdr_buffer_length>
 80110e0:	462b      	mov	r3, r5
 80110e2:	4602      	mov	r2, r0
 80110e4:	a902      	add	r1, sp, #8
 80110e6:	4620      	mov	r0, r4
 80110e8:	f7ff ff0c 	bl	8010f04 <wait_session_status>
 80110ec:	b118      	cbz	r0, 80110f6 <uxr_delete_session_retries+0x4a>
 80110ee:	7960      	ldrb	r0, [r4, #5]
 80110f0:	fab0 f080 	clz	r0, r0
 80110f4:	0940      	lsrs	r0, r0, #5
 80110f6:	b00f      	add	sp, #60	@ 0x3c
 80110f8:	bd30      	pop	{r4, r5, pc}
 80110fa:	bf00      	nop

080110fc <uxr_create_session>:
 80110fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011100:	f100 0308 	add.w	r3, r0, #8
 8011104:	b0ab      	sub	sp, #172	@ 0xac
 8011106:	4604      	mov	r4, r0
 8011108:	4618      	mov	r0, r3
 801110a:	9303      	str	r3, [sp, #12]
 801110c:	f000 feec 	bl	8011ee8 <uxr_reset_stream_storage>
 8011110:	4620      	mov	r0, r4
 8011112:	f000 fa0b 	bl	801152c <uxr_session_header_offset>
 8011116:	2300      	movs	r3, #0
 8011118:	9000      	str	r0, [sp, #0]
 801111a:	221c      	movs	r2, #28
 801111c:	a90b      	add	r1, sp, #44	@ 0x2c
 801111e:	a812      	add	r0, sp, #72	@ 0x48
 8011120:	f7fb f9f4 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8011124:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011126:	8a1a      	ldrh	r2, [r3, #16]
 8011128:	3a04      	subs	r2, #4
 801112a:	b292      	uxth	r2, r2
 801112c:	a912      	add	r1, sp, #72	@ 0x48
 801112e:	4620      	mov	r0, r4
 8011130:	f000 f924 	bl	801137c <uxr_buffer_create_session>
 8011134:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011136:	4620      	mov	r0, r4
 8011138:	f000 f990 	bl	801145c <uxr_stamp_create_session_header>
 801113c:	a812      	add	r0, sp, #72	@ 0x48
 801113e:	f7fb fa23 	bl	800c588 <ucdr_buffer_length>
 8011142:	23ff      	movs	r3, #255	@ 0xff
 8011144:	4683      	mov	fp, r0
 8011146:	7163      	strb	r3, [r4, #5]
 8011148:	f04f 080a 	mov.w	r8, #10
 801114c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801114e:	465a      	mov	r2, fp
 8011150:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011154:	a90b      	add	r1, sp, #44	@ 0x2c
 8011156:	47a8      	blx	r5
 8011158:	f000 ffe6 	bl	8012128 <uxr_millis>
 801115c:	2700      	movs	r7, #0
 801115e:	4605      	mov	r5, r0
 8011160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011164:	e009      	b.n	801117a <uxr_create_session+0x7e>
 8011166:	f000 ffdf 	bl	8012128 <uxr_millis>
 801116a:	1b43      	subs	r3, r0, r5
 801116c:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8011170:	2b00      	cmp	r3, #0
 8011172:	7962      	ldrb	r2, [r4, #5]
 8011174:	dd3d      	ble.n	80111f2 <uxr_create_session+0xf6>
 8011176:	2aff      	cmp	r2, #255	@ 0xff
 8011178:	d13b      	bne.n	80111f2 <uxr_create_session+0xf6>
 801117a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801117c:	a907      	add	r1, sp, #28
 801117e:	6896      	ldr	r6, [r2, #8]
 8011180:	6810      	ldr	r0, [r2, #0]
 8011182:	aa08      	add	r2, sp, #32
 8011184:	47b0      	blx	r6
 8011186:	2800      	cmp	r0, #0
 8011188:	d0ed      	beq.n	8011166 <uxr_create_session+0x6a>
 801118a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801118e:	a81a      	add	r0, sp, #104	@ 0x68
 8011190:	f7fb f9ce 	bl	800c530 <ucdr_init_buffer>
 8011194:	f10d 031a 	add.w	r3, sp, #26
 8011198:	aa06      	add	r2, sp, #24
 801119a:	a91a      	add	r1, sp, #104	@ 0x68
 801119c:	4620      	mov	r0, r4
 801119e:	f88d 7018 	strb.w	r7, [sp, #24]
 80111a2:	f000 f985 	bl	80114b0 <uxr_read_session_header>
 80111a6:	2800      	cmp	r0, #0
 80111a8:	d0dd      	beq.n	8011166 <uxr_create_session+0x6a>
 80111aa:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80111ae:	2100      	movs	r1, #0
 80111b0:	f000 fe74 	bl	8011e9c <uxr_stream_id_from_raw>
 80111b4:	f3c0 4907 	ubfx	r9, r0, #16, #8
 80111b8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80111bc:	9302      	str	r3, [sp, #8]
 80111be:	f1b9 0f01 	cmp.w	r9, #1
 80111c2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80111c6:	fa5f fa80 	uxtb.w	sl, r0
 80111ca:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80111ce:	d056      	beq.n	801127e <uxr_create_session+0x182>
 80111d0:	f1b9 0f02 	cmp.w	r9, #2
 80111d4:	d018      	beq.n	8011208 <uxr_create_session+0x10c>
 80111d6:	f1b9 0f00 	cmp.w	r9, #0
 80111da:	d1c4      	bne.n	8011166 <uxr_create_session+0x6a>
 80111dc:	4649      	mov	r1, r9
 80111de:	4648      	mov	r0, r9
 80111e0:	f000 fe5c 	bl	8011e9c <uxr_stream_id_from_raw>
 80111e4:	a91a      	add	r1, sp, #104	@ 0x68
 80111e6:	4602      	mov	r2, r0
 80111e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80111ea:	4620      	mov	r0, r4
 80111ec:	f7ff fab6 	bl	801075c <read_submessage_list>
 80111f0:	e7b9      	b.n	8011166 <uxr_create_session+0x6a>
 80111f2:	f1b8 0801 	subs.w	r8, r8, #1
 80111f6:	d001      	beq.n	80111fc <uxr_create_session+0x100>
 80111f8:	2aff      	cmp	r2, #255	@ 0xff
 80111fa:	d0a7      	beq.n	801114c <uxr_create_session+0x50>
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	d05b      	beq.n	80112b8 <uxr_create_session+0x1bc>
 8011200:	2000      	movs	r0, #0
 8011202:	b02b      	add	sp, #172	@ 0xac
 8011204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011208:	9803      	ldr	r0, [sp, #12]
 801120a:	4631      	mov	r1, r6
 801120c:	f000 ff26 	bl	801205c <uxr_get_input_reliable_stream>
 8011210:	9004      	str	r0, [sp, #16]
 8011212:	b370      	cbz	r0, 8011272 <uxr_create_session+0x176>
 8011214:	aa1a      	add	r2, sp, #104	@ 0x68
 8011216:	4610      	mov	r0, r2
 8011218:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801121a:	9205      	str	r2, [sp, #20]
 801121c:	f7fb f9b8 	bl	800c590 <ucdr_buffer_remaining>
 8011220:	4603      	mov	r3, r0
 8011222:	f10d 0019 	add.w	r0, sp, #25
 8011226:	9000      	str	r0, [sp, #0]
 8011228:	9a05      	ldr	r2, [sp, #20]
 801122a:	9902      	ldr	r1, [sp, #8]
 801122c:	9804      	ldr	r0, [sp, #16]
 801122e:	f007 f8cb 	bl	80183c8 <uxr_receive_reliable_message>
 8011232:	b1f0      	cbz	r0, 8011272 <uxr_create_session+0x176>
 8011234:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d035      	beq.n	80112a8 <uxr_create_session+0x1ac>
 801123c:	f8cd b008 	str.w	fp, [sp, #8]
 8011240:	f04f 0902 	mov.w	r9, #2
 8011244:	f8dd b010 	ldr.w	fp, [sp, #16]
 8011248:	e00a      	b.n	8011260 <uxr_create_session+0x164>
 801124a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801124e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011252:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8011256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011258:	a922      	add	r1, sp, #136	@ 0x88
 801125a:	4620      	mov	r0, r4
 801125c:	f7ff fa7e 	bl	801075c <read_submessage_list>
 8011260:	2204      	movs	r2, #4
 8011262:	a922      	add	r1, sp, #136	@ 0x88
 8011264:	4658      	mov	r0, fp
 8011266:	f007 f929 	bl	80184bc <uxr_next_input_reliable_buffer_available>
 801126a:	2800      	cmp	r0, #0
 801126c:	d1ed      	bne.n	801124a <uxr_create_session+0x14e>
 801126e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011272:	4632      	mov	r2, r6
 8011274:	4651      	mov	r1, sl
 8011276:	4620      	mov	r0, r4
 8011278:	f7ff f904 	bl	8010484 <write_submessage_acknack.isra.0>
 801127c:	e773      	b.n	8011166 <uxr_create_session+0x6a>
 801127e:	9803      	ldr	r0, [sp, #12]
 8011280:	4631      	mov	r1, r6
 8011282:	f000 fee1 	bl	8012048 <uxr_get_input_best_effort_stream>
 8011286:	2800      	cmp	r0, #0
 8011288:	f43f af6d 	beq.w	8011166 <uxr_create_session+0x6a>
 801128c:	9902      	ldr	r1, [sp, #8]
 801128e:	f007 f80b 	bl	80182a8 <uxr_receive_best_effort_message>
 8011292:	2800      	cmp	r0, #0
 8011294:	f43f af67 	beq.w	8011166 <uxr_create_session+0x6a>
 8011298:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801129c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801129e:	a91a      	add	r1, sp, #104	@ 0x68
 80112a0:	4620      	mov	r0, r4
 80112a2:	f7ff fa5b 	bl	801075c <read_submessage_list>
 80112a6:	e75e      	b.n	8011166 <uxr_create_session+0x6a>
 80112a8:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80112ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80112ae:	a91a      	add	r1, sp, #104	@ 0x68
 80112b0:	4620      	mov	r0, r4
 80112b2:	f7ff fa53 	bl	801075c <read_submessage_list>
 80112b6:	e7c1      	b.n	801123c <uxr_create_session+0x140>
 80112b8:	9803      	ldr	r0, [sp, #12]
 80112ba:	f000 fe15 	bl	8011ee8 <uxr_reset_stream_storage>
 80112be:	2001      	movs	r0, #1
 80112c0:	b02b      	add	sp, #172	@ 0xac
 80112c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c6:	bf00      	nop

080112c8 <uxr_prepare_stream_to_write_submessage>:
 80112c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112cc:	b082      	sub	sp, #8
 80112ce:	4606      	mov	r6, r0
 80112d0:	4610      	mov	r0, r2
 80112d2:	4614      	mov	r4, r2
 80112d4:	9101      	str	r1, [sp, #4]
 80112d6:	461f      	mov	r7, r3
 80112d8:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80112dc:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80112e0:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80112e4:	f000 ff1a 	bl	801211c <uxr_submessage_padding>
 80112e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80112ec:	1d21      	adds	r1, r4, #4
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	eb01 0a00 	add.w	sl, r1, r0
 80112f4:	d012      	beq.n	801131c <uxr_prepare_stream_to_write_submessage+0x54>
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d003      	beq.n	8011302 <uxr_prepare_stream_to_write_submessage+0x3a>
 80112fa:	2000      	movs	r0, #0
 80112fc:	b002      	add	sp, #8
 80112fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011302:	4629      	mov	r1, r5
 8011304:	f106 0008 	add.w	r0, r6, #8
 8011308:	f000 fe94 	bl	8012034 <uxr_get_output_reliable_stream>
 801130c:	2800      	cmp	r0, #0
 801130e:	d0f4      	beq.n	80112fa <uxr_prepare_stream_to_write_submessage+0x32>
 8011310:	4651      	mov	r1, sl
 8011312:	463a      	mov	r2, r7
 8011314:	f007 fa88 	bl	8018828 <uxr_prepare_reliable_buffer_to_write>
 8011318:	b968      	cbnz	r0, 8011336 <uxr_prepare_stream_to_write_submessage+0x6e>
 801131a:	e7ee      	b.n	80112fa <uxr_prepare_stream_to_write_submessage+0x32>
 801131c:	4629      	mov	r1, r5
 801131e:	f106 0008 	add.w	r0, r6, #8
 8011322:	f000 fe7f 	bl	8012024 <uxr_get_output_best_effort_stream>
 8011326:	2800      	cmp	r0, #0
 8011328:	d0e7      	beq.n	80112fa <uxr_prepare_stream_to_write_submessage+0x32>
 801132a:	4651      	mov	r1, sl
 801132c:	463a      	mov	r2, r7
 801132e:	f007 f9ad 	bl	801868c <uxr_prepare_best_effort_buffer_to_write>
 8011332:	2800      	cmp	r0, #0
 8011334:	d0e1      	beq.n	80112fa <uxr_prepare_stream_to_write_submessage+0x32>
 8011336:	464b      	mov	r3, r9
 8011338:	b2a2      	uxth	r2, r4
 801133a:	4641      	mov	r1, r8
 801133c:	4638      	mov	r0, r7
 801133e:	f000 fead 	bl	801209c <uxr_buffer_submessage_header>
 8011342:	2001      	movs	r0, #1
 8011344:	b002      	add	sp, #8
 8011346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801134a:	bf00      	nop

0801134c <uxr_init_session_info>:
 801134c:	2300      	movs	r3, #0
 801134e:	f361 0307 	bfi	r3, r1, #0, #8
 8011352:	0e11      	lsrs	r1, r2, #24
 8011354:	f361 230f 	bfi	r3, r1, #8, #8
 8011358:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801135c:	f361 4317 	bfi	r3, r1, #16, #8
 8011360:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8011364:	f361 631f 	bfi	r3, r1, #24, #8
 8011368:	f04f 0c09 	mov.w	ip, #9
 801136c:	21ff      	movs	r1, #255	@ 0xff
 801136e:	6003      	str	r3, [r0, #0]
 8011370:	7102      	strb	r2, [r0, #4]
 8011372:	f8a0 c006 	strh.w	ip, [r0, #6]
 8011376:	7141      	strb	r1, [r0, #5]
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop

0801137c <uxr_buffer_create_session>:
 801137c:	b530      	push	{r4, r5, lr}
 801137e:	4d13      	ldr	r5, [pc, #76]	@ (80113cc <uxr_buffer_create_session+0x50>)
 8011380:	b089      	sub	sp, #36	@ 0x24
 8011382:	2300      	movs	r3, #0
 8011384:	9307      	str	r3, [sp, #28]
 8011386:	f8ad 201c 	strh.w	r2, [sp, #28]
 801138a:	682a      	ldr	r2, [r5, #0]
 801138c:	9200      	str	r2, [sp, #0]
 801138e:	460c      	mov	r4, r1
 8011390:	2201      	movs	r2, #1
 8011392:	88a9      	ldrh	r1, [r5, #4]
 8011394:	9301      	str	r3, [sp, #4]
 8011396:	80c2      	strh	r2, [r0, #6]
 8011398:	f8ad 1006 	strh.w	r1, [sp, #6]
 801139c:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80113a0:	7800      	ldrb	r0, [r0, #0]
 80113a2:	9303      	str	r3, [sp, #12]
 80113a4:	f88d 2004 	strb.w	r2, [sp, #4]
 80113a8:	9102      	str	r1, [sp, #8]
 80113aa:	2210      	movs	r2, #16
 80113ac:	4619      	mov	r1, r3
 80113ae:	f88d 000c 	strb.w	r0, [sp, #12]
 80113b2:	4620      	mov	r0, r4
 80113b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80113b8:	9306      	str	r3, [sp, #24]
 80113ba:	f000 fe6f 	bl	801209c <uxr_buffer_submessage_header>
 80113be:	4669      	mov	r1, sp
 80113c0:	4620      	mov	r0, r4
 80113c2:	f001 fe8f 	bl	80130e4 <uxr_serialize_CREATE_CLIENT_Payload>
 80113c6:	b009      	add	sp, #36	@ 0x24
 80113c8:	bd30      	pop	{r4, r5, pc}
 80113ca:	bf00      	nop
 80113cc:	0801d3bc 	.word	0x0801d3bc

080113d0 <uxr_buffer_delete_session>:
 80113d0:	b510      	push	{r4, lr}
 80113d2:	4a0c      	ldr	r2, [pc, #48]	@ (8011404 <uxr_buffer_delete_session+0x34>)
 80113d4:	b082      	sub	sp, #8
 80113d6:	460c      	mov	r4, r1
 80113d8:	2302      	movs	r3, #2
 80113da:	8911      	ldrh	r1, [r2, #8]
 80113dc:	80c3      	strh	r3, [r0, #6]
 80113de:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80113e2:	2300      	movs	r3, #0
 80113e4:	2204      	movs	r2, #4
 80113e6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80113ea:	4620      	mov	r0, r4
 80113ec:	2103      	movs	r1, #3
 80113ee:	f8ad c004 	strh.w	ip, [sp, #4]
 80113f2:	f000 fe53 	bl	801209c <uxr_buffer_submessage_header>
 80113f6:	a901      	add	r1, sp, #4
 80113f8:	4620      	mov	r0, r4
 80113fa:	f001 ff2b 	bl	8013254 <uxr_serialize_DELETE_Payload>
 80113fe:	b002      	add	sp, #8
 8011400:	bd10      	pop	{r4, pc}
 8011402:	bf00      	nop
 8011404:	0801d3bc 	.word	0x0801d3bc

08011408 <uxr_read_create_session_status>:
 8011408:	b510      	push	{r4, lr}
 801140a:	460b      	mov	r3, r1
 801140c:	b088      	sub	sp, #32
 801140e:	4604      	mov	r4, r0
 8011410:	a901      	add	r1, sp, #4
 8011412:	4618      	mov	r0, r3
 8011414:	f001 ff2e 	bl	8013274 <uxr_deserialize_STATUS_AGENT_Payload>
 8011418:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801141c:	7163      	strb	r3, [r4, #5]
 801141e:	b008      	add	sp, #32
 8011420:	bd10      	pop	{r4, pc}
 8011422:	bf00      	nop

08011424 <uxr_read_delete_session_status>:
 8011424:	b510      	push	{r4, lr}
 8011426:	460b      	mov	r3, r1
 8011428:	b082      	sub	sp, #8
 801142a:	4604      	mov	r4, r0
 801142c:	4669      	mov	r1, sp
 801142e:	4618      	mov	r0, r3
 8011430:	f001 ff50 	bl	80132d4 <uxr_deserialize_STATUS_Payload>
 8011434:	88e3      	ldrh	r3, [r4, #6]
 8011436:	2b02      	cmp	r3, #2
 8011438:	d001      	beq.n	801143e <uxr_read_delete_session_status+0x1a>
 801143a:	b002      	add	sp, #8
 801143c:	bd10      	pop	{r4, pc}
 801143e:	f10d 0002 	add.w	r0, sp, #2
 8011442:	f7fe fd67 	bl	800ff14 <uxr_object_id_from_raw>
 8011446:	f8bd 3000 	ldrh.w	r3, [sp]
 801144a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801144e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011452:	bf08      	it	eq
 8011454:	7162      	strbeq	r2, [r4, #5]
 8011456:	b002      	add	sp, #8
 8011458:	bd10      	pop	{r4, pc}
 801145a:	bf00      	nop

0801145c <uxr_stamp_create_session_header>:
 801145c:	b510      	push	{r4, lr}
 801145e:	2208      	movs	r2, #8
 8011460:	b08a      	sub	sp, #40	@ 0x28
 8011462:	4604      	mov	r4, r0
 8011464:	eb0d 0002 	add.w	r0, sp, r2
 8011468:	f7fb f862 	bl	800c530 <ucdr_init_buffer>
 801146c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011470:	9400      	str	r4, [sp, #0]
 8011472:	2300      	movs	r3, #0
 8011474:	461a      	mov	r2, r3
 8011476:	a802      	add	r0, sp, #8
 8011478:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801147c:	f001 f80c 	bl	8012498 <uxr_serialize_message_header>
 8011480:	b00a      	add	sp, #40	@ 0x28
 8011482:	bd10      	pop	{r4, pc}

08011484 <uxr_stamp_session_header>:
 8011484:	b570      	push	{r4, r5, r6, lr}
 8011486:	4604      	mov	r4, r0
 8011488:	b08a      	sub	sp, #40	@ 0x28
 801148a:	4616      	mov	r6, r2
 801148c:	2208      	movs	r2, #8
 801148e:	eb0d 0002 	add.w	r0, sp, r2
 8011492:	460d      	mov	r5, r1
 8011494:	4619      	mov	r1, r3
 8011496:	f7fb f84b 	bl	800c530 <ucdr_init_buffer>
 801149a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801149e:	9400      	str	r4, [sp, #0]
 80114a0:	4633      	mov	r3, r6
 80114a2:	462a      	mov	r2, r5
 80114a4:	a802      	add	r0, sp, #8
 80114a6:	f000 fff7 	bl	8012498 <uxr_serialize_message_header>
 80114aa:	b00a      	add	sp, #40	@ 0x28
 80114ac:	bd70      	pop	{r4, r5, r6, pc}
 80114ae:	bf00      	nop

080114b0 <uxr_read_session_header>:
 80114b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114b2:	4607      	mov	r7, r0
 80114b4:	b085      	sub	sp, #20
 80114b6:	4608      	mov	r0, r1
 80114b8:	460c      	mov	r4, r1
 80114ba:	4615      	mov	r5, r2
 80114bc:	461e      	mov	r6, r3
 80114be:	f7fb f867 	bl	800c590 <ucdr_buffer_remaining>
 80114c2:	2808      	cmp	r0, #8
 80114c4:	d802      	bhi.n	80114cc <uxr_read_session_header+0x1c>
 80114c6:	2000      	movs	r0, #0
 80114c8:	b005      	add	sp, #20
 80114ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114cc:	ab03      	add	r3, sp, #12
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	462a      	mov	r2, r5
 80114d2:	4633      	mov	r3, r6
 80114d4:	f10d 010b 	add.w	r1, sp, #11
 80114d8:	4620      	mov	r0, r4
 80114da:	f000 fffb 	bl	80124d4 <uxr_deserialize_message_header>
 80114de:	783a      	ldrb	r2, [r7, #0]
 80114e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d1ee      	bne.n	80114c6 <uxr_read_session_header+0x16>
 80114e8:	061b      	lsls	r3, r3, #24
 80114ea:	d41c      	bmi.n	8011526 <uxr_read_session_header+0x76>
 80114ec:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80114f0:	787b      	ldrb	r3, [r7, #1]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d003      	beq.n	80114fe <uxr_read_session_header+0x4e>
 80114f6:	2001      	movs	r0, #1
 80114f8:	f080 0001 	eor.w	r0, r0, #1
 80114fc:	e7e4      	b.n	80114c8 <uxr_read_session_header+0x18>
 80114fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011502:	78bb      	ldrb	r3, [r7, #2]
 8011504:	429a      	cmp	r2, r3
 8011506:	f107 0102 	add.w	r1, r7, #2
 801150a:	d1f4      	bne.n	80114f6 <uxr_read_session_header+0x46>
 801150c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011510:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011514:	429a      	cmp	r2, r3
 8011516:	d1ee      	bne.n	80114f6 <uxr_read_session_header+0x46>
 8011518:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801151c:	784b      	ldrb	r3, [r1, #1]
 801151e:	429a      	cmp	r2, r3
 8011520:	d1e9      	bne.n	80114f6 <uxr_read_session_header+0x46>
 8011522:	2000      	movs	r0, #0
 8011524:	e7e8      	b.n	80114f8 <uxr_read_session_header+0x48>
 8011526:	2001      	movs	r0, #1
 8011528:	e7ce      	b.n	80114c8 <uxr_read_session_header+0x18>
 801152a:	bf00      	nop

0801152c <uxr_session_header_offset>:
 801152c:	f990 3000 	ldrsb.w	r3, [r0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	bfb4      	ite	lt
 8011534:	2004      	movlt	r0, #4
 8011536:	2008      	movge	r0, #8
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop

0801153c <uxr_init_base_object_request>:
 801153c:	b510      	push	{r4, lr}
 801153e:	88c3      	ldrh	r3, [r0, #6]
 8011540:	b082      	sub	sp, #8
 8011542:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011546:	9101      	str	r1, [sp, #4]
 8011548:	f1a3 010a 	sub.w	r1, r3, #10
 801154c:	b289      	uxth	r1, r1
 801154e:	42a1      	cmp	r1, r4
 8011550:	d80e      	bhi.n	8011570 <uxr_init_base_object_request+0x34>
 8011552:	3301      	adds	r3, #1
 8011554:	b29c      	uxth	r4, r3
 8011556:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801155a:	b2db      	uxtb	r3, r3
 801155c:	80c4      	strh	r4, [r0, #6]
 801155e:	9801      	ldr	r0, [sp, #4]
 8011560:	7011      	strb	r1, [r2, #0]
 8011562:	7053      	strb	r3, [r2, #1]
 8011564:	1c91      	adds	r1, r2, #2
 8011566:	f7fe fce9 	bl	800ff3c <uxr_object_id_to_raw>
 801156a:	4620      	mov	r0, r4
 801156c:	b002      	add	sp, #8
 801156e:	bd10      	pop	{r4, pc}
 8011570:	230a      	movs	r3, #10
 8011572:	2100      	movs	r1, #0
 8011574:	461c      	mov	r4, r3
 8011576:	e7f1      	b.n	801155c <uxr_init_base_object_request+0x20>

08011578 <uxr_parse_base_object_request>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	4604      	mov	r4, r0
 801157c:	3002      	adds	r0, #2
 801157e:	460d      	mov	r5, r1
 8011580:	4616      	mov	r6, r2
 8011582:	f7fe fcc7 	bl	800ff14 <uxr_object_id_from_raw>
 8011586:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801158a:	8028      	strh	r0, [r5, #0]
 801158c:	806b      	strh	r3, [r5, #2]
 801158e:	8823      	ldrh	r3, [r4, #0]
 8011590:	ba5b      	rev16	r3, r3
 8011592:	8033      	strh	r3, [r6, #0]
 8011594:	bd70      	pop	{r4, r5, r6, pc}
 8011596:	bf00      	nop

08011598 <uxr_init_framing_io>:
 8011598:	2300      	movs	r3, #0
 801159a:	7041      	strb	r1, [r0, #1]
 801159c:	7003      	strb	r3, [r0, #0]
 801159e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop

080115a4 <uxr_write_framed_msg>:
 80115a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a8:	f890 c001 	ldrb.w	ip, [r0, #1]
 80115ac:	4617      	mov	r7, r2
 80115ae:	227e      	movs	r2, #126	@ 0x7e
 80115b0:	b085      	sub	sp, #20
 80115b2:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 80115b6:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 80115ba:	2a01      	cmp	r2, #1
 80115bc:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80115c0:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80115c4:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80115c8:	4604      	mov	r4, r0
 80115ca:	460e      	mov	r6, r1
 80115cc:	469a      	mov	sl, r3
 80115ce:	f240 812e 	bls.w	801182e <uxr_write_framed_msg+0x28a>
 80115d2:	2003      	movs	r0, #3
 80115d4:	2102      	movs	r1, #2
 80115d6:	f04f 0905 	mov.w	r9, #5
 80115da:	2204      	movs	r2, #4
 80115dc:	4686      	mov	lr, r0
 80115de:	460b      	mov	r3, r1
 80115e0:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 80115e4:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 80115e8:	f1bc 0f01 	cmp.w	ip, #1
 80115ec:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80115f0:	4421      	add	r1, r4
 80115f2:	f240 8110 	bls.w	8011816 <uxr_write_framed_msg+0x272>
 80115f6:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80115fa:	fa5f fc8b 	uxtb.w	ip, fp
 80115fe:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8011602:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 8011606:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 801160a:	f1be 0f01 	cmp.w	lr, #1
 801160e:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 8011612:	b2ed      	uxtb	r5, r5
 8011614:	d94c      	bls.n	80116b0 <uxr_write_framed_msg+0x10c>
 8011616:	4420      	add	r0, r4
 8011618:	2d01      	cmp	r5, #1
 801161a:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801161e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011622:	d95d      	bls.n	80116e0 <uxr_write_framed_msg+0x13c>
 8011624:	18a0      	adds	r0, r4, r2
 8011626:	3201      	adds	r2, #1
 8011628:	b2d2      	uxtb	r2, r2
 801162a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801162e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011632:	f1bb 0f00 	cmp.w	fp, #0
 8011636:	f000 8108 	beq.w	801184a <uxr_write_framed_msg+0x2a6>
 801163a:	f04f 0c00 	mov.w	ip, #0
 801163e:	4661      	mov	r1, ip
 8011640:	46de      	mov	lr, fp
 8011642:	46e3      	mov	fp, ip
 8011644:	46d4      	mov	ip, sl
 8011646:	468a      	mov	sl, r1
 8011648:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 8011854 <uxr_write_framed_msg+0x2b0>
 801164c:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8011650:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011654:	2901      	cmp	r1, #1
 8011656:	d91b      	bls.n	8011690 <uxr_write_framed_msg+0xec>
 8011658:	2a29      	cmp	r2, #41	@ 0x29
 801165a:	d84e      	bhi.n	80116fa <uxr_write_framed_msg+0x156>
 801165c:	18a1      	adds	r1, r4, r2
 801165e:	3201      	adds	r2, #1
 8011660:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011664:	b2d2      	uxtb	r2, r2
 8011666:	ea8b 0303 	eor.w	r3, fp, r3
 801166a:	b2db      	uxtb	r3, r3
 801166c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011670:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8011674:	f10a 0a01 	add.w	sl, sl, #1
 8011678:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 801167c:	45d6      	cmp	lr, sl
 801167e:	d95a      	bls.n	8011736 <uxr_write_framed_msg+0x192>
 8011680:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8011684:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011688:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801168c:	2901      	cmp	r1, #1
 801168e:	d8e3      	bhi.n	8011658 <uxr_write_framed_msg+0xb4>
 8011690:	1c51      	adds	r1, r2, #1
 8011692:	b2c9      	uxtb	r1, r1
 8011694:	2929      	cmp	r1, #41	@ 0x29
 8011696:	d830      	bhi.n	80116fa <uxr_write_framed_msg+0x156>
 8011698:	18a1      	adds	r1, r4, r2
 801169a:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 801169e:	3202      	adds	r2, #2
 80116a0:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80116a4:	f083 0020 	eor.w	r0, r3, #32
 80116a8:	b2d2      	uxtb	r2, r2
 80116aa:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 80116ae:	e7da      	b.n	8011666 <uxr_write_framed_msg+0xc2>
 80116b0:	eb04 0e00 	add.w	lr, r4, r0
 80116b4:	f08c 0c20 	eor.w	ip, ip, #32
 80116b8:	1c82      	adds	r2, r0, #2
 80116ba:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 80116be:	b2d2      	uxtb	r2, r2
 80116c0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80116c4:	2d01      	cmp	r5, #1
 80116c6:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 80116ca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116ce:	d907      	bls.n	80116e0 <uxr_write_framed_msg+0x13c>
 80116d0:	4422      	add	r2, r4
 80116d2:	3003      	adds	r0, #3
 80116d4:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 80116d8:	b2c2      	uxtb	r2, r0
 80116da:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116de:	e7ac      	b.n	801163a <uxr_write_framed_msg+0x96>
 80116e0:	18a0      	adds	r0, r4, r2
 80116e2:	f081 0120 	eor.w	r1, r1, #32
 80116e6:	3202      	adds	r2, #2
 80116e8:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 80116ec:	b2d2      	uxtb	r2, r2
 80116ee:	217d      	movs	r1, #125	@ 0x7d
 80116f0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80116f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116f8:	e79f      	b.n	801163a <uxr_write_framed_msg+0x96>
 80116fa:	e9cd ba00 	strd	fp, sl, [sp]
 80116fe:	2500      	movs	r5, #0
 8011700:	46e2      	mov	sl, ip
 8011702:	46f3      	mov	fp, lr
 8011704:	e000      	b.n	8011708 <uxr_write_framed_msg+0x164>
 8011706:	b190      	cbz	r0, 801172e <uxr_write_framed_msg+0x18a>
 8011708:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801170c:	1b52      	subs	r2, r2, r5
 801170e:	4643      	mov	r3, r8
 8011710:	4421      	add	r1, r4
 8011712:	4638      	mov	r0, r7
 8011714:	47b0      	blx	r6
 8011716:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801171a:	4405      	add	r5, r0
 801171c:	4295      	cmp	r5, r2
 801171e:	d3f2      	bcc.n	8011706 <uxr_write_framed_msg+0x162>
 8011720:	46d4      	mov	ip, sl
 8011722:	46de      	mov	lr, fp
 8011724:	f8dd a004 	ldr.w	sl, [sp, #4]
 8011728:	f8dd b000 	ldr.w	fp, [sp]
 801172c:	d06f      	beq.n	801180e <uxr_write_framed_msg+0x26a>
 801172e:	2000      	movs	r0, #0
 8011730:	b005      	add	sp, #20
 8011732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011736:	46dc      	mov	ip, fp
 8011738:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801173c:	f8ad c00c 	strh.w	ip, [sp, #12]
 8011740:	46f3      	mov	fp, lr
 8011742:	fa5f fc8c 	uxtb.w	ip, ip
 8011746:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801174a:	2b01      	cmp	r3, #1
 801174c:	f04f 0900 	mov.w	r9, #0
 8011750:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 8011754:	d930      	bls.n	80117b8 <uxr_write_framed_msg+0x214>
 8011756:	2a29      	cmp	r2, #41	@ 0x29
 8011758:	d91c      	bls.n	8011794 <uxr_write_framed_msg+0x1f0>
 801175a:	2500      	movs	r5, #0
 801175c:	e001      	b.n	8011762 <uxr_write_framed_msg+0x1be>
 801175e:	2800      	cmp	r0, #0
 8011760:	d0e5      	beq.n	801172e <uxr_write_framed_msg+0x18a>
 8011762:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011766:	1b52      	subs	r2, r2, r5
 8011768:	4643      	mov	r3, r8
 801176a:	4421      	add	r1, r4
 801176c:	4638      	mov	r0, r7
 801176e:	47b0      	blx	r6
 8011770:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011774:	4405      	add	r5, r0
 8011776:	4295      	cmp	r5, r2
 8011778:	d3f1      	bcc.n	801175e <uxr_write_framed_msg+0x1ba>
 801177a:	d1d8      	bne.n	801172e <uxr_write_framed_msg+0x18a>
 801177c:	f109 0310 	add.w	r3, r9, #16
 8011780:	446b      	add	r3, sp
 8011782:	2200      	movs	r2, #0
 8011784:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 8011788:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801178c:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8011790:	2b01      	cmp	r3, #1
 8011792:	d911      	bls.n	80117b8 <uxr_write_framed_msg+0x214>
 8011794:	18a3      	adds	r3, r4, r2
 8011796:	3201      	adds	r2, #1
 8011798:	b2d2      	uxtb	r2, r2
 801179a:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 801179e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117a2:	f1b9 0f00 	cmp.w	r9, #0
 80117a6:	d119      	bne.n	80117dc <uxr_write_framed_msg+0x238>
 80117a8:	f89d c00d 	ldrb.w	ip, [sp, #13]
 80117ac:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	f04f 0901 	mov.w	r9, #1
 80117b6:	d8ce      	bhi.n	8011756 <uxr_write_framed_msg+0x1b2>
 80117b8:	1c53      	adds	r3, r2, #1
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b29      	cmp	r3, #41	@ 0x29
 80117be:	d8cc      	bhi.n	801175a <uxr_write_framed_msg+0x1b6>
 80117c0:	18a3      	adds	r3, r4, r2
 80117c2:	3202      	adds	r2, #2
 80117c4:	f08c 0c20 	eor.w	ip, ip, #32
 80117c8:	b2d2      	uxtb	r2, r2
 80117ca:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 80117ce:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 80117d2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117d6:	f1b9 0f00 	cmp.w	r9, #0
 80117da:	d0e5      	beq.n	80117a8 <uxr_write_framed_msg+0x204>
 80117dc:	2500      	movs	r5, #0
 80117de:	e001      	b.n	80117e4 <uxr_write_framed_msg+0x240>
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d0a4      	beq.n	801172e <uxr_write_framed_msg+0x18a>
 80117e4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80117e8:	1b52      	subs	r2, r2, r5
 80117ea:	4643      	mov	r3, r8
 80117ec:	4421      	add	r1, r4
 80117ee:	4638      	mov	r0, r7
 80117f0:	47b0      	blx	r6
 80117f2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80117f6:	4405      	add	r5, r0
 80117f8:	4295      	cmp	r5, r2
 80117fa:	d3f1      	bcc.n	80117e0 <uxr_write_framed_msg+0x23c>
 80117fc:	d197      	bne.n	801172e <uxr_write_framed_msg+0x18a>
 80117fe:	2300      	movs	r3, #0
 8011800:	fa1f f08b 	uxth.w	r0, fp
 8011804:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011808:	b005      	add	sp, #20
 801180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180e:	2300      	movs	r3, #0
 8011810:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011814:	e732      	b.n	801167c <uxr_write_framed_msg+0xd8>
 8011816:	44a6      	add	lr, r4
 8011818:	f085 0520 	eor.w	r5, r5, #32
 801181c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011820:	4610      	mov	r0, r2
 8011822:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8011826:	464a      	mov	r2, r9
 8011828:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 801182c:	e6e5      	b.n	80115fa <uxr_write_framed_msg+0x56>
 801182e:	f08c 0c20 	eor.w	ip, ip, #32
 8011832:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 8011836:	2103      	movs	r1, #3
 8011838:	2004      	movs	r0, #4
 801183a:	f04f 0906 	mov.w	r9, #6
 801183e:	2205      	movs	r2, #5
 8011840:	4686      	mov	lr, r0
 8011842:	460b      	mov	r3, r1
 8011844:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011848:	e6ca      	b.n	80115e0 <uxr_write_framed_msg+0x3c>
 801184a:	f8ad b00c 	strh.w	fp, [sp, #12]
 801184e:	46dc      	mov	ip, fp
 8011850:	e779      	b.n	8011746 <uxr_write_framed_msg+0x1a2>
 8011852:	bf00      	nop
 8011854:	0801e630 	.word	0x0801e630

08011858 <uxr_framing_read_transport>:
 8011858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801185c:	4604      	mov	r4, r0
 801185e:	b083      	sub	sp, #12
 8011860:	461f      	mov	r7, r3
 8011862:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011866:	4689      	mov	r9, r1
 8011868:	4692      	mov	sl, r2
 801186a:	f000 fc5d 	bl	8012128 <uxr_millis>
 801186e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011872:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011876:	42b3      	cmp	r3, r6
 8011878:	4680      	mov	r8, r0
 801187a:	d062      	beq.n	8011942 <uxr_framing_read_transport+0xea>
 801187c:	d81c      	bhi.n	80118b8 <uxr_framing_read_transport+0x60>
 801187e:	1e75      	subs	r5, r6, #1
 8011880:	1aed      	subs	r5, r5, r3
 8011882:	b2ed      	uxtb	r5, r5
 8011884:	2600      	movs	r6, #0
 8011886:	455d      	cmp	r5, fp
 8011888:	d81f      	bhi.n	80118ca <uxr_framing_read_transport+0x72>
 801188a:	19ab      	adds	r3, r5, r6
 801188c:	455b      	cmp	r3, fp
 801188e:	bf84      	itt	hi
 8011890:	ebab 0b05 	subhi.w	fp, fp, r5
 8011894:	fa5f f68b 	uxtbhi.w	r6, fp
 8011898:	b9e5      	cbnz	r5, 80118d4 <uxr_framing_read_transport+0x7c>
 801189a:	f04f 0b00 	mov.w	fp, #0
 801189e:	f000 fc43 	bl	8012128 <uxr_millis>
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	eba0 0108 	sub.w	r1, r0, r8
 80118a8:	1a5b      	subs	r3, r3, r1
 80118aa:	4658      	mov	r0, fp
 80118ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80118b0:	603b      	str	r3, [r7, #0]
 80118b2:	b003      	add	sp, #12
 80118b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b8:	2e00      	cmp	r6, #0
 80118ba:	d04a      	beq.n	8011952 <uxr_framing_read_transport+0xfa>
 80118bc:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80118c0:	b2dd      	uxtb	r5, r3
 80118c2:	3e01      	subs	r6, #1
 80118c4:	455d      	cmp	r5, fp
 80118c6:	b2f6      	uxtb	r6, r6
 80118c8:	d9df      	bls.n	801188a <uxr_framing_read_transport+0x32>
 80118ca:	fa5f f58b 	uxtb.w	r5, fp
 80118ce:	2600      	movs	r6, #0
 80118d0:	2d00      	cmp	r5, #0
 80118d2:	d0e2      	beq.n	801189a <uxr_framing_read_transport+0x42>
 80118d4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80118d8:	3102      	adds	r1, #2
 80118da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	4421      	add	r1, r4
 80118e2:	462a      	mov	r2, r5
 80118e4:	4650      	mov	r0, sl
 80118e6:	47c8      	blx	r9
 80118e8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80118ec:	4a1b      	ldr	r2, [pc, #108]	@ (801195c <uxr_framing_read_transport+0x104>)
 80118ee:	4403      	add	r3, r0
 80118f0:	0859      	lsrs	r1, r3, #1
 80118f2:	4683      	mov	fp, r0
 80118f4:	fba2 0101 	umull	r0, r1, r2, r1
 80118f8:	0889      	lsrs	r1, r1, #2
 80118fa:	222a      	movs	r2, #42	@ 0x2a
 80118fc:	fb02 3111 	mls	r1, r2, r1, r3
 8011900:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011904:	f1bb 0f00 	cmp.w	fp, #0
 8011908:	d0c7      	beq.n	801189a <uxr_framing_read_transport+0x42>
 801190a:	45ab      	cmp	fp, r5
 801190c:	d1c7      	bne.n	801189e <uxr_framing_read_transport+0x46>
 801190e:	2e00      	cmp	r6, #0
 8011910:	d0c5      	beq.n	801189e <uxr_framing_read_transport+0x46>
 8011912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	3102      	adds	r1, #2
 8011918:	4632      	mov	r2, r6
 801191a:	4421      	add	r1, r4
 801191c:	2300      	movs	r3, #0
 801191e:	4650      	mov	r0, sl
 8011920:	47c8      	blx	r9
 8011922:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011926:	4a0d      	ldr	r2, [pc, #52]	@ (801195c <uxr_framing_read_transport+0x104>)
 8011928:	4403      	add	r3, r0
 801192a:	0859      	lsrs	r1, r3, #1
 801192c:	fba2 2101 	umull	r2, r1, r2, r1
 8011930:	0889      	lsrs	r1, r1, #2
 8011932:	222a      	movs	r2, #42	@ 0x2a
 8011934:	fb02 3311 	mls	r3, r2, r1, r3
 8011938:	eb00 0b05 	add.w	fp, r0, r5
 801193c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011940:	e7ad      	b.n	801189e <uxr_framing_read_transport+0x46>
 8011942:	2600      	movs	r6, #0
 8011944:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011948:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801194a:	d9be      	bls.n	80118ca <uxr_framing_read_transport+0x72>
 801194c:	2529      	movs	r5, #41	@ 0x29
 801194e:	2102      	movs	r1, #2
 8011950:	e7c3      	b.n	80118da <uxr_framing_read_transport+0x82>
 8011952:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 8011956:	b2dd      	uxtb	r5, r3
 8011958:	e795      	b.n	8011886 <uxr_framing_read_transport+0x2e>
 801195a:	bf00      	nop
 801195c:	30c30c31 	.word	0x30c30c31

08011960 <uxr_read_framed_msg>:
 8011960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011964:	461d      	mov	r5, r3
 8011966:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 801196a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801196e:	b085      	sub	sp, #20
 8011970:	459c      	cmp	ip, r3
 8011972:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8011976:	4604      	mov	r4, r0
 8011978:	460f      	mov	r7, r1
 801197a:	4616      	mov	r6, r2
 801197c:	f000 81ae 	beq.w	8011cdc <uxr_read_framed_msg+0x37c>
 8011980:	2000      	movs	r0, #0
 8011982:	4639      	mov	r1, r7
 8011984:	2800      	cmp	r0, #0
 8011986:	d138      	bne.n	80119fa <uxr_read_framed_msg+0x9a>
 8011988:	468a      	mov	sl, r1
 801198a:	7823      	ldrb	r3, [r4, #0]
 801198c:	2b07      	cmp	r3, #7
 801198e:	d8fd      	bhi.n	801198c <uxr_read_framed_msg+0x2c>
 8011990:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011994:	0116013b 	.word	0x0116013b
 8011998:	00cd00f0 	.word	0x00cd00f0
 801199c:	005a00a0 	.word	0x005a00a0
 80119a0:	00080037 	.word	0x00080037
 80119a4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80119a8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80119ac:	4290      	cmp	r0, r2
 80119ae:	f000 8167 	beq.w	8011c80 <uxr_read_framed_msg+0x320>
 80119b2:	18a3      	adds	r3, r4, r2
 80119b4:	1c57      	adds	r7, r2, #1
 80119b6:	49c7      	ldr	r1, [pc, #796]	@ (8011cd4 <uxr_read_framed_msg+0x374>)
 80119b8:	f893 c002 	ldrb.w	ip, [r3, #2]
 80119bc:	087b      	lsrs	r3, r7, #1
 80119be:	fba1 8303 	umull	r8, r3, r1, r3
 80119c2:	089b      	lsrs	r3, r3, #2
 80119c4:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80119c8:	fb08 7313 	mls	r3, r8, r3, r7
 80119cc:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80119d0:	b2df      	uxtb	r7, r3
 80119d2:	f000 81b2 	beq.w	8011d3a <uxr_read_framed_msg+0x3da>
 80119d6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80119da:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 80119de:	f000 8220 	beq.w	8011e22 <uxr_read_framed_msg+0x4c2>
 80119e2:	4661      	mov	r1, ip
 80119e4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80119e6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80119e8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	2100      	movs	r1, #0
 80119f0:	429a      	cmp	r2, r3
 80119f2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80119f4:	7021      	strb	r1, [r4, #0]
 80119f6:	f000 8198 	beq.w	8011d2a <uxr_read_framed_msg+0x3ca>
 80119fa:	2000      	movs	r0, #0
 80119fc:	b005      	add	sp, #20
 80119fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a02:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8011a06:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011a0a:	4297      	cmp	r7, r2
 8011a0c:	f000 8148 	beq.w	8011ca0 <uxr_read_framed_msg+0x340>
 8011a10:	18a3      	adds	r3, r4, r2
 8011a12:	f102 0c01 	add.w	ip, r2, #1
 8011a16:	49af      	ldr	r1, [pc, #700]	@ (8011cd4 <uxr_read_framed_msg+0x374>)
 8011a18:	7898      	ldrb	r0, [r3, #2]
 8011a1a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011a1e:	fba1 8303 	umull	r8, r3, r1, r3
 8011a22:	089b      	lsrs	r3, r3, #2
 8011a24:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011a28:	fb08 c313 	mls	r3, r8, r3, ip
 8011a2c:	287d      	cmp	r0, #125	@ 0x7d
 8011a2e:	fa5f fc83 	uxtb.w	ip, r3
 8011a32:	f000 8194 	beq.w	8011d5e <uxr_read_framed_msg+0x3fe>
 8011a36:	287e      	cmp	r0, #126	@ 0x7e
 8011a38:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011a3c:	f000 8200 	beq.w	8011e40 <uxr_read_framed_msg+0x4e0>
 8011a40:	2307      	movs	r3, #7
 8011a42:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8011a44:	7023      	strb	r3, [r4, #0]
 8011a46:	e7a0      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011a48:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011a4a:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8011a4c:	429f      	cmp	r7, r3
 8011a4e:	f240 8164 	bls.w	8011d1a <uxr_read_framed_msg+0x3ba>
 8011a52:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8011cd4 <uxr_read_framed_msg+0x374>
 8011a56:	f8cd a00c 	str.w	sl, [sp, #12]
 8011a5a:	212a      	movs	r1, #42	@ 0x2a
 8011a5c:	e01f      	b.n	8011a9e <uxr_read_framed_msg+0x13e>
 8011a5e:	f89a e002 	ldrb.w	lr, [sl, #2]
 8011a62:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8011a66:	f000 80ea 	beq.w	8011c3e <uxr_read_framed_msg+0x2de>
 8011a6a:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011a6e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011a72:	f000 8142 	beq.w	8011cfa <uxr_read_framed_msg+0x39a>
 8011a76:	f805 e003 	strb.w	lr, [r5, r3]
 8011a7a:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8011a7c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011a7e:	4f96      	ldr	r7, [pc, #600]	@ (8011cd8 <uxr_read_framed_msg+0x378>)
 8011a80:	ea80 020e 	eor.w	r2, r0, lr
 8011a84:	b2d2      	uxtb	r2, r2
 8011a86:	3301      	adds	r3, #1
 8011a88:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8011a8c:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8011a94:	42bb      	cmp	r3, r7
 8011a96:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011a98:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011a9a:	f080 80e7 	bcs.w	8011c6c <uxr_read_framed_msg+0x30c>
 8011a9e:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011aa2:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8011aa6:	f100 0c01 	add.w	ip, r0, #1
 8011aaa:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 8011aae:	fba9 e20e 	umull	lr, r2, r9, lr
 8011ab2:	0892      	lsrs	r2, r2, #2
 8011ab4:	fb01 c212 	mls	r2, r1, r2, ip
 8011ab8:	4580      	cmp	r8, r0
 8011aba:	eb04 0a00 	add.w	sl, r4, r0
 8011abe:	fa5f fc82 	uxtb.w	ip, r2
 8011ac2:	d1cc      	bne.n	8011a5e <uxr_read_framed_msg+0xfe>
 8011ac4:	42bb      	cmp	r3, r7
 8011ac6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8011aca:	f040 8128 	bne.w	8011d1e <uxr_read_framed_msg+0x3be>
 8011ace:	2306      	movs	r3, #6
 8011ad0:	7023      	strb	r3, [r4, #0]
 8011ad2:	e75a      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011ad4:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8011ad8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011adc:	4297      	cmp	r7, r2
 8011ade:	f000 80cf 	beq.w	8011c80 <uxr_read_framed_msg+0x320>
 8011ae2:	18a3      	adds	r3, r4, r2
 8011ae4:	f102 0c01 	add.w	ip, r2, #1
 8011ae8:	497a      	ldr	r1, [pc, #488]	@ (8011cd4 <uxr_read_framed_msg+0x374>)
 8011aea:	7898      	ldrb	r0, [r3, #2]
 8011aec:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011af0:	fba1 8303 	umull	r8, r3, r1, r3
 8011af4:	089b      	lsrs	r3, r3, #2
 8011af6:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011afa:	fb08 c313 	mls	r3, r8, r3, ip
 8011afe:	287d      	cmp	r0, #125	@ 0x7d
 8011b00:	fa5f fc83 	uxtb.w	ip, r3
 8011b04:	f000 813d 	beq.w	8011d82 <uxr_read_framed_msg+0x422>
 8011b08:	287e      	cmp	r0, #126	@ 0x7e
 8011b0a:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011b0e:	f000 8188 	beq.w	8011e22 <uxr_read_framed_msg+0x4c2>
 8011b12:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011b14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011b16:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	428b      	cmp	r3, r1
 8011b20:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011b22:	8662      	strh	r2, [r4, #50]	@ 0x32
 8011b24:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011b26:	f240 80f5 	bls.w	8011d14 <uxr_read_framed_msg+0x3b4>
 8011b2a:	7022      	strb	r2, [r4, #0]
 8011b2c:	e765      	b.n	80119fa <uxr_read_framed_msg+0x9a>
 8011b2e:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8011b32:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011b36:	4297      	cmp	r7, r2
 8011b38:	f000 80b2 	beq.w	8011ca0 <uxr_read_framed_msg+0x340>
 8011b3c:	18a3      	adds	r3, r4, r2
 8011b3e:	f102 0c01 	add.w	ip, r2, #1
 8011b42:	4964      	ldr	r1, [pc, #400]	@ (8011cd4 <uxr_read_framed_msg+0x374>)
 8011b44:	7898      	ldrb	r0, [r3, #2]
 8011b46:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011b4a:	fba1 8303 	umull	r8, r3, r1, r3
 8011b4e:	089b      	lsrs	r3, r3, #2
 8011b50:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011b54:	fb08 c313 	mls	r3, r8, r3, ip
 8011b58:	287d      	cmp	r0, #125	@ 0x7d
 8011b5a:	fa5f fc83 	uxtb.w	ip, r3
 8011b5e:	f000 813b 	beq.w	8011dd8 <uxr_read_framed_msg+0x478>
 8011b62:	287e      	cmp	r0, #126	@ 0x7e
 8011b64:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011b68:	f000 816a 	beq.w	8011e40 <uxr_read_framed_msg+0x4e0>
 8011b6c:	2304      	movs	r3, #4
 8011b6e:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011b70:	7023      	strb	r3, [r4, #0]
 8011b72:	e70a      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011b74:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8011b78:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011b7c:	4297      	cmp	r7, r2
 8011b7e:	f000 80c4 	beq.w	8011d0a <uxr_read_framed_msg+0x3aa>
 8011b82:	18a3      	adds	r3, r4, r2
 8011b84:	f102 0c01 	add.w	ip, r2, #1
 8011b88:	4952      	ldr	r1, [pc, #328]	@ (8011cd4 <uxr_read_framed_msg+0x374>)
 8011b8a:	7898      	ldrb	r0, [r3, #2]
 8011b8c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011b90:	fba1 8303 	umull	r8, r3, r1, r3
 8011b94:	089b      	lsrs	r3, r3, #2
 8011b96:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011b9a:	fb08 c313 	mls	r3, r8, r3, ip
 8011b9e:	287d      	cmp	r0, #125	@ 0x7d
 8011ba0:	fa5f fc83 	uxtb.w	ip, r3
 8011ba4:	f000 812b 	beq.w	8011dfe <uxr_read_framed_msg+0x49e>
 8011ba8:	287e      	cmp	r0, #126	@ 0x7e
 8011baa:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011bae:	f000 8155 	beq.w	8011e5c <uxr_read_framed_msg+0x4fc>
 8011bb2:	7863      	ldrb	r3, [r4, #1]
 8011bb4:	4283      	cmp	r3, r0
 8011bb6:	bf0c      	ite	eq
 8011bb8:	2303      	moveq	r3, #3
 8011bba:	2300      	movne	r3, #0
 8011bbc:	7023      	strb	r3, [r4, #0]
 8011bbe:	e6e4      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011bc0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011bc4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011bc8:	2300      	movs	r3, #0
 8011bca:	4290      	cmp	r0, r2
 8011bcc:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8011bd0:	d06b      	beq.n	8011caa <uxr_read_framed_msg+0x34a>
 8011bd2:	18a3      	adds	r3, r4, r2
 8011bd4:	f102 0c01 	add.w	ip, r2, #1
 8011bd8:	493e      	ldr	r1, [pc, #248]	@ (8011cd4 <uxr_read_framed_msg+0x374>)
 8011bda:	789f      	ldrb	r7, [r3, #2]
 8011bdc:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011be0:	fba1 8303 	umull	r8, r3, r1, r3
 8011be4:	089b      	lsrs	r3, r3, #2
 8011be6:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8011bea:	fb08 c313 	mls	r3, r8, r3, ip
 8011bee:	2f7d      	cmp	r7, #125	@ 0x7d
 8011bf0:	fa5f fc83 	uxtb.w	ip, r3
 8011bf4:	f000 80d8 	beq.w	8011da8 <uxr_read_framed_msg+0x448>
 8011bf8:	2f7e      	cmp	r7, #126	@ 0x7e
 8011bfa:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8011bfe:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 8011c02:	d052      	beq.n	8011caa <uxr_read_framed_msg+0x34a>
 8011c04:	2302      	movs	r3, #2
 8011c06:	7023      	strb	r3, [r4, #0]
 8011c08:	e6bf      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011c0a:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8011c0e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011c12:	4930      	ldr	r1, [pc, #192]	@ (8011cd4 <uxr_read_framed_msg+0x374>)
 8011c14:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011c18:	e004      	b.n	8011c24 <uxr_read_framed_msg+0x2c4>
 8011c1a:	78bb      	ldrb	r3, [r7, #2]
 8011c1c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011c20:	2b7e      	cmp	r3, #126	@ 0x7e
 8011c22:	d02a      	beq.n	8011c7a <uxr_read_framed_msg+0x31a>
 8011c24:	1c50      	adds	r0, r2, #1
 8011c26:	0843      	lsrs	r3, r0, #1
 8011c28:	fba1 e303 	umull	lr, r3, r1, r3
 8011c2c:	089b      	lsrs	r3, r3, #2
 8011c2e:	fb0c 0013 	mls	r0, ip, r3, r0
 8011c32:	4590      	cmp	r8, r2
 8011c34:	eb04 0702 	add.w	r7, r4, r2
 8011c38:	b2c2      	uxtb	r2, r0
 8011c3a:	d1ee      	bne.n	8011c1a <uxr_read_framed_msg+0x2ba>
 8011c3c:	e6dd      	b.n	80119fa <uxr_read_framed_msg+0x9a>
 8011c3e:	3002      	adds	r0, #2
 8011c40:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8011c44:	eb04 0a02 	add.w	sl, r4, r2
 8011c48:	fba9 e20e 	umull	lr, r2, r9, lr
 8011c4c:	0892      	lsrs	r2, r2, #2
 8011c4e:	45e0      	cmp	r8, ip
 8011c50:	fb01 0012 	mls	r0, r1, r2, r0
 8011c54:	f43f af36 	beq.w	8011ac4 <uxr_read_framed_msg+0x164>
 8011c58:	f89a e002 	ldrb.w	lr, [sl, #2]
 8011c5c:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011c60:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011c64:	d049      	beq.n	8011cfa <uxr_read_framed_msg+0x39a>
 8011c66:	f08e 0e20 	eor.w	lr, lr, #32
 8011c6a:	e704      	b.n	8011a76 <uxr_read_framed_msg+0x116>
 8011c6c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8011c70:	f43f af2d 	beq.w	8011ace <uxr_read_framed_msg+0x16e>
 8011c74:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8011c78:	d151      	bne.n	8011d1e <uxr_read_framed_msg+0x3be>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	7023      	strb	r3, [r4, #0]
 8011c7e:	e684      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011c80:	4651      	mov	r1, sl
 8011c82:	f8cd b000 	str.w	fp, [sp]
 8011c86:	2301      	movs	r3, #1
 8011c88:	9301      	str	r3, [sp, #4]
 8011c8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011c8c:	9103      	str	r1, [sp, #12]
 8011c8e:	4632      	mov	r2, r6
 8011c90:	4620      	mov	r0, r4
 8011c92:	f7ff fde1 	bl	8011858 <uxr_framing_read_transport>
 8011c96:	fab0 f080 	clz	r0, r0
 8011c9a:	9903      	ldr	r1, [sp, #12]
 8011c9c:	0940      	lsrs	r0, r0, #5
 8011c9e:	e671      	b.n	8011984 <uxr_read_framed_msg+0x24>
 8011ca0:	4651      	mov	r1, sl
 8011ca2:	f8cd b000 	str.w	fp, [sp]
 8011ca6:	2302      	movs	r3, #2
 8011ca8:	e7ee      	b.n	8011c88 <uxr_read_framed_msg+0x328>
 8011caa:	2304      	movs	r3, #4
 8011cac:	9301      	str	r3, [sp, #4]
 8011cae:	f8cd b000 	str.w	fp, [sp]
 8011cb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011cb4:	4632      	mov	r2, r6
 8011cb6:	4651      	mov	r1, sl
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f7ff fdcd 	bl	8011858 <uxr_framing_read_transport>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	f47f ae63 	bne.w	801198a <uxr_read_framed_msg+0x2a>
 8011cc4:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8011cc8:	387e      	subs	r0, #126	@ 0x7e
 8011cca:	4651      	mov	r1, sl
 8011ccc:	bf18      	it	ne
 8011cce:	2001      	movne	r0, #1
 8011cd0:	e658      	b.n	8011984 <uxr_read_framed_msg+0x24>
 8011cd2:	bf00      	nop
 8011cd4:	30c30c31 	.word	0x30c30c31
 8011cd8:	0801e630 	.word	0x0801e630
 8011cdc:	2305      	movs	r3, #5
 8011cde:	9301      	str	r3, [sp, #4]
 8011ce0:	f8cd b000 	str.w	fp, [sp]
 8011ce4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ce6:	f7ff fdb7 	bl	8011858 <uxr_framing_read_transport>
 8011cea:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8011cee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	f43f ae81 	beq.w	80119fa <uxr_read_framed_msg+0x9a>
 8011cf8:	e642      	b.n	8011980 <uxr_read_framed_msg+0x20>
 8011cfa:	42bb      	cmp	r3, r7
 8011cfc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8011d00:	f43f aee5 	beq.w	8011ace <uxr_read_framed_msg+0x16e>
 8011d04:	2301      	movs	r3, #1
 8011d06:	7023      	strb	r3, [r4, #0]
 8011d08:	e63f      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011d0a:	4651      	mov	r1, sl
 8011d0c:	f8cd b000 	str.w	fp, [sp]
 8011d10:	2303      	movs	r3, #3
 8011d12:	e7b9      	b.n	8011c88 <uxr_read_framed_msg+0x328>
 8011d14:	2305      	movs	r3, #5
 8011d16:	7023      	strb	r3, [r4, #0]
 8011d18:	e637      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011d1a:	f43f aed8 	beq.w	8011ace <uxr_read_framed_msg+0x16e>
 8011d1e:	1afb      	subs	r3, r7, r3
 8011d20:	3302      	adds	r3, #2
 8011d22:	e9cd b300 	strd	fp, r3, [sp]
 8011d26:	4651      	mov	r1, sl
 8011d28:	e7af      	b.n	8011c8a <uxr_read_framed_msg+0x32a>
 8011d2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011d2c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011d30:	7013      	strb	r3, [r2, #0]
 8011d32:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011d34:	b005      	add	sp, #20
 8011d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d3a:	4287      	cmp	r7, r0
 8011d3c:	d0a0      	beq.n	8011c80 <uxr_read_framed_msg+0x320>
 8011d3e:	4423      	add	r3, r4
 8011d40:	3202      	adds	r2, #2
 8011d42:	7898      	ldrb	r0, [r3, #2]
 8011d44:	0853      	lsrs	r3, r2, #1
 8011d46:	fba1 e303 	umull	lr, r3, r1, r3
 8011d4a:	089b      	lsrs	r3, r3, #2
 8011d4c:	fb08 2213 	mls	r2, r8, r3, r2
 8011d50:	287e      	cmp	r0, #126	@ 0x7e
 8011d52:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011d56:	d064      	beq.n	8011e22 <uxr_read_framed_msg+0x4c2>
 8011d58:	f080 0120 	eor.w	r1, r0, #32
 8011d5c:	e642      	b.n	80119e4 <uxr_read_framed_msg+0x84>
 8011d5e:	45bc      	cmp	ip, r7
 8011d60:	d09e      	beq.n	8011ca0 <uxr_read_framed_msg+0x340>
 8011d62:	4423      	add	r3, r4
 8011d64:	3202      	adds	r2, #2
 8011d66:	7898      	ldrb	r0, [r3, #2]
 8011d68:	0853      	lsrs	r3, r2, #1
 8011d6a:	fba1 e303 	umull	lr, r3, r1, r3
 8011d6e:	089b      	lsrs	r3, r3, #2
 8011d70:	fb08 2213 	mls	r2, r8, r3, r2
 8011d74:	287e      	cmp	r0, #126	@ 0x7e
 8011d76:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011d7a:	d061      	beq.n	8011e40 <uxr_read_framed_msg+0x4e0>
 8011d7c:	f080 0020 	eor.w	r0, r0, #32
 8011d80:	e65e      	b.n	8011a40 <uxr_read_framed_msg+0xe0>
 8011d82:	4567      	cmp	r7, ip
 8011d84:	f43f af7c 	beq.w	8011c80 <uxr_read_framed_msg+0x320>
 8011d88:	4423      	add	r3, r4
 8011d8a:	3202      	adds	r2, #2
 8011d8c:	7898      	ldrb	r0, [r3, #2]
 8011d8e:	0853      	lsrs	r3, r2, #1
 8011d90:	fba1 e303 	umull	lr, r3, r1, r3
 8011d94:	089b      	lsrs	r3, r3, #2
 8011d96:	fb08 2213 	mls	r2, r8, r3, r2
 8011d9a:	287e      	cmp	r0, #126	@ 0x7e
 8011d9c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011da0:	d03f      	beq.n	8011e22 <uxr_read_framed_msg+0x4c2>
 8011da2:	f080 0020 	eor.w	r0, r0, #32
 8011da6:	e6b4      	b.n	8011b12 <uxr_read_framed_msg+0x1b2>
 8011da8:	4560      	cmp	r0, ip
 8011daa:	f43f af7e 	beq.w	8011caa <uxr_read_framed_msg+0x34a>
 8011dae:	4423      	add	r3, r4
 8011db0:	3202      	adds	r2, #2
 8011db2:	7898      	ldrb	r0, [r3, #2]
 8011db4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011db8:	0853      	lsrs	r3, r2, #1
 8011dba:	fba1 e303 	umull	lr, r3, r1, r3
 8011dbe:	089b      	lsrs	r3, r3, #2
 8011dc0:	fb08 2213 	mls	r2, r8, r3, r2
 8011dc4:	287e      	cmp	r0, #126	@ 0x7e
 8011dc6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011dca:	f43f af6e 	beq.w	8011caa <uxr_read_framed_msg+0x34a>
 8011dce:	f080 0020 	eor.w	r0, r0, #32
 8011dd2:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011dd6:	e715      	b.n	8011c04 <uxr_read_framed_msg+0x2a4>
 8011dd8:	4567      	cmp	r7, ip
 8011dda:	f43f af61 	beq.w	8011ca0 <uxr_read_framed_msg+0x340>
 8011dde:	4423      	add	r3, r4
 8011de0:	3202      	adds	r2, #2
 8011de2:	7898      	ldrb	r0, [r3, #2]
 8011de4:	0853      	lsrs	r3, r2, #1
 8011de6:	fba1 e303 	umull	lr, r3, r1, r3
 8011dea:	089b      	lsrs	r3, r3, #2
 8011dec:	fb08 2213 	mls	r2, r8, r3, r2
 8011df0:	287e      	cmp	r0, #126	@ 0x7e
 8011df2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011df6:	d023      	beq.n	8011e40 <uxr_read_framed_msg+0x4e0>
 8011df8:	f080 0020 	eor.w	r0, r0, #32
 8011dfc:	e6b6      	b.n	8011b6c <uxr_read_framed_msg+0x20c>
 8011dfe:	45bc      	cmp	ip, r7
 8011e00:	d083      	beq.n	8011d0a <uxr_read_framed_msg+0x3aa>
 8011e02:	4423      	add	r3, r4
 8011e04:	3202      	adds	r2, #2
 8011e06:	7898      	ldrb	r0, [r3, #2]
 8011e08:	0853      	lsrs	r3, r2, #1
 8011e0a:	fba1 e303 	umull	lr, r3, r1, r3
 8011e0e:	089b      	lsrs	r3, r3, #2
 8011e10:	fb08 2213 	mls	r2, r8, r3, r2
 8011e14:	287e      	cmp	r0, #126	@ 0x7e
 8011e16:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011e1a:	d01f      	beq.n	8011e5c <uxr_read_framed_msg+0x4fc>
 8011e1c:	f080 0020 	eor.w	r0, r0, #32
 8011e20:	e6c7      	b.n	8011bb2 <uxr_read_framed_msg+0x252>
 8011e22:	2701      	movs	r7, #1
 8011e24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e26:	f8cd b000 	str.w	fp, [sp]
 8011e2a:	9701      	str	r7, [sp, #4]
 8011e2c:	4632      	mov	r2, r6
 8011e2e:	4651      	mov	r1, sl
 8011e30:	4620      	mov	r0, r4
 8011e32:	f7ff fd11 	bl	8011858 <uxr_framing_read_transport>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	f47f ada7 	bne.w	801198a <uxr_read_framed_msg+0x2a>
 8011e3c:	7027      	strb	r7, [r4, #0]
 8011e3e:	e5a4      	b.n	801198a <uxr_read_framed_msg+0x2a>
 8011e40:	f8cd b000 	str.w	fp, [sp]
 8011e44:	2302      	movs	r3, #2
 8011e46:	9301      	str	r3, [sp, #4]
 8011e48:	4632      	mov	r2, r6
 8011e4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e4c:	4651      	mov	r1, sl
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f7ff fd02 	bl	8011858 <uxr_framing_read_transport>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	f47f ad98 	bne.w	801198a <uxr_read_framed_msg+0x2a>
 8011e5a:	e70e      	b.n	8011c7a <uxr_read_framed_msg+0x31a>
 8011e5c:	f8cd b000 	str.w	fp, [sp]
 8011e60:	2303      	movs	r3, #3
 8011e62:	e7f0      	b.n	8011e46 <uxr_read_framed_msg+0x4e6>

08011e64 <uxr_stream_id>:
 8011e64:	2901      	cmp	r1, #1
 8011e66:	b082      	sub	sp, #8
 8011e68:	4603      	mov	r3, r0
 8011e6a:	d011      	beq.n	8011e90 <uxr_stream_id+0x2c>
 8011e6c:	2902      	cmp	r1, #2
 8011e6e:	f04f 0c00 	mov.w	ip, #0
 8011e72:	d00a      	beq.n	8011e8a <uxr_stream_id+0x26>
 8011e74:	2000      	movs	r0, #0
 8011e76:	f36c 0007 	bfi	r0, ip, #0, #8
 8011e7a:	f363 200f 	bfi	r0, r3, #8, #8
 8011e7e:	f361 4017 	bfi	r0, r1, #16, #8
 8011e82:	f362 601f 	bfi	r0, r2, #24, #8
 8011e86:	b002      	add	sp, #8
 8011e88:	4770      	bx	lr
 8011e8a:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011e8e:	e7f1      	b.n	8011e74 <uxr_stream_id+0x10>
 8011e90:	f100 0c01 	add.w	ip, r0, #1
 8011e94:	fa5f fc8c 	uxtb.w	ip, ip
 8011e98:	e7ec      	b.n	8011e74 <uxr_stream_id+0x10>
 8011e9a:	bf00      	nop

08011e9c <uxr_stream_id_from_raw>:
 8011e9c:	b082      	sub	sp, #8
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	b130      	cbz	r0, 8011eb0 <uxr_stream_id_from_raw+0x14>
 8011ea2:	0602      	lsls	r2, r0, #24
 8011ea4:	d411      	bmi.n	8011eca <uxr_stream_id_from_raw+0x2e>
 8011ea6:	1e42      	subs	r2, r0, #1
 8011ea8:	b2d2      	uxtb	r2, r2
 8011eaa:	f04f 0c01 	mov.w	ip, #1
 8011eae:	e001      	b.n	8011eb4 <uxr_stream_id_from_raw+0x18>
 8011eb0:	4684      	mov	ip, r0
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f363 0007 	bfi	r0, r3, #0, #8
 8011eba:	f362 200f 	bfi	r0, r2, #8, #8
 8011ebe:	f36c 4017 	bfi	r0, ip, #16, #8
 8011ec2:	f361 601f 	bfi	r0, r1, #24, #8
 8011ec6:	b002      	add	sp, #8
 8011ec8:	4770      	bx	lr
 8011eca:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011ece:	f04f 0c02 	mov.w	ip, #2
 8011ed2:	e7ef      	b.n	8011eb4 <uxr_stream_id_from_raw+0x18>

08011ed4 <uxr_init_stream_storage>:
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	7403      	strb	r3, [r0, #16]
 8011ed8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011edc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011ee0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop

08011ee8 <uxr_reset_stream_storage>:
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	7c03      	ldrb	r3, [r0, #16]
 8011eec:	4604      	mov	r4, r0
 8011eee:	b153      	cbz	r3, 8011f06 <uxr_reset_stream_storage+0x1e>
 8011ef0:	4606      	mov	r6, r0
 8011ef2:	2500      	movs	r5, #0
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	f006 fbc3 	bl	8018680 <uxr_reset_output_best_effort_stream>
 8011efa:	7c23      	ldrb	r3, [r4, #16]
 8011efc:	3501      	adds	r5, #1
 8011efe:	42ab      	cmp	r3, r5
 8011f00:	f106 0610 	add.w	r6, r6, #16
 8011f04:	d8f6      	bhi.n	8011ef4 <uxr_reset_stream_storage+0xc>
 8011f06:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011f0a:	b163      	cbz	r3, 8011f26 <uxr_reset_stream_storage+0x3e>
 8011f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f10:	2500      	movs	r5, #0
 8011f12:	4630      	mov	r0, r6
 8011f14:	f006 f9c4 	bl	80182a0 <uxr_reset_input_best_effort_stream>
 8011f18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011f1c:	3501      	adds	r5, #1
 8011f1e:	42ab      	cmp	r3, r5
 8011f20:	f106 0602 	add.w	r6, r6, #2
 8011f24:	d8f5      	bhi.n	8011f12 <uxr_reset_stream_storage+0x2a>
 8011f26:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011f2a:	b163      	cbz	r3, 8011f46 <uxr_reset_stream_storage+0x5e>
 8011f2c:	f104 0618 	add.w	r6, r4, #24
 8011f30:	2500      	movs	r5, #0
 8011f32:	4630      	mov	r0, r6
 8011f34:	f006 fc4e 	bl	80187d4 <uxr_reset_output_reliable_stream>
 8011f38:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011f3c:	3501      	adds	r5, #1
 8011f3e:	42ab      	cmp	r3, r5
 8011f40:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011f44:	d8f5      	bhi.n	8011f32 <uxr_reset_stream_storage+0x4a>
 8011f46:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011f4a:	b163      	cbz	r3, 8011f66 <uxr_reset_stream_storage+0x7e>
 8011f4c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011f50:	2500      	movs	r5, #0
 8011f52:	4630      	mov	r0, r6
 8011f54:	f006 fa14 	bl	8018380 <uxr_reset_input_reliable_stream>
 8011f58:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011f5c:	3501      	adds	r5, #1
 8011f5e:	42ab      	cmp	r3, r5
 8011f60:	f106 0618 	add.w	r6, r6, #24
 8011f64:	d8f5      	bhi.n	8011f52 <uxr_reset_stream_storage+0x6a>
 8011f66:	bd70      	pop	{r4, r5, r6, pc}

08011f68 <uxr_add_output_best_effort_buffer>:
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	7c04      	ldrb	r4, [r0, #16]
 8011f6c:	f104 0c01 	add.w	ip, r4, #1
 8011f70:	b082      	sub	sp, #8
 8011f72:	f880 c010 	strb.w	ip, [r0, #16]
 8011f76:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011f7a:	f006 fb77 	bl	801866c <uxr_init_output_best_effort_stream>
 8011f7e:	2201      	movs	r2, #1
 8011f80:	4611      	mov	r1, r2
 8011f82:	4620      	mov	r0, r4
 8011f84:	b002      	add	sp, #8
 8011f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f8a:	f7ff bf6b 	b.w	8011e64 <uxr_stream_id>
 8011f8e:	bf00      	nop

08011f90 <uxr_add_output_reliable_buffer>:
 8011f90:	b510      	push	{r4, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	4684      	mov	ip, r0
 8011f96:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011f9a:	9000      	str	r0, [sp, #0]
 8011f9c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011fa0:	2028      	movs	r0, #40	@ 0x28
 8011fa2:	fb00 c004 	mla	r0, r0, r4, ip
 8011fa6:	f104 0e01 	add.w	lr, r4, #1
 8011faa:	3018      	adds	r0, #24
 8011fac:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011fb0:	f006 fbd8 	bl	8018764 <uxr_init_output_reliable_stream>
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	2102      	movs	r1, #2
 8011fb8:	4620      	mov	r0, r4
 8011fba:	b004      	add	sp, #16
 8011fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fc0:	f7ff bf50 	b.w	8011e64 <uxr_stream_id>

08011fc4 <uxr_add_input_best_effort_buffer>:
 8011fc4:	b510      	push	{r4, lr}
 8011fc6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011fca:	1c62      	adds	r2, r4, #1
 8011fcc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011fd6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011fda:	f006 f95d 	bl	8018298 <uxr_init_input_best_effort_stream>
 8011fde:	2200      	movs	r2, #0
 8011fe0:	2101      	movs	r1, #1
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	b002      	add	sp, #8
 8011fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fea:	f7ff bf3b 	b.w	8011e64 <uxr_stream_id>
 8011fee:	bf00      	nop

08011ff0 <uxr_add_input_reliable_buffer>:
 8011ff0:	b510      	push	{r4, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	4684      	mov	ip, r0
 8011ff6:	9806      	ldr	r0, [sp, #24]
 8011ff8:	9000      	str	r0, [sp, #0]
 8011ffa:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011ffe:	2018      	movs	r0, #24
 8012000:	fb00 c004 	mla	r0, r0, r4, ip
 8012004:	f104 0e01 	add.w	lr, r4, #1
 8012008:	3048      	adds	r0, #72	@ 0x48
 801200a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801200e:	f006 f98b 	bl	8018328 <uxr_init_input_reliable_stream>
 8012012:	2200      	movs	r2, #0
 8012014:	2102      	movs	r1, #2
 8012016:	4620      	mov	r0, r4
 8012018:	b004      	add	sp, #16
 801201a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801201e:	f7ff bf21 	b.w	8011e64 <uxr_stream_id>
 8012022:	bf00      	nop

08012024 <uxr_get_output_best_effort_stream>:
 8012024:	7c03      	ldrb	r3, [r0, #16]
 8012026:	428b      	cmp	r3, r1
 8012028:	bf8c      	ite	hi
 801202a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801202e:	2000      	movls	r0, #0
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop

08012034 <uxr_get_output_reliable_stream>:
 8012034:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012038:	428b      	cmp	r3, r1
 801203a:	bf83      	ittte	hi
 801203c:	2328      	movhi	r3, #40	@ 0x28
 801203e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012042:	3018      	addhi	r0, #24
 8012044:	2000      	movls	r0, #0
 8012046:	4770      	bx	lr

08012048 <uxr_get_input_best_effort_stream>:
 8012048:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801204c:	428b      	cmp	r3, r1
 801204e:	bf86      	itte	hi
 8012050:	3121      	addhi	r1, #33	@ 0x21
 8012052:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012056:	2000      	movls	r0, #0
 8012058:	4770      	bx	lr
 801205a:	bf00      	nop

0801205c <uxr_get_input_reliable_stream>:
 801205c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012060:	428b      	cmp	r3, r1
 8012062:	bf83      	ittte	hi
 8012064:	2318      	movhi	r3, #24
 8012066:	fb03 0001 	mlahi	r0, r3, r1, r0
 801206a:	3048      	addhi	r0, #72	@ 0x48
 801206c:	2000      	movls	r0, #0
 801206e:	4770      	bx	lr

08012070 <uxr_output_streams_confirmed>:
 8012070:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012074:	b183      	cbz	r3, 8012098 <uxr_output_streams_confirmed+0x28>
 8012076:	b570      	push	{r4, r5, r6, lr}
 8012078:	4606      	mov	r6, r0
 801207a:	f100 0518 	add.w	r5, r0, #24
 801207e:	2400      	movs	r4, #0
 8012080:	e001      	b.n	8012086 <uxr_output_streams_confirmed+0x16>
 8012082:	3528      	adds	r5, #40	@ 0x28
 8012084:	b138      	cbz	r0, 8012096 <uxr_output_streams_confirmed+0x26>
 8012086:	4628      	mov	r0, r5
 8012088:	f006 fe0c 	bl	8018ca4 <uxr_is_output_up_to_date>
 801208c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012090:	3401      	adds	r4, #1
 8012092:	42a3      	cmp	r3, r4
 8012094:	d8f5      	bhi.n	8012082 <uxr_output_streams_confirmed+0x12>
 8012096:	bd70      	pop	{r4, r5, r6, pc}
 8012098:	2001      	movs	r0, #1
 801209a:	4770      	bx	lr

0801209c <uxr_buffer_submessage_header>:
 801209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801209e:	4604      	mov	r4, r0
 80120a0:	460e      	mov	r6, r1
 80120a2:	2104      	movs	r1, #4
 80120a4:	4615      	mov	r5, r2
 80120a6:	461f      	mov	r7, r3
 80120a8:	f7fa fa5c 	bl	800c564 <ucdr_align_to>
 80120ac:	2301      	movs	r3, #1
 80120ae:	7523      	strb	r3, [r4, #20]
 80120b0:	f047 0201 	orr.w	r2, r7, #1
 80120b4:	462b      	mov	r3, r5
 80120b6:	4631      	mov	r1, r6
 80120b8:	4620      	mov	r0, r4
 80120ba:	f000 fa2b 	bl	8012514 <uxr_serialize_submessage_header>
 80120be:	4620      	mov	r0, r4
 80120c0:	f7fa fa66 	bl	800c590 <ucdr_buffer_remaining>
 80120c4:	42a8      	cmp	r0, r5
 80120c6:	bf34      	ite	cc
 80120c8:	2000      	movcc	r0, #0
 80120ca:	2001      	movcs	r0, #1
 80120cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ce:	bf00      	nop

080120d0 <uxr_read_submessage_header>:
 80120d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d4:	4604      	mov	r4, r0
 80120d6:	460d      	mov	r5, r1
 80120d8:	2104      	movs	r1, #4
 80120da:	4616      	mov	r6, r2
 80120dc:	4698      	mov	r8, r3
 80120de:	f7fa fa41 	bl	800c564 <ucdr_align_to>
 80120e2:	4620      	mov	r0, r4
 80120e4:	f7fa fa54 	bl	800c590 <ucdr_buffer_remaining>
 80120e8:	2803      	cmp	r0, #3
 80120ea:	bf8c      	ite	hi
 80120ec:	2701      	movhi	r7, #1
 80120ee:	2700      	movls	r7, #0
 80120f0:	d802      	bhi.n	80120f8 <uxr_read_submessage_header+0x28>
 80120f2:	4638      	mov	r0, r7
 80120f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f8:	4633      	mov	r3, r6
 80120fa:	4642      	mov	r2, r8
 80120fc:	4620      	mov	r0, r4
 80120fe:	4629      	mov	r1, r5
 8012100:	f000 fa1a 	bl	8012538 <uxr_deserialize_submessage_header>
 8012104:	f898 3000 	ldrb.w	r3, [r8]
 8012108:	f003 0201 	and.w	r2, r3, #1
 801210c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012110:	f888 3000 	strb.w	r3, [r8]
 8012114:	7522      	strb	r2, [r4, #20]
 8012116:	4638      	mov	r0, r7
 8012118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801211c <uxr_submessage_padding>:
 801211c:	f010 0003 	ands.w	r0, r0, #3
 8012120:	bf18      	it	ne
 8012122:	f1c0 0004 	rsbne	r0, r0, #4
 8012126:	4770      	bx	lr

08012128 <uxr_millis>:
 8012128:	b510      	push	{r4, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	4669      	mov	r1, sp
 801212e:	2001      	movs	r0, #1
 8012130:	f7f0 fa22 	bl	8002578 <clock_gettime>
 8012134:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012138:	4b06      	ldr	r3, [pc, #24]	@ (8012154 <uxr_millis+0x2c>)
 801213a:	fba0 0103 	umull	r0, r1, r0, r3
 801213e:	1900      	adds	r0, r0, r4
 8012140:	fb03 1102 	mla	r1, r3, r2, r1
 8012144:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012148:	4a03      	ldr	r2, [pc, #12]	@ (8012158 <uxr_millis+0x30>)
 801214a:	2300      	movs	r3, #0
 801214c:	f7ee fd74 	bl	8000c38 <__aeabi_ldivmod>
 8012150:	b004      	add	sp, #16
 8012152:	bd10      	pop	{r4, pc}
 8012154:	3b9aca00 	.word	0x3b9aca00
 8012158:	000f4240 	.word	0x000f4240

0801215c <uxr_nanos>:
 801215c:	b510      	push	{r4, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	4669      	mov	r1, sp
 8012162:	2001      	movs	r0, #1
 8012164:	f7f0 fa08 	bl	8002578 <clock_gettime>
 8012168:	4a06      	ldr	r2, [pc, #24]	@ (8012184 <uxr_nanos+0x28>)
 801216a:	9800      	ldr	r0, [sp, #0]
 801216c:	9902      	ldr	r1, [sp, #8]
 801216e:	9c01      	ldr	r4, [sp, #4]
 8012170:	fba0 0302 	umull	r0, r3, r0, r2
 8012174:	1840      	adds	r0, r0, r1
 8012176:	fb02 3304 	mla	r3, r2, r4, r3
 801217a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801217e:	b004      	add	sp, #16
 8012180:	bd10      	pop	{r4, pc}
 8012182:	bf00      	nop
 8012184:	3b9aca00 	.word	0x3b9aca00

08012188 <on_full_output_buffer_fragmented>:
 8012188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801218c:	460c      	mov	r4, r1
 801218e:	b08a      	sub	sp, #40	@ 0x28
 8012190:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012194:	4606      	mov	r6, r0
 8012196:	f104 0008 	add.w	r0, r4, #8
 801219a:	f7ff ff4b 	bl	8012034 <uxr_get_output_reliable_stream>
 801219e:	4605      	mov	r5, r0
 80121a0:	f006 fd8a 	bl	8018cb8 <get_available_free_slots>
 80121a4:	b968      	cbnz	r0, 80121c2 <on_full_output_buffer_fragmented+0x3a>
 80121a6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80121aa:	4620      	mov	r0, r4
 80121ac:	4798      	blx	r3
 80121ae:	b918      	cbnz	r0, 80121b8 <on_full_output_buffer_fragmented+0x30>
 80121b0:	2001      	movs	r0, #1
 80121b2:	b00a      	add	sp, #40	@ 0x28
 80121b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b8:	4628      	mov	r0, r5
 80121ba:	f006 fd7d 	bl	8018cb8 <get_available_free_slots>
 80121be:	2800      	cmp	r0, #0
 80121c0:	d0f6      	beq.n	80121b0 <on_full_output_buffer_fragmented+0x28>
 80121c2:	892a      	ldrh	r2, [r5, #8]
 80121c4:	686b      	ldr	r3, [r5, #4]
 80121c6:	fbb3 f8f2 	udiv	r8, r3, r2
 80121ca:	89eb      	ldrh	r3, [r5, #14]
 80121cc:	7b29      	ldrb	r1, [r5, #12]
 80121ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80121d2:	fb02 3310 	mls	r3, r2, r0, r3
 80121d6:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 80121da:	b29b      	uxth	r3, r3
 80121dc:	fb08 f303 	mul.w	r3, r8, r3
 80121e0:	31fc      	adds	r1, #252	@ 0xfc
 80121e2:	f1a8 0804 	sub.w	r8, r8, #4
 80121e6:	4441      	add	r1, r8
 80121e8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80121ec:	b28f      	uxth	r7, r1
 80121ee:	6829      	ldr	r1, [r5, #0]
 80121f0:	3304      	adds	r3, #4
 80121f2:	1bd2      	subs	r2, r2, r7
 80121f4:	4419      	add	r1, r3
 80121f6:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 80121fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121fe:	9300      	str	r3, [sp, #0]
 8012200:	4642      	mov	r2, r8
 8012202:	2300      	movs	r3, #0
 8012204:	a802      	add	r0, sp, #8
 8012206:	f7fa f981 	bl	800c50c <ucdr_init_buffer_origin_offset>
 801220a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801220e:	f102 0308 	add.w	r3, r2, #8
 8012212:	4543      	cmp	r3, r8
 8012214:	d928      	bls.n	8012268 <on_full_output_buffer_fragmented+0xe0>
 8012216:	463a      	mov	r2, r7
 8012218:	2300      	movs	r3, #0
 801221a:	210d      	movs	r1, #13
 801221c:	a802      	add	r0, sp, #8
 801221e:	f7ff ff3d 	bl	801209c <uxr_buffer_submessage_header>
 8012222:	8929      	ldrh	r1, [r5, #8]
 8012224:	89eb      	ldrh	r3, [r5, #14]
 8012226:	fbb3 f2f1 	udiv	r2, r3, r1
 801222a:	fb01 3312 	mls	r3, r1, r2, r3
 801222e:	b29b      	uxth	r3, r3
 8012230:	686a      	ldr	r2, [r5, #4]
 8012232:	fbb2 f2f1 	udiv	r2, r2, r1
 8012236:	fb02 f303 	mul.w	r3, r2, r3
 801223a:	682a      	ldr	r2, [r5, #0]
 801223c:	f842 8003 	str.w	r8, [r2, r3]
 8012240:	89e8      	ldrh	r0, [r5, #14]
 8012242:	2101      	movs	r1, #1
 8012244:	f006 fd56 	bl	8018cf4 <uxr_seq_num_add>
 8012248:	9904      	ldr	r1, [sp, #16]
 801224a:	9a03      	ldr	r2, [sp, #12]
 801224c:	81e8      	strh	r0, [r5, #14]
 801224e:	1a52      	subs	r2, r2, r1
 8012250:	4630      	mov	r0, r6
 8012252:	f7fa f96d 	bl	800c530 <ucdr_init_buffer>
 8012256:	4630      	mov	r0, r6
 8012258:	4910      	ldr	r1, [pc, #64]	@ (801229c <on_full_output_buffer_fragmented+0x114>)
 801225a:	4622      	mov	r2, r4
 801225c:	f7fa f93c 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 8012260:	2000      	movs	r0, #0
 8012262:	b00a      	add	sp, #40	@ 0x28
 8012264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012268:	b292      	uxth	r2, r2
 801226a:	2302      	movs	r3, #2
 801226c:	210d      	movs	r1, #13
 801226e:	a802      	add	r0, sp, #8
 8012270:	f7ff ff14 	bl	801209c <uxr_buffer_submessage_header>
 8012274:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012278:	8928      	ldrh	r0, [r5, #8]
 801227a:	f103 0208 	add.w	r2, r3, #8
 801227e:	89eb      	ldrh	r3, [r5, #14]
 8012280:	fbb3 f1f0 	udiv	r1, r3, r0
 8012284:	fb00 3311 	mls	r3, r0, r1, r3
 8012288:	b29b      	uxth	r3, r3
 801228a:	6869      	ldr	r1, [r5, #4]
 801228c:	fbb1 f1f0 	udiv	r1, r1, r0
 8012290:	fb01 f303 	mul.w	r3, r1, r3
 8012294:	6829      	ldr	r1, [r5, #0]
 8012296:	50ca      	str	r2, [r1, r3]
 8012298:	e7d2      	b.n	8012240 <on_full_output_buffer_fragmented+0xb8>
 801229a:	bf00      	nop
 801229c:	08012189 	.word	0x08012189

080122a0 <uxr_prepare_output_stream>:
 80122a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122a2:	b087      	sub	sp, #28
 80122a4:	2707      	movs	r7, #7
 80122a6:	9202      	str	r2, [sp, #8]
 80122a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122aa:	2500      	movs	r5, #0
 80122ac:	3204      	adds	r2, #4
 80122ae:	e9cd 7500 	strd	r7, r5, [sp]
 80122b2:	461c      	mov	r4, r3
 80122b4:	4606      	mov	r6, r0
 80122b6:	f7ff f807 	bl	80112c8 <uxr_prepare_stream_to_write_submessage>
 80122ba:	f080 0201 	eor.w	r2, r0, #1
 80122be:	b2d2      	uxtb	r2, r2
 80122c0:	75a2      	strb	r2, [r4, #22]
 80122c2:	b112      	cbz	r2, 80122ca <uxr_prepare_output_stream+0x2a>
 80122c4:	4628      	mov	r0, r5
 80122c6:	b007      	add	sp, #28
 80122c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ca:	aa05      	add	r2, sp, #20
 80122cc:	9902      	ldr	r1, [sp, #8]
 80122ce:	4630      	mov	r0, r6
 80122d0:	f7ff f934 	bl	801153c <uxr_init_base_object_request>
 80122d4:	a905      	add	r1, sp, #20
 80122d6:	4605      	mov	r5, r0
 80122d8:	4620      	mov	r0, r4
 80122da:	f001 f879 	bl	80133d0 <uxr_serialize_WRITE_DATA_Payload_Data>
 80122de:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80122e2:	69a6      	ldr	r6, [r4, #24]
 80122e4:	69e7      	ldr	r7, [r4, #28]
 80122e6:	1a52      	subs	r2, r2, r1
 80122e8:	4620      	mov	r0, r4
 80122ea:	f7fa f921 	bl	800c530 <ucdr_init_buffer>
 80122ee:	4620      	mov	r0, r4
 80122f0:	463a      	mov	r2, r7
 80122f2:	4631      	mov	r1, r6
 80122f4:	f7fa f8f0 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 80122f8:	4628      	mov	r0, r5
 80122fa:	b007      	add	sp, #28
 80122fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122fe:	bf00      	nop

08012300 <uxr_prepare_output_stream_fragmented>:
 8012300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012304:	b093      	sub	sp, #76	@ 0x4c
 8012306:	4605      	mov	r5, r0
 8012308:	9107      	str	r1, [sp, #28]
 801230a:	3008      	adds	r0, #8
 801230c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012310:	9303      	str	r3, [sp, #12]
 8012312:	9206      	str	r2, [sp, #24]
 8012314:	f7ff fe8e 	bl	8012034 <uxr_get_output_reliable_stream>
 8012318:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801231c:	2b01      	cmp	r3, #1
 801231e:	f000 8095 	beq.w	801244c <uxr_prepare_output_stream_fragmented+0x14c>
 8012322:	4604      	mov	r4, r0
 8012324:	2800      	cmp	r0, #0
 8012326:	f000 8091 	beq.w	801244c <uxr_prepare_output_stream_fragmented+0x14c>
 801232a:	f006 fcc5 	bl	8018cb8 <get_available_free_slots>
 801232e:	2800      	cmp	r0, #0
 8012330:	f000 8087 	beq.w	8012442 <uxr_prepare_output_stream_fragmented+0x142>
 8012334:	8922      	ldrh	r2, [r4, #8]
 8012336:	89e7      	ldrh	r7, [r4, #14]
 8012338:	fbb7 f3f2 	udiv	r3, r7, r2
 801233c:	fb02 7313 	mls	r3, r2, r3, r7
 8012340:	b29b      	uxth	r3, r3
 8012342:	6861      	ldr	r1, [r4, #4]
 8012344:	fbb1 f1f2 	udiv	r1, r1, r2
 8012348:	6822      	ldr	r2, [r4, #0]
 801234a:	9105      	str	r1, [sp, #20]
 801234c:	fb01 f303 	mul.w	r3, r1, r3
 8012350:	3304      	adds	r3, #4
 8012352:	eb02 0903 	add.w	r9, r2, r3
 8012356:	7b23      	ldrb	r3, [r4, #12]
 8012358:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801235c:	4543      	cmp	r3, r8
 801235e:	f1a1 0b04 	sub.w	fp, r1, #4
 8012362:	d37f      	bcc.n	8012464 <uxr_prepare_output_stream_fragmented+0x164>
 8012364:	f1ab 0a04 	sub.w	sl, fp, #4
 8012368:	ebaa 0a03 	sub.w	sl, sl, r3
 801236c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801236e:	f8cd 8000 	str.w	r8, [sp]
 8012372:	fa1f f38a 	uxth.w	r3, sl
 8012376:	9304      	str	r3, [sp, #16]
 8012378:	465a      	mov	r2, fp
 801237a:	2300      	movs	r3, #0
 801237c:	4649      	mov	r1, r9
 801237e:	a80a      	add	r0, sp, #40	@ 0x28
 8012380:	f7fa f8c4 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8012384:	f106 0a08 	add.w	sl, r6, #8
 8012388:	45da      	cmp	sl, fp
 801238a:	bf2c      	ite	cs
 801238c:	2300      	movcs	r3, #0
 801238e:	2301      	movcc	r3, #1
 8012390:	9a04      	ldr	r2, [sp, #16]
 8012392:	005b      	lsls	r3, r3, #1
 8012394:	210d      	movs	r1, #13
 8012396:	a80a      	add	r0, sp, #40	@ 0x28
 8012398:	f7ff fe80 	bl	801209c <uxr_buffer_submessage_header>
 801239c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80123a0:	fbb7 f2fc 	udiv	r2, r7, ip
 80123a4:	fb0c 7212 	mls	r2, ip, r2, r7
 80123a8:	b292      	uxth	r2, r2
 80123aa:	6863      	ldr	r3, [r4, #4]
 80123ac:	fbb3 f3fc 	udiv	r3, r3, ip
 80123b0:	fb02 f303 	mul.w	r3, r2, r3
 80123b4:	6822      	ldr	r2, [r4, #0]
 80123b6:	2101      	movs	r1, #1
 80123b8:	f842 b003 	str.w	fp, [r2, r3]
 80123bc:	4638      	mov	r0, r7
 80123be:	f006 fc99 	bl	8018cf4 <uxr_seq_num_add>
 80123c2:	9b05      	ldr	r3, [sp, #20]
 80123c4:	9e03      	ldr	r6, [sp, #12]
 80123c6:	f1a3 0208 	sub.w	r2, r3, #8
 80123ca:	f108 0104 	add.w	r1, r8, #4
 80123ce:	4607      	mov	r7, r0
 80123d0:	eba2 0208 	sub.w	r2, r2, r8
 80123d4:	4449      	add	r1, r9
 80123d6:	4630      	mov	r0, r6
 80123d8:	f7fa f8aa 	bl	800c530 <ucdr_init_buffer>
 80123dc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80123de:	81e7      	strh	r7, [r4, #14]
 80123e0:	1d1a      	adds	r2, r3, #4
 80123e2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80123e6:	bf28      	it	cs
 80123e8:	2200      	movcs	r2, #0
 80123ea:	2300      	movs	r3, #0
 80123ec:	b292      	uxth	r2, r2
 80123ee:	2107      	movs	r1, #7
 80123f0:	4630      	mov	r0, r6
 80123f2:	f7ff fe53 	bl	801209c <uxr_buffer_submessage_header>
 80123f6:	9906      	ldr	r1, [sp, #24]
 80123f8:	aa09      	add	r2, sp, #36	@ 0x24
 80123fa:	4628      	mov	r0, r5
 80123fc:	f7ff f89e 	bl	801153c <uxr_init_base_object_request>
 8012400:	4604      	mov	r4, r0
 8012402:	b320      	cbz	r0, 801244e <uxr_prepare_output_stream_fragmented+0x14e>
 8012404:	9e03      	ldr	r6, [sp, #12]
 8012406:	a909      	add	r1, sp, #36	@ 0x24
 8012408:	4630      	mov	r0, r6
 801240a:	f000 ffe1 	bl	80133d0 <uxr_serialize_WRITE_DATA_Payload_Data>
 801240e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012412:	4630      	mov	r0, r6
 8012414:	1a52      	subs	r2, r2, r1
 8012416:	f7fa f88b 	bl	800c530 <ucdr_init_buffer>
 801241a:	9b07      	ldr	r3, [sp, #28]
 801241c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012420:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012422:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012426:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012428:	491a      	ldr	r1, [pc, #104]	@ (8012494 <uxr_prepare_output_stream_fragmented+0x194>)
 801242a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801242e:	4630      	mov	r0, r6
 8012430:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012434:	462a      	mov	r2, r5
 8012436:	f7fa f84f 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 801243a:	4620      	mov	r0, r4
 801243c:	b013      	add	sp, #76	@ 0x4c
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8012444:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012446:	4628      	mov	r0, r5
 8012448:	4798      	blx	r3
 801244a:	b920      	cbnz	r0, 8012456 <uxr_prepare_output_stream_fragmented+0x156>
 801244c:	2400      	movs	r4, #0
 801244e:	4620      	mov	r0, r4
 8012450:	b013      	add	sp, #76	@ 0x4c
 8012452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012456:	4620      	mov	r0, r4
 8012458:	f006 fc2e 	bl	8018cb8 <get_available_free_slots>
 801245c:	2800      	cmp	r0, #0
 801245e:	f47f af69 	bne.w	8012334 <uxr_prepare_output_stream_fragmented+0x34>
 8012462:	e7f3      	b.n	801244c <uxr_prepare_output_stream_fragmented+0x14c>
 8012464:	4638      	mov	r0, r7
 8012466:	2101      	movs	r1, #1
 8012468:	f006 fc44 	bl	8018cf4 <uxr_seq_num_add>
 801246c:	8921      	ldrh	r1, [r4, #8]
 801246e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012472:	fb01 0212 	mls	r2, r1, r2, r0
 8012476:	b292      	uxth	r2, r2
 8012478:	6863      	ldr	r3, [r4, #4]
 801247a:	fbb3 f3f1 	udiv	r3, r3, r1
 801247e:	fb02 f303 	mul.w	r3, r2, r3
 8012482:	6822      	ldr	r2, [r4, #0]
 8012484:	3304      	adds	r3, #4
 8012486:	eb02 0903 	add.w	r9, r2, r3
 801248a:	4607      	mov	r7, r0
 801248c:	7b23      	ldrb	r3, [r4, #12]
 801248e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012492:	e767      	b.n	8012364 <uxr_prepare_output_stream_fragmented+0x64>
 8012494:	08012189 	.word	0x08012189

08012498 <uxr_serialize_message_header>:
 8012498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801249c:	4617      	mov	r7, r2
 801249e:	4604      	mov	r4, r0
 80124a0:	461e      	mov	r6, r3
 80124a2:	460d      	mov	r5, r1
 80124a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80124a8:	f7f8 fdea 	bl	800b080 <ucdr_serialize_uint8_t>
 80124ac:	4639      	mov	r1, r7
 80124ae:	4620      	mov	r0, r4
 80124b0:	f7f8 fde6 	bl	800b080 <ucdr_serialize_uint8_t>
 80124b4:	4632      	mov	r2, r6
 80124b6:	2101      	movs	r1, #1
 80124b8:	4620      	mov	r0, r4
 80124ba:	f7f8 fe97 	bl	800b1ec <ucdr_serialize_endian_uint16_t>
 80124be:	062b      	lsls	r3, r5, #24
 80124c0:	d501      	bpl.n	80124c6 <uxr_serialize_message_header+0x2e>
 80124c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c6:	4641      	mov	r1, r8
 80124c8:	4620      	mov	r0, r4
 80124ca:	2204      	movs	r2, #4
 80124cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124d0:	f005 be04 	b.w	80180dc <ucdr_serialize_array_uint8_t>

080124d4 <uxr_deserialize_message_header>:
 80124d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d8:	4617      	mov	r7, r2
 80124da:	4604      	mov	r4, r0
 80124dc:	461e      	mov	r6, r3
 80124de:	460d      	mov	r5, r1
 80124e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80124e4:	f7f8 fde2 	bl	800b0ac <ucdr_deserialize_uint8_t>
 80124e8:	4639      	mov	r1, r7
 80124ea:	4620      	mov	r0, r4
 80124ec:	f7f8 fdde 	bl	800b0ac <ucdr_deserialize_uint8_t>
 80124f0:	4632      	mov	r2, r6
 80124f2:	2101      	movs	r1, #1
 80124f4:	4620      	mov	r0, r4
 80124f6:	f7f8 ff6f 	bl	800b3d8 <ucdr_deserialize_endian_uint16_t>
 80124fa:	f995 3000 	ldrsb.w	r3, [r5]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	da01      	bge.n	8012506 <uxr_deserialize_message_header+0x32>
 8012502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012506:	4641      	mov	r1, r8
 8012508:	4620      	mov	r0, r4
 801250a:	2204      	movs	r2, #4
 801250c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012510:	f005 be48 	b.w	80181a4 <ucdr_deserialize_array_uint8_t>

08012514 <uxr_serialize_submessage_header>:
 8012514:	b570      	push	{r4, r5, r6, lr}
 8012516:	4616      	mov	r6, r2
 8012518:	4604      	mov	r4, r0
 801251a:	461d      	mov	r5, r3
 801251c:	f7f8 fdb0 	bl	800b080 <ucdr_serialize_uint8_t>
 8012520:	4631      	mov	r1, r6
 8012522:	4620      	mov	r0, r4
 8012524:	f7f8 fdac 	bl	800b080 <ucdr_serialize_uint8_t>
 8012528:	462a      	mov	r2, r5
 801252a:	4620      	mov	r0, r4
 801252c:	2101      	movs	r1, #1
 801252e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012532:	f7f8 be5b 	b.w	800b1ec <ucdr_serialize_endian_uint16_t>
 8012536:	bf00      	nop

08012538 <uxr_deserialize_submessage_header>:
 8012538:	b570      	push	{r4, r5, r6, lr}
 801253a:	4616      	mov	r6, r2
 801253c:	4604      	mov	r4, r0
 801253e:	461d      	mov	r5, r3
 8012540:	f7f8 fdb4 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8012544:	4631      	mov	r1, r6
 8012546:	4620      	mov	r0, r4
 8012548:	f7f8 fdb0 	bl	800b0ac <ucdr_deserialize_uint8_t>
 801254c:	462a      	mov	r2, r5
 801254e:	4620      	mov	r0, r4
 8012550:	2101      	movs	r1, #1
 8012552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012556:	f7f8 bf3f 	b.w	800b3d8 <ucdr_deserialize_endian_uint16_t>
 801255a:	bf00      	nop

0801255c <uxr_serialize_CLIENT_Representation>:
 801255c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012560:	2204      	movs	r2, #4
 8012562:	460e      	mov	r6, r1
 8012564:	4605      	mov	r5, r0
 8012566:	f005 fdb9 	bl	80180dc <ucdr_serialize_array_uint8_t>
 801256a:	2202      	movs	r2, #2
 801256c:	1d31      	adds	r1, r6, #4
 801256e:	4604      	mov	r4, r0
 8012570:	4628      	mov	r0, r5
 8012572:	f005 fdb3 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012576:	2202      	movs	r2, #2
 8012578:	4004      	ands	r4, r0
 801257a:	1db1      	adds	r1, r6, #6
 801257c:	4628      	mov	r0, r5
 801257e:	f005 fdad 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012582:	b2e4      	uxtb	r4, r4
 8012584:	2204      	movs	r2, #4
 8012586:	4004      	ands	r4, r0
 8012588:	f106 0108 	add.w	r1, r6, #8
 801258c:	4628      	mov	r0, r5
 801258e:	f005 fda5 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012592:	7b31      	ldrb	r1, [r6, #12]
 8012594:	ea00 0804 	and.w	r8, r0, r4
 8012598:	4628      	mov	r0, r5
 801259a:	f7f8 fd71 	bl	800b080 <ucdr_serialize_uint8_t>
 801259e:	7b71      	ldrb	r1, [r6, #13]
 80125a0:	ea08 0800 	and.w	r8, r8, r0
 80125a4:	4628      	mov	r0, r5
 80125a6:	f7f8 fd3d 	bl	800b024 <ucdr_serialize_bool>
 80125aa:	7b73      	ldrb	r3, [r6, #13]
 80125ac:	ea08 0800 	and.w	r8, r8, r0
 80125b0:	b93b      	cbnz	r3, 80125c2 <uxr_serialize_CLIENT_Representation+0x66>
 80125b2:	8bb1      	ldrh	r1, [r6, #28]
 80125b4:	4628      	mov	r0, r5
 80125b6:	f7f8 fd8f 	bl	800b0d8 <ucdr_serialize_uint16_t>
 80125ba:	ea08 0000 	and.w	r0, r8, r0
 80125be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125c2:	6931      	ldr	r1, [r6, #16]
 80125c4:	4628      	mov	r0, r5
 80125c6:	f7f8 ff77 	bl	800b4b8 <ucdr_serialize_uint32_t>
 80125ca:	6933      	ldr	r3, [r6, #16]
 80125cc:	b1e3      	cbz	r3, 8012608 <uxr_serialize_CLIENT_Representation+0xac>
 80125ce:	b1c0      	cbz	r0, 8012602 <uxr_serialize_CLIENT_Representation+0xa6>
 80125d0:	4637      	mov	r7, r6
 80125d2:	f04f 0900 	mov.w	r9, #0
 80125d6:	e001      	b.n	80125dc <uxr_serialize_CLIENT_Representation+0x80>
 80125d8:	3708      	adds	r7, #8
 80125da:	b194      	cbz	r4, 8012602 <uxr_serialize_CLIENT_Representation+0xa6>
 80125dc:	6979      	ldr	r1, [r7, #20]
 80125de:	4628      	mov	r0, r5
 80125e0:	f005 fe44 	bl	801826c <ucdr_serialize_string>
 80125e4:	69b9      	ldr	r1, [r7, #24]
 80125e6:	4604      	mov	r4, r0
 80125e8:	4628      	mov	r0, r5
 80125ea:	f005 fe3f 	bl	801826c <ucdr_serialize_string>
 80125ee:	6933      	ldr	r3, [r6, #16]
 80125f0:	f109 0901 	add.w	r9, r9, #1
 80125f4:	4004      	ands	r4, r0
 80125f6:	4599      	cmp	r9, r3
 80125f8:	b2e4      	uxtb	r4, r4
 80125fa:	d3ed      	bcc.n	80125d8 <uxr_serialize_CLIENT_Representation+0x7c>
 80125fc:	ea08 0804 	and.w	r8, r8, r4
 8012600:	e7d7      	b.n	80125b2 <uxr_serialize_CLIENT_Representation+0x56>
 8012602:	f04f 0800 	mov.w	r8, #0
 8012606:	e7d4      	b.n	80125b2 <uxr_serialize_CLIENT_Representation+0x56>
 8012608:	ea08 0800 	and.w	r8, r8, r0
 801260c:	e7d1      	b.n	80125b2 <uxr_serialize_CLIENT_Representation+0x56>
 801260e:	bf00      	nop

08012610 <uxr_deserialize_CLIENT_Representation>:
 8012610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012614:	2204      	movs	r2, #4
 8012616:	460c      	mov	r4, r1
 8012618:	4605      	mov	r5, r0
 801261a:	f005 fdc3 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 801261e:	2202      	movs	r2, #2
 8012620:	1d21      	adds	r1, r4, #4
 8012622:	4606      	mov	r6, r0
 8012624:	4628      	mov	r0, r5
 8012626:	f005 fdbd 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 801262a:	2202      	movs	r2, #2
 801262c:	4006      	ands	r6, r0
 801262e:	1da1      	adds	r1, r4, #6
 8012630:	4628      	mov	r0, r5
 8012632:	f005 fdb7 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012636:	b2f6      	uxtb	r6, r6
 8012638:	2204      	movs	r2, #4
 801263a:	4006      	ands	r6, r0
 801263c:	f104 0108 	add.w	r1, r4, #8
 8012640:	4628      	mov	r0, r5
 8012642:	f005 fdaf 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012646:	f104 010c 	add.w	r1, r4, #12
 801264a:	ea00 0706 	and.w	r7, r0, r6
 801264e:	4628      	mov	r0, r5
 8012650:	f7f8 fd2c 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8012654:	f104 010d 	add.w	r1, r4, #13
 8012658:	4007      	ands	r7, r0
 801265a:	4628      	mov	r0, r5
 801265c:	f7f8 fcf8 	bl	800b050 <ucdr_deserialize_bool>
 8012660:	7b63      	ldrb	r3, [r4, #13]
 8012662:	4007      	ands	r7, r0
 8012664:	b93b      	cbnz	r3, 8012676 <uxr_deserialize_CLIENT_Representation+0x66>
 8012666:	f104 011c 	add.w	r1, r4, #28
 801266a:	4628      	mov	r0, r5
 801266c:	f7f8 fe38 	bl	800b2e0 <ucdr_deserialize_uint16_t>
 8012670:	4038      	ands	r0, r7
 8012672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012676:	f104 0110 	add.w	r1, r4, #16
 801267a:	4628      	mov	r0, r5
 801267c:	f7f9 f846 	bl	800b70c <ucdr_deserialize_uint32_t>
 8012680:	6923      	ldr	r3, [r4, #16]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d903      	bls.n	801268e <uxr_deserialize_CLIENT_Representation+0x7e>
 8012686:	2301      	movs	r3, #1
 8012688:	75ab      	strb	r3, [r5, #22]
 801268a:	2700      	movs	r7, #0
 801268c:	e7eb      	b.n	8012666 <uxr_deserialize_CLIENT_Representation+0x56>
 801268e:	b30b      	cbz	r3, 80126d4 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012690:	2800      	cmp	r0, #0
 8012692:	d0fa      	beq.n	801268a <uxr_deserialize_CLIENT_Representation+0x7a>
 8012694:	46a0      	mov	r8, r4
 8012696:	f04f 0900 	mov.w	r9, #0
 801269a:	e003      	b.n	80126a4 <uxr_deserialize_CLIENT_Representation+0x94>
 801269c:	f108 0808 	add.w	r8, r8, #8
 80126a0:	2e00      	cmp	r6, #0
 80126a2:	d0f2      	beq.n	801268a <uxr_deserialize_CLIENT_Representation+0x7a>
 80126a4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80126a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126ac:	4628      	mov	r0, r5
 80126ae:	f005 fdeb 	bl	8018288 <ucdr_deserialize_string>
 80126b2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80126b6:	4606      	mov	r6, r0
 80126b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126bc:	4628      	mov	r0, r5
 80126be:	f005 fde3 	bl	8018288 <ucdr_deserialize_string>
 80126c2:	6923      	ldr	r3, [r4, #16]
 80126c4:	f109 0901 	add.w	r9, r9, #1
 80126c8:	4006      	ands	r6, r0
 80126ca:	4599      	cmp	r9, r3
 80126cc:	b2f6      	uxtb	r6, r6
 80126ce:	d3e5      	bcc.n	801269c <uxr_deserialize_CLIENT_Representation+0x8c>
 80126d0:	4037      	ands	r7, r6
 80126d2:	e7c8      	b.n	8012666 <uxr_deserialize_CLIENT_Representation+0x56>
 80126d4:	4007      	ands	r7, r0
 80126d6:	e7c6      	b.n	8012666 <uxr_deserialize_CLIENT_Representation+0x56>

080126d8 <uxr_serialize_AGENT_Representation>:
 80126d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126dc:	2204      	movs	r2, #4
 80126de:	460f      	mov	r7, r1
 80126e0:	4605      	mov	r5, r0
 80126e2:	f005 fcfb 	bl	80180dc <ucdr_serialize_array_uint8_t>
 80126e6:	2202      	movs	r2, #2
 80126e8:	4604      	mov	r4, r0
 80126ea:	1d39      	adds	r1, r7, #4
 80126ec:	4628      	mov	r0, r5
 80126ee:	f005 fcf5 	bl	80180dc <ucdr_serialize_array_uint8_t>
 80126f2:	4020      	ands	r0, r4
 80126f4:	2202      	movs	r2, #2
 80126f6:	b2c4      	uxtb	r4, r0
 80126f8:	1db9      	adds	r1, r7, #6
 80126fa:	4628      	mov	r0, r5
 80126fc:	f005 fcee 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012700:	7a39      	ldrb	r1, [r7, #8]
 8012702:	4004      	ands	r4, r0
 8012704:	4628      	mov	r0, r5
 8012706:	f7f8 fc8d 	bl	800b024 <ucdr_serialize_bool>
 801270a:	7a3b      	ldrb	r3, [r7, #8]
 801270c:	ea00 0804 	and.w	r8, r0, r4
 8012710:	b913      	cbnz	r3, 8012718 <uxr_serialize_AGENT_Representation+0x40>
 8012712:	4640      	mov	r0, r8
 8012714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012718:	68f9      	ldr	r1, [r7, #12]
 801271a:	4628      	mov	r0, r5
 801271c:	f7f8 fecc 	bl	800b4b8 <ucdr_serialize_uint32_t>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	b303      	cbz	r3, 8012766 <uxr_serialize_AGENT_Representation+0x8e>
 8012724:	b1d0      	cbz	r0, 801275c <uxr_serialize_AGENT_Representation+0x84>
 8012726:	463e      	mov	r6, r7
 8012728:	f04f 0900 	mov.w	r9, #0
 801272c:	e001      	b.n	8012732 <uxr_serialize_AGENT_Representation+0x5a>
 801272e:	3608      	adds	r6, #8
 8012730:	b1a4      	cbz	r4, 801275c <uxr_serialize_AGENT_Representation+0x84>
 8012732:	6931      	ldr	r1, [r6, #16]
 8012734:	4628      	mov	r0, r5
 8012736:	f005 fd99 	bl	801826c <ucdr_serialize_string>
 801273a:	6971      	ldr	r1, [r6, #20]
 801273c:	4604      	mov	r4, r0
 801273e:	4628      	mov	r0, r5
 8012740:	f005 fd94 	bl	801826c <ucdr_serialize_string>
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f109 0901 	add.w	r9, r9, #1
 801274a:	4004      	ands	r4, r0
 801274c:	4599      	cmp	r9, r3
 801274e:	b2e4      	uxtb	r4, r4
 8012750:	d3ed      	bcc.n	801272e <uxr_serialize_AGENT_Representation+0x56>
 8012752:	ea08 0804 	and.w	r8, r8, r4
 8012756:	4640      	mov	r0, r8
 8012758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801275c:	f04f 0800 	mov.w	r8, #0
 8012760:	4640      	mov	r0, r8
 8012762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012766:	ea08 0800 	and.w	r8, r8, r0
 801276a:	e7d2      	b.n	8012712 <uxr_serialize_AGENT_Representation+0x3a>

0801276c <uxr_serialize_DATAWRITER_Representation>:
 801276c:	b570      	push	{r4, r5, r6, lr}
 801276e:	460d      	mov	r5, r1
 8012770:	7809      	ldrb	r1, [r1, #0]
 8012772:	4606      	mov	r6, r0
 8012774:	f7f8 fc84 	bl	800b080 <ucdr_serialize_uint8_t>
 8012778:	4604      	mov	r4, r0
 801277a:	b130      	cbz	r0, 801278a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801277c:	782b      	ldrb	r3, [r5, #0]
 801277e:	2b02      	cmp	r3, #2
 8012780:	d00c      	beq.n	801279c <uxr_serialize_DATAWRITER_Representation+0x30>
 8012782:	2b03      	cmp	r3, #3
 8012784:	d010      	beq.n	80127a8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012786:	2b01      	cmp	r3, #1
 8012788:	d008      	beq.n	801279c <uxr_serialize_DATAWRITER_Representation+0x30>
 801278a:	2202      	movs	r2, #2
 801278c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012790:	4630      	mov	r0, r6
 8012792:	f005 fca3 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012796:	4020      	ands	r0, r4
 8012798:	b2c0      	uxtb	r0, r0
 801279a:	bd70      	pop	{r4, r5, r6, pc}
 801279c:	6869      	ldr	r1, [r5, #4]
 801279e:	4630      	mov	r0, r6
 80127a0:	f005 fd64 	bl	801826c <ucdr_serialize_string>
 80127a4:	4604      	mov	r4, r0
 80127a6:	e7f0      	b.n	801278a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80127a8:	4629      	mov	r1, r5
 80127aa:	4630      	mov	r0, r6
 80127ac:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80127b0:	3104      	adds	r1, #4
 80127b2:	f7fd f8d9 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 80127b6:	4604      	mov	r4, r0
 80127b8:	e7e7      	b.n	801278a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80127ba:	bf00      	nop

080127bc <uxr_serialize_ObjectVariant.part.0>:
 80127bc:	b570      	push	{r4, r5, r6, lr}
 80127be:	780b      	ldrb	r3, [r1, #0]
 80127c0:	3b01      	subs	r3, #1
 80127c2:	460c      	mov	r4, r1
 80127c4:	4605      	mov	r5, r0
 80127c6:	2b0d      	cmp	r3, #13
 80127c8:	d816      	bhi.n	80127f8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80127ca:	e8df f003 	tbb	[pc, r3]
 80127ce:	0733      	.short	0x0733
 80127d0:	07071717 	.word	0x07071717
 80127d4:	0c150707 	.word	0x0c150707
 80127d8:	4c510c0c 	.word	0x4c510c0c
 80127dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127e0:	3104      	adds	r1, #4
 80127e2:	f7ff bfc3 	b.w	801276c <uxr_serialize_DATAWRITER_Representation>
 80127e6:	7909      	ldrb	r1, [r1, #4]
 80127e8:	f7f8 fc4a 	bl	800b080 <ucdr_serialize_uint8_t>
 80127ec:	b300      	cbz	r0, 8012830 <uxr_serialize_ObjectVariant.part.0+0x74>
 80127ee:	7923      	ldrb	r3, [r4, #4]
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	d042      	beq.n	801287a <uxr_serialize_ObjectVariant.part.0+0xbe>
 80127f4:	2b02      	cmp	r3, #2
 80127f6:	d040      	beq.n	801287a <uxr_serialize_ObjectVariant.part.0+0xbe>
 80127f8:	2001      	movs	r0, #1
 80127fa:	bd70      	pop	{r4, r5, r6, pc}
 80127fc:	7909      	ldrb	r1, [r1, #4]
 80127fe:	f7f8 fc3f 	bl	800b080 <ucdr_serialize_uint8_t>
 8012802:	4606      	mov	r6, r0
 8012804:	b158      	cbz	r0, 801281e <uxr_serialize_ObjectVariant.part.0+0x62>
 8012806:	7923      	ldrb	r3, [r4, #4]
 8012808:	2b02      	cmp	r3, #2
 801280a:	d03c      	beq.n	8012886 <uxr_serialize_ObjectVariant.part.0+0xca>
 801280c:	2b03      	cmp	r3, #3
 801280e:	d106      	bne.n	801281e <uxr_serialize_ObjectVariant.part.0+0x62>
 8012810:	68a2      	ldr	r2, [r4, #8]
 8012812:	f104 010c 	add.w	r1, r4, #12
 8012816:	4628      	mov	r0, r5
 8012818:	f7fd f8a6 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 801281c:	4606      	mov	r6, r0
 801281e:	2202      	movs	r2, #2
 8012820:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012824:	4628      	mov	r0, r5
 8012826:	f005 fc59 	bl	80180dc <ucdr_serialize_array_uint8_t>
 801282a:	4030      	ands	r0, r6
 801282c:	b2c0      	uxtb	r0, r0
 801282e:	bd70      	pop	{r4, r5, r6, pc}
 8012830:	2000      	movs	r0, #0
 8012832:	bd70      	pop	{r4, r5, r6, pc}
 8012834:	7909      	ldrb	r1, [r1, #4]
 8012836:	f7f8 fc23 	bl	800b080 <ucdr_serialize_uint8_t>
 801283a:	4606      	mov	r6, r0
 801283c:	b158      	cbz	r0, 8012856 <uxr_serialize_ObjectVariant.part.0+0x9a>
 801283e:	7923      	ldrb	r3, [r4, #4]
 8012840:	2b02      	cmp	r3, #2
 8012842:	d003      	beq.n	801284c <uxr_serialize_ObjectVariant.part.0+0x90>
 8012844:	2b03      	cmp	r3, #3
 8012846:	d024      	beq.n	8012892 <uxr_serialize_ObjectVariant.part.0+0xd6>
 8012848:	2b01      	cmp	r3, #1
 801284a:	d104      	bne.n	8012856 <uxr_serialize_ObjectVariant.part.0+0x9a>
 801284c:	68a1      	ldr	r1, [r4, #8]
 801284e:	4628      	mov	r0, r5
 8012850:	f005 fd0c 	bl	801826c <ucdr_serialize_string>
 8012854:	4606      	mov	r6, r0
 8012856:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801285a:	4628      	mov	r0, r5
 801285c:	f7f9 f938 	bl	800bad0 <ucdr_serialize_int16_t>
 8012860:	4030      	ands	r0, r6
 8012862:	b2c0      	uxtb	r0, r0
 8012864:	bd70      	pop	{r4, r5, r6, pc}
 8012866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801286a:	3104      	adds	r1, #4
 801286c:	f7ff be76 	b.w	801255c <uxr_serialize_CLIENT_Representation>
 8012870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012874:	3104      	adds	r1, #4
 8012876:	f7ff bf2f 	b.w	80126d8 <uxr_serialize_AGENT_Representation>
 801287a:	68a1      	ldr	r1, [r4, #8]
 801287c:	4628      	mov	r0, r5
 801287e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012882:	f005 bcf3 	b.w	801826c <ucdr_serialize_string>
 8012886:	68a1      	ldr	r1, [r4, #8]
 8012888:	4628      	mov	r0, r5
 801288a:	f005 fcef 	bl	801826c <ucdr_serialize_string>
 801288e:	4606      	mov	r6, r0
 8012890:	e7c5      	b.n	801281e <uxr_serialize_ObjectVariant.part.0+0x62>
 8012892:	68a2      	ldr	r2, [r4, #8]
 8012894:	f104 010c 	add.w	r1, r4, #12
 8012898:	4628      	mov	r0, r5
 801289a:	f7fd f865 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 801289e:	4606      	mov	r6, r0
 80128a0:	e7d9      	b.n	8012856 <uxr_serialize_ObjectVariant.part.0+0x9a>
 80128a2:	bf00      	nop

080128a4 <uxr_deserialize_DATAWRITER_Representation>:
 80128a4:	b570      	push	{r4, r5, r6, lr}
 80128a6:	4606      	mov	r6, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	f7f8 fbff 	bl	800b0ac <ucdr_deserialize_uint8_t>
 80128ae:	4604      	mov	r4, r0
 80128b0:	b130      	cbz	r0, 80128c0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128b2:	782b      	ldrb	r3, [r5, #0]
 80128b4:	2b02      	cmp	r3, #2
 80128b6:	d00c      	beq.n	80128d2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	d012      	beq.n	80128e2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80128bc:	2b01      	cmp	r3, #1
 80128be:	d008      	beq.n	80128d2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80128c0:	2202      	movs	r2, #2
 80128c2:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80128c6:	4630      	mov	r0, r6
 80128c8:	f005 fc6c 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 80128cc:	4020      	ands	r0, r4
 80128ce:	b2c0      	uxtb	r0, r0
 80128d0:	bd70      	pop	{r4, r5, r6, pc}
 80128d2:	6869      	ldr	r1, [r5, #4]
 80128d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128d8:	4630      	mov	r0, r6
 80128da:	f005 fcd5 	bl	8018288 <ucdr_deserialize_string>
 80128de:	4604      	mov	r4, r0
 80128e0:	e7ee      	b.n	80128c0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128e2:	1d2b      	adds	r3, r5, #4
 80128e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128e8:	f105 0108 	add.w	r1, r5, #8
 80128ec:	4630      	mov	r0, r6
 80128ee:	f7fd f84d 	bl	800f98c <ucdr_deserialize_sequence_uint8_t>
 80128f2:	4604      	mov	r4, r0
 80128f4:	e7e4      	b.n	80128c0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128f6:	bf00      	nop

080128f8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80128f8:	b570      	push	{r4, r5, r6, lr}
 80128fa:	460d      	mov	r5, r1
 80128fc:	7809      	ldrb	r1, [r1, #0]
 80128fe:	4606      	mov	r6, r0
 8012900:	f7f8 fb90 	bl	800b024 <ucdr_serialize_bool>
 8012904:	782b      	ldrb	r3, [r5, #0]
 8012906:	4604      	mov	r4, r0
 8012908:	b94b      	cbnz	r3, 801291e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801290a:	7a29      	ldrb	r1, [r5, #8]
 801290c:	4630      	mov	r0, r6
 801290e:	f7f8 fb89 	bl	800b024 <ucdr_serialize_bool>
 8012912:	7a2b      	ldrb	r3, [r5, #8]
 8012914:	4004      	ands	r4, r0
 8012916:	b2e4      	uxtb	r4, r4
 8012918:	b943      	cbnz	r3, 801292c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801291a:	4620      	mov	r0, r4
 801291c:	bd70      	pop	{r4, r5, r6, pc}
 801291e:	6869      	ldr	r1, [r5, #4]
 8012920:	4630      	mov	r0, r6
 8012922:	f005 fca3 	bl	801826c <ucdr_serialize_string>
 8012926:	4004      	ands	r4, r0
 8012928:	b2e4      	uxtb	r4, r4
 801292a:	e7ee      	b.n	801290a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801292c:	68e9      	ldr	r1, [r5, #12]
 801292e:	4630      	mov	r0, r6
 8012930:	f005 fc9c 	bl	801826c <ucdr_serialize_string>
 8012934:	4004      	ands	r4, r0
 8012936:	4620      	mov	r0, r4
 8012938:	bd70      	pop	{r4, r5, r6, pc}
 801293a:	bf00      	nop

0801293c <uxr_serialize_OBJK_Topic_Binary>:
 801293c:	b570      	push	{r4, r5, r6, lr}
 801293e:	460d      	mov	r5, r1
 8012940:	6809      	ldr	r1, [r1, #0]
 8012942:	4606      	mov	r6, r0
 8012944:	f005 fc92 	bl	801826c <ucdr_serialize_string>
 8012948:	7929      	ldrb	r1, [r5, #4]
 801294a:	4604      	mov	r4, r0
 801294c:	4630      	mov	r0, r6
 801294e:	f7f8 fb69 	bl	800b024 <ucdr_serialize_bool>
 8012952:	792b      	ldrb	r3, [r5, #4]
 8012954:	4004      	ands	r4, r0
 8012956:	b2e4      	uxtb	r4, r4
 8012958:	b943      	cbnz	r3, 801296c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801295a:	7b29      	ldrb	r1, [r5, #12]
 801295c:	4630      	mov	r0, r6
 801295e:	f7f8 fb61 	bl	800b024 <ucdr_serialize_bool>
 8012962:	7b2b      	ldrb	r3, [r5, #12]
 8012964:	4004      	ands	r4, r0
 8012966:	b93b      	cbnz	r3, 8012978 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012968:	4620      	mov	r0, r4
 801296a:	bd70      	pop	{r4, r5, r6, pc}
 801296c:	68a9      	ldr	r1, [r5, #8]
 801296e:	4630      	mov	r0, r6
 8012970:	f005 fc7c 	bl	801826c <ucdr_serialize_string>
 8012974:	4004      	ands	r4, r0
 8012976:	e7f0      	b.n	801295a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012978:	6929      	ldr	r1, [r5, #16]
 801297a:	4630      	mov	r0, r6
 801297c:	f005 fc76 	bl	801826c <ucdr_serialize_string>
 8012980:	4004      	ands	r4, r0
 8012982:	b2e4      	uxtb	r4, r4
 8012984:	4620      	mov	r0, r4
 8012986:	bd70      	pop	{r4, r5, r6, pc}

08012988 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801298c:	460c      	mov	r4, r1
 801298e:	7809      	ldrb	r1, [r1, #0]
 8012990:	4606      	mov	r6, r0
 8012992:	f7f8 fb47 	bl	800b024 <ucdr_serialize_bool>
 8012996:	7823      	ldrb	r3, [r4, #0]
 8012998:	4605      	mov	r5, r0
 801299a:	b96b      	cbnz	r3, 80129b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801299c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80129a0:	4630      	mov	r0, r6
 80129a2:	f7f8 fb3f 	bl	800b024 <ucdr_serialize_bool>
 80129a6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80129aa:	4005      	ands	r5, r0
 80129ac:	b2ed      	uxtb	r5, r5
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d16a      	bne.n	8012a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80129b2:	4628      	mov	r0, r5
 80129b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b8:	6861      	ldr	r1, [r4, #4]
 80129ba:	4630      	mov	r0, r6
 80129bc:	f7f8 fd7c 	bl	800b4b8 <ucdr_serialize_uint32_t>
 80129c0:	6863      	ldr	r3, [r4, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d06c      	beq.n	8012aa0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d068      	beq.n	8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80129ca:	68a1      	ldr	r1, [r4, #8]
 80129cc:	4630      	mov	r0, r6
 80129ce:	f005 fc4d 	bl	801826c <ucdr_serialize_string>
 80129d2:	6862      	ldr	r2, [r4, #4]
 80129d4:	2a01      	cmp	r2, #1
 80129d6:	d953      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d05f      	beq.n	8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80129dc:	68e1      	ldr	r1, [r4, #12]
 80129de:	4630      	mov	r0, r6
 80129e0:	f005 fc44 	bl	801826c <ucdr_serialize_string>
 80129e4:	6862      	ldr	r2, [r4, #4]
 80129e6:	2a02      	cmp	r2, #2
 80129e8:	d94a      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d056      	beq.n	8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80129ee:	6921      	ldr	r1, [r4, #16]
 80129f0:	4630      	mov	r0, r6
 80129f2:	f005 fc3b 	bl	801826c <ucdr_serialize_string>
 80129f6:	6862      	ldr	r2, [r4, #4]
 80129f8:	2a03      	cmp	r2, #3
 80129fa:	d941      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d04d      	beq.n	8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a00:	6961      	ldr	r1, [r4, #20]
 8012a02:	4630      	mov	r0, r6
 8012a04:	f005 fc32 	bl	801826c <ucdr_serialize_string>
 8012a08:	6862      	ldr	r2, [r4, #4]
 8012a0a:	2a04      	cmp	r2, #4
 8012a0c:	d938      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a0e:	2800      	cmp	r0, #0
 8012a10:	d044      	beq.n	8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a12:	69a1      	ldr	r1, [r4, #24]
 8012a14:	4630      	mov	r0, r6
 8012a16:	f005 fc29 	bl	801826c <ucdr_serialize_string>
 8012a1a:	6862      	ldr	r2, [r4, #4]
 8012a1c:	2a05      	cmp	r2, #5
 8012a1e:	d92f      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d03b      	beq.n	8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a24:	69e1      	ldr	r1, [r4, #28]
 8012a26:	4630      	mov	r0, r6
 8012a28:	f005 fc20 	bl	801826c <ucdr_serialize_string>
 8012a2c:	6862      	ldr	r2, [r4, #4]
 8012a2e:	2a06      	cmp	r2, #6
 8012a30:	d926      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a32:	b398      	cbz	r0, 8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a34:	6a21      	ldr	r1, [r4, #32]
 8012a36:	4630      	mov	r0, r6
 8012a38:	f005 fc18 	bl	801826c <ucdr_serialize_string>
 8012a3c:	6862      	ldr	r2, [r4, #4]
 8012a3e:	2a07      	cmp	r2, #7
 8012a40:	d91e      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a42:	b358      	cbz	r0, 8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012a46:	4630      	mov	r0, r6
 8012a48:	f005 fc10 	bl	801826c <ucdr_serialize_string>
 8012a4c:	6862      	ldr	r2, [r4, #4]
 8012a4e:	2a08      	cmp	r2, #8
 8012a50:	d916      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a52:	b318      	cbz	r0, 8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a54:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012a56:	4630      	mov	r0, r6
 8012a58:	f005 fc08 	bl	801826c <ucdr_serialize_string>
 8012a5c:	6862      	ldr	r2, [r4, #4]
 8012a5e:	2a09      	cmp	r2, #9
 8012a60:	d90e      	bls.n	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a62:	b1d8      	cbz	r0, 8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a64:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8012a68:	2709      	movs	r7, #9
 8012a6a:	e000      	b.n	8012a6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012a6c:	b1b0      	cbz	r0, 8012a9c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012a6e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8012a72:	4630      	mov	r0, r6
 8012a74:	f005 fbfa 	bl	801826c <ucdr_serialize_string>
 8012a78:	6862      	ldr	r2, [r4, #4]
 8012a7a:	3701      	adds	r7, #1
 8012a7c:	4297      	cmp	r7, r2
 8012a7e:	d3f5      	bcc.n	8012a6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012a80:	ea05 0300 	and.w	r3, r5, r0
 8012a84:	b2dd      	uxtb	r5, r3
 8012a86:	e789      	b.n	801299c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012a88:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012a8a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012a8e:	4630      	mov	r0, r6
 8012a90:	f7fc ff6a 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 8012a94:	4005      	ands	r5, r0
 8012a96:	4628      	mov	r0, r5
 8012a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a9c:	2500      	movs	r5, #0
 8012a9e:	e77d      	b.n	801299c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012aa0:	4028      	ands	r0, r5
 8012aa2:	b2c5      	uxtb	r5, r0
 8012aa4:	e77a      	b.n	801299c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012aa6:	bf00      	nop

08012aa8 <uxr_serialize_OBJK_Publisher_Binary>:
 8012aa8:	b570      	push	{r4, r5, r6, lr}
 8012aaa:	460d      	mov	r5, r1
 8012aac:	7809      	ldrb	r1, [r1, #0]
 8012aae:	4606      	mov	r6, r0
 8012ab0:	f7f8 fab8 	bl	800b024 <ucdr_serialize_bool>
 8012ab4:	782b      	ldrb	r3, [r5, #0]
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	b94b      	cbnz	r3, 8012ace <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012aba:	7a29      	ldrb	r1, [r5, #8]
 8012abc:	4630      	mov	r0, r6
 8012abe:	f7f8 fab1 	bl	800b024 <ucdr_serialize_bool>
 8012ac2:	7a2b      	ldrb	r3, [r5, #8]
 8012ac4:	4004      	ands	r4, r0
 8012ac6:	b2e4      	uxtb	r4, r4
 8012ac8:	b943      	cbnz	r3, 8012adc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012aca:	4620      	mov	r0, r4
 8012acc:	bd70      	pop	{r4, r5, r6, pc}
 8012ace:	6869      	ldr	r1, [r5, #4]
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f005 fbcb 	bl	801826c <ucdr_serialize_string>
 8012ad6:	4004      	ands	r4, r0
 8012ad8:	b2e4      	uxtb	r4, r4
 8012ada:	e7ee      	b.n	8012aba <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012adc:	f105 010c 	add.w	r1, r5, #12
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	f7ff ff51 	bl	8012988 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012ae6:	4004      	ands	r4, r0
 8012ae8:	4620      	mov	r0, r4
 8012aea:	bd70      	pop	{r4, r5, r6, pc}

08012aec <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af0:	460c      	mov	r4, r1
 8012af2:	7809      	ldrb	r1, [r1, #0]
 8012af4:	4606      	mov	r6, r0
 8012af6:	f7f8 fa95 	bl	800b024 <ucdr_serialize_bool>
 8012afa:	7823      	ldrb	r3, [r4, #0]
 8012afc:	4605      	mov	r5, r0
 8012afe:	b96b      	cbnz	r3, 8012b1c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012b00:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012b04:	4630      	mov	r0, r6
 8012b06:	f7f8 fa8d 	bl	800b024 <ucdr_serialize_bool>
 8012b0a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012b0e:	4005      	ands	r5, r0
 8012b10:	b2ed      	uxtb	r5, r5
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d16a      	bne.n	8012bec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 8012b16:	4628      	mov	r0, r5
 8012b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1c:	6861      	ldr	r1, [r4, #4]
 8012b1e:	4630      	mov	r0, r6
 8012b20:	f7f8 fcca 	bl	800b4b8 <ucdr_serialize_uint32_t>
 8012b24:	6863      	ldr	r3, [r4, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d06c      	beq.n	8012c04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d068      	beq.n	8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012b2e:	68a1      	ldr	r1, [r4, #8]
 8012b30:	4630      	mov	r0, r6
 8012b32:	f005 fb9b 	bl	801826c <ucdr_serialize_string>
 8012b36:	6862      	ldr	r2, [r4, #4]
 8012b38:	2a01      	cmp	r2, #1
 8012b3a:	d953      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d05f      	beq.n	8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012b40:	68e1      	ldr	r1, [r4, #12]
 8012b42:	4630      	mov	r0, r6
 8012b44:	f005 fb92 	bl	801826c <ucdr_serialize_string>
 8012b48:	6862      	ldr	r2, [r4, #4]
 8012b4a:	2a02      	cmp	r2, #2
 8012b4c:	d94a      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	d056      	beq.n	8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012b52:	6921      	ldr	r1, [r4, #16]
 8012b54:	4630      	mov	r0, r6
 8012b56:	f005 fb89 	bl	801826c <ucdr_serialize_string>
 8012b5a:	6862      	ldr	r2, [r4, #4]
 8012b5c:	2a03      	cmp	r2, #3
 8012b5e:	d941      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d04d      	beq.n	8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012b64:	6961      	ldr	r1, [r4, #20]
 8012b66:	4630      	mov	r0, r6
 8012b68:	f005 fb80 	bl	801826c <ucdr_serialize_string>
 8012b6c:	6862      	ldr	r2, [r4, #4]
 8012b6e:	2a04      	cmp	r2, #4
 8012b70:	d938      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b72:	2800      	cmp	r0, #0
 8012b74:	d044      	beq.n	8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012b76:	69a1      	ldr	r1, [r4, #24]
 8012b78:	4630      	mov	r0, r6
 8012b7a:	f005 fb77 	bl	801826c <ucdr_serialize_string>
 8012b7e:	6862      	ldr	r2, [r4, #4]
 8012b80:	2a05      	cmp	r2, #5
 8012b82:	d92f      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d03b      	beq.n	8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012b88:	69e1      	ldr	r1, [r4, #28]
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	f005 fb6e 	bl	801826c <ucdr_serialize_string>
 8012b90:	6862      	ldr	r2, [r4, #4]
 8012b92:	2a06      	cmp	r2, #6
 8012b94:	d926      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b96:	b398      	cbz	r0, 8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012b98:	6a21      	ldr	r1, [r4, #32]
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f005 fb66 	bl	801826c <ucdr_serialize_string>
 8012ba0:	6862      	ldr	r2, [r4, #4]
 8012ba2:	2a07      	cmp	r2, #7
 8012ba4:	d91e      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012ba6:	b358      	cbz	r0, 8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012ba8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012baa:	4630      	mov	r0, r6
 8012bac:	f005 fb5e 	bl	801826c <ucdr_serialize_string>
 8012bb0:	6862      	ldr	r2, [r4, #4]
 8012bb2:	2a08      	cmp	r2, #8
 8012bb4:	d916      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bb6:	b318      	cbz	r0, 8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012bb8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f005 fb56 	bl	801826c <ucdr_serialize_string>
 8012bc0:	6862      	ldr	r2, [r4, #4]
 8012bc2:	2a09      	cmp	r2, #9
 8012bc4:	d90e      	bls.n	8012be4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bc6:	b1d8      	cbz	r0, 8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012bc8:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8012bcc:	2709      	movs	r7, #9
 8012bce:	e000      	b.n	8012bd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012bd0:	b1b0      	cbz	r0, 8012c00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8012bd2:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	f005 fb48 	bl	801826c <ucdr_serialize_string>
 8012bdc:	6862      	ldr	r2, [r4, #4]
 8012bde:	3701      	adds	r7, #1
 8012be0:	4297      	cmp	r7, r2
 8012be2:	d3f5      	bcc.n	8012bd0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012be4:	ea05 0300 	and.w	r3, r5, r0
 8012be8:	b2dd      	uxtb	r5, r3
 8012bea:	e789      	b.n	8012b00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012bec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012bee:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f7fc feb8 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 8012bf8:	4005      	ands	r5, r0
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c00:	2500      	movs	r5, #0
 8012c02:	e77d      	b.n	8012b00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012c04:	4028      	ands	r0, r5
 8012c06:	b2c5      	uxtb	r5, r0
 8012c08:	e77a      	b.n	8012b00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012c0a:	bf00      	nop

08012c0c <uxr_serialize_OBJK_Subscriber_Binary>:
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	460d      	mov	r5, r1
 8012c10:	7809      	ldrb	r1, [r1, #0]
 8012c12:	4606      	mov	r6, r0
 8012c14:	f7f8 fa06 	bl	800b024 <ucdr_serialize_bool>
 8012c18:	782b      	ldrb	r3, [r5, #0]
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	b94b      	cbnz	r3, 8012c32 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012c1e:	7a29      	ldrb	r1, [r5, #8]
 8012c20:	4630      	mov	r0, r6
 8012c22:	f7f8 f9ff 	bl	800b024 <ucdr_serialize_bool>
 8012c26:	7a2b      	ldrb	r3, [r5, #8]
 8012c28:	4004      	ands	r4, r0
 8012c2a:	b2e4      	uxtb	r4, r4
 8012c2c:	b943      	cbnz	r3, 8012c40 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012c2e:	4620      	mov	r0, r4
 8012c30:	bd70      	pop	{r4, r5, r6, pc}
 8012c32:	6869      	ldr	r1, [r5, #4]
 8012c34:	4630      	mov	r0, r6
 8012c36:	f005 fb19 	bl	801826c <ucdr_serialize_string>
 8012c3a:	4004      	ands	r4, r0
 8012c3c:	b2e4      	uxtb	r4, r4
 8012c3e:	e7ee      	b.n	8012c1e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012c40:	f105 010c 	add.w	r1, r5, #12
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7ff ff51 	bl	8012aec <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012c4a:	4004      	ands	r4, r0
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	bd70      	pop	{r4, r5, r6, pc}

08012c50 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012c50:	b570      	push	{r4, r5, r6, lr}
 8012c52:	460d      	mov	r5, r1
 8012c54:	8809      	ldrh	r1, [r1, #0]
 8012c56:	4606      	mov	r6, r0
 8012c58:	f7f8 fa3e 	bl	800b0d8 <ucdr_serialize_uint16_t>
 8012c5c:	78a9      	ldrb	r1, [r5, #2]
 8012c5e:	4604      	mov	r4, r0
 8012c60:	4630      	mov	r0, r6
 8012c62:	f7f8 f9df 	bl	800b024 <ucdr_serialize_bool>
 8012c66:	78ab      	ldrb	r3, [r5, #2]
 8012c68:	4004      	ands	r4, r0
 8012c6a:	b2e4      	uxtb	r4, r4
 8012c6c:	b9b3      	cbnz	r3, 8012c9c <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8012c6e:	79a9      	ldrb	r1, [r5, #6]
 8012c70:	4630      	mov	r0, r6
 8012c72:	f7f8 f9d7 	bl	800b024 <ucdr_serialize_bool>
 8012c76:	79ab      	ldrb	r3, [r5, #6]
 8012c78:	4004      	ands	r4, r0
 8012c7a:	bb33      	cbnz	r3, 8012cca <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8012c7c:	7b29      	ldrb	r1, [r5, #12]
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f7f8 f9d0 	bl	800b024 <ucdr_serialize_bool>
 8012c84:	7b2b      	ldrb	r3, [r5, #12]
 8012c86:	4004      	ands	r4, r0
 8012c88:	b9c3      	cbnz	r3, 8012cbc <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8012c8a:	7d29      	ldrb	r1, [r5, #20]
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	f7f8 f9c9 	bl	800b024 <ucdr_serialize_bool>
 8012c92:	7d2b      	ldrb	r3, [r5, #20]
 8012c94:	4004      	ands	r4, r0
 8012c96:	b93b      	cbnz	r3, 8012ca8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8012c98:	4620      	mov	r0, r4
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}
 8012c9c:	88a9      	ldrh	r1, [r5, #4]
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f7f8 fa1a 	bl	800b0d8 <ucdr_serialize_uint16_t>
 8012ca4:	4004      	ands	r4, r0
 8012ca6:	e7e2      	b.n	8012c6e <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8012ca8:	69aa      	ldr	r2, [r5, #24]
 8012caa:	f105 011c 	add.w	r1, r5, #28
 8012cae:	4630      	mov	r0, r6
 8012cb0:	f7fc fe5a 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 8012cb4:	4004      	ands	r4, r0
 8012cb6:	b2e4      	uxtb	r4, r4
 8012cb8:	4620      	mov	r0, r4
 8012cba:	bd70      	pop	{r4, r5, r6, pc}
 8012cbc:	6929      	ldr	r1, [r5, #16]
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7f8 fbfa 	bl	800b4b8 <ucdr_serialize_uint32_t>
 8012cc4:	4004      	ands	r4, r0
 8012cc6:	b2e4      	uxtb	r4, r4
 8012cc8:	e7df      	b.n	8012c8a <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8012cca:	68a9      	ldr	r1, [r5, #8]
 8012ccc:	4630      	mov	r0, r6
 8012cce:	f7f8 fbf3 	bl	800b4b8 <ucdr_serialize_uint32_t>
 8012cd2:	4004      	ands	r4, r0
 8012cd4:	b2e4      	uxtb	r4, r4
 8012cd6:	e7d1      	b.n	8012c7c <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08012cd8 <uxr_serialize_OBJK_DataReader_Binary>:
 8012cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cda:	2202      	movs	r2, #2
 8012cdc:	460c      	mov	r4, r1
 8012cde:	4606      	mov	r6, r0
 8012ce0:	f005 f9fc 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012ce4:	78a1      	ldrb	r1, [r4, #2]
 8012ce6:	4605      	mov	r5, r0
 8012ce8:	4630      	mov	r0, r6
 8012cea:	f7f8 f99b 	bl	800b024 <ucdr_serialize_bool>
 8012cee:	78a3      	ldrb	r3, [r4, #2]
 8012cf0:	4005      	ands	r5, r0
 8012cf2:	b2ed      	uxtb	r5, r5
 8012cf4:	b90b      	cbnz	r3, 8012cfa <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cfa:	f104 0108 	add.w	r1, r4, #8
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f7ff ffa6 	bl	8012c50 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d04:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012d08:	4607      	mov	r7, r0
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f7f8 f98a 	bl	800b024 <ucdr_serialize_bool>
 8012d10:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012d14:	4007      	ands	r7, r0
 8012d16:	b2ff      	uxtb	r7, r7
 8012d18:	b95b      	cbnz	r3, 8012d32 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012d1a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012d1e:	4630      	mov	r0, r6
 8012d20:	f7f8 f980 	bl	800b024 <ucdr_serialize_bool>
 8012d24:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012d28:	4007      	ands	r7, r0
 8012d2a:	b94b      	cbnz	r3, 8012d40 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012d2c:	403d      	ands	r5, r7
 8012d2e:	4628      	mov	r0, r5
 8012d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d32:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012d36:	4630      	mov	r0, r6
 8012d38:	f7f8 fe02 	bl	800b940 <ucdr_serialize_uint64_t>
 8012d3c:	4007      	ands	r7, r0
 8012d3e:	e7ec      	b.n	8012d1a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012d40:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012d42:	4630      	mov	r0, r6
 8012d44:	f005 fa92 	bl	801826c <ucdr_serialize_string>
 8012d48:	4007      	ands	r7, r0
 8012d4a:	b2ff      	uxtb	r7, r7
 8012d4c:	e7ee      	b.n	8012d2c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012d4e:	bf00      	nop

08012d50 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d52:	2202      	movs	r2, #2
 8012d54:	460d      	mov	r5, r1
 8012d56:	4606      	mov	r6, r0
 8012d58:	f005 f9c0 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012d5c:	78a9      	ldrb	r1, [r5, #2]
 8012d5e:	4604      	mov	r4, r0
 8012d60:	4630      	mov	r0, r6
 8012d62:	f7f8 f95f 	bl	800b024 <ucdr_serialize_bool>
 8012d66:	78ab      	ldrb	r3, [r5, #2]
 8012d68:	4004      	ands	r4, r0
 8012d6a:	b2e4      	uxtb	r4, r4
 8012d6c:	b90b      	cbnz	r3, 8012d72 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012d6e:	4620      	mov	r0, r4
 8012d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d72:	f105 0108 	add.w	r1, r5, #8
 8012d76:	4630      	mov	r0, r6
 8012d78:	f7ff ff6a 	bl	8012c50 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d7c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012d80:	4607      	mov	r7, r0
 8012d82:	4630      	mov	r0, r6
 8012d84:	f7f8 f94e 	bl	800b024 <ucdr_serialize_bool>
 8012d88:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012d8c:	4007      	ands	r7, r0
 8012d8e:	b2ff      	uxtb	r7, r7
 8012d90:	b913      	cbnz	r3, 8012d98 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012d92:	403c      	ands	r4, r7
 8012d94:	4620      	mov	r0, r4
 8012d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d98:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f7f8 fdcf 	bl	800b940 <ucdr_serialize_uint64_t>
 8012da2:	4007      	ands	r7, r0
 8012da4:	e7f5      	b.n	8012d92 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012da6:	bf00      	nop

08012da8 <uxr_deserialize_ObjectVariant>:
 8012da8:	b570      	push	{r4, r5, r6, lr}
 8012daa:	4605      	mov	r5, r0
 8012dac:	460e      	mov	r6, r1
 8012dae:	f7f8 f97d 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8012db2:	b168      	cbz	r0, 8012dd0 <uxr_deserialize_ObjectVariant+0x28>
 8012db4:	7833      	ldrb	r3, [r6, #0]
 8012db6:	3b01      	subs	r3, #1
 8012db8:	4604      	mov	r4, r0
 8012dba:	2b0d      	cmp	r3, #13
 8012dbc:	d809      	bhi.n	8012dd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012dbe:	e8df f003 	tbb	[pc, r3]
 8012dc2:	0a64      	.short	0x0a64
 8012dc4:	0a0a2323 	.word	0x0a0a2323
 8012dc8:	10080a0a 	.word	0x10080a0a
 8012dcc:	5e411010 	.word	0x5e411010
 8012dd0:	2400      	movs	r4, #0
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	bd70      	pop	{r4, r5, r6, pc}
 8012dd6:	1d31      	adds	r1, r6, #4
 8012dd8:	4628      	mov	r0, r5
 8012dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dde:	f7ff bd61 	b.w	80128a4 <uxr_deserialize_DATAWRITER_Representation>
 8012de2:	1d31      	adds	r1, r6, #4
 8012de4:	4628      	mov	r0, r5
 8012de6:	f7f8 f961 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8012dea:	2800      	cmp	r0, #0
 8012dec:	d0f0      	beq.n	8012dd0 <uxr_deserialize_ObjectVariant+0x28>
 8012dee:	7933      	ldrb	r3, [r6, #4]
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	d001      	beq.n	8012df8 <uxr_deserialize_ObjectVariant+0x50>
 8012df4:	2b02      	cmp	r3, #2
 8012df6:	d1ec      	bne.n	8012dd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012df8:	68b1      	ldr	r1, [r6, #8]
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e04:	f005 ba40 	b.w	8018288 <ucdr_deserialize_string>
 8012e08:	1d31      	adds	r1, r6, #4
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	f7f8 f94e 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8012e10:	4604      	mov	r4, r0
 8012e12:	b170      	cbz	r0, 8012e32 <uxr_deserialize_ObjectVariant+0x8a>
 8012e14:	7933      	ldrb	r3, [r6, #4]
 8012e16:	2b02      	cmp	r3, #2
 8012e18:	d053      	beq.n	8012ec2 <uxr_deserialize_ObjectVariant+0x11a>
 8012e1a:	2b03      	cmp	r3, #3
 8012e1c:	d109      	bne.n	8012e32 <uxr_deserialize_ObjectVariant+0x8a>
 8012e1e:	f106 0308 	add.w	r3, r6, #8
 8012e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e26:	f106 010c 	add.w	r1, r6, #12
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	f7fc fdae 	bl	800f98c <ucdr_deserialize_sequence_uint8_t>
 8012e30:	4604      	mov	r4, r0
 8012e32:	2202      	movs	r2, #2
 8012e34:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012e38:	4628      	mov	r0, r5
 8012e3a:	f005 f9b3 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012e3e:	4004      	ands	r4, r0
 8012e40:	b2e4      	uxtb	r4, r4
 8012e42:	e7c6      	b.n	8012dd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012e44:	2204      	movs	r2, #4
 8012e46:	18b1      	adds	r1, r6, r2
 8012e48:	4628      	mov	r0, r5
 8012e4a:	f005 f9ab 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012e4e:	2202      	movs	r2, #2
 8012e50:	f106 0108 	add.w	r1, r6, #8
 8012e54:	4604      	mov	r4, r0
 8012e56:	4628      	mov	r0, r5
 8012e58:	f005 f9a4 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012e5c:	2202      	movs	r2, #2
 8012e5e:	4004      	ands	r4, r0
 8012e60:	f106 010a 	add.w	r1, r6, #10
 8012e64:	4628      	mov	r0, r5
 8012e66:	f005 f99d 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012e6a:	b2e4      	uxtb	r4, r4
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	f106 010c 	add.w	r1, r6, #12
 8012e72:	4628      	mov	r0, r5
 8012e74:	401c      	ands	r4, r3
 8012e76:	f7f8 f8eb 	bl	800b050 <ucdr_deserialize_bool>
 8012e7a:	4004      	ands	r4, r0
 8012e7c:	e7a9      	b.n	8012dd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012e7e:	1d31      	adds	r1, r6, #4
 8012e80:	4628      	mov	r0, r5
 8012e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e86:	f7ff bbc3 	b.w	8012610 <uxr_deserialize_CLIENT_Representation>
 8012e8a:	1d31      	adds	r1, r6, #4
 8012e8c:	4628      	mov	r0, r5
 8012e8e:	f7f8 f90d 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8012e92:	4604      	mov	r4, r0
 8012e94:	b168      	cbz	r0, 8012eb2 <uxr_deserialize_ObjectVariant+0x10a>
 8012e96:	7933      	ldrb	r3, [r6, #4]
 8012e98:	2b02      	cmp	r3, #2
 8012e9a:	d003      	beq.n	8012ea4 <uxr_deserialize_ObjectVariant+0xfc>
 8012e9c:	2b03      	cmp	r3, #3
 8012e9e:	d018      	beq.n	8012ed2 <uxr_deserialize_ObjectVariant+0x12a>
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d106      	bne.n	8012eb2 <uxr_deserialize_ObjectVariant+0x10a>
 8012ea4:	68b1      	ldr	r1, [r6, #8]
 8012ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f005 f9ec 	bl	8018288 <ucdr_deserialize_string>
 8012eb0:	4604      	mov	r4, r0
 8012eb2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	f7f8 fe94 	bl	800bbe4 <ucdr_deserialize_int16_t>
 8012ebc:	4004      	ands	r4, r0
 8012ebe:	b2e4      	uxtb	r4, r4
 8012ec0:	e787      	b.n	8012dd2 <uxr_deserialize_ObjectVariant+0x2a>
 8012ec2:	68b1      	ldr	r1, [r6, #8]
 8012ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ec8:	4628      	mov	r0, r5
 8012eca:	f005 f9dd 	bl	8018288 <ucdr_deserialize_string>
 8012ece:	4604      	mov	r4, r0
 8012ed0:	e7af      	b.n	8012e32 <uxr_deserialize_ObjectVariant+0x8a>
 8012ed2:	f106 0308 	add.w	r3, r6, #8
 8012ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012eda:	f106 010c 	add.w	r1, r6, #12
 8012ede:	4628      	mov	r0, r5
 8012ee0:	f7fc fd54 	bl	800f98c <ucdr_deserialize_sequence_uint8_t>
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	e7e4      	b.n	8012eb2 <uxr_deserialize_ObjectVariant+0x10a>

08012ee8 <uxr_deserialize_BaseObjectRequest>:
 8012ee8:	b570      	push	{r4, r5, r6, lr}
 8012eea:	2202      	movs	r2, #2
 8012eec:	4605      	mov	r5, r0
 8012eee:	460e      	mov	r6, r1
 8012ef0:	f005 f958 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012ef4:	2202      	movs	r2, #2
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	18b1      	adds	r1, r6, r2
 8012efa:	4628      	mov	r0, r5
 8012efc:	f005 f952 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8012f00:	4020      	ands	r0, r4
 8012f02:	b2c0      	uxtb	r0, r0
 8012f04:	bd70      	pop	{r4, r5, r6, pc}
 8012f06:	bf00      	nop

08012f08 <uxr_serialize_ActivityInfoVariant>:
 8012f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f0c:	460d      	mov	r5, r1
 8012f0e:	7809      	ldrb	r1, [r1, #0]
 8012f10:	4606      	mov	r6, r0
 8012f12:	f7f8 f8b5 	bl	800b080 <ucdr_serialize_uint8_t>
 8012f16:	b130      	cbz	r0, 8012f26 <uxr_serialize_ActivityInfoVariant+0x1e>
 8012f18:	782b      	ldrb	r3, [r5, #0]
 8012f1a:	2b06      	cmp	r3, #6
 8012f1c:	d014      	beq.n	8012f48 <uxr_serialize_ActivityInfoVariant+0x40>
 8012f1e:	2b0d      	cmp	r3, #13
 8012f20:	d019      	beq.n	8012f56 <uxr_serialize_ActivityInfoVariant+0x4e>
 8012f22:	2b05      	cmp	r3, #5
 8012f24:	d001      	beq.n	8012f2a <uxr_serialize_ActivityInfoVariant+0x22>
 8012f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f2a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f7f8 fdce 	bl	800bad0 <ucdr_serialize_int16_t>
 8012f34:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012f38:	4604      	mov	r4, r0
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f7f8 fd00 	bl	800b940 <ucdr_serialize_uint64_t>
 8012f40:	4020      	ands	r0, r4
 8012f42:	b2c0      	uxtb	r0, r0
 8012f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f48:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f4c:	4630      	mov	r0, r6
 8012f4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f52:	f7f8 bdbd 	b.w	800bad0 <ucdr_serialize_int16_t>
 8012f56:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	f7f8 fdb8 	bl	800bad0 <ucdr_serialize_int16_t>
 8012f60:	68e9      	ldr	r1, [r5, #12]
 8012f62:	4681      	mov	r9, r0
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7f8 faa7 	bl	800b4b8 <ucdr_serialize_uint32_t>
 8012f6a:	68eb      	ldr	r3, [r5, #12]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d051      	beq.n	8013014 <uxr_serialize_ActivityInfoVariant+0x10c>
 8012f70:	b1e8      	cbz	r0, 8012fae <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f72:	f105 0714 	add.w	r7, r5, #20
 8012f76:	f04f 0800 	mov.w	r8, #0
 8012f7a:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8012f7e:	4630      	mov	r0, r6
 8012f80:	f7f8 f87e 	bl	800b080 <ucdr_serialize_uint8_t>
 8012f84:	b198      	cbz	r0, 8012fae <uxr_serialize_ActivityInfoVariant+0xa6>
 8012f86:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8012f8a:	2b03      	cmp	r3, #3
 8012f8c:	d839      	bhi.n	8013002 <uxr_serialize_ActivityInfoVariant+0xfa>
 8012f8e:	e8df f003 	tbb	[pc, r3]
 8012f92:	1e2b      	.short	0x1e2b
 8012f94:	0211      	.short	0x0211
 8012f96:	6839      	ldr	r1, [r7, #0]
 8012f98:	4630      	mov	r0, r6
 8012f9a:	f005 f967 	bl	801826c <ucdr_serialize_string>
 8012f9e:	68eb      	ldr	r3, [r5, #12]
 8012fa0:	f108 0801 	add.w	r8, r8, #1
 8012fa4:	4598      	cmp	r8, r3
 8012fa6:	d231      	bcs.n	801300c <uxr_serialize_ActivityInfoVariant+0x104>
 8012fa8:	3718      	adds	r7, #24
 8012faa:	2800      	cmp	r0, #0
 8012fac:	d1e5      	bne.n	8012f7a <uxr_serialize_ActivityInfoVariant+0x72>
 8012fae:	2000      	movs	r0, #0
 8012fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fb4:	2210      	movs	r2, #16
 8012fb6:	4639      	mov	r1, r7
 8012fb8:	4630      	mov	r0, r6
 8012fba:	f005 f88f 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012fbe:	6939      	ldr	r1, [r7, #16]
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f7f8 fa78 	bl	800b4b8 <ucdr_serialize_uint32_t>
 8012fc8:	4020      	ands	r0, r4
 8012fca:	b2c0      	uxtb	r0, r0
 8012fcc:	e7e7      	b.n	8012f9e <uxr_serialize_ActivityInfoVariant+0x96>
 8012fce:	2204      	movs	r2, #4
 8012fd0:	4639      	mov	r1, r7
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	f005 f882 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012fd8:	88b9      	ldrh	r1, [r7, #4]
 8012fda:	4604      	mov	r4, r0
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f7f8 f87b 	bl	800b0d8 <ucdr_serialize_uint16_t>
 8012fe2:	4020      	ands	r0, r4
 8012fe4:	b2c0      	uxtb	r0, r0
 8012fe6:	e7da      	b.n	8012f9e <uxr_serialize_ActivityInfoVariant+0x96>
 8012fe8:	2202      	movs	r2, #2
 8012fea:	4639      	mov	r1, r7
 8012fec:	4630      	mov	r0, r6
 8012fee:	f005 f875 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8012ff2:	78b9      	ldrb	r1, [r7, #2]
 8012ff4:	4604      	mov	r4, r0
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f7f8 f842 	bl	800b080 <ucdr_serialize_uint8_t>
 8012ffc:	4020      	ands	r0, r4
 8012ffe:	b2c0      	uxtb	r0, r0
 8013000:	e7cd      	b.n	8012f9e <uxr_serialize_ActivityInfoVariant+0x96>
 8013002:	68eb      	ldr	r3, [r5, #12]
 8013004:	f108 0801 	add.w	r8, r8, #1
 8013008:	4598      	cmp	r8, r3
 801300a:	d308      	bcc.n	801301e <uxr_serialize_ActivityInfoVariant+0x116>
 801300c:	ea09 0000 	and.w	r0, r9, r0
 8013010:	b2c0      	uxtb	r0, r0
 8013012:	e788      	b.n	8012f26 <uxr_serialize_ActivityInfoVariant+0x1e>
 8013014:	ea09 0900 	and.w	r9, r9, r0
 8013018:	fa5f f089 	uxtb.w	r0, r9
 801301c:	e783      	b.n	8012f26 <uxr_serialize_ActivityInfoVariant+0x1e>
 801301e:	3718      	adds	r7, #24
 8013020:	e7ab      	b.n	8012f7a <uxr_serialize_ActivityInfoVariant+0x72>
 8013022:	bf00      	nop

08013024 <uxr_deserialize_BaseObjectReply>:
 8013024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013028:	2202      	movs	r2, #2
 801302a:	4606      	mov	r6, r0
 801302c:	460f      	mov	r7, r1
 801302e:	f005 f8b9 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8013032:	2202      	movs	r2, #2
 8013034:	18b9      	adds	r1, r7, r2
 8013036:	4605      	mov	r5, r0
 8013038:	4630      	mov	r0, r6
 801303a:	f005 f8b3 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 801303e:	1d39      	adds	r1, r7, #4
 8013040:	4680      	mov	r8, r0
 8013042:	4630      	mov	r0, r6
 8013044:	f7f8 f832 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8013048:	1d79      	adds	r1, r7, #5
 801304a:	4604      	mov	r4, r0
 801304c:	4630      	mov	r0, r6
 801304e:	f7f8 f82d 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8013052:	ea05 0508 	and.w	r5, r5, r8
 8013056:	402c      	ands	r4, r5
 8013058:	4020      	ands	r0, r4
 801305a:	b2c0      	uxtb	r0, r0
 801305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013060 <uxr_serialize_ReadSpecification>:
 8013060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013064:	460d      	mov	r5, r1
 8013066:	7809      	ldrb	r1, [r1, #0]
 8013068:	4606      	mov	r6, r0
 801306a:	f7f8 f809 	bl	800b080 <ucdr_serialize_uint8_t>
 801306e:	7869      	ldrb	r1, [r5, #1]
 8013070:	4604      	mov	r4, r0
 8013072:	4630      	mov	r0, r6
 8013074:	f7f8 f804 	bl	800b080 <ucdr_serialize_uint8_t>
 8013078:	78a9      	ldrb	r1, [r5, #2]
 801307a:	4004      	ands	r4, r0
 801307c:	4630      	mov	r0, r6
 801307e:	f7f7 ffd1 	bl	800b024 <ucdr_serialize_bool>
 8013082:	78ab      	ldrb	r3, [r5, #2]
 8013084:	b2e4      	uxtb	r4, r4
 8013086:	4004      	ands	r4, r0
 8013088:	b94b      	cbnz	r3, 801309e <uxr_serialize_ReadSpecification+0x3e>
 801308a:	7a29      	ldrb	r1, [r5, #8]
 801308c:	4630      	mov	r0, r6
 801308e:	f7f7 ffc9 	bl	800b024 <ucdr_serialize_bool>
 8013092:	7a2b      	ldrb	r3, [r5, #8]
 8013094:	4004      	ands	r4, r0
 8013096:	b943      	cbnz	r3, 80130aa <uxr_serialize_ReadSpecification+0x4a>
 8013098:	4620      	mov	r0, r4
 801309a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801309e:	6869      	ldr	r1, [r5, #4]
 80130a0:	4630      	mov	r0, r6
 80130a2:	f005 f8e3 	bl	801826c <ucdr_serialize_string>
 80130a6:	4004      	ands	r4, r0
 80130a8:	e7ef      	b.n	801308a <uxr_serialize_ReadSpecification+0x2a>
 80130aa:	8969      	ldrh	r1, [r5, #10]
 80130ac:	4630      	mov	r0, r6
 80130ae:	f7f8 f813 	bl	800b0d8 <ucdr_serialize_uint16_t>
 80130b2:	89a9      	ldrh	r1, [r5, #12]
 80130b4:	4607      	mov	r7, r0
 80130b6:	4630      	mov	r0, r6
 80130b8:	f7f8 f80e 	bl	800b0d8 <ucdr_serialize_uint16_t>
 80130bc:	89e9      	ldrh	r1, [r5, #14]
 80130be:	4007      	ands	r7, r0
 80130c0:	4630      	mov	r0, r6
 80130c2:	f7f8 f809 	bl	800b0d8 <ucdr_serialize_uint16_t>
 80130c6:	8a29      	ldrh	r1, [r5, #16]
 80130c8:	4680      	mov	r8, r0
 80130ca:	4630      	mov	r0, r6
 80130cc:	f7f8 f804 	bl	800b0d8 <ucdr_serialize_uint16_t>
 80130d0:	b2ff      	uxtb	r7, r7
 80130d2:	ea04 0507 	and.w	r5, r4, r7
 80130d6:	ea05 0508 	and.w	r5, r5, r8
 80130da:	ea00 0405 	and.w	r4, r0, r5
 80130de:	4620      	mov	r0, r4
 80130e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130e4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80130e4:	f7ff ba3a 	b.w	801255c <uxr_serialize_CLIENT_Representation>

080130e8 <uxr_serialize_CREATE_Payload>:
 80130e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ea:	2202      	movs	r2, #2
 80130ec:	4606      	mov	r6, r0
 80130ee:	460d      	mov	r5, r1
 80130f0:	f004 fff4 	bl	80180dc <ucdr_serialize_array_uint8_t>
 80130f4:	2202      	movs	r2, #2
 80130f6:	18a9      	adds	r1, r5, r2
 80130f8:	4604      	mov	r4, r0
 80130fa:	4630      	mov	r0, r6
 80130fc:	f004 ffee 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8013100:	7929      	ldrb	r1, [r5, #4]
 8013102:	4607      	mov	r7, r0
 8013104:	4630      	mov	r0, r6
 8013106:	f7f7 ffbb 	bl	800b080 <ucdr_serialize_uint8_t>
 801310a:	b170      	cbz	r0, 801312a <uxr_serialize_CREATE_Payload+0x42>
 801310c:	792b      	ldrb	r3, [r5, #4]
 801310e:	403c      	ands	r4, r7
 8013110:	3b01      	subs	r3, #1
 8013112:	b2e4      	uxtb	r4, r4
 8013114:	2b0d      	cmp	r3, #13
 8013116:	d809      	bhi.n	801312c <uxr_serialize_CREATE_Payload+0x44>
 8013118:	e8df f003 	tbb	[pc, r3]
 801311c:	23230a3e 	.word	0x23230a3e
 8013120:	0a0a0a0a 	.word	0x0a0a0a0a
 8013124:	12121208 	.word	0x12121208
 8013128:	5f58      	.short	0x5f58
 801312a:	2400      	movs	r4, #0
 801312c:	4620      	mov	r0, r4
 801312e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013130:	f105 0108 	add.w	r1, r5, #8
 8013134:	4630      	mov	r0, r6
 8013136:	f7ff fb19 	bl	801276c <uxr_serialize_DATAWRITER_Representation>
 801313a:	4004      	ands	r4, r0
 801313c:	4620      	mov	r0, r4
 801313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013140:	7a29      	ldrb	r1, [r5, #8]
 8013142:	4630      	mov	r0, r6
 8013144:	f7f7 ff9c 	bl	800b080 <ucdr_serialize_uint8_t>
 8013148:	2800      	cmp	r0, #0
 801314a:	d0ee      	beq.n	801312a <uxr_serialize_CREATE_Payload+0x42>
 801314c:	7a2b      	ldrb	r3, [r5, #8]
 801314e:	2b01      	cmp	r3, #1
 8013150:	d001      	beq.n	8013156 <uxr_serialize_CREATE_Payload+0x6e>
 8013152:	2b02      	cmp	r3, #2
 8013154:	d1ea      	bne.n	801312c <uxr_serialize_CREATE_Payload+0x44>
 8013156:	68e9      	ldr	r1, [r5, #12]
 8013158:	4630      	mov	r0, r6
 801315a:	f005 f887 	bl	801826c <ucdr_serialize_string>
 801315e:	4004      	ands	r4, r0
 8013160:	e7e4      	b.n	801312c <uxr_serialize_CREATE_Payload+0x44>
 8013162:	7a29      	ldrb	r1, [r5, #8]
 8013164:	4630      	mov	r0, r6
 8013166:	f7f7 ff8b 	bl	800b080 <ucdr_serialize_uint8_t>
 801316a:	4607      	mov	r7, r0
 801316c:	b158      	cbz	r0, 8013186 <uxr_serialize_CREATE_Payload+0x9e>
 801316e:	7a2b      	ldrb	r3, [r5, #8]
 8013170:	2b02      	cmp	r3, #2
 8013172:	d039      	beq.n	80131e8 <uxr_serialize_CREATE_Payload+0x100>
 8013174:	2b03      	cmp	r3, #3
 8013176:	d106      	bne.n	8013186 <uxr_serialize_CREATE_Payload+0x9e>
 8013178:	68ea      	ldr	r2, [r5, #12]
 801317a:	f105 0110 	add.w	r1, r5, #16
 801317e:	4630      	mov	r0, r6
 8013180:	f7fc fbf2 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 8013184:	4607      	mov	r7, r0
 8013186:	2202      	movs	r2, #2
 8013188:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 801318c:	4630      	mov	r0, r6
 801318e:	f004 ffa5 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8013192:	4038      	ands	r0, r7
 8013194:	4004      	ands	r4, r0
 8013196:	e7c9      	b.n	801312c <uxr_serialize_CREATE_Payload+0x44>
 8013198:	7a29      	ldrb	r1, [r5, #8]
 801319a:	4630      	mov	r0, r6
 801319c:	f7f7 ff70 	bl	800b080 <ucdr_serialize_uint8_t>
 80131a0:	4607      	mov	r7, r0
 80131a2:	b158      	cbz	r0, 80131bc <uxr_serialize_CREATE_Payload+0xd4>
 80131a4:	7a2b      	ldrb	r3, [r5, #8]
 80131a6:	2b02      	cmp	r3, #2
 80131a8:	d003      	beq.n	80131b2 <uxr_serialize_CREATE_Payload+0xca>
 80131aa:	2b03      	cmp	r3, #3
 80131ac:	d022      	beq.n	80131f4 <uxr_serialize_CREATE_Payload+0x10c>
 80131ae:	2b01      	cmp	r3, #1
 80131b0:	d104      	bne.n	80131bc <uxr_serialize_CREATE_Payload+0xd4>
 80131b2:	68e9      	ldr	r1, [r5, #12]
 80131b4:	4630      	mov	r0, r6
 80131b6:	f005 f859 	bl	801826c <ucdr_serialize_string>
 80131ba:	4607      	mov	r7, r0
 80131bc:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 80131c0:	4630      	mov	r0, r6
 80131c2:	f7f8 fc85 	bl	800bad0 <ucdr_serialize_int16_t>
 80131c6:	4038      	ands	r0, r7
 80131c8:	4004      	ands	r4, r0
 80131ca:	e7af      	b.n	801312c <uxr_serialize_CREATE_Payload+0x44>
 80131cc:	f105 0108 	add.w	r1, r5, #8
 80131d0:	4630      	mov	r0, r6
 80131d2:	f7ff fa81 	bl	80126d8 <uxr_serialize_AGENT_Representation>
 80131d6:	4004      	ands	r4, r0
 80131d8:	e7a8      	b.n	801312c <uxr_serialize_CREATE_Payload+0x44>
 80131da:	f105 0108 	add.w	r1, r5, #8
 80131de:	4630      	mov	r0, r6
 80131e0:	f7ff f9bc 	bl	801255c <uxr_serialize_CLIENT_Representation>
 80131e4:	4004      	ands	r4, r0
 80131e6:	e7a1      	b.n	801312c <uxr_serialize_CREATE_Payload+0x44>
 80131e8:	68e9      	ldr	r1, [r5, #12]
 80131ea:	4630      	mov	r0, r6
 80131ec:	f005 f83e 	bl	801826c <ucdr_serialize_string>
 80131f0:	4607      	mov	r7, r0
 80131f2:	e7c8      	b.n	8013186 <uxr_serialize_CREATE_Payload+0x9e>
 80131f4:	68ea      	ldr	r2, [r5, #12]
 80131f6:	f105 0110 	add.w	r1, r5, #16
 80131fa:	4630      	mov	r0, r6
 80131fc:	f7fc fbb4 	bl	800f968 <ucdr_serialize_sequence_uint8_t>
 8013200:	4607      	mov	r7, r0
 8013202:	e7db      	b.n	80131bc <uxr_serialize_CREATE_Payload+0xd4>

08013204 <uxr_serialize_GET_INFO_Payload>:
 8013204:	b570      	push	{r4, r5, r6, lr}
 8013206:	2202      	movs	r2, #2
 8013208:	4605      	mov	r5, r0
 801320a:	460e      	mov	r6, r1
 801320c:	f004 ff66 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8013210:	2202      	movs	r2, #2
 8013212:	18b1      	adds	r1, r6, r2
 8013214:	4604      	mov	r4, r0
 8013216:	4628      	mov	r0, r5
 8013218:	f004 ff60 	bl	80180dc <ucdr_serialize_array_uint8_t>
 801321c:	6871      	ldr	r1, [r6, #4]
 801321e:	4004      	ands	r4, r0
 8013220:	4628      	mov	r0, r5
 8013222:	f7f8 f949 	bl	800b4b8 <ucdr_serialize_uint32_t>
 8013226:	b2e4      	uxtb	r4, r4
 8013228:	4020      	ands	r0, r4
 801322a:	bd70      	pop	{r4, r5, r6, pc}

0801322c <uxr_deserialize_GET_INFO_Payload>:
 801322c:	b570      	push	{r4, r5, r6, lr}
 801322e:	2202      	movs	r2, #2
 8013230:	4605      	mov	r5, r0
 8013232:	460e      	mov	r6, r1
 8013234:	f004 ffb6 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8013238:	2202      	movs	r2, #2
 801323a:	18b1      	adds	r1, r6, r2
 801323c:	4604      	mov	r4, r0
 801323e:	4628      	mov	r0, r5
 8013240:	f004 ffb0 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8013244:	1d31      	adds	r1, r6, #4
 8013246:	4004      	ands	r4, r0
 8013248:	4628      	mov	r0, r5
 801324a:	f7f8 fa5f 	bl	800b70c <ucdr_deserialize_uint32_t>
 801324e:	b2e4      	uxtb	r4, r4
 8013250:	4020      	ands	r0, r4
 8013252:	bd70      	pop	{r4, r5, r6, pc}

08013254 <uxr_serialize_DELETE_Payload>:
 8013254:	b570      	push	{r4, r5, r6, lr}
 8013256:	2202      	movs	r2, #2
 8013258:	4605      	mov	r5, r0
 801325a:	460e      	mov	r6, r1
 801325c:	f004 ff3e 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8013260:	2202      	movs	r2, #2
 8013262:	4604      	mov	r4, r0
 8013264:	18b1      	adds	r1, r6, r2
 8013266:	4628      	mov	r0, r5
 8013268:	f004 ff38 	bl	80180dc <ucdr_serialize_array_uint8_t>
 801326c:	4020      	ands	r0, r4
 801326e:	b2c0      	uxtb	r0, r0
 8013270:	bd70      	pop	{r4, r5, r6, pc}
 8013272:	bf00      	nop

08013274 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013278:	4605      	mov	r5, r0
 801327a:	460e      	mov	r6, r1
 801327c:	f7f7 ff16 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8013280:	1c71      	adds	r1, r6, #1
 8013282:	4604      	mov	r4, r0
 8013284:	4628      	mov	r0, r5
 8013286:	f7f7 ff11 	bl	800b0ac <ucdr_deserialize_uint8_t>
 801328a:	2204      	movs	r2, #4
 801328c:	18b1      	adds	r1, r6, r2
 801328e:	4681      	mov	r9, r0
 8013290:	4628      	mov	r0, r5
 8013292:	f004 ff87 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8013296:	f106 0108 	add.w	r1, r6, #8
 801329a:	4680      	mov	r8, r0
 801329c:	2202      	movs	r2, #2
 801329e:	4628      	mov	r0, r5
 80132a0:	f004 ff80 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 80132a4:	2202      	movs	r2, #2
 80132a6:	f106 010a 	add.w	r1, r6, #10
 80132aa:	4607      	mov	r7, r0
 80132ac:	4628      	mov	r0, r5
 80132ae:	f004 ff79 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 80132b2:	ea04 0409 	and.w	r4, r4, r9
 80132b6:	4603      	mov	r3, r0
 80132b8:	f106 010c 	add.w	r1, r6, #12
 80132bc:	4628      	mov	r0, r5
 80132be:	b2e4      	uxtb	r4, r4
 80132c0:	461d      	mov	r5, r3
 80132c2:	ea04 0408 	and.w	r4, r4, r8
 80132c6:	f7f7 fec3 	bl	800b050 <ucdr_deserialize_bool>
 80132ca:	4027      	ands	r7, r4
 80132cc:	403d      	ands	r5, r7
 80132ce:	4028      	ands	r0, r5
 80132d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080132d4 <uxr_deserialize_STATUS_Payload>:
 80132d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d8:	2202      	movs	r2, #2
 80132da:	4606      	mov	r6, r0
 80132dc:	460f      	mov	r7, r1
 80132de:	f004 ff61 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 80132e2:	2202      	movs	r2, #2
 80132e4:	18b9      	adds	r1, r7, r2
 80132e6:	4605      	mov	r5, r0
 80132e8:	4630      	mov	r0, r6
 80132ea:	f004 ff5b 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 80132ee:	1d39      	adds	r1, r7, #4
 80132f0:	4680      	mov	r8, r0
 80132f2:	4630      	mov	r0, r6
 80132f4:	f7f7 feda 	bl	800b0ac <ucdr_deserialize_uint8_t>
 80132f8:	1d79      	adds	r1, r7, #5
 80132fa:	4604      	mov	r4, r0
 80132fc:	4630      	mov	r0, r6
 80132fe:	f7f7 fed5 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8013302:	ea05 0508 	and.w	r5, r5, r8
 8013306:	402c      	ands	r4, r5
 8013308:	4020      	ands	r0, r4
 801330a:	b2c0      	uxtb	r0, r0
 801330c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013310 <uxr_serialize_INFO_Payload>:
 8013310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013314:	2202      	movs	r2, #2
 8013316:	460c      	mov	r4, r1
 8013318:	4605      	mov	r5, r0
 801331a:	f004 fedf 	bl	80180dc <ucdr_serialize_array_uint8_t>
 801331e:	2202      	movs	r2, #2
 8013320:	18a1      	adds	r1, r4, r2
 8013322:	4680      	mov	r8, r0
 8013324:	4628      	mov	r0, r5
 8013326:	f004 fed9 	bl	80180dc <ucdr_serialize_array_uint8_t>
 801332a:	7921      	ldrb	r1, [r4, #4]
 801332c:	4607      	mov	r7, r0
 801332e:	4628      	mov	r0, r5
 8013330:	f7f7 fea6 	bl	800b080 <ucdr_serialize_uint8_t>
 8013334:	7961      	ldrb	r1, [r4, #5]
 8013336:	4606      	mov	r6, r0
 8013338:	4628      	mov	r0, r5
 801333a:	f7f7 fea1 	bl	800b080 <ucdr_serialize_uint8_t>
 801333e:	ea08 0807 	and.w	r8, r8, r7
 8013342:	ea06 0608 	and.w	r6, r6, r8
 8013346:	ea00 0706 	and.w	r7, r0, r6
 801334a:	7a21      	ldrb	r1, [r4, #8]
 801334c:	4628      	mov	r0, r5
 801334e:	f7f7 fe69 	bl	800b024 <ucdr_serialize_bool>
 8013352:	7a23      	ldrb	r3, [r4, #8]
 8013354:	b2ff      	uxtb	r7, r7
 8013356:	4606      	mov	r6, r0
 8013358:	b96b      	cbnz	r3, 8013376 <uxr_serialize_INFO_Payload+0x66>
 801335a:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801335e:	4628      	mov	r0, r5
 8013360:	f7f7 fe60 	bl	800b024 <ucdr_serialize_bool>
 8013364:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013368:	4030      	ands	r0, r6
 801336a:	b2c6      	uxtb	r6, r0
 801336c:	b983      	cbnz	r3, 8013390 <uxr_serialize_INFO_Payload+0x80>
 801336e:	ea06 0007 	and.w	r0, r6, r7
 8013372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013376:	7b21      	ldrb	r1, [r4, #12]
 8013378:	4628      	mov	r0, r5
 801337a:	f7f7 fe81 	bl	800b080 <ucdr_serialize_uint8_t>
 801337e:	b188      	cbz	r0, 80133a4 <uxr_serialize_INFO_Payload+0x94>
 8013380:	f104 010c 	add.w	r1, r4, #12
 8013384:	4628      	mov	r0, r5
 8013386:	f7ff fa19 	bl	80127bc <uxr_serialize_ObjectVariant.part.0>
 801338a:	4030      	ands	r0, r6
 801338c:	b2c6      	uxtb	r6, r0
 801338e:	e7e4      	b.n	801335a <uxr_serialize_INFO_Payload+0x4a>
 8013390:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013394:	4628      	mov	r0, r5
 8013396:	f7ff fdb7 	bl	8012f08 <uxr_serialize_ActivityInfoVariant>
 801339a:	4006      	ands	r6, r0
 801339c:	ea06 0007 	and.w	r0, r6, r7
 80133a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133a4:	4606      	mov	r6, r0
 80133a6:	e7d8      	b.n	801335a <uxr_serialize_INFO_Payload+0x4a>

080133a8 <uxr_serialize_READ_DATA_Payload>:
 80133a8:	b570      	push	{r4, r5, r6, lr}
 80133aa:	2202      	movs	r2, #2
 80133ac:	4605      	mov	r5, r0
 80133ae:	460e      	mov	r6, r1
 80133b0:	f004 fe94 	bl	80180dc <ucdr_serialize_array_uint8_t>
 80133b4:	2202      	movs	r2, #2
 80133b6:	18b1      	adds	r1, r6, r2
 80133b8:	4604      	mov	r4, r0
 80133ba:	4628      	mov	r0, r5
 80133bc:	f004 fe8e 	bl	80180dc <ucdr_serialize_array_uint8_t>
 80133c0:	1d31      	adds	r1, r6, #4
 80133c2:	4004      	ands	r4, r0
 80133c4:	4628      	mov	r0, r5
 80133c6:	f7ff fe4b 	bl	8013060 <uxr_serialize_ReadSpecification>
 80133ca:	b2e4      	uxtb	r4, r4
 80133cc:	4020      	ands	r0, r4
 80133ce:	bd70      	pop	{r4, r5, r6, pc}

080133d0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80133d0:	b570      	push	{r4, r5, r6, lr}
 80133d2:	2202      	movs	r2, #2
 80133d4:	4605      	mov	r5, r0
 80133d6:	460e      	mov	r6, r1
 80133d8:	f004 fe80 	bl	80180dc <ucdr_serialize_array_uint8_t>
 80133dc:	2202      	movs	r2, #2
 80133de:	4604      	mov	r4, r0
 80133e0:	18b1      	adds	r1, r6, r2
 80133e2:	4628      	mov	r0, r5
 80133e4:	f004 fe7a 	bl	80180dc <ucdr_serialize_array_uint8_t>
 80133e8:	4020      	ands	r0, r4
 80133ea:	b2c0      	uxtb	r0, r0
 80133ec:	bd70      	pop	{r4, r5, r6, pc}
 80133ee:	bf00      	nop

080133f0 <uxr_serialize_ACKNACK_Payload>:
 80133f0:	b570      	push	{r4, r5, r6, lr}
 80133f2:	460c      	mov	r4, r1
 80133f4:	460e      	mov	r6, r1
 80133f6:	f834 1b02 	ldrh.w	r1, [r4], #2
 80133fa:	4605      	mov	r5, r0
 80133fc:	f7f7 fe6c 	bl	800b0d8 <ucdr_serialize_uint16_t>
 8013400:	2202      	movs	r2, #2
 8013402:	4621      	mov	r1, r4
 8013404:	4604      	mov	r4, r0
 8013406:	4628      	mov	r0, r5
 8013408:	f004 fe68 	bl	80180dc <ucdr_serialize_array_uint8_t>
 801340c:	7931      	ldrb	r1, [r6, #4]
 801340e:	4004      	ands	r4, r0
 8013410:	4628      	mov	r0, r5
 8013412:	f7f7 fe35 	bl	800b080 <ucdr_serialize_uint8_t>
 8013416:	b2e4      	uxtb	r4, r4
 8013418:	4020      	ands	r0, r4
 801341a:	bd70      	pop	{r4, r5, r6, pc}

0801341c <uxr_deserialize_ACKNACK_Payload>:
 801341c:	b570      	push	{r4, r5, r6, lr}
 801341e:	4605      	mov	r5, r0
 8013420:	460e      	mov	r6, r1
 8013422:	f7f7 ff5d 	bl	800b2e0 <ucdr_deserialize_uint16_t>
 8013426:	2202      	movs	r2, #2
 8013428:	18b1      	adds	r1, r6, r2
 801342a:	4604      	mov	r4, r0
 801342c:	4628      	mov	r0, r5
 801342e:	f004 feb9 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8013432:	1d31      	adds	r1, r6, #4
 8013434:	4004      	ands	r4, r0
 8013436:	4628      	mov	r0, r5
 8013438:	f7f7 fe38 	bl	800b0ac <ucdr_deserialize_uint8_t>
 801343c:	b2e4      	uxtb	r4, r4
 801343e:	4020      	ands	r0, r4
 8013440:	bd70      	pop	{r4, r5, r6, pc}
 8013442:	bf00      	nop

08013444 <uxr_serialize_HEARTBEAT_Payload>:
 8013444:	b570      	push	{r4, r5, r6, lr}
 8013446:	460d      	mov	r5, r1
 8013448:	8809      	ldrh	r1, [r1, #0]
 801344a:	4606      	mov	r6, r0
 801344c:	f7f7 fe44 	bl	800b0d8 <ucdr_serialize_uint16_t>
 8013450:	8869      	ldrh	r1, [r5, #2]
 8013452:	4604      	mov	r4, r0
 8013454:	4630      	mov	r0, r6
 8013456:	f7f7 fe3f 	bl	800b0d8 <ucdr_serialize_uint16_t>
 801345a:	7929      	ldrb	r1, [r5, #4]
 801345c:	4004      	ands	r4, r0
 801345e:	4630      	mov	r0, r6
 8013460:	f7f7 fe0e 	bl	800b080 <ucdr_serialize_uint8_t>
 8013464:	b2e4      	uxtb	r4, r4
 8013466:	4020      	ands	r0, r4
 8013468:	bd70      	pop	{r4, r5, r6, pc}
 801346a:	bf00      	nop

0801346c <uxr_deserialize_HEARTBEAT_Payload>:
 801346c:	b570      	push	{r4, r5, r6, lr}
 801346e:	4605      	mov	r5, r0
 8013470:	460e      	mov	r6, r1
 8013472:	f7f7 ff35 	bl	800b2e0 <ucdr_deserialize_uint16_t>
 8013476:	1cb1      	adds	r1, r6, #2
 8013478:	4604      	mov	r4, r0
 801347a:	4628      	mov	r0, r5
 801347c:	f7f7 ff30 	bl	800b2e0 <ucdr_deserialize_uint16_t>
 8013480:	1d31      	adds	r1, r6, #4
 8013482:	4004      	ands	r4, r0
 8013484:	4628      	mov	r0, r5
 8013486:	f7f7 fe11 	bl	800b0ac <ucdr_deserialize_uint8_t>
 801348a:	b2e4      	uxtb	r4, r4
 801348c:	4020      	ands	r0, r4
 801348e:	bd70      	pop	{r4, r5, r6, pc}

08013490 <uxr_serialize_TIMESTAMP_Payload>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	460d      	mov	r5, r1
 8013494:	6809      	ldr	r1, [r1, #0]
 8013496:	4606      	mov	r6, r0
 8013498:	f7f8 fc20 	bl	800bcdc <ucdr_serialize_int32_t>
 801349c:	6869      	ldr	r1, [r5, #4]
 801349e:	4604      	mov	r4, r0
 80134a0:	4630      	mov	r0, r6
 80134a2:	f7f8 f809 	bl	800b4b8 <ucdr_serialize_uint32_t>
 80134a6:	4020      	ands	r0, r4
 80134a8:	b2c0      	uxtb	r0, r0
 80134aa:	bd70      	pop	{r4, r5, r6, pc}

080134ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80134ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b0:	4605      	mov	r5, r0
 80134b2:	460e      	mov	r6, r1
 80134b4:	f7f8 fcac 	bl	800be10 <ucdr_deserialize_int32_t>
 80134b8:	1d31      	adds	r1, r6, #4
 80134ba:	4607      	mov	r7, r0
 80134bc:	4628      	mov	r0, r5
 80134be:	f7f8 f925 	bl	800b70c <ucdr_deserialize_uint32_t>
 80134c2:	f106 0108 	add.w	r1, r6, #8
 80134c6:	4680      	mov	r8, r0
 80134c8:	4628      	mov	r0, r5
 80134ca:	f7f8 fca1 	bl	800be10 <ucdr_deserialize_int32_t>
 80134ce:	f106 010c 	add.w	r1, r6, #12
 80134d2:	4604      	mov	r4, r0
 80134d4:	4628      	mov	r0, r5
 80134d6:	f7f8 f919 	bl	800b70c <ucdr_deserialize_uint32_t>
 80134da:	ea07 0708 	and.w	r7, r7, r8
 80134de:	403c      	ands	r4, r7
 80134e0:	f106 0110 	add.w	r1, r6, #16
 80134e4:	4004      	ands	r4, r0
 80134e6:	4628      	mov	r0, r5
 80134e8:	f7f8 fc92 	bl	800be10 <ucdr_deserialize_int32_t>
 80134ec:	f106 0114 	add.w	r1, r6, #20
 80134f0:	4607      	mov	r7, r0
 80134f2:	4628      	mov	r0, r5
 80134f4:	f7f8 f90a 	bl	800b70c <ucdr_deserialize_uint32_t>
 80134f8:	b2e4      	uxtb	r4, r4
 80134fa:	403c      	ands	r4, r7
 80134fc:	4020      	ands	r0, r4
 80134fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013502:	bf00      	nop

08013504 <uxr_serialize_SampleIdentity>:
 8013504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013508:	220c      	movs	r2, #12
 801350a:	4604      	mov	r4, r0
 801350c:	460d      	mov	r5, r1
 801350e:	f004 fde5 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8013512:	2203      	movs	r2, #3
 8013514:	f105 010c 	add.w	r1, r5, #12
 8013518:	4680      	mov	r8, r0
 801351a:	4620      	mov	r0, r4
 801351c:	f004 fdde 	bl	80180dc <ucdr_serialize_array_uint8_t>
 8013520:	7be9      	ldrb	r1, [r5, #15]
 8013522:	4681      	mov	r9, r0
 8013524:	4620      	mov	r0, r4
 8013526:	f7f7 fdab 	bl	800b080 <ucdr_serialize_uint8_t>
 801352a:	6929      	ldr	r1, [r5, #16]
 801352c:	4607      	mov	r7, r0
 801352e:	4620      	mov	r0, r4
 8013530:	f7f8 fbd4 	bl	800bcdc <ucdr_serialize_int32_t>
 8013534:	6969      	ldr	r1, [r5, #20]
 8013536:	4606      	mov	r6, r0
 8013538:	4620      	mov	r0, r4
 801353a:	f7f7 ffbd 	bl	800b4b8 <ucdr_serialize_uint32_t>
 801353e:	ea08 0809 	and.w	r8, r8, r9
 8013542:	ea07 0708 	and.w	r7, r7, r8
 8013546:	403e      	ands	r6, r7
 8013548:	4030      	ands	r0, r6
 801354a:	b2c0      	uxtb	r0, r0
 801354c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013550 <uxr_deserialize_SampleIdentity>:
 8013550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013554:	220c      	movs	r2, #12
 8013556:	4604      	mov	r4, r0
 8013558:	460d      	mov	r5, r1
 801355a:	f004 fe23 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 801355e:	2203      	movs	r2, #3
 8013560:	f105 010c 	add.w	r1, r5, #12
 8013564:	4680      	mov	r8, r0
 8013566:	4620      	mov	r0, r4
 8013568:	f004 fe1c 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 801356c:	f105 010f 	add.w	r1, r5, #15
 8013570:	4681      	mov	r9, r0
 8013572:	4620      	mov	r0, r4
 8013574:	f7f7 fd9a 	bl	800b0ac <ucdr_deserialize_uint8_t>
 8013578:	f105 0110 	add.w	r1, r5, #16
 801357c:	4607      	mov	r7, r0
 801357e:	4620      	mov	r0, r4
 8013580:	f7f8 fc46 	bl	800be10 <ucdr_deserialize_int32_t>
 8013584:	f105 0114 	add.w	r1, r5, #20
 8013588:	4606      	mov	r6, r0
 801358a:	4620      	mov	r0, r4
 801358c:	f7f8 f8be 	bl	800b70c <ucdr_deserialize_uint32_t>
 8013590:	ea08 0809 	and.w	r8, r8, r9
 8013594:	ea07 0708 	and.w	r7, r7, r8
 8013598:	403e      	ands	r6, r7
 801359a:	4030      	ands	r0, r6
 801359c:	b2c0      	uxtb	r0, r0
 801359e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135a2:	bf00      	nop

080135a4 <mobi_interfaces__msg__EncodersStamped__get_type_hash>:
 80135a4:	4800      	ldr	r0, [pc, #0]	@ (80135a8 <mobi_interfaces__msg__EncodersStamped__get_type_hash+0x4>)
 80135a6:	4770      	bx	lr
 80135a8:	20000bf8 	.word	0x20000bf8

080135ac <mobi_interfaces__msg__EncodersStamped__get_type_description>:
 80135ac:	b570      	push	{r4, r5, r6, lr}
 80135ae:	4e11      	ldr	r6, [pc, #68]	@ (80135f4 <mobi_interfaces__msg__EncodersStamped__get_type_description+0x48>)
 80135b0:	7835      	ldrb	r5, [r6, #0]
 80135b2:	b10d      	cbz	r5, 80135b8 <mobi_interfaces__msg__EncodersStamped__get_type_description+0xc>
 80135b4:	4810      	ldr	r0, [pc, #64]	@ (80135f8 <mobi_interfaces__msg__EncodersStamped__get_type_description+0x4c>)
 80135b6:	bd70      	pop	{r4, r5, r6, pc}
 80135b8:	4628      	mov	r0, r5
 80135ba:	f004 fcf9 	bl	8017fb0 <builtin_interfaces__msg__Time__get_type_description>
 80135be:	300c      	adds	r0, #12
 80135c0:	c807      	ldmia	r0, {r0, r1, r2}
 80135c2:	4c0e      	ldr	r4, [pc, #56]	@ (80135fc <mobi_interfaces__msg__EncodersStamped__get_type_description+0x50>)
 80135c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80135c8:	4628      	mov	r0, r5
 80135ca:	f005 fbb5 	bl	8018d38 <mobi_interfaces__msg__Encoders__get_type_description>
 80135ce:	300c      	adds	r0, #12
 80135d0:	c807      	ldmia	r0, {r0, r1, r2}
 80135d2:	f104 0318 	add.w	r3, r4, #24
 80135d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80135da:	4628      	mov	r0, r5
 80135dc:	f004 fc74 	bl	8017ec8 <std_msgs__msg__Header__get_type_description>
 80135e0:	300c      	adds	r0, #12
 80135e2:	c807      	ldmia	r0, {r0, r1, r2}
 80135e4:	3430      	adds	r4, #48	@ 0x30
 80135e6:	2301      	movs	r3, #1
 80135e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80135ec:	7033      	strb	r3, [r6, #0]
 80135ee:	4802      	ldr	r0, [pc, #8]	@ (80135f8 <mobi_interfaces__msg__EncodersStamped__get_type_description+0x4c>)
 80135f0:	bd70      	pop	{r4, r5, r6, pc}
 80135f2:	bf00      	nop
 80135f4:	2000cf4d 	.word	0x2000cf4d
 80135f8:	0801e860 	.word	0x0801e860
 80135fc:	20000c68 	.word	0x20000c68

08013600 <mobi_interfaces__msg__EncodersStamped__get_type_description_sources>:
 8013600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013602:	4e1e      	ldr	r6, [pc, #120]	@ (801367c <mobi_interfaces__msg__EncodersStamped__get_type_description_sources+0x7c>)
 8013604:	7837      	ldrb	r7, [r6, #0]
 8013606:	b10f      	cbz	r7, 801360c <mobi_interfaces__msg__EncodersStamped__get_type_description_sources+0xc>
 8013608:	481d      	ldr	r0, [pc, #116]	@ (8013680 <mobi_interfaces__msg__EncodersStamped__get_type_description_sources+0x80>)
 801360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801360c:	4d1d      	ldr	r5, [pc, #116]	@ (8013684 <mobi_interfaces__msg__EncodersStamped__get_type_description_sources+0x84>)
 801360e:	4c1e      	ldr	r4, [pc, #120]	@ (8013688 <mobi_interfaces__msg__EncodersStamped__get_type_description_sources+0x88>)
 8013610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013618:	682b      	ldr	r3, [r5, #0]
 801361a:	4625      	mov	r5, r4
 801361c:	4638      	mov	r0, r7
 801361e:	f845 3b04 	str.w	r3, [r5], #4
 8013622:	f004 fcd1 	bl	8017fc8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013626:	4684      	mov	ip, r0
 8013628:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801362c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801362e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013634:	4638      	mov	r0, r7
 8013636:	f8dc 3000 	ldr.w	r3, [ip]
 801363a:	602b      	str	r3, [r5, #0]
 801363c:	f005 fb88 	bl	8018d50 <mobi_interfaces__msg__Encoders__get_individual_type_description_source>
 8013640:	4684      	mov	ip, r0
 8013642:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013646:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 801364a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801364c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013652:	4638      	mov	r0, r7
 8013654:	f8dc 3000 	ldr.w	r3, [ip]
 8013658:	602b      	str	r3, [r5, #0]
 801365a:	f004 fc4d 	bl	8017ef8 <std_msgs__msg__Header__get_individual_type_description_source>
 801365e:	2301      	movs	r3, #1
 8013660:	4684      	mov	ip, r0
 8013662:	7033      	strb	r3, [r6, #0]
 8013664:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013668:	344c      	adds	r4, #76	@ 0x4c
 801366a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801366c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013672:	f8dc 3000 	ldr.w	r3, [ip]
 8013676:	4802      	ldr	r0, [pc, #8]	@ (8013680 <mobi_interfaces__msg__EncodersStamped__get_type_description_sources+0x80>)
 8013678:	6023      	str	r3, [r4, #0]
 801367a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801367c:	2000cf4c 	.word	0x2000cf4c
 8013680:	0801e830 	.word	0x0801e830
 8013684:	0801e83c 	.word	0x0801e83c
 8013688:	2000cebc 	.word	0x2000cebc

0801368c <mobi_interfaces__msg__EncodersStamped__init>:
 801368c:	b1d8      	cbz	r0, 80136c6 <mobi_interfaces__msg__EncodersStamped__init+0x3a>
 801368e:	b538      	push	{r3, r4, r5, lr}
 8013690:	4604      	mov	r4, r0
 8013692:	f004 fc5d 	bl	8017f50 <std_msgs__msg__Header__init>
 8013696:	b130      	cbz	r0, 80136a6 <mobi_interfaces__msg__EncodersStamped__init+0x1a>
 8013698:	f104 0514 	add.w	r5, r4, #20
 801369c:	4628      	mov	r0, r5
 801369e:	f005 fb77 	bl	8018d90 <mobi_interfaces__msg__Encoders__init>
 80136a2:	b148      	cbz	r0, 80136b8 <mobi_interfaces__msg__EncodersStamped__init+0x2c>
 80136a4:	bd38      	pop	{r3, r4, r5, pc}
 80136a6:	4620      	mov	r0, r4
 80136a8:	f004 fc72 	bl	8017f90 <std_msgs__msg__Header__fini>
 80136ac:	f104 0014 	add.w	r0, r4, #20
 80136b0:	f005 fb72 	bl	8018d98 <mobi_interfaces__msg__Encoders__fini>
 80136b4:	2000      	movs	r0, #0
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	4620      	mov	r0, r4
 80136ba:	f004 fc69 	bl	8017f90 <std_msgs__msg__Header__fini>
 80136be:	4628      	mov	r0, r5
 80136c0:	f005 fb6a 	bl	8018d98 <mobi_interfaces__msg__Encoders__fini>
 80136c4:	e7f6      	b.n	80136b4 <mobi_interfaces__msg__EncodersStamped__init+0x28>
 80136c6:	2000      	movs	r0, #0
 80136c8:	4770      	bx	lr
 80136ca:	bf00      	nop

080136cc <mobi_interfaces__msg__EncodersStamped__fini>:
 80136cc:	b148      	cbz	r0, 80136e2 <mobi_interfaces__msg__EncodersStamped__fini+0x16>
 80136ce:	b510      	push	{r4, lr}
 80136d0:	4604      	mov	r4, r0
 80136d2:	f004 fc5d 	bl	8017f90 <std_msgs__msg__Header__fini>
 80136d6:	f104 0014 	add.w	r0, r4, #20
 80136da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136de:	f005 bb5b 	b.w	8018d98 <mobi_interfaces__msg__Encoders__fini>
 80136e2:	4770      	bx	lr

080136e4 <mobi_interfaces__msg__UltraRanges__get_type_hash>:
 80136e4:	4800      	ldr	r0, [pc, #0]	@ (80136e8 <mobi_interfaces__msg__UltraRanges__get_type_hash+0x4>)
 80136e6:	4770      	bx	lr
 80136e8:	20000dc0 	.word	0x20000dc0

080136ec <mobi_interfaces__msg__UltraRanges__get_type_description>:
 80136ec:	b570      	push	{r4, r5, r6, lr}
 80136ee:	4e11      	ldr	r6, [pc, #68]	@ (8013734 <mobi_interfaces__msg__UltraRanges__get_type_description+0x48>)
 80136f0:	7835      	ldrb	r5, [r6, #0]
 80136f2:	b10d      	cbz	r5, 80136f8 <mobi_interfaces__msg__UltraRanges__get_type_description+0xc>
 80136f4:	4810      	ldr	r0, [pc, #64]	@ (8013738 <mobi_interfaces__msg__UltraRanges__get_type_description+0x4c>)
 80136f6:	bd70      	pop	{r4, r5, r6, pc}
 80136f8:	4628      	mov	r0, r5
 80136fa:	f004 fc59 	bl	8017fb0 <builtin_interfaces__msg__Time__get_type_description>
 80136fe:	300c      	adds	r0, #12
 8013700:	c807      	ldmia	r0, {r0, r1, r2}
 8013702:	4c0e      	ldr	r4, [pc, #56]	@ (801373c <mobi_interfaces__msg__UltraRanges__get_type_description+0x50>)
 8013704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013708:	4628      	mov	r0, r5
 801370a:	f004 fb6b 	bl	8017de4 <sensor_msgs__msg__Range__get_type_description>
 801370e:	300c      	adds	r0, #12
 8013710:	c807      	ldmia	r0, {r0, r1, r2}
 8013712:	f104 0318 	add.w	r3, r4, #24
 8013716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801371a:	4628      	mov	r0, r5
 801371c:	f004 fbd4 	bl	8017ec8 <std_msgs__msg__Header__get_type_description>
 8013720:	300c      	adds	r0, #12
 8013722:	c807      	ldmia	r0, {r0, r1, r2}
 8013724:	3430      	adds	r4, #48	@ 0x30
 8013726:	2301      	movs	r3, #1
 8013728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801372c:	7033      	strb	r3, [r6, #0]
 801372e:	4802      	ldr	r0, [pc, #8]	@ (8013738 <mobi_interfaces__msg__UltraRanges__get_type_description+0x4c>)
 8013730:	bd70      	pop	{r4, r5, r6, pc}
 8013732:	bf00      	nop
 8013734:	2000cfe1 	.word	0x2000cfe1
 8013738:	0801e8b4 	.word	0x0801e8b4
 801373c:	20000ea8 	.word	0x20000ea8

08013740 <mobi_interfaces__msg__UltraRanges__get_type_description_sources>:
 8013740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013742:	4e1e      	ldr	r6, [pc, #120]	@ (80137bc <mobi_interfaces__msg__UltraRanges__get_type_description_sources+0x7c>)
 8013744:	7837      	ldrb	r7, [r6, #0]
 8013746:	b10f      	cbz	r7, 801374c <mobi_interfaces__msg__UltraRanges__get_type_description_sources+0xc>
 8013748:	481d      	ldr	r0, [pc, #116]	@ (80137c0 <mobi_interfaces__msg__UltraRanges__get_type_description_sources+0x80>)
 801374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801374c:	4d1d      	ldr	r5, [pc, #116]	@ (80137c4 <mobi_interfaces__msg__UltraRanges__get_type_description_sources+0x84>)
 801374e:	4c1e      	ldr	r4, [pc, #120]	@ (80137c8 <mobi_interfaces__msg__UltraRanges__get_type_description_sources+0x88>)
 8013750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013758:	682b      	ldr	r3, [r5, #0]
 801375a:	4625      	mov	r5, r4
 801375c:	4638      	mov	r0, r7
 801375e:	f845 3b04 	str.w	r3, [r5], #4
 8013762:	f004 fc31 	bl	8017fc8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013766:	4684      	mov	ip, r0
 8013768:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801376c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801376e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013774:	4638      	mov	r0, r7
 8013776:	f8dc 3000 	ldr.w	r3, [ip]
 801377a:	602b      	str	r3, [r5, #0]
 801377c:	f004 fb52 	bl	8017e24 <sensor_msgs__msg__Range__get_individual_type_description_source>
 8013780:	4684      	mov	ip, r0
 8013782:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013786:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 801378a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801378c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013792:	4638      	mov	r0, r7
 8013794:	f8dc 3000 	ldr.w	r3, [ip]
 8013798:	602b      	str	r3, [r5, #0]
 801379a:	f004 fbad 	bl	8017ef8 <std_msgs__msg__Header__get_individual_type_description_source>
 801379e:	2301      	movs	r3, #1
 80137a0:	4684      	mov	ip, r0
 80137a2:	7033      	strb	r3, [r6, #0]
 80137a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137a8:	344c      	adds	r4, #76	@ 0x4c
 80137aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137b2:	f8dc 3000 	ldr.w	r3, [ip]
 80137b6:	4802      	ldr	r0, [pc, #8]	@ (80137c0 <mobi_interfaces__msg__UltraRanges__get_type_description_sources+0x80>)
 80137b8:	6023      	str	r3, [r4, #0]
 80137ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137bc:	2000cfe0 	.word	0x2000cfe0
 80137c0:	0801e884 	.word	0x0801e884
 80137c4:	0801e890 	.word	0x0801e890
 80137c8:	2000cf50 	.word	0x2000cf50

080137cc <mobi_interfaces__msg__UltraRanges__init>:
 80137cc:	2800      	cmp	r0, #0
 80137ce:	d04d      	beq.n	801386c <mobi_interfaces__msg__UltraRanges__init+0xa0>
 80137d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137d4:	4604      	mov	r4, r0
 80137d6:	f004 fb61 	bl	8017e9c <sensor_msgs__msg__Range__init>
 80137da:	b300      	cbz	r0, 801381e <mobi_interfaces__msg__UltraRanges__init+0x52>
 80137dc:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
 80137e0:	4628      	mov	r0, r5
 80137e2:	f004 fb5b 	bl	8017e9c <sensor_msgs__msg__Range__init>
 80137e6:	b3e0      	cbz	r0, 8013862 <mobi_interfaces__msg__UltraRanges__init+0x96>
 80137e8:	f104 0658 	add.w	r6, r4, #88	@ 0x58
 80137ec:	4630      	mov	r0, r6
 80137ee:	f004 fb55 	bl	8017e9c <sensor_msgs__msg__Range__init>
 80137f2:	b370      	cbz	r0, 8013852 <mobi_interfaces__msg__UltraRanges__init+0x86>
 80137f4:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80137f8:	4638      	mov	r0, r7
 80137fa:	f004 fb4f 	bl	8017e9c <sensor_msgs__msg__Range__init>
 80137fe:	b3b8      	cbz	r0, 8013870 <mobi_interfaces__msg__UltraRanges__init+0xa4>
 8013800:	f104 08b0 	add.w	r8, r4, #176	@ 0xb0
 8013804:	4640      	mov	r0, r8
 8013806:	f004 fb49 	bl	8017e9c <sensor_msgs__msg__Range__init>
 801380a:	2800      	cmp	r0, #0
 801380c:	d04e      	beq.n	80138ac <mobi_interfaces__msg__UltraRanges__init+0xe0>
 801380e:	f104 09dc 	add.w	r9, r4, #220	@ 0xdc
 8013812:	4648      	mov	r0, r9
 8013814:	f004 fb42 	bl	8017e9c <sensor_msgs__msg__Range__init>
 8013818:	b3a8      	cbz	r0, 8013886 <mobi_interfaces__msg__UltraRanges__init+0xba>
 801381a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801381e:	4620      	mov	r0, r4
 8013820:	f004 fb4a 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013824:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8013828:	f004 fb46 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 801382c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013830:	f004 fb42 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013834:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 8013838:	f004 fb3e 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 801383c:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 8013840:	f004 fb3a 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013844:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 8013848:	f004 fb36 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 801384c:	2000      	movs	r0, #0
 801384e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013852:	4620      	mov	r0, r4
 8013854:	f004 fb30 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013858:	4628      	mov	r0, r5
 801385a:	f004 fb2d 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 801385e:	4630      	mov	r0, r6
 8013860:	e7e6      	b.n	8013830 <mobi_interfaces__msg__UltraRanges__init+0x64>
 8013862:	4620      	mov	r0, r4
 8013864:	f004 fb28 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013868:	4628      	mov	r0, r5
 801386a:	e7dd      	b.n	8013828 <mobi_interfaces__msg__UltraRanges__init+0x5c>
 801386c:	2000      	movs	r0, #0
 801386e:	4770      	bx	lr
 8013870:	4620      	mov	r0, r4
 8013872:	f004 fb21 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013876:	4628      	mov	r0, r5
 8013878:	f004 fb1e 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 801387c:	4630      	mov	r0, r6
 801387e:	f004 fb1b 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013882:	4638      	mov	r0, r7
 8013884:	e7d8      	b.n	8013838 <mobi_interfaces__msg__UltraRanges__init+0x6c>
 8013886:	4620      	mov	r0, r4
 8013888:	f004 fb16 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 801388c:	4628      	mov	r0, r5
 801388e:	f004 fb13 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013892:	4630      	mov	r0, r6
 8013894:	f004 fb10 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 8013898:	4638      	mov	r0, r7
 801389a:	f004 fb0d 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 801389e:	4640      	mov	r0, r8
 80138a0:	f004 fb0a 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138a4:	4648      	mov	r0, r9
 80138a6:	f004 fb07 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138aa:	e7cf      	b.n	801384c <mobi_interfaces__msg__UltraRanges__init+0x80>
 80138ac:	4620      	mov	r0, r4
 80138ae:	f004 fb03 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138b2:	4628      	mov	r0, r5
 80138b4:	f004 fb00 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138b8:	4630      	mov	r0, r6
 80138ba:	f004 fafd 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138be:	4638      	mov	r0, r7
 80138c0:	f004 fafa 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138c4:	4640      	mov	r0, r8
 80138c6:	f004 faf7 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138ca:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 80138ce:	f004 faf3 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138d2:	e7bb      	b.n	801384c <mobi_interfaces__msg__UltraRanges__init+0x80>

080138d4 <mobi_interfaces__msg__UltraRanges__fini>:
 80138d4:	b1c8      	cbz	r0, 801390a <mobi_interfaces__msg__UltraRanges__fini+0x36>
 80138d6:	b510      	push	{r4, lr}
 80138d8:	4604      	mov	r4, r0
 80138da:	f004 faed 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138de:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80138e2:	f004 fae9 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138e6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80138ea:	f004 fae5 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138ee:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 80138f2:	f004 fae1 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138f6:	f104 00b0 	add.w	r0, r4, #176	@ 0xb0
 80138fa:	f004 fadd 	bl	8017eb8 <sensor_msgs__msg__Range__fini>
 80138fe:	f104 00dc 	add.w	r0, r4, #220	@ 0xdc
 8013902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013906:	f004 bad7 	b.w	8017eb8 <sensor_msgs__msg__Range__fini>
 801390a:	4770      	bx	lr

0801390c <mobi_interfaces__msg__Encoders__rosidl_typesupport_introspection_c__Encoders_init_function>:
 801390c:	f005 ba40 	b.w	8018d90 <mobi_interfaces__msg__Encoders__init>

08013910 <mobi_interfaces__msg__Encoders__rosidl_typesupport_introspection_c__Encoders_fini_function>:
 8013910:	f005 ba42 	b.w	8018d98 <mobi_interfaces__msg__Encoders__fini>

08013914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders>:
 8013914:	4b04      	ldr	r3, [pc, #16]	@ (8013928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders+0x14>)
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	b10a      	cbz	r2, 801391e <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders+0xa>
 801391a:	4803      	ldr	r0, [pc, #12]	@ (8013928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders+0x14>)
 801391c:	4770      	bx	lr
 801391e:	4a03      	ldr	r2, [pc, #12]	@ (801392c <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders+0x18>)
 8013920:	4801      	ldr	r0, [pc, #4]	@ (8013928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders+0x14>)
 8013922:	6812      	ldr	r2, [r2, #0]
 8013924:	601a      	str	r2, [r3, #0]
 8013926:	4770      	bx	lr
 8013928:	2000114c 	.word	0x2000114c
 801392c:	200004cc 	.word	0x200004cc

08013930 <get_serialized_size_mobi_interfaces__msg__Encoders>:
 8013930:	b1e0      	cbz	r0, 801396c <get_serialized_size_mobi_interfaces__msg__Encoders+0x3c>
 8013932:	b570      	push	{r4, r5, r6, lr}
 8013934:	460d      	mov	r5, r1
 8013936:	4628      	mov	r0, r5
 8013938:	2104      	movs	r1, #4
 801393a:	f7f8 fdfd 	bl	800c538 <ucdr_alignment>
 801393e:	2104      	movs	r1, #4
 8013940:	186c      	adds	r4, r5, r1
 8013942:	4404      	add	r4, r0
 8013944:	4620      	mov	r0, r4
 8013946:	f7f8 fdf7 	bl	800c538 <ucdr_alignment>
 801394a:	1d06      	adds	r6, r0, #4
 801394c:	4426      	add	r6, r4
 801394e:	2104      	movs	r1, #4
 8013950:	4630      	mov	r0, r6
 8013952:	f7f8 fdf1 	bl	800c538 <ucdr_alignment>
 8013956:	1d04      	adds	r4, r0, #4
 8013958:	4434      	add	r4, r6
 801395a:	2104      	movs	r1, #4
 801395c:	4620      	mov	r0, r4
 801395e:	f7f8 fdeb 	bl	800c538 <ucdr_alignment>
 8013962:	f1c5 0504 	rsb	r5, r5, #4
 8013966:	4405      	add	r5, r0
 8013968:	1928      	adds	r0, r5, r4
 801396a:	bd70      	pop	{r4, r5, r6, pc}
 801396c:	4770      	bx	lr
 801396e:	bf00      	nop

08013970 <_Encoders__cdr_deserialize>:
 8013970:	b538      	push	{r3, r4, r5, lr}
 8013972:	460c      	mov	r4, r1
 8013974:	b191      	cbz	r1, 801399c <_Encoders__cdr_deserialize+0x2c>
 8013976:	4605      	mov	r5, r0
 8013978:	f7f8 fa4a 	bl	800be10 <ucdr_deserialize_int32_t>
 801397c:	1d21      	adds	r1, r4, #4
 801397e:	4628      	mov	r0, r5
 8013980:	f7f8 fa46 	bl	800be10 <ucdr_deserialize_int32_t>
 8013984:	f104 0108 	add.w	r1, r4, #8
 8013988:	4628      	mov	r0, r5
 801398a:	f7f8 fa41 	bl	800be10 <ucdr_deserialize_int32_t>
 801398e:	f104 010c 	add.w	r1, r4, #12
 8013992:	4628      	mov	r0, r5
 8013994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013998:	f7f8 ba3a 	b.w	800be10 <ucdr_deserialize_int32_t>
 801399c:	4608      	mov	r0, r1
 801399e:	bd38      	pop	{r3, r4, r5, pc}

080139a0 <_Encoders__cdr_serialize>:
 80139a0:	b1a0      	cbz	r0, 80139cc <_Encoders__cdr_serialize+0x2c>
 80139a2:	b538      	push	{r3, r4, r5, lr}
 80139a4:	460d      	mov	r5, r1
 80139a6:	4604      	mov	r4, r0
 80139a8:	6801      	ldr	r1, [r0, #0]
 80139aa:	4628      	mov	r0, r5
 80139ac:	f7f8 f996 	bl	800bcdc <ucdr_serialize_int32_t>
 80139b0:	6861      	ldr	r1, [r4, #4]
 80139b2:	4628      	mov	r0, r5
 80139b4:	f7f8 f992 	bl	800bcdc <ucdr_serialize_int32_t>
 80139b8:	68a1      	ldr	r1, [r4, #8]
 80139ba:	4628      	mov	r0, r5
 80139bc:	f7f8 f98e 	bl	800bcdc <ucdr_serialize_int32_t>
 80139c0:	68e1      	ldr	r1, [r4, #12]
 80139c2:	4628      	mov	r0, r5
 80139c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139c8:	f7f8 b988 	b.w	800bcdc <ucdr_serialize_int32_t>
 80139cc:	4770      	bx	lr
 80139ce:	bf00      	nop

080139d0 <_Encoders__get_serialized_size>:
 80139d0:	b1c0      	cbz	r0, 8013a04 <_Encoders__get_serialized_size+0x34>
 80139d2:	b538      	push	{r3, r4, r5, lr}
 80139d4:	2104      	movs	r1, #4
 80139d6:	2000      	movs	r0, #0
 80139d8:	f7f8 fdae 	bl	800c538 <ucdr_alignment>
 80139dc:	1d04      	adds	r4, r0, #4
 80139de:	2104      	movs	r1, #4
 80139e0:	4620      	mov	r0, r4
 80139e2:	f7f8 fda9 	bl	800c538 <ucdr_alignment>
 80139e6:	1d05      	adds	r5, r0, #4
 80139e8:	4425      	add	r5, r4
 80139ea:	2104      	movs	r1, #4
 80139ec:	4628      	mov	r0, r5
 80139ee:	f7f8 fda3 	bl	800c538 <ucdr_alignment>
 80139f2:	1d04      	adds	r4, r0, #4
 80139f4:	442c      	add	r4, r5
 80139f6:	2104      	movs	r1, #4
 80139f8:	4620      	mov	r0, r4
 80139fa:	f7f8 fd9d 	bl	800c538 <ucdr_alignment>
 80139fe:	3004      	adds	r0, #4
 8013a00:	4420      	add	r0, r4
 8013a02:	bd38      	pop	{r3, r4, r5, pc}
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop

08013a08 <_Encoders__max_serialized_size>:
 8013a08:	b538      	push	{r3, r4, r5, lr}
 8013a0a:	2104      	movs	r1, #4
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	f7f8 fd93 	bl	800c538 <ucdr_alignment>
 8013a12:	1d04      	adds	r4, r0, #4
 8013a14:	2104      	movs	r1, #4
 8013a16:	4620      	mov	r0, r4
 8013a18:	f7f8 fd8e 	bl	800c538 <ucdr_alignment>
 8013a1c:	1d05      	adds	r5, r0, #4
 8013a1e:	4425      	add	r5, r4
 8013a20:	2104      	movs	r1, #4
 8013a22:	4628      	mov	r0, r5
 8013a24:	f7f8 fd88 	bl	800c538 <ucdr_alignment>
 8013a28:	1d04      	adds	r4, r0, #4
 8013a2a:	442c      	add	r4, r5
 8013a2c:	2104      	movs	r1, #4
 8013a2e:	4620      	mov	r0, r4
 8013a30:	f7f8 fd82 	bl	800c538 <ucdr_alignment>
 8013a34:	3004      	adds	r0, #4
 8013a36:	4420      	add	r0, r4
 8013a38:	bd38      	pop	{r3, r4, r5, pc}
 8013a3a:	bf00      	nop

08013a3c <max_serialized_size_mobi_interfaces__msg__Encoders>:
 8013a3c:	b570      	push	{r4, r5, r6, lr}
 8013a3e:	2301      	movs	r3, #1
 8013a40:	460c      	mov	r4, r1
 8013a42:	7003      	strb	r3, [r0, #0]
 8013a44:	2104      	movs	r1, #4
 8013a46:	4620      	mov	r0, r4
 8013a48:	f7f8 fd76 	bl	800c538 <ucdr_alignment>
 8013a4c:	2104      	movs	r1, #4
 8013a4e:	1863      	adds	r3, r4, r1
 8013a50:	18c5      	adds	r5, r0, r3
 8013a52:	4628      	mov	r0, r5
 8013a54:	f7f8 fd70 	bl	800c538 <ucdr_alignment>
 8013a58:	1d06      	adds	r6, r0, #4
 8013a5a:	442e      	add	r6, r5
 8013a5c:	2104      	movs	r1, #4
 8013a5e:	4630      	mov	r0, r6
 8013a60:	f7f8 fd6a 	bl	800c538 <ucdr_alignment>
 8013a64:	1d05      	adds	r5, r0, #4
 8013a66:	4435      	add	r5, r6
 8013a68:	2104      	movs	r1, #4
 8013a6a:	4628      	mov	r0, r5
 8013a6c:	f7f8 fd64 	bl	800c538 <ucdr_alignment>
 8013a70:	f1c4 0404 	rsb	r4, r4, #4
 8013a74:	4420      	add	r0, r4
 8013a76:	4428      	add	r0, r5
 8013a78:	bd70      	pop	{r4, r5, r6, pc}
 8013a7a:	bf00      	nop

08013a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders>:
 8013a7c:	4800      	ldr	r0, [pc, #0]	@ (8013a80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__mobi_interfaces__msg__Encoders+0x4>)
 8013a7e:	4770      	bx	lr
 8013a80:	20001254 	.word	0x20001254

08013a84 <rcl_client_get_rmw_handle>:
 8013a84:	b118      	cbz	r0, 8013a8e <rcl_client_get_rmw_handle+0xa>
 8013a86:	6800      	ldr	r0, [r0, #0]
 8013a88:	b108      	cbz	r0, 8013a8e <rcl_client_get_rmw_handle+0xa>
 8013a8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013a8e:	4770      	bx	lr

08013a90 <rcl_send_request>:
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d048      	beq.n	8013b26 <rcl_send_request+0x96>
 8013a94:	b570      	push	{r4, r5, r6, lr}
 8013a96:	4604      	mov	r4, r0
 8013a98:	6800      	ldr	r0, [r0, #0]
 8013a9a:	b08a      	sub	sp, #40	@ 0x28
 8013a9c:	b1c0      	cbz	r0, 8013ad0 <rcl_send_request+0x40>
 8013a9e:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013aa2:	b1ab      	cbz	r3, 8013ad0 <rcl_send_request+0x40>
 8013aa4:	460e      	mov	r6, r1
 8013aa6:	b1b9      	cbz	r1, 8013ad8 <rcl_send_request+0x48>
 8013aa8:	4615      	mov	r5, r2
 8013aaa:	b1aa      	cbz	r2, 8013ad8 <rcl_send_request+0x48>
 8013aac:	2105      	movs	r1, #5
 8013aae:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013ab2:	f002 feed 	bl	8016890 <__atomic_load_8>
 8013ab6:	6823      	ldr	r3, [r4, #0]
 8013ab8:	e9c5 0100 	strd	r0, r1, [r5]
 8013abc:	462a      	mov	r2, r5
 8013abe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013ac2:	4631      	mov	r1, r6
 8013ac4:	f003 fe4e 	bl	8017764 <rmw_send_request>
 8013ac8:	b148      	cbz	r0, 8013ade <rcl_send_request+0x4e>
 8013aca:	2001      	movs	r0, #1
 8013acc:	b00a      	add	sp, #40	@ 0x28
 8013ace:	bd70      	pop	{r4, r5, r6, pc}
 8013ad0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013ad4:	b00a      	add	sp, #40	@ 0x28
 8013ad6:	bd70      	pop	{r4, r5, r6, pc}
 8013ad8:	200b      	movs	r0, #11
 8013ada:	b00a      	add	sp, #40	@ 0x28
 8013adc:	bd70      	pop	{r4, r5, r6, pc}
 8013ade:	6820      	ldr	r0, [r4, #0]
 8013ae0:	2305      	movs	r3, #5
 8013ae2:	9300      	str	r3, [sp, #0]
 8013ae4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ae8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013aec:	f002 ff3c 	bl	8016968 <__atomic_exchange_8>
 8013af0:	6823      	ldr	r3, [r4, #0]
 8013af2:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8013af6:	b1a2      	cbz	r2, 8013b22 <rcl_send_request+0x92>
 8013af8:	a905      	add	r1, sp, #20
 8013afa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013afe:	f003 fd97 	bl	8017630 <rmw_get_gid_for_client>
 8013b02:	4601      	mov	r1, r0
 8013b04:	b990      	cbnz	r0, 8013b2c <rcl_send_request+0x9c>
 8013b06:	6822      	ldr	r2, [r4, #0]
 8013b08:	ab06      	add	r3, sp, #24
 8013b0a:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8013b0e:	9302      	str	r3, [sp, #8]
 8013b10:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013b14:	4632      	mov	r2, r6
 8013b16:	e9cd 4500 	strd	r4, r5, [sp]
 8013b1a:	f000 fd71 	bl	8014600 <rcl_send_service_event_message>
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d1d4      	bne.n	8013acc <rcl_send_request+0x3c>
 8013b22:	2000      	movs	r0, #0
 8013b24:	e7d2      	b.n	8013acc <rcl_send_request+0x3c>
 8013b26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013b2a:	4770      	bx	lr
 8013b2c:	f000 f87a 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b30:	e7cc      	b.n	8013acc <rcl_send_request+0x3c>
 8013b32:	bf00      	nop
 8013b34:	0000      	movs	r0, r0
	...

08013b38 <rcl_take_response>:
 8013b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b3a:	468e      	mov	lr, r1
 8013b3c:	460c      	mov	r4, r1
 8013b3e:	4617      	mov	r7, r2
 8013b40:	4605      	mov	r5, r0
 8013b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b46:	b095      	sub	sp, #84	@ 0x54
 8013b48:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8013b4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b50:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013b54:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b58:	2d00      	cmp	r5, #0
 8013b5a:	d044      	beq.n	8013be6 <rcl_take_response+0xae>
 8013b5c:	682b      	ldr	r3, [r5, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d041      	beq.n	8013be6 <rcl_take_response+0xae>
 8013b62:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013b66:	2800      	cmp	r0, #0
 8013b68:	d03d      	beq.n	8013be6 <rcl_take_response+0xae>
 8013b6a:	2f00      	cmp	r7, #0
 8013b6c:	d03e      	beq.n	8013bec <rcl_take_response+0xb4>
 8013b6e:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8013c08 <rcl_take_response+0xd0>
 8013b72:	2300      	movs	r3, #0
 8013b74:	f88d 3013 	strb.w	r3, [sp, #19]
 8013b78:	463a      	mov	r2, r7
 8013b7a:	f10d 0313 	add.w	r3, sp, #19
 8013b7e:	a90a      	add	r1, sp, #40	@ 0x28
 8013b80:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013b84:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013b88:	f003 feec 	bl	8017964 <rmw_take_response>
 8013b8c:	4606      	mov	r6, r0
 8013b8e:	bb78      	cbnz	r0, 8013bf0 <rcl_take_response+0xb8>
 8013b90:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8013b94:	b373      	cbz	r3, 8013bf4 <rcl_take_response+0xbc>
 8013b96:	682b      	ldr	r3, [r5, #0]
 8013b98:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8013b9c:	b1aa      	cbz	r2, 8013bca <rcl_take_response+0x92>
 8013b9e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013ba2:	a905      	add	r1, sp, #20
 8013ba4:	f003 fd44 	bl	8017630 <rmw_get_gid_for_client>
 8013ba8:	bb38      	cbnz	r0, 8013bfa <rcl_take_response+0xc2>
 8013baa:	682b      	ldr	r3, [r5, #0]
 8013bac:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8013bb0:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8013bb4:	ab06      	add	r3, sp, #24
 8013bb6:	ed8d 7b00 	vstr	d7, [sp]
 8013bba:	463a      	mov	r2, r7
 8013bbc:	9302      	str	r3, [sp, #8]
 8013bbe:	2103      	movs	r1, #3
 8013bc0:	f000 fd1e 	bl	8014600 <rcl_send_service_event_message>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	bf18      	it	ne
 8013bc8:	4606      	movne	r6, r0
 8013bca:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8013bce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013bd2:	46a4      	mov	ip, r4
 8013bd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013bd8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013bdc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013be0:	4630      	mov	r0, r6
 8013be2:	b015      	add	sp, #84	@ 0x54
 8013be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013be6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013bea:	e7ee      	b.n	8013bca <rcl_take_response+0x92>
 8013bec:	260b      	movs	r6, #11
 8013bee:	e7ec      	b.n	8013bca <rcl_take_response+0x92>
 8013bf0:	2601      	movs	r6, #1
 8013bf2:	e7ea      	b.n	8013bca <rcl_take_response+0x92>
 8013bf4:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8013bf8:	e7e7      	b.n	8013bca <rcl_take_response+0x92>
 8013bfa:	f000 f813 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 8013bfe:	4606      	mov	r6, r0
 8013c00:	e7e3      	b.n	8013bca <rcl_take_response+0x92>
 8013c02:	bf00      	nop
 8013c04:	f3af 8000 	nop.w
	...

08013c10 <rcl_client_is_valid>:
 8013c10:	b130      	cbz	r0, 8013c20 <rcl_client_is_valid+0x10>
 8013c12:	6800      	ldr	r0, [r0, #0]
 8013c14:	b120      	cbz	r0, 8013c20 <rcl_client_is_valid+0x10>
 8013c16:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013c1a:	3800      	subs	r0, #0
 8013c1c:	bf18      	it	ne
 8013c1e:	2001      	movne	r0, #1
 8013c20:	4770      	bx	lr
 8013c22:	bf00      	nop

08013c24 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013c24:	280b      	cmp	r0, #11
 8013c26:	dc0d      	bgt.n	8013c44 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	db09      	blt.n	8013c40 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013c2c:	280b      	cmp	r0, #11
 8013c2e:	d807      	bhi.n	8013c40 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013c30:	e8df f000 	tbb	[pc, r0]
 8013c34:	07060607 	.word	0x07060607
 8013c38:	06060606 	.word	0x06060606
 8013c3c:	07070606 	.word	0x07070606
 8013c40:	2001      	movs	r0, #1
 8013c42:	4770      	bx	lr
 8013c44:	28cb      	cmp	r0, #203	@ 0xcb
 8013c46:	bf14      	ite	ne
 8013c48:	2001      	movne	r0, #1
 8013c4a:	20cb      	moveq	r0, #203	@ 0xcb
 8013c4c:	4770      	bx	lr
 8013c4e:	bf00      	nop

08013c50 <rcl_get_zero_initialized_context>:
 8013c50:	4a03      	ldr	r2, [pc, #12]	@ (8013c60 <rcl_get_zero_initialized_context+0x10>)
 8013c52:	4603      	mov	r3, r0
 8013c54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c58:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	4770      	bx	lr
 8013c60:	0801e8f8 	.word	0x0801e8f8

08013c64 <rcl_context_is_valid>:
 8013c64:	b118      	cbz	r0, 8013c6e <rcl_context_is_valid+0xa>
 8013c66:	6840      	ldr	r0, [r0, #4]
 8013c68:	3800      	subs	r0, #0
 8013c6a:	bf18      	it	ne
 8013c6c:	2001      	movne	r0, #1
 8013c6e:	4770      	bx	lr

08013c70 <__cleanup_context>:
 8013c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c74:	4606      	mov	r6, r0
 8013c76:	6800      	ldr	r0, [r0, #0]
 8013c78:	2300      	movs	r3, #0
 8013c7a:	6073      	str	r3, [r6, #4]
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d042      	beq.n	8013d06 <__cleanup_context+0x96>
 8013c80:	6943      	ldr	r3, [r0, #20]
 8013c82:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013c86:	6907      	ldr	r7, [r0, #16]
 8013c88:	b39b      	cbz	r3, 8013cf2 <__cleanup_context+0x82>
 8013c8a:	3014      	adds	r0, #20
 8013c8c:	f7f8 fee6 	bl	800ca5c <rcl_init_options_fini>
 8013c90:	4680      	mov	r8, r0
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d144      	bne.n	8013d20 <__cleanup_context+0xb0>
 8013c96:	6830      	ldr	r0, [r6, #0]
 8013c98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c9a:	b123      	cbz	r3, 8013ca6 <__cleanup_context+0x36>
 8013c9c:	3028      	adds	r0, #40	@ 0x28
 8013c9e:	f7fa fb13 	bl	800e2c8 <rmw_context_fini>
 8013ca2:	bbb8      	cbnz	r0, 8013d14 <__cleanup_context+0xa4>
 8013ca4:	6830      	ldr	r0, [r6, #0]
 8013ca6:	6a03      	ldr	r3, [r0, #32]
 8013ca8:	b1db      	cbz	r3, 8013ce2 <__cleanup_context+0x72>
 8013caa:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013cae:	2a01      	cmp	r2, #1
 8013cb0:	f17c 0100 	sbcs.w	r1, ip, #0
 8013cb4:	db11      	blt.n	8013cda <__cleanup_context+0x6a>
 8013cb6:	2400      	movs	r4, #0
 8013cb8:	4625      	mov	r5, r4
 8013cba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013cbe:	4639      	mov	r1, r7
 8013cc0:	b1c8      	cbz	r0, 8013cf6 <__cleanup_context+0x86>
 8013cc2:	47c8      	blx	r9
 8013cc4:	6833      	ldr	r3, [r6, #0]
 8013cc6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013cca:	3401      	adds	r4, #1
 8013ccc:	f145 0500 	adc.w	r5, r5, #0
 8013cd0:	4294      	cmp	r4, r2
 8013cd2:	eb75 010c 	sbcs.w	r1, r5, ip
 8013cd6:	6a1b      	ldr	r3, [r3, #32]
 8013cd8:	dbef      	blt.n	8013cba <__cleanup_context+0x4a>
 8013cda:	4618      	mov	r0, r3
 8013cdc:	4639      	mov	r1, r7
 8013cde:	47c8      	blx	r9
 8013ce0:	6830      	ldr	r0, [r6, #0]
 8013ce2:	4639      	mov	r1, r7
 8013ce4:	47c8      	blx	r9
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	e9c6 3300 	strd	r3, r3, [r6]
 8013cec:	4640      	mov	r0, r8
 8013cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cf2:	4698      	mov	r8, r3
 8013cf4:	e7d0      	b.n	8013c98 <__cleanup_context+0x28>
 8013cf6:	3401      	adds	r4, #1
 8013cf8:	f145 0500 	adc.w	r5, r5, #0
 8013cfc:	4294      	cmp	r4, r2
 8013cfe:	eb75 010c 	sbcs.w	r1, r5, ip
 8013d02:	dbda      	blt.n	8013cba <__cleanup_context+0x4a>
 8013d04:	e7e9      	b.n	8013cda <__cleanup_context+0x6a>
 8013d06:	4680      	mov	r8, r0
 8013d08:	2300      	movs	r3, #0
 8013d0a:	e9c6 3300 	strd	r3, r3, [r6]
 8013d0e:	4640      	mov	r0, r8
 8013d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d14:	f1b8 0f00 	cmp.w	r8, #0
 8013d18:	d005      	beq.n	8013d26 <__cleanup_context+0xb6>
 8013d1a:	f7f9 ffa5 	bl	800dc68 <rcutils_reset_error>
 8013d1e:	e7c1      	b.n	8013ca4 <__cleanup_context+0x34>
 8013d20:	f7f9 ffa2 	bl	800dc68 <rcutils_reset_error>
 8013d24:	e7b7      	b.n	8013c96 <__cleanup_context+0x26>
 8013d26:	f7ff ff7d 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 8013d2a:	4680      	mov	r8, r0
 8013d2c:	e7f5      	b.n	8013d1a <__cleanup_context+0xaa>
 8013d2e:	bf00      	nop

08013d30 <rcl_init>:
 8013d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d34:	1e04      	subs	r4, r0, #0
 8013d36:	b0a5      	sub	sp, #148	@ 0x94
 8013d38:	460d      	mov	r5, r1
 8013d3a:	4617      	mov	r7, r2
 8013d3c:	461e      	mov	r6, r3
 8013d3e:	dd13      	ble.n	8013d68 <rcl_init+0x38>
 8013d40:	b161      	cbz	r1, 8013d5c <rcl_init+0x2c>
 8013d42:	f1a1 0e04 	sub.w	lr, r1, #4
 8013d46:	f04f 0c00 	mov.w	ip, #0
 8013d4a:	e001      	b.n	8013d50 <rcl_init+0x20>
 8013d4c:	4564      	cmp	r4, ip
 8013d4e:	d00d      	beq.n	8013d6c <rcl_init+0x3c>
 8013d50:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8013d54:	f10c 0c01 	add.w	ip, ip, #1
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d1f7      	bne.n	8013d4c <rcl_init+0x1c>
 8013d5c:	f04f 080b 	mov.w	r8, #11
 8013d60:	4640      	mov	r0, r8
 8013d62:	b025      	add	sp, #148	@ 0x94
 8013d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d68:	2900      	cmp	r1, #0
 8013d6a:	d1f7      	bne.n	8013d5c <rcl_init+0x2c>
 8013d6c:	2f00      	cmp	r7, #0
 8013d6e:	d0f5      	beq.n	8013d5c <rcl_init+0x2c>
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d0f2      	beq.n	8013d5c <rcl_init+0x2c>
 8013d76:	469c      	mov	ip, r3
 8013d78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d7c:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8013d80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d84:	f8dc 3000 	ldr.w	r3, [ip]
 8013d88:	f8ce 3000 	str.w	r3, [lr]
 8013d8c:	a81f      	add	r0, sp, #124	@ 0x7c
 8013d8e:	f7f9 ff45 	bl	800dc1c <rcutils_allocator_is_valid>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d0e2      	beq.n	8013d5c <rcl_init+0x2c>
 8013d96:	2e00      	cmp	r6, #0
 8013d98:	d0e0      	beq.n	8013d5c <rcl_init+0x2c>
 8013d9a:	6833      	ldr	r3, [r6, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d173      	bne.n	8013e88 <rcl_init+0x158>
 8013da0:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8013da4:	2198      	movs	r1, #152	@ 0x98
 8013da6:	2001      	movs	r0, #1
 8013da8:	4798      	blx	r3
 8013daa:	4680      	mov	r8, r0
 8013dac:	6030      	str	r0, [r6, #0]
 8013dae:	2800      	cmp	r0, #0
 8013db0:	f000 80b2 	beq.w	8013f18 <rcl_init+0x1e8>
 8013db4:	a802      	add	r0, sp, #8
 8013db6:	f003 f8f7 	bl	8016fa8 <rmw_get_zero_initialized_context>
 8013dba:	a902      	add	r1, sp, #8
 8013dbc:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8013dc0:	2270      	movs	r2, #112	@ 0x70
 8013dc2:	f007 f864 	bl	801ae8e <memcpy>
 8013dc6:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8013dca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013dce:	f8d6 8000 	ldr.w	r8, [r6]
 8013dd2:	46c4      	mov	ip, r8
 8013dd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dd8:	f8de 3000 	ldr.w	r3, [lr]
 8013ddc:	f8cc 3000 	str.w	r3, [ip]
 8013de0:	f108 0114 	add.w	r1, r8, #20
 8013de4:	4638      	mov	r0, r7
 8013de6:	f7f8 fe63 	bl	800cab0 <rcl_init_options_copy>
 8013dea:	4680      	mov	r8, r0
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d147      	bne.n	8013e80 <rcl_init+0x150>
 8013df0:	f8d6 9000 	ldr.w	r9, [r6]
 8013df4:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8013df8:	f8c9 0020 	str.w	r0, [r9, #32]
 8013dfc:	f8c9 4018 	str.w	r4, [r9, #24]
 8013e00:	f8c9 a01c 	str.w	sl, [r9, #28]
 8013e04:	2c00      	cmp	r4, #0
 8013e06:	d047      	beq.n	8013e98 <rcl_init+0x168>
 8013e08:	2d00      	cmp	r5, #0
 8013e0a:	d045      	beq.n	8013e98 <rcl_init+0x168>
 8013e0c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8013e10:	2104      	movs	r1, #4
 8013e12:	4620      	mov	r0, r4
 8013e14:	4798      	blx	r3
 8013e16:	f8c9 0020 	str.w	r0, [r9, #32]
 8013e1a:	f8d6 9000 	ldr.w	r9, [r6]
 8013e1e:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8013e22:	f1bb 0f00 	cmp.w	fp, #0
 8013e26:	d029      	beq.n	8013e7c <rcl_init+0x14c>
 8013e28:	2c01      	cmp	r4, #1
 8013e2a:	f17a 0300 	sbcs.w	r3, sl, #0
 8013e2e:	db33      	blt.n	8013e98 <rcl_init+0x168>
 8013e30:	f04f 0800 	mov.w	r8, #0
 8013e34:	3d04      	subs	r5, #4
 8013e36:	46c1      	mov	r9, r8
 8013e38:	e00d      	b.n	8013e56 <rcl_init+0x126>
 8013e3a:	6829      	ldr	r1, [r5, #0]
 8013e3c:	f007 f827 	bl	801ae8e <memcpy>
 8013e40:	f118 0801 	adds.w	r8, r8, #1
 8013e44:	f149 0900 	adc.w	r9, r9, #0
 8013e48:	45ca      	cmp	sl, r9
 8013e4a:	bf08      	it	eq
 8013e4c:	4544      	cmpeq	r4, r8
 8013e4e:	d021      	beq.n	8013e94 <rcl_init+0x164>
 8013e50:	6833      	ldr	r3, [r6, #0]
 8013e52:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8013e56:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013e5a:	f7ec fa01 	bl	8000260 <strlen>
 8013e5e:	1c42      	adds	r2, r0, #1
 8013e60:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8013e62:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8013e64:	9201      	str	r2, [sp, #4]
 8013e66:	4610      	mov	r0, r2
 8013e68:	4798      	blx	r3
 8013e6a:	6833      	ldr	r3, [r6, #0]
 8013e6c:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8013e70:	6a1b      	ldr	r3, [r3, #32]
 8013e72:	9a01      	ldr	r2, [sp, #4]
 8013e74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	d1de      	bne.n	8013e3a <rcl_init+0x10a>
 8013e7c:	f04f 080a 	mov.w	r8, #10
 8013e80:	4630      	mov	r0, r6
 8013e82:	f7ff fef5 	bl	8013c70 <__cleanup_context>
 8013e86:	e76b      	b.n	8013d60 <rcl_init+0x30>
 8013e88:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8013e8c:	4640      	mov	r0, r8
 8013e8e:	b025      	add	sp, #148	@ 0x94
 8013e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e94:	f8d6 9000 	ldr.w	r9, [r6]
 8013e98:	4a32      	ldr	r2, [pc, #200]	@ (8013f64 <rcl_init+0x234>)
 8013e9a:	6813      	ldr	r3, [r2, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	d036      	beq.n	8013f0e <rcl_init+0x1de>
 8013ea0:	461d      	mov	r5, r3
 8013ea2:	2000      	movs	r0, #0
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8013eaa:	6073      	str	r3, [r6, #4]
 8013eac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013eae:	6011      	str	r1, [r2, #0]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8013eb6:	d044      	beq.n	8013f42 <rcl_init+0x212>
 8013eb8:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8013ebc:	b37b      	cbz	r3, 8013f1e <rcl_init+0x1ee>
 8013ebe:	683a      	ldr	r2, [r7, #0]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8013ec6:	d036      	beq.n	8013f36 <rcl_init+0x206>
 8013ec8:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8013ecc:	2a00      	cmp	r2, #0
 8013ece:	d042      	beq.n	8013f56 <rcl_init+0x226>
 8013ed0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013ed2:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8013ed6:	b953      	cbnz	r3, 8013eee <rcl_init+0x1be>
 8013ed8:	2801      	cmp	r0, #1
 8013eda:	d008      	beq.n	8013eee <rcl_init+0x1be>
 8013edc:	a91f      	add	r1, sp, #124	@ 0x7c
 8013ede:	4628      	mov	r0, r5
 8013ee0:	f004 ffa8 	bl	8018e34 <rcl_get_discovery_static_peers>
 8013ee4:	4680      	mov	r8, r0
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	d1ca      	bne.n	8013e80 <rcl_init+0x150>
 8013eea:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8013eee:	f004 ff97 	bl	8018e20 <rcl_automatic_discovery_range_to_string>
 8013ef2:	6831      	ldr	r1, [r6, #0]
 8013ef4:	6948      	ldr	r0, [r1, #20]
 8013ef6:	3128      	adds	r1, #40	@ 0x28
 8013ef8:	3018      	adds	r0, #24
 8013efa:	f7fa f8b1 	bl	800e060 <rmw_init>
 8013efe:	4680      	mov	r8, r0
 8013f00:	2800      	cmp	r0, #0
 8013f02:	f43f af2d 	beq.w	8013d60 <rcl_init+0x30>
 8013f06:	f7ff fe8d 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 8013f0a:	4680      	mov	r8, r0
 8013f0c:	e7b8      	b.n	8013e80 <rcl_init+0x150>
 8013f0e:	2101      	movs	r1, #1
 8013f10:	4618      	mov	r0, r3
 8013f12:	460d      	mov	r5, r1
 8013f14:	460b      	mov	r3, r1
 8013f16:	e7c6      	b.n	8013ea6 <rcl_init+0x176>
 8013f18:	f04f 080a 	mov.w	r8, #10
 8013f1c:	e720      	b.n	8013d60 <rcl_init+0x30>
 8013f1e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8013f22:	f000 f821 	bl	8013f68 <rcl_get_localhost_only>
 8013f26:	4680      	mov	r8, r0
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d1a9      	bne.n	8013e80 <rcl_init+0x150>
 8013f2c:	6832      	ldr	r2, [r6, #0]
 8013f2e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8013f32:	6954      	ldr	r4, [r2, #20]
 8013f34:	e7c3      	b.n	8013ebe <rcl_init+0x18e>
 8013f36:	2002      	movs	r0, #2
 8013f38:	2300      	movs	r3, #0
 8013f3a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8013f3e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8013f40:	e7d5      	b.n	8013eee <rcl_init+0x1be>
 8013f42:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8013f46:	f004 ffdf 	bl	8018f08 <rcl_get_default_domain_id>
 8013f4a:	4680      	mov	r8, r0
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d197      	bne.n	8013e80 <rcl_init+0x150>
 8013f50:	6833      	ldr	r3, [r6, #0]
 8013f52:	695c      	ldr	r4, [r3, #20]
 8013f54:	e7b0      	b.n	8013eb8 <rcl_init+0x188>
 8013f56:	4628      	mov	r0, r5
 8013f58:	f004 ff20 	bl	8018d9c <rcl_get_automatic_discovery_range>
 8013f5c:	4680      	mov	r8, r0
 8013f5e:	2800      	cmp	r0, #0
 8013f60:	d0b6      	beq.n	8013ed0 <rcl_init+0x1a0>
 8013f62:	e78d      	b.n	8013e80 <rcl_init+0x150>
 8013f64:	2000cfe4 	.word	0x2000cfe4

08013f68 <rcl_get_localhost_only>:
 8013f68:	b510      	push	{r4, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	9301      	str	r3, [sp, #4]
 8013f70:	b1b8      	cbz	r0, 8013fa2 <rcl_get_localhost_only+0x3a>
 8013f72:	4604      	mov	r4, r0
 8013f74:	a901      	add	r1, sp, #4
 8013f76:	480c      	ldr	r0, [pc, #48]	@ (8013fa8 <rcl_get_localhost_only+0x40>)
 8013f78:	f002 fd30 	bl	80169dc <rcutils_get_env>
 8013f7c:	b110      	cbz	r0, 8013f84 <rcl_get_localhost_only+0x1c>
 8013f7e:	2001      	movs	r0, #1
 8013f80:	b002      	add	sp, #8
 8013f82:	bd10      	pop	{r4, pc}
 8013f84:	9b01      	ldr	r3, [sp, #4]
 8013f86:	b10b      	cbz	r3, 8013f8c <rcl_get_localhost_only+0x24>
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	b923      	cbnz	r3, 8013f96 <rcl_get_localhost_only+0x2e>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	7023      	strb	r3, [r4, #0]
 8013f90:	2000      	movs	r0, #0
 8013f92:	b002      	add	sp, #8
 8013f94:	bd10      	pop	{r4, pc}
 8013f96:	2b31      	cmp	r3, #49	@ 0x31
 8013f98:	bf14      	ite	ne
 8013f9a:	2302      	movne	r3, #2
 8013f9c:	2301      	moveq	r3, #1
 8013f9e:	7023      	strb	r3, [r4, #0]
 8013fa0:	e7f6      	b.n	8013f90 <rcl_get_localhost_only+0x28>
 8013fa2:	200b      	movs	r0, #11
 8013fa4:	b002      	add	sp, #8
 8013fa6:	bd10      	pop	{r4, pc}
 8013fa8:	0801dc74 	.word	0x0801dc74

08013fac <rcl_get_zero_initialized_node>:
 8013fac:	4a03      	ldr	r2, [pc, #12]	@ (8013fbc <rcl_get_zero_initialized_node+0x10>)
 8013fae:	4603      	mov	r3, r0
 8013fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	4770      	bx	lr
 8013fbc:	0801e900 	.word	0x0801e900

08013fc0 <rcl_node_init>:
 8013fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc4:	b0ab      	sub	sp, #172	@ 0xac
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8013fca:	a825      	add	r0, sp, #148	@ 0x94
 8013fcc:	4689      	mov	r9, r1
 8013fce:	4690      	mov	r8, r2
 8013fd0:	461f      	mov	r7, r3
 8013fd2:	f005 fa03 	bl	80193dc <rcl_guard_condition_get_default_options>
 8013fd6:	2d00      	cmp	r5, #0
 8013fd8:	f000 80d8 	beq.w	801418c <rcl_node_init+0x1cc>
 8013fdc:	4628      	mov	r0, r5
 8013fde:	f7f9 fe1d 	bl	800dc1c <rcutils_allocator_is_valid>
 8013fe2:	2800      	cmp	r0, #0
 8013fe4:	f000 80d2 	beq.w	801418c <rcl_node_init+0x1cc>
 8013fe8:	f1b9 0f00 	cmp.w	r9, #0
 8013fec:	f000 80ce 	beq.w	801418c <rcl_node_init+0x1cc>
 8013ff0:	f1b8 0f00 	cmp.w	r8, #0
 8013ff4:	f000 80ca 	beq.w	801418c <rcl_node_init+0x1cc>
 8013ff8:	2c00      	cmp	r4, #0
 8013ffa:	f000 80c7 	beq.w	801418c <rcl_node_init+0x1cc>
 8013ffe:	6866      	ldr	r6, [r4, #4]
 8014000:	2e00      	cmp	r6, #0
 8014002:	f040 80ca 	bne.w	801419a <rcl_node_init+0x1da>
 8014006:	2f00      	cmp	r7, #0
 8014008:	f000 80c0 	beq.w	801418c <rcl_node_init+0x1cc>
 801400c:	4638      	mov	r0, r7
 801400e:	f7ff fe29 	bl	8013c64 <rcl_context_is_valid>
 8014012:	2800      	cmp	r0, #0
 8014014:	f000 80bf 	beq.w	8014196 <rcl_node_init+0x1d6>
 8014018:	4632      	mov	r2, r6
 801401a:	a924      	add	r1, sp, #144	@ 0x90
 801401c:	4648      	mov	r0, r9
 801401e:	9624      	str	r6, [sp, #144]	@ 0x90
 8014020:	f003 f95e 	bl	80172e0 <rmw_validate_node_name>
 8014024:	4606      	mov	r6, r0
 8014026:	2800      	cmp	r0, #0
 8014028:	f040 80b1 	bne.w	801418e <rcl_node_init+0x1ce>
 801402c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801402e:	2800      	cmp	r0, #0
 8014030:	f040 8104 	bne.w	801423c <rcl_node_init+0x27c>
 8014034:	f898 3000 	ldrb.w	r3, [r8]
 8014038:	2b00      	cmp	r3, #0
 801403a:	f000 80f0 	beq.w	801421e <rcl_node_init+0x25e>
 801403e:	2b2f      	cmp	r3, #47	@ 0x2f
 8014040:	f000 80b0 	beq.w	80141a4 <rcl_node_init+0x1e4>
 8014044:	4b85      	ldr	r3, [pc, #532]	@ (801425c <rcl_node_init+0x29c>)
 8014046:	f8cd 800c 	str.w	r8, [sp, #12]
 801404a:	9302      	str	r3, [sp, #8]
 801404c:	692b      	ldr	r3, [r5, #16]
 801404e:	9300      	str	r3, [sp, #0]
 8014050:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014054:	9301      	str	r3, [sp, #4]
 8014056:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801405a:	f002 fcd7 	bl	8016a0c <rcutils_format_string_limit>
 801405e:	4680      	mov	r8, r0
 8014060:	f1b8 0f00 	cmp.w	r8, #0
 8014064:	f000 80e8 	beq.w	8014238 <rcl_node_init+0x278>
 8014068:	2200      	movs	r2, #0
 801406a:	a924      	add	r1, sp, #144	@ 0x90
 801406c:	4640      	mov	r0, r8
 801406e:	9224      	str	r2, [sp, #144]	@ 0x90
 8014070:	f003 f918 	bl	80172a4 <rmw_validate_namespace>
 8014074:	4606      	mov	r6, r0
 8014076:	2800      	cmp	r0, #0
 8014078:	f040 80a4 	bne.w	80141c4 <rcl_node_init+0x204>
 801407c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801407e:	2800      	cmp	r0, #0
 8014080:	f040 809d 	bne.w	80141be <rcl_node_init+0x1fe>
 8014084:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8014088:	2178      	movs	r1, #120	@ 0x78
 801408a:	2001      	movs	r0, #1
 801408c:	4798      	blx	r3
 801408e:	4606      	mov	r6, r0
 8014090:	6060      	str	r0, [r4, #4]
 8014092:	2800      	cmp	r0, #0
 8014094:	f000 80d6 	beq.w	8014244 <rcl_node_init+0x284>
 8014098:	a80a      	add	r0, sp, #40	@ 0x28
 801409a:	f000 f92f 	bl	80142fc <rcl_node_get_default_options>
 801409e:	a90a      	add	r1, sp, #40	@ 0x28
 80140a0:	4630      	mov	r0, r6
 80140a2:	2268      	movs	r2, #104	@ 0x68
 80140a4:	f006 fef3 	bl	801ae8e <memcpy>
 80140a8:	6861      	ldr	r1, [r4, #4]
 80140aa:	6027      	str	r7, [r4, #0]
 80140ac:	4628      	mov	r0, r5
 80140ae:	f000 f933 	bl	8014318 <rcl_node_options_copy>
 80140b2:	4606      	mov	r6, r0
 80140b4:	2800      	cmp	r0, #0
 80140b6:	f040 8085 	bne.w	80141c4 <rcl_node_init+0x204>
 80140ba:	4640      	mov	r0, r8
 80140bc:	f7ec f8d0 	bl	8000260 <strlen>
 80140c0:	eb08 0300 	add.w	r3, r8, r0
 80140c4:	6866      	ldr	r6, [r4, #4]
 80140c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80140ca:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80140ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80140d0:	bf0c      	ite	eq
 80140d2:	4b63      	ldreq	r3, [pc, #396]	@ (8014260 <rcl_node_init+0x2a0>)
 80140d4:	4b63      	ldrne	r3, [pc, #396]	@ (8014264 <rcl_node_init+0x2a4>)
 80140d6:	9302      	str	r3, [sp, #8]
 80140d8:	692b      	ldr	r3, [r5, #16]
 80140da:	9300      	str	r3, [sp, #0]
 80140dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80140e0:	9301      	str	r3, [sp, #4]
 80140e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80140e6:	f002 fc91 	bl	8016a0c <rcutils_format_string_limit>
 80140ea:	6863      	ldr	r3, [r4, #4]
 80140ec:	6770      	str	r0, [r6, #116]	@ 0x74
 80140ee:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80140f0:	2a00      	cmp	r2, #0
 80140f2:	f000 80a9 	beq.w	8014248 <rcl_node_init+0x288>
 80140f6:	6822      	ldr	r2, [r4, #0]
 80140f8:	9307      	str	r3, [sp, #28]
 80140fa:	6810      	ldr	r0, [r2, #0]
 80140fc:	4649      	mov	r1, r9
 80140fe:	3028      	adds	r0, #40	@ 0x28
 8014100:	4642      	mov	r2, r8
 8014102:	f7fa f98f 	bl	800e424 <rmw_create_node>
 8014106:	9b07      	ldr	r3, [sp, #28]
 8014108:	6698      	str	r0, [r3, #104]	@ 0x68
 801410a:	6863      	ldr	r3, [r4, #4]
 801410c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801410e:	2800      	cmp	r0, #0
 8014110:	f000 809d 	beq.w	801424e <rcl_node_init+0x28e>
 8014114:	f7fa fa18 	bl	800e548 <rmw_node_get_graph_guard_condition>
 8014118:	4681      	mov	r9, r0
 801411a:	2800      	cmp	r0, #0
 801411c:	f000 809c 	beq.w	8014258 <rcl_node_init+0x298>
 8014120:	682b      	ldr	r3, [r5, #0]
 8014122:	6929      	ldr	r1, [r5, #16]
 8014124:	6866      	ldr	r6, [r4, #4]
 8014126:	2008      	movs	r0, #8
 8014128:	4798      	blx	r3
 801412a:	6863      	ldr	r3, [r4, #4]
 801412c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801412e:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8014132:	f1ba 0f00 	cmp.w	sl, #0
 8014136:	f000 808d 	beq.w	8014254 <rcl_node_init+0x294>
 801413a:	f10d 0b20 	add.w	fp, sp, #32
 801413e:	4658      	mov	r0, fp
 8014140:	f005 f874 	bl	801922c <rcl_get_zero_initialized_guard_condition>
 8014144:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8014148:	6863      	ldr	r3, [r4, #4]
 801414a:	46ac      	mov	ip, r5
 801414c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014150:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014154:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014158:	ae25      	add	r6, sp, #148	@ 0x94
 801415a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801415c:	f8dc 3000 	ldr.w	r3, [ip]
 8014160:	6033      	str	r3, [r6, #0]
 8014162:	ab2a      	add	r3, sp, #168	@ 0xa8
 8014164:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014168:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801416c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801416e:	463a      	mov	r2, r7
 8014170:	4649      	mov	r1, r9
 8014172:	4670      	mov	r0, lr
 8014174:	f005 f8b0 	bl	80192d8 <rcl_guard_condition_init_from_rmw>
 8014178:	4606      	mov	r6, r0
 801417a:	bb18      	cbnz	r0, 80141c4 <rcl_node_init+0x204>
 801417c:	686b      	ldr	r3, [r5, #4]
 801417e:	6929      	ldr	r1, [r5, #16]
 8014180:	4798      	blx	r3
 8014182:	686b      	ldr	r3, [r5, #4]
 8014184:	6929      	ldr	r1, [r5, #16]
 8014186:	4640      	mov	r0, r8
 8014188:	4798      	blx	r3
 801418a:	e000      	b.n	801418e <rcl_node_init+0x1ce>
 801418c:	260b      	movs	r6, #11
 801418e:	4630      	mov	r0, r6
 8014190:	b02b      	add	sp, #172	@ 0xac
 8014192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014196:	2665      	movs	r6, #101	@ 0x65
 8014198:	e7f9      	b.n	801418e <rcl_node_init+0x1ce>
 801419a:	2664      	movs	r6, #100	@ 0x64
 801419c:	4630      	mov	r0, r6
 801419e:	b02b      	add	sp, #172	@ 0xac
 80141a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a4:	f105 030c 	add.w	r3, r5, #12
 80141a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141ac:	e88d 0003 	stmia.w	sp, {r0, r1}
 80141b0:	4640      	mov	r0, r8
 80141b2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80141b6:	f002 fd47 	bl	8016c48 <rcutils_strdup>
 80141ba:	4680      	mov	r8, r0
 80141bc:	e750      	b.n	8014060 <rcl_node_init+0xa0>
 80141be:	f003 f883 	bl	80172c8 <rmw_namespace_validation_result_string>
 80141c2:	26ca      	movs	r6, #202	@ 0xca
 80141c4:	6863      	ldr	r3, [r4, #4]
 80141c6:	b1f3      	cbz	r3, 8014206 <rcl_node_init+0x246>
 80141c8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80141ca:	b138      	cbz	r0, 80141dc <rcl_node_init+0x21c>
 80141cc:	f005 f8e4 	bl	8019398 <rcl_guard_condition_fini>
 80141d0:	6863      	ldr	r3, [r4, #4]
 80141d2:	6929      	ldr	r1, [r5, #16]
 80141d4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80141d6:	686b      	ldr	r3, [r5, #4]
 80141d8:	4798      	blx	r3
 80141da:	6863      	ldr	r3, [r4, #4]
 80141dc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80141de:	b110      	cbz	r0, 80141e6 <rcl_node_init+0x226>
 80141e0:	f7fa f936 	bl	800e450 <rmw_destroy_node>
 80141e4:	6863      	ldr	r3, [r4, #4]
 80141e6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80141e8:	6929      	ldr	r1, [r5, #16]
 80141ea:	686b      	ldr	r3, [r5, #4]
 80141ec:	4798      	blx	r3
 80141ee:	6863      	ldr	r3, [r4, #4]
 80141f0:	6929      	ldr	r1, [r5, #16]
 80141f2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80141f4:	686b      	ldr	r3, [r5, #4]
 80141f6:	4798      	blx	r3
 80141f8:	6860      	ldr	r0, [r4, #4]
 80141fa:	f000 f8ab 	bl	8014354 <rcl_node_options_fini>
 80141fe:	686b      	ldr	r3, [r5, #4]
 8014200:	6929      	ldr	r1, [r5, #16]
 8014202:	6860      	ldr	r0, [r4, #4]
 8014204:	4798      	blx	r3
 8014206:	686b      	ldr	r3, [r5, #4]
 8014208:	6929      	ldr	r1, [r5, #16]
 801420a:	2000      	movs	r0, #0
 801420c:	4798      	blx	r3
 801420e:	686b      	ldr	r3, [r5, #4]
 8014210:	6929      	ldr	r1, [r5, #16]
 8014212:	4640      	mov	r0, r8
 8014214:	4798      	blx	r3
 8014216:	2300      	movs	r3, #0
 8014218:	e9c4 3300 	strd	r3, r3, [r4]
 801421c:	e7b7      	b.n	801418e <rcl_node_init+0x1ce>
 801421e:	f105 030c 	add.w	r3, r5, #12
 8014222:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014226:	e88d 0003 	stmia.w	sp, {r0, r1}
 801422a:	480f      	ldr	r0, [pc, #60]	@ (8014268 <rcl_node_init+0x2a8>)
 801422c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014230:	f002 fd0a 	bl	8016c48 <rcutils_strdup>
 8014234:	4680      	mov	r8, r0
 8014236:	e713      	b.n	8014060 <rcl_node_init+0xa0>
 8014238:	260a      	movs	r6, #10
 801423a:	e7a8      	b.n	801418e <rcl_node_init+0x1ce>
 801423c:	f003 f89c 	bl	8017378 <rmw_node_name_validation_result_string>
 8014240:	26c9      	movs	r6, #201	@ 0xc9
 8014242:	e7a4      	b.n	801418e <rcl_node_init+0x1ce>
 8014244:	260a      	movs	r6, #10
 8014246:	e7de      	b.n	8014206 <rcl_node_init+0x246>
 8014248:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801424a:	260a      	movs	r6, #10
 801424c:	e7bd      	b.n	80141ca <rcl_node_init+0x20a>
 801424e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014250:	2601      	movs	r6, #1
 8014252:	e7ba      	b.n	80141ca <rcl_node_init+0x20a>
 8014254:	260a      	movs	r6, #10
 8014256:	e7c1      	b.n	80141dc <rcl_node_init+0x21c>
 8014258:	2601      	movs	r6, #1
 801425a:	e7b3      	b.n	80141c4 <rcl_node_init+0x204>
 801425c:	0801dc90 	.word	0x0801dc90
 8014260:	0801db58 	.word	0x0801db58
 8014264:	0801db34 	.word	0x0801db34
 8014268:	0801dc8c 	.word	0x0801dc8c

0801426c <rcl_node_is_valid>:
 801426c:	b130      	cbz	r0, 801427c <rcl_node_is_valid+0x10>
 801426e:	6843      	ldr	r3, [r0, #4]
 8014270:	b123      	cbz	r3, 801427c <rcl_node_is_valid+0x10>
 8014272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014274:	b113      	cbz	r3, 801427c <rcl_node_is_valid+0x10>
 8014276:	6800      	ldr	r0, [r0, #0]
 8014278:	f7ff bcf4 	b.w	8013c64 <rcl_context_is_valid>
 801427c:	2000      	movs	r0, #0
 801427e:	4770      	bx	lr

08014280 <rcl_node_get_name>:
 8014280:	b120      	cbz	r0, 801428c <rcl_node_get_name+0xc>
 8014282:	6840      	ldr	r0, [r0, #4]
 8014284:	b110      	cbz	r0, 801428c <rcl_node_get_name+0xc>
 8014286:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014288:	b100      	cbz	r0, 801428c <rcl_node_get_name+0xc>
 801428a:	6880      	ldr	r0, [r0, #8]
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop

08014290 <rcl_node_get_namespace>:
 8014290:	b120      	cbz	r0, 801429c <rcl_node_get_namespace+0xc>
 8014292:	6840      	ldr	r0, [r0, #4]
 8014294:	b110      	cbz	r0, 801429c <rcl_node_get_namespace+0xc>
 8014296:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014298:	b100      	cbz	r0, 801429c <rcl_node_get_namespace+0xc>
 801429a:	68c0      	ldr	r0, [r0, #12]
 801429c:	4770      	bx	lr
 801429e:	bf00      	nop

080142a0 <rcl_node_get_options>:
 80142a0:	b128      	cbz	r0, 80142ae <rcl_node_get_options+0xe>
 80142a2:	6840      	ldr	r0, [r0, #4]
 80142a4:	b118      	cbz	r0, 80142ae <rcl_node_get_options+0xe>
 80142a6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	bf08      	it	eq
 80142ac:	2000      	moveq	r0, #0
 80142ae:	4770      	bx	lr

080142b0 <rcl_node_get_rmw_handle>:
 80142b0:	b110      	cbz	r0, 80142b8 <rcl_node_get_rmw_handle+0x8>
 80142b2:	6840      	ldr	r0, [r0, #4]
 80142b4:	b100      	cbz	r0, 80142b8 <rcl_node_get_rmw_handle+0x8>
 80142b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80142b8:	4770      	bx	lr
 80142ba:	bf00      	nop

080142bc <rcl_get_disable_loaned_message>:
 80142bc:	b510      	push	{r4, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	2300      	movs	r3, #0
 80142c2:	9301      	str	r3, [sp, #4]
 80142c4:	b1a0      	cbz	r0, 80142f0 <rcl_get_disable_loaned_message+0x34>
 80142c6:	4604      	mov	r4, r0
 80142c8:	a901      	add	r1, sp, #4
 80142ca:	480b      	ldr	r0, [pc, #44]	@ (80142f8 <rcl_get_disable_loaned_message+0x3c>)
 80142cc:	f002 fb86 	bl	80169dc <rcutils_get_env>
 80142d0:	b110      	cbz	r0, 80142d8 <rcl_get_disable_loaned_message+0x1c>
 80142d2:	2001      	movs	r0, #1
 80142d4:	b002      	add	sp, #8
 80142d6:	bd10      	pop	{r4, pc}
 80142d8:	9a01      	ldr	r2, [sp, #4]
 80142da:	7813      	ldrb	r3, [r2, #0]
 80142dc:	3b31      	subs	r3, #49	@ 0x31
 80142de:	bf08      	it	eq
 80142e0:	7853      	ldrbeq	r3, [r2, #1]
 80142e2:	fab3 f383 	clz	r3, r3
 80142e6:	095b      	lsrs	r3, r3, #5
 80142e8:	2000      	movs	r0, #0
 80142ea:	7023      	strb	r3, [r4, #0]
 80142ec:	b002      	add	sp, #8
 80142ee:	bd10      	pop	{r4, pc}
 80142f0:	200b      	movs	r0, #11
 80142f2:	b002      	add	sp, #8
 80142f4:	bd10      	pop	{r4, pc}
 80142f6:	bf00      	nop
 80142f8:	0801dc94 	.word	0x0801dc94

080142fc <rcl_node_get_default_options>:
 80142fc:	b510      	push	{r4, lr}
 80142fe:	2253      	movs	r2, #83	@ 0x53
 8014300:	4604      	mov	r4, r0
 8014302:	2100      	movs	r1, #0
 8014304:	3015      	adds	r0, #21
 8014306:	f006 fce2 	bl	801acce <memset>
 801430a:	4620      	mov	r0, r4
 801430c:	f7f9 fc5a 	bl	800dbc4 <rcutils_get_default_allocator>
 8014310:	2301      	movs	r3, #1
 8014312:	7523      	strb	r3, [r4, #20]
 8014314:	4620      	mov	r0, r4
 8014316:	bd10      	pop	{r4, pc}

08014318 <rcl_node_options_copy>:
 8014318:	b1d0      	cbz	r0, 8014350 <rcl_node_options_copy+0x38>
 801431a:	b570      	push	{r4, r5, r6, lr}
 801431c:	460c      	mov	r4, r1
 801431e:	b1a9      	cbz	r1, 801434c <rcl_node_options_copy+0x34>
 8014320:	4288      	cmp	r0, r1
 8014322:	4684      	mov	ip, r0
 8014324:	d012      	beq.n	801434c <rcl_node_options_copy+0x34>
 8014326:	4605      	mov	r5, r0
 8014328:	8a86      	ldrh	r6, [r0, #20]
 801432a:	468e      	mov	lr, r1
 801432c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801432e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014332:	682b      	ldr	r3, [r5, #0]
 8014334:	f8ce 3000 	str.w	r3, [lr]
 8014338:	f10c 0118 	add.w	r1, ip, #24
 801433c:	2250      	movs	r2, #80	@ 0x50
 801433e:	82a6      	strh	r6, [r4, #20]
 8014340:	f104 0018 	add.w	r0, r4, #24
 8014344:	f006 fda3 	bl	801ae8e <memcpy>
 8014348:	2000      	movs	r0, #0
 801434a:	bd70      	pop	{r4, r5, r6, pc}
 801434c:	200b      	movs	r0, #11
 801434e:	bd70      	pop	{r4, r5, r6, pc}
 8014350:	200b      	movs	r0, #11
 8014352:	4770      	bx	lr

08014354 <rcl_node_options_fini>:
 8014354:	b1c0      	cbz	r0, 8014388 <rcl_node_options_fini+0x34>
 8014356:	b500      	push	{lr}
 8014358:	4684      	mov	ip, r0
 801435a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801435e:	b087      	sub	sp, #28
 8014360:	f10d 0e04 	add.w	lr, sp, #4
 8014364:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014368:	f8dc 3000 	ldr.w	r3, [ip]
 801436c:	f8ce 3000 	str.w	r3, [lr]
 8014370:	a801      	add	r0, sp, #4
 8014372:	f7f9 fc53 	bl	800dc1c <rcutils_allocator_is_valid>
 8014376:	b118      	cbz	r0, 8014380 <rcl_node_options_fini+0x2c>
 8014378:	2000      	movs	r0, #0
 801437a:	b007      	add	sp, #28
 801437c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014380:	200b      	movs	r0, #11
 8014382:	b007      	add	sp, #28
 8014384:	f85d fb04 	ldr.w	pc, [sp], #4
 8014388:	200b      	movs	r0, #11
 801438a:	4770      	bx	lr

0801438c <rcl_node_resolve_name>:
 801438c:	b082      	sub	sp, #8
 801438e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014392:	b091      	sub	sp, #68	@ 0x44
 8014394:	ac1a      	add	r4, sp, #104	@ 0x68
 8014396:	e884 000c 	stmia.w	r4, {r2, r3}
 801439a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801439e:	2800      	cmp	r0, #0
 80143a0:	d03a      	beq.n	8014418 <rcl_node_resolve_name+0x8c>
 80143a2:	460c      	mov	r4, r1
 80143a4:	4605      	mov	r5, r0
 80143a6:	f7ff ff7b 	bl	80142a0 <rcl_node_get_options>
 80143aa:	b370      	cbz	r0, 801440a <rcl_node_resolve_name+0x7e>
 80143ac:	4628      	mov	r0, r5
 80143ae:	f7ff ff67 	bl	8014280 <rcl_node_get_name>
 80143b2:	4681      	mov	r9, r0
 80143b4:	4628      	mov	r0, r5
 80143b6:	f7ff ff6b 	bl	8014290 <rcl_node_get_namespace>
 80143ba:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80143be:	4607      	mov	r7, r0
 80143c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143c4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80143c6:	46ac      	mov	ip, r5
 80143c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80143cc:	f8de 3000 	ldr.w	r3, [lr]
 80143d0:	f8cc 3000 	str.w	r3, [ip]
 80143d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80143d6:	b1fb      	cbz	r3, 8014418 <rcl_node_resolve_name+0x8c>
 80143d8:	468a      	mov	sl, r1
 80143da:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80143de:	f002 fc93 	bl	8016d08 <rcutils_get_zero_initialized_string_map>
 80143e2:	ab10      	add	r3, sp, #64	@ 0x40
 80143e4:	9008      	str	r0, [sp, #32]
 80143e6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80143ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80143ee:	2100      	movs	r1, #0
 80143f0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80143f4:	a808      	add	r0, sp, #32
 80143f6:	f002 fce1 	bl	8016dbc <rcutils_string_map_init>
 80143fa:	4606      	mov	r6, r0
 80143fc:	b170      	cbz	r0, 801441c <rcl_node_resolve_name+0x90>
 80143fe:	f7f9 fc1b 	bl	800dc38 <rcutils_get_error_string>
 8014402:	f7f9 fc31 	bl	800dc68 <rcutils_reset_error>
 8014406:	2e0a      	cmp	r6, #10
 8014408:	d000      	beq.n	801440c <rcl_node_resolve_name+0x80>
 801440a:	2601      	movs	r6, #1
 801440c:	4630      	mov	r0, r6
 801440e:	b011      	add	sp, #68	@ 0x44
 8014410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014414:	b002      	add	sp, #8
 8014416:	4770      	bx	lr
 8014418:	260b      	movs	r6, #11
 801441a:	e7f7      	b.n	801440c <rcl_node_resolve_name+0x80>
 801441c:	9009      	str	r0, [sp, #36]	@ 0x24
 801441e:	9007      	str	r0, [sp, #28]
 8014420:	a808      	add	r0, sp, #32
 8014422:	f004 fefd 	bl	8019220 <rcl_get_default_topic_name_substitutions>
 8014426:	4606      	mov	r6, r0
 8014428:	b1b0      	cbz	r0, 8014458 <rcl_node_resolve_name+0xcc>
 801442a:	280a      	cmp	r0, #10
 801442c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8014430:	d000      	beq.n	8014434 <rcl_node_resolve_name+0xa8>
 8014432:	2601      	movs	r6, #1
 8014434:	a808      	add	r0, sp, #32
 8014436:	f002 fcff 	bl	8016e38 <rcutils_string_map_fini>
 801443a:	2800      	cmp	r0, #0
 801443c:	d132      	bne.n	80144a4 <rcl_node_resolve_name+0x118>
 801443e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014440:	4659      	mov	r1, fp
 8014442:	47d0      	blx	sl
 8014444:	4659      	mov	r1, fp
 8014446:	4648      	mov	r0, r9
 8014448:	47d0      	blx	sl
 801444a:	f1b8 0f00 	cmp.w	r8, #0
 801444e:	d0dd      	beq.n	801440c <rcl_node_resolve_name+0x80>
 8014450:	2e67      	cmp	r6, #103	@ 0x67
 8014452:	bf08      	it	eq
 8014454:	2668      	moveq	r6, #104	@ 0x68
 8014456:	e7d9      	b.n	801440c <rcl_node_resolve_name+0x80>
 8014458:	ab09      	add	r3, sp, #36	@ 0x24
 801445a:	9305      	str	r3, [sp, #20]
 801445c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801445e:	46ec      	mov	ip, sp
 8014460:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014464:	682b      	ldr	r3, [r5, #0]
 8014466:	f8cc 3000 	str.w	r3, [ip]
 801446a:	463a      	mov	r2, r7
 801446c:	4649      	mov	r1, r9
 801446e:	4620      	mov	r0, r4
 8014470:	ab08      	add	r3, sp, #32
 8014472:	f004 fd77 	bl	8018f64 <rcl_expand_topic_name>
 8014476:	4606      	mov	r6, r0
 8014478:	b9c8      	cbnz	r0, 80144ae <rcl_node_resolve_name+0x122>
 801447a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801447e:	9009      	str	r0, [sp, #36]	@ 0x24
 8014480:	4602      	mov	r2, r0
 8014482:	a90a      	add	r1, sp, #40	@ 0x28
 8014484:	4648      	mov	r0, r9
 8014486:	f002 fe55 	bl	8017134 <rmw_validate_full_topic_name>
 801448a:	b998      	cbnz	r0, 80144b4 <rcl_node_resolve_name+0x128>
 801448c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801448e:	bb14      	cbnz	r4, 80144d6 <rcl_node_resolve_name+0x14a>
 8014490:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014492:	a808      	add	r0, sp, #32
 8014494:	f8c3 9000 	str.w	r9, [r3]
 8014498:	f002 fcce 	bl	8016e38 <rcutils_string_map_fini>
 801449c:	4606      	mov	r6, r0
 801449e:	b978      	cbnz	r0, 80144c0 <rcl_node_resolve_name+0x134>
 80144a0:	4681      	mov	r9, r0
 80144a2:	e7cc      	b.n	801443e <rcl_node_resolve_name+0xb2>
 80144a4:	f7f9 fbc8 	bl	800dc38 <rcutils_get_error_string>
 80144a8:	f7f9 fbde 	bl	800dc68 <rcutils_reset_error>
 80144ac:	e7c7      	b.n	801443e <rcl_node_resolve_name+0xb2>
 80144ae:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80144b2:	e7bf      	b.n	8014434 <rcl_node_resolve_name+0xa8>
 80144b4:	f7f9 fbc0 	bl	800dc38 <rcutils_get_error_string>
 80144b8:	2601      	movs	r6, #1
 80144ba:	f7f9 fbd5 	bl	800dc68 <rcutils_reset_error>
 80144be:	e7b9      	b.n	8014434 <rcl_node_resolve_name+0xa8>
 80144c0:	f7f9 fbba 	bl	800dc38 <rcutils_get_error_string>
 80144c4:	f7f9 fbd0 	bl	800dc68 <rcutils_reset_error>
 80144c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80144ca:	4659      	mov	r1, fp
 80144cc:	47d0      	blx	sl
 80144ce:	4659      	mov	r1, fp
 80144d0:	4620      	mov	r0, r4
 80144d2:	47d0      	blx	sl
 80144d4:	e799      	b.n	801440a <rcl_node_resolve_name+0x7e>
 80144d6:	2667      	movs	r6, #103	@ 0x67
 80144d8:	e7ac      	b.n	8014434 <rcl_node_resolve_name+0xa8>
 80144da:	bf00      	nop

080144dc <rcl_service_get_rmw_handle>:
 80144dc:	b118      	cbz	r0, 80144e6 <rcl_service_get_rmw_handle+0xa>
 80144de:	6800      	ldr	r0, [r0, #0]
 80144e0:	b108      	cbz	r0, 80144e6 <rcl_service_get_rmw_handle+0xa>
 80144e2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80144e6:	4770      	bx	lr

080144e8 <rcl_take_request>:
 80144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ea:	468e      	mov	lr, r1
 80144ec:	460c      	mov	r4, r1
 80144ee:	4617      	mov	r7, r2
 80144f0:	4605      	mov	r5, r0
 80144f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80144f6:	b091      	sub	sp, #68	@ 0x44
 80144f8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80144fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014500:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014504:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014508:	b30d      	cbz	r5, 801454e <rcl_take_request+0x66>
 801450a:	682b      	ldr	r3, [r5, #0]
 801450c:	b1fb      	cbz	r3, 801454e <rcl_take_request+0x66>
 801450e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014512:	b1e0      	cbz	r0, 801454e <rcl_take_request+0x66>
 8014514:	b397      	cbz	r7, 801457c <rcl_take_request+0x94>
 8014516:	2300      	movs	r3, #0
 8014518:	f88d 3017 	strb.w	r3, [sp, #23]
 801451c:	463a      	mov	r2, r7
 801451e:	f10d 0317 	add.w	r3, sp, #23
 8014522:	a906      	add	r1, sp, #24
 8014524:	f003 f966 	bl	80177f4 <rmw_take_request>
 8014528:	4606      	mov	r6, r0
 801452a:	b198      	cbz	r0, 8014554 <rcl_take_request+0x6c>
 801452c:	280a      	cmp	r0, #10
 801452e:	bf18      	it	ne
 8014530:	2601      	movne	r6, #1
 8014532:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8014536:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801453a:	46a6      	mov	lr, r4
 801453c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014540:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014544:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014548:	4630      	mov	r0, r6
 801454a:	b011      	add	sp, #68	@ 0x44
 801454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801454e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8014552:	e7ee      	b.n	8014532 <rcl_take_request+0x4a>
 8014554:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8014558:	b193      	cbz	r3, 8014580 <rcl_take_request+0x98>
 801455a:	682b      	ldr	r3, [r5, #0]
 801455c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8014560:	2800      	cmp	r0, #0
 8014562:	d0e6      	beq.n	8014532 <rcl_take_request+0x4a>
 8014564:	463a      	mov	r2, r7
 8014566:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 801456a:	ab0a      	add	r3, sp, #40	@ 0x28
 801456c:	e9cd 6700 	strd	r6, r7, [sp]
 8014570:	9302      	str	r3, [sp, #8]
 8014572:	2101      	movs	r1, #1
 8014574:	f000 f844 	bl	8014600 <rcl_send_service_event_message>
 8014578:	4606      	mov	r6, r0
 801457a:	e7da      	b.n	8014532 <rcl_take_request+0x4a>
 801457c:	260b      	movs	r6, #11
 801457e:	e7d8      	b.n	8014532 <rcl_take_request+0x4a>
 8014580:	f240 2659 	movw	r6, #601	@ 0x259
 8014584:	e7d5      	b.n	8014532 <rcl_take_request+0x4a>
 8014586:	bf00      	nop

08014588 <rcl_send_response>:
 8014588:	b350      	cbz	r0, 80145e0 <rcl_send_response+0x58>
 801458a:	b570      	push	{r4, r5, r6, lr}
 801458c:	6803      	ldr	r3, [r0, #0]
 801458e:	b084      	sub	sp, #16
 8014590:	4604      	mov	r4, r0
 8014592:	b1cb      	cbz	r3, 80145c8 <rcl_send_response+0x40>
 8014594:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014598:	b1b0      	cbz	r0, 80145c8 <rcl_send_response+0x40>
 801459a:	460e      	mov	r6, r1
 801459c:	b1e9      	cbz	r1, 80145da <rcl_send_response+0x52>
 801459e:	4615      	mov	r5, r2
 80145a0:	b1da      	cbz	r2, 80145da <rcl_send_response+0x52>
 80145a2:	f003 f985 	bl	80178b0 <rmw_send_response>
 80145a6:	b998      	cbnz	r0, 80145d0 <rcl_send_response+0x48>
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80145ae:	b16b      	cbz	r3, 80145cc <rcl_send_response+0x44>
 80145b0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80145b4:	462a      	mov	r2, r5
 80145b6:	e9cd 0100 	strd	r0, r1, [sp]
 80145ba:	9602      	str	r6, [sp, #8]
 80145bc:	2102      	movs	r1, #2
 80145be:	4618      	mov	r0, r3
 80145c0:	f000 f81e 	bl	8014600 <rcl_send_service_event_message>
 80145c4:	b004      	add	sp, #16
 80145c6:	bd70      	pop	{r4, r5, r6, pc}
 80145c8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80145cc:	b004      	add	sp, #16
 80145ce:	bd70      	pop	{r4, r5, r6, pc}
 80145d0:	2802      	cmp	r0, #2
 80145d2:	bf18      	it	ne
 80145d4:	2001      	movne	r0, #1
 80145d6:	b004      	add	sp, #16
 80145d8:	bd70      	pop	{r4, r5, r6, pc}
 80145da:	200b      	movs	r0, #11
 80145dc:	b004      	add	sp, #16
 80145de:	bd70      	pop	{r4, r5, r6, pc}
 80145e0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80145e4:	4770      	bx	lr
 80145e6:	bf00      	nop

080145e8 <rcl_service_is_valid>:
 80145e8:	b130      	cbz	r0, 80145f8 <rcl_service_is_valid+0x10>
 80145ea:	6800      	ldr	r0, [r0, #0]
 80145ec:	b120      	cbz	r0, 80145f8 <rcl_service_is_valid+0x10>
 80145ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80145f2:	3800      	subs	r0, #0
 80145f4:	bf18      	it	ne
 80145f6:	2001      	movne	r0, #1
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop
 80145fc:	0000      	movs	r0, r0
	...

08014600 <rcl_send_service_event_message>:
 8014600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014602:	b093      	sub	sp, #76	@ 0x4c
 8014604:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8014606:	b17a      	cbz	r2, 8014628 <rcl_send_service_event_message+0x28>
 8014608:	b176      	cbz	r6, 8014628 <rcl_send_service_event_message+0x28>
 801460a:	4604      	mov	r4, r0
 801460c:	b150      	cbz	r0, 8014624 <rcl_send_service_event_message+0x24>
 801460e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8014612:	b13b      	cbz	r3, 8014624 <rcl_send_service_event_message+0x24>
 8014614:	68c0      	ldr	r0, [r0, #12]
 8014616:	460f      	mov	r7, r1
 8014618:	4615      	mov	r5, r2
 801461a:	f000 f9d7 	bl	80149cc <rcl_clock_valid>
 801461e:	b108      	cbz	r0, 8014624 <rcl_send_service_event_message+0x24>
 8014620:	7a23      	ldrb	r3, [r4, #8]
 8014622:	b92b      	cbnz	r3, 8014630 <rcl_send_service_event_message+0x30>
 8014624:	2501      	movs	r5, #1
 8014626:	e000      	b.n	801462a <rcl_send_service_event_message+0x2a>
 8014628:	250b      	movs	r5, #11
 801462a:	4628      	mov	r0, r5
 801462c:	b013      	add	sp, #76	@ 0x4c
 801462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014630:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8014634:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014638:	f10d 0c0c 	add.w	ip, sp, #12
 801463c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014640:	f8de 3000 	ldr.w	r3, [lr]
 8014644:	f8cc 3000 	str.w	r3, [ip]
 8014648:	a803      	add	r0, sp, #12
 801464a:	f7f9 fae7 	bl	800dc1c <rcutils_allocator_is_valid>
 801464e:	2800      	cmp	r0, #0
 8014650:	d0ea      	beq.n	8014628 <rcl_send_service_event_message+0x28>
 8014652:	6820      	ldr	r0, [r4, #0]
 8014654:	f7f8 fb8c 	bl	800cd70 <rcl_publisher_is_valid>
 8014658:	2800      	cmp	r0, #0
 801465a:	d045      	beq.n	80146e8 <rcl_send_service_event_message+0xe8>
 801465c:	4669      	mov	r1, sp
 801465e:	68e0      	ldr	r0, [r4, #12]
 8014660:	f000 fa2c 	bl	8014abc <rcl_clock_get_now>
 8014664:	4601      	mov	r1, r0
 8014666:	2800      	cmp	r0, #0
 8014668:	d13b      	bne.n	80146e2 <rcl_send_service_event_message+0xe2>
 801466a:	2220      	movs	r2, #32
 801466c:	eb0d 0002 	add.w	r0, sp, r2
 8014670:	f006 fb2d 	bl	801acce <memset>
 8014674:	a324      	add	r3, pc, #144	@ (adr r3, 8014708 <rcl_send_service_event_message+0x108>)
 8014676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801467e:	f88d 7020 	strb.w	r7, [sp, #32]
 8014682:	f7ec fad9 	bl	8000c38 <__aeabi_ldivmod>
 8014686:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 801468a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 801468e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014692:	7a23      	ldrb	r3, [r4, #8]
 8014694:	6830      	ldr	r0, [r6, #0]
 8014696:	6871      	ldr	r1, [r6, #4]
 8014698:	68b2      	ldr	r2, [r6, #8]
 801469a:	2b01      	cmp	r3, #1
 801469c:	68f3      	ldr	r3, [r6, #12]
 801469e:	bf08      	it	eq
 80146a0:	2500      	moveq	r5, #0
 80146a2:	ae0b      	add	r6, sp, #44	@ 0x2c
 80146a4:	2f01      	cmp	r7, #1
 80146a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80146a8:	d821      	bhi.n	80146ee <rcl_send_service_event_message+0xee>
 80146aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80146ae:	462a      	mov	r2, r5
 80146b0:	a808      	add	r0, sp, #32
 80146b2:	699d      	ldr	r5, [r3, #24]
 80146b4:	a903      	add	r1, sp, #12
 80146b6:	2300      	movs	r3, #0
 80146b8:	47a8      	blx	r5
 80146ba:	4606      	mov	r6, r0
 80146bc:	2e00      	cmp	r6, #0
 80146be:	d0b1      	beq.n	8014624 <rcl_send_service_event_message+0x24>
 80146c0:	4631      	mov	r1, r6
 80146c2:	6820      	ldr	r0, [r4, #0]
 80146c4:	2200      	movs	r2, #0
 80146c6:	f7f8 fb2f 	bl	800cd28 <rcl_publish>
 80146ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80146ce:	4605      	mov	r5, r0
 80146d0:	69db      	ldr	r3, [r3, #28]
 80146d2:	a903      	add	r1, sp, #12
 80146d4:	4630      	mov	r0, r6
 80146d6:	4798      	blx	r3
 80146d8:	2d00      	cmp	r5, #0
 80146da:	d0a6      	beq.n	801462a <rcl_send_service_event_message+0x2a>
 80146dc:	f7f9 fac4 	bl	800dc68 <rcutils_reset_error>
 80146e0:	e7a3      	b.n	801462a <rcl_send_service_event_message+0x2a>
 80146e2:	f7f9 fac1 	bl	800dc68 <rcutils_reset_error>
 80146e6:	e79d      	b.n	8014624 <rcl_send_service_event_message+0x24>
 80146e8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80146ec:	e79d      	b.n	801462a <rcl_send_service_event_message+0x2a>
 80146ee:	1eb9      	subs	r1, r7, #2
 80146f0:	2901      	cmp	r1, #1
 80146f2:	d8f6      	bhi.n	80146e2 <rcl_send_service_event_message+0xe2>
 80146f4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80146f8:	462b      	mov	r3, r5
 80146fa:	a808      	add	r0, sp, #32
 80146fc:	6995      	ldr	r5, [r2, #24]
 80146fe:	a903      	add	r1, sp, #12
 8014700:	2200      	movs	r2, #0
 8014702:	47a8      	blx	r5
 8014704:	4606      	mov	r6, r0
 8014706:	e7d9      	b.n	80146bc <rcl_send_service_event_message+0xbc>
 8014708:	3b9aca00 	.word	0x3b9aca00
 801470c:	00000000 	.word	0x00000000

08014710 <rcl_get_zero_initialized_subscription>:
 8014710:	4b01      	ldr	r3, [pc, #4]	@ (8014718 <rcl_get_zero_initialized_subscription+0x8>)
 8014712:	6818      	ldr	r0, [r3, #0]
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop
 8014718:	0801e908 	.word	0x0801e908

0801471c <rcl_subscription_init>:
 801471c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014720:	b089      	sub	sp, #36	@ 0x24
 8014722:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014724:	b1d6      	cbz	r6, 801475c <rcl_subscription_init+0x40>
 8014726:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801472a:	4604      	mov	r4, r0
 801472c:	4648      	mov	r0, r9
 801472e:	460d      	mov	r5, r1
 8014730:	4690      	mov	r8, r2
 8014732:	461f      	mov	r7, r3
 8014734:	f7f9 fa72 	bl	800dc1c <rcutils_allocator_is_valid>
 8014738:	b180      	cbz	r0, 801475c <rcl_subscription_init+0x40>
 801473a:	b17c      	cbz	r4, 801475c <rcl_subscription_init+0x40>
 801473c:	4628      	mov	r0, r5
 801473e:	f7ff fd95 	bl	801426c <rcl_node_is_valid>
 8014742:	2800      	cmp	r0, #0
 8014744:	d054      	beq.n	80147f0 <rcl_subscription_init+0xd4>
 8014746:	f1b8 0f00 	cmp.w	r8, #0
 801474a:	d007      	beq.n	801475c <rcl_subscription_init+0x40>
 801474c:	b137      	cbz	r7, 801475c <rcl_subscription_init+0x40>
 801474e:	6823      	ldr	r3, [r4, #0]
 8014750:	b14b      	cbz	r3, 8014766 <rcl_subscription_init+0x4a>
 8014752:	2764      	movs	r7, #100	@ 0x64
 8014754:	4638      	mov	r0, r7
 8014756:	b009      	add	sp, #36	@ 0x24
 8014758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801475c:	270b      	movs	r7, #11
 801475e:	4638      	mov	r0, r7
 8014760:	b009      	add	sp, #36	@ 0x24
 8014762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014766:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801476a:	aa07      	add	r2, sp, #28
 801476c:	9205      	str	r2, [sp, #20]
 801476e:	9307      	str	r3, [sp, #28]
 8014770:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8014774:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014778:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801477c:	4639      	mov	r1, r7
 801477e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014782:	4628      	mov	r0, r5
 8014784:	f7ff fe02 	bl	801438c <rcl_node_resolve_name>
 8014788:	4607      	mov	r7, r0
 801478a:	2800      	cmp	r0, #0
 801478c:	d15f      	bne.n	801484e <rcl_subscription_init+0x132>
 801478e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8014792:	21d0      	movs	r1, #208	@ 0xd0
 8014794:	2001      	movs	r0, #1
 8014796:	4798      	blx	r3
 8014798:	6020      	str	r0, [r4, #0]
 801479a:	2800      	cmp	r0, #0
 801479c:	d05d      	beq.n	801485a <rcl_subscription_init+0x13e>
 801479e:	4628      	mov	r0, r5
 80147a0:	f7ff fd86 	bl	80142b0 <rcl_node_get_rmw_handle>
 80147a4:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80147a8:	9300      	str	r3, [sp, #0]
 80147aa:	9a07      	ldr	r2, [sp, #28]
 80147ac:	6827      	ldr	r7, [r4, #0]
 80147ae:	4641      	mov	r1, r8
 80147b0:	4633      	mov	r3, r6
 80147b2:	f7fa f8b3 	bl	800e91c <rmw_create_subscription>
 80147b6:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 80147ba:	6827      	ldr	r7, [r4, #0]
 80147bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80147c0:	b358      	cbz	r0, 801481a <rcl_subscription_init+0xfe>
 80147c2:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80147c6:	f7fa f989 	bl	800eadc <rmw_subscription_get_actual_qos>
 80147ca:	4607      	mov	r7, r0
 80147cc:	b9a8      	cbnz	r0, 80147fa <rcl_subscription_init+0xde>
 80147ce:	6820      	ldr	r0, [r4, #0]
 80147d0:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80147d4:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 80147d8:	2278      	movs	r2, #120	@ 0x78
 80147da:	4631      	mov	r1, r6
 80147dc:	f006 fb57 	bl	801ae8e <memcpy>
 80147e0:	9807      	ldr	r0, [sp, #28]
 80147e2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80147e4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80147e6:	4798      	blx	r3
 80147e8:	4638      	mov	r0, r7
 80147ea:	b009      	add	sp, #36	@ 0x24
 80147ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147f0:	27c8      	movs	r7, #200	@ 0xc8
 80147f2:	4638      	mov	r0, r7
 80147f4:	b009      	add	sp, #36	@ 0x24
 80147f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147fa:	6827      	ldr	r7, [r4, #0]
 80147fc:	b32f      	cbz	r7, 801484a <rcl_subscription_init+0x12e>
 80147fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8014802:	b153      	cbz	r3, 801481a <rcl_subscription_init+0xfe>
 8014804:	4628      	mov	r0, r5
 8014806:	f7ff fd53 	bl	80142b0 <rcl_node_get_rmw_handle>
 801480a:	6823      	ldr	r3, [r4, #0]
 801480c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8014810:	f7fa f972 	bl	800eaf8 <rmw_destroy_subscription>
 8014814:	6827      	ldr	r7, [r4, #0]
 8014816:	4638      	mov	r0, r7
 8014818:	b197      	cbz	r7, 8014840 <rcl_subscription_init+0x124>
 801481a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 801481e:	4628      	mov	r0, r5
 8014820:	f7f9 f9fc 	bl	800dc1c <rcutils_allocator_is_valid>
 8014824:	b1e8      	cbz	r0, 8014862 <rcl_subscription_init+0x146>
 8014826:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014828:	b1d8      	cbz	r0, 8014862 <rcl_subscription_init+0x146>
 801482a:	4629      	mov	r1, r5
 801482c:	f002 fbd4 	bl	8016fd8 <rmw_subscription_content_filter_options_fini>
 8014830:	4605      	mov	r5, r0
 8014832:	b9a0      	cbnz	r0, 801485e <rcl_subscription_init+0x142>
 8014834:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014838:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801483a:	4798      	blx	r3
 801483c:	6820      	ldr	r0, [r4, #0]
 801483e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8014840:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014842:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014844:	4798      	blx	r3
 8014846:	2300      	movs	r3, #0
 8014848:	6023      	str	r3, [r4, #0]
 801484a:	2701      	movs	r7, #1
 801484c:	e7c8      	b.n	80147e0 <rcl_subscription_init+0xc4>
 801484e:	2867      	cmp	r0, #103	@ 0x67
 8014850:	d0c6      	beq.n	80147e0 <rcl_subscription_init+0xc4>
 8014852:	2869      	cmp	r0, #105	@ 0x69
 8014854:	d007      	beq.n	8014866 <rcl_subscription_init+0x14a>
 8014856:	280a      	cmp	r0, #10
 8014858:	d1f7      	bne.n	801484a <rcl_subscription_init+0x12e>
 801485a:	270a      	movs	r7, #10
 801485c:	e7c0      	b.n	80147e0 <rcl_subscription_init+0xc4>
 801485e:	f7ff f9e1 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 8014862:	6820      	ldr	r0, [r4, #0]
 8014864:	e7ec      	b.n	8014840 <rcl_subscription_init+0x124>
 8014866:	2767      	movs	r7, #103	@ 0x67
 8014868:	e7ba      	b.n	80147e0 <rcl_subscription_init+0xc4>
 801486a:	bf00      	nop

0801486c <rcl_subscription_get_default_options>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	4d14      	ldr	r5, [pc, #80]	@ (80148c0 <rcl_subscription_get_default_options+0x54>)
 8014870:	4914      	ldr	r1, [pc, #80]	@ (80148c4 <rcl_subscription_get_default_options+0x58>)
 8014872:	b08a      	sub	sp, #40	@ 0x28
 8014874:	4604      	mov	r4, r0
 8014876:	2250      	movs	r2, #80	@ 0x50
 8014878:	4628      	mov	r0, r5
 801487a:	f006 fb08 	bl	801ae8e <memcpy>
 801487e:	a804      	add	r0, sp, #16
 8014880:	f7f9 f9a0 	bl	800dbc4 <rcutils_get_default_allocator>
 8014884:	f10d 0c10 	add.w	ip, sp, #16
 8014888:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801488c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014890:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014894:	466e      	mov	r6, sp
 8014896:	f8dc 3000 	ldr.w	r3, [ip]
 801489a:	f8ce 3000 	str.w	r3, [lr]
 801489e:	4630      	mov	r0, r6
 80148a0:	f002 fbb4 	bl	801700c <rmw_get_default_subscription_options>
 80148a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80148a8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80148ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80148b0:	2278      	movs	r2, #120	@ 0x78
 80148b2:	4629      	mov	r1, r5
 80148b4:	4620      	mov	r0, r4
 80148b6:	f006 faea 	bl	801ae8e <memcpy>
 80148ba:	4620      	mov	r0, r4
 80148bc:	b00a      	add	sp, #40	@ 0x28
 80148be:	bd70      	pop	{r4, r5, r6, pc}
 80148c0:	2000cfe8 	.word	0x2000cfe8
 80148c4:	0801e910 	.word	0x0801e910

080148c8 <rcl_take>:
 80148c8:	2800      	cmp	r0, #0
 80148ca:	d04b      	beq.n	8014964 <rcl_take+0x9c>
 80148cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d0:	4615      	mov	r5, r2
 80148d2:	6802      	ldr	r2, [r0, #0]
 80148d4:	b0a0      	sub	sp, #128	@ 0x80
 80148d6:	4604      	mov	r4, r0
 80148d8:	2a00      	cmp	r2, #0
 80148da:	d03b      	beq.n	8014954 <rcl_take+0x8c>
 80148dc:	461f      	mov	r7, r3
 80148de:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d036      	beq.n	8014954 <rcl_take+0x8c>
 80148e6:	460e      	mov	r6, r1
 80148e8:	2900      	cmp	r1, #0
 80148ea:	d039      	beq.n	8014960 <rcl_take+0x98>
 80148ec:	2d00      	cmp	r5, #0
 80148ee:	d03d      	beq.n	801496c <rcl_take+0xa4>
 80148f0:	a802      	add	r0, sp, #8
 80148f2:	f002 fc17 	bl	8017124 <rmw_get_zero_initialized_message_info>
 80148f6:	6823      	ldr	r3, [r4, #0]
 80148f8:	f10d 0c08 	add.w	ip, sp, #8
 80148fc:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8014900:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014904:	46ae      	mov	lr, r5
 8014906:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801490a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801490e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014916:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801491a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801491e:	462b      	mov	r3, r5
 8014920:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014924:	f04f 0800 	mov.w	r8, #0
 8014928:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 801492c:	4631      	mov	r1, r6
 801492e:	4620      	mov	r0, r4
 8014930:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8014934:	9700      	str	r7, [sp, #0]
 8014936:	f003 f85f 	bl	80179f8 <rmw_take_with_info>
 801493a:	4603      	mov	r3, r0
 801493c:	b9c0      	cbnz	r0, 8014970 <rcl_take+0xa8>
 801493e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8014942:	f240 1291 	movw	r2, #401	@ 0x191
 8014946:	2900      	cmp	r1, #0
 8014948:	bf08      	it	eq
 801494a:	4613      	moveq	r3, r2
 801494c:	4618      	mov	r0, r3
 801494e:	b020      	add	sp, #128	@ 0x80
 8014950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014954:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014958:	4618      	mov	r0, r3
 801495a:	b020      	add	sp, #128	@ 0x80
 801495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014960:	230b      	movs	r3, #11
 8014962:	e7f3      	b.n	801494c <rcl_take+0x84>
 8014964:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014968:	4618      	mov	r0, r3
 801496a:	4770      	bx	lr
 801496c:	ad12      	add	r5, sp, #72	@ 0x48
 801496e:	e7bf      	b.n	80148f0 <rcl_take+0x28>
 8014970:	f7ff f958 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 8014974:	4603      	mov	r3, r0
 8014976:	e7e9      	b.n	801494c <rcl_take+0x84>

08014978 <rcl_subscription_get_rmw_handle>:
 8014978:	b118      	cbz	r0, 8014982 <rcl_subscription_get_rmw_handle+0xa>
 801497a:	6800      	ldr	r0, [r0, #0]
 801497c:	b108      	cbz	r0, 8014982 <rcl_subscription_get_rmw_handle+0xa>
 801497e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8014982:	4770      	bx	lr

08014984 <rcl_subscription_is_valid>:
 8014984:	b130      	cbz	r0, 8014994 <rcl_subscription_is_valid+0x10>
 8014986:	6800      	ldr	r0, [r0, #0]
 8014988:	b120      	cbz	r0, 8014994 <rcl_subscription_is_valid+0x10>
 801498a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801498e:	3800      	subs	r0, #0
 8014990:	bf18      	it	ne
 8014992:	2001      	movne	r0, #1
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop

08014998 <rcl_get_system_time>:
 8014998:	4608      	mov	r0, r1
 801499a:	f7f9 b981 	b.w	800dca0 <rcutils_system_time_now>
 801499e:	bf00      	nop

080149a0 <rcl_get_steady_time>:
 80149a0:	4608      	mov	r0, r1
 80149a2:	f7f9 b9a7 	b.w	800dcf4 <rcutils_steady_time_now>
 80149a6:	bf00      	nop

080149a8 <rcl_get_ros_time>:
 80149a8:	7a03      	ldrb	r3, [r0, #8]
 80149aa:	b510      	push	{r4, lr}
 80149ac:	460c      	mov	r4, r1
 80149ae:	b143      	cbz	r3, 80149c2 <rcl_get_ros_time+0x1a>
 80149b0:	2105      	movs	r1, #5
 80149b2:	f001 ff6d 	bl	8016890 <__atomic_load_8>
 80149b6:	4602      	mov	r2, r0
 80149b8:	460b      	mov	r3, r1
 80149ba:	e9c4 2300 	strd	r2, r3, [r4]
 80149be:	2000      	movs	r0, #0
 80149c0:	bd10      	pop	{r4, pc}
 80149c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149c6:	4608      	mov	r0, r1
 80149c8:	f7f9 b96a 	b.w	800dca0 <rcutils_system_time_now>

080149cc <rcl_clock_valid>:
 80149cc:	b138      	cbz	r0, 80149de <rcl_clock_valid+0x12>
 80149ce:	7803      	ldrb	r3, [r0, #0]
 80149d0:	b123      	cbz	r3, 80149dc <rcl_clock_valid+0x10>
 80149d2:	68c0      	ldr	r0, [r0, #12]
 80149d4:	3800      	subs	r0, #0
 80149d6:	bf18      	it	ne
 80149d8:	2001      	movne	r0, #1
 80149da:	4770      	bx	lr
 80149dc:	4618      	mov	r0, r3
 80149de:	4770      	bx	lr

080149e0 <rcl_clock_init>:
 80149e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149e2:	4605      	mov	r5, r0
 80149e4:	4610      	mov	r0, r2
 80149e6:	4614      	mov	r4, r2
 80149e8:	460e      	mov	r6, r1
 80149ea:	f7f9 f917 	bl	800dc1c <rcutils_allocator_is_valid>
 80149ee:	b128      	cbz	r0, 80149fc <rcl_clock_init+0x1c>
 80149f0:	2d03      	cmp	r5, #3
 80149f2:	d803      	bhi.n	80149fc <rcl_clock_init+0x1c>
 80149f4:	e8df f005 	tbb	[pc, r5]
 80149f8:	044c291a 	.word	0x044c291a
 80149fc:	200b      	movs	r0, #11
 80149fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a00:	2e00      	cmp	r6, #0
 8014a02:	d0fb      	beq.n	80149fc <rcl_clock_init+0x1c>
 8014a04:	2c00      	cmp	r4, #0
 8014a06:	d0f9      	beq.n	80149fc <rcl_clock_init+0x1c>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014a0e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8014ab4 <rcl_clock_init+0xd4>
 8014a12:	6133      	str	r3, [r6, #16]
 8014a14:	f106 0514 	add.w	r5, r6, #20
 8014a18:	2703      	movs	r7, #3
 8014a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a1e:	6823      	ldr	r3, [r4, #0]
 8014a20:	602b      	str	r3, [r5, #0]
 8014a22:	f8c6 c00c 	str.w	ip, [r6, #12]
 8014a26:	7037      	strb	r7, [r6, #0]
 8014a28:	2000      	movs	r0, #0
 8014a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a2c:	2e00      	cmp	r6, #0
 8014a2e:	d0e5      	beq.n	80149fc <rcl_clock_init+0x1c>
 8014a30:	2300      	movs	r3, #0
 8014a32:	7033      	strb	r3, [r6, #0]
 8014a34:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014a38:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a3e:	f106 0514 	add.w	r5, r6, #20
 8014a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a44:	6823      	ldr	r3, [r4, #0]
 8014a46:	602b      	str	r3, [r5, #0]
 8014a48:	e7ee      	b.n	8014a28 <rcl_clock_init+0x48>
 8014a4a:	2e00      	cmp	r6, #0
 8014a4c:	d0d6      	beq.n	80149fc <rcl_clock_init+0x1c>
 8014a4e:	2c00      	cmp	r4, #0
 8014a50:	d0d4      	beq.n	80149fc <rcl_clock_init+0x1c>
 8014a52:	2700      	movs	r7, #0
 8014a54:	7037      	strb	r7, [r6, #0]
 8014a56:	46a4      	mov	ip, r4
 8014a58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a5c:	f106 0514 	add.w	r5, r6, #20
 8014a60:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014a64:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a6a:	f8dc 3000 	ldr.w	r3, [ip]
 8014a6e:	602b      	str	r3, [r5, #0]
 8014a70:	6921      	ldr	r1, [r4, #16]
 8014a72:	6823      	ldr	r3, [r4, #0]
 8014a74:	2010      	movs	r0, #16
 8014a76:	4798      	blx	r3
 8014a78:	6130      	str	r0, [r6, #16]
 8014a7a:	b1b8      	cbz	r0, 8014aac <rcl_clock_init+0xcc>
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	2300      	movs	r3, #0
 8014a80:	e9c0 2300 	strd	r2, r3, [r0]
 8014a84:	4a0a      	ldr	r2, [pc, #40]	@ (8014ab0 <rcl_clock_init+0xd0>)
 8014a86:	7207      	strb	r7, [r0, #8]
 8014a88:	2301      	movs	r3, #1
 8014a8a:	60f2      	str	r2, [r6, #12]
 8014a8c:	7033      	strb	r3, [r6, #0]
 8014a8e:	e7cb      	b.n	8014a28 <rcl_clock_init+0x48>
 8014a90:	2e00      	cmp	r6, #0
 8014a92:	d0b3      	beq.n	80149fc <rcl_clock_init+0x1c>
 8014a94:	2c00      	cmp	r4, #0
 8014a96:	d0b1      	beq.n	80149fc <rcl_clock_init+0x1c>
 8014a98:	2300      	movs	r3, #0
 8014a9a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014a9e:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8014ab8 <rcl_clock_init+0xd8>
 8014aa2:	6133      	str	r3, [r6, #16]
 8014aa4:	f106 0514 	add.w	r5, r6, #20
 8014aa8:	2702      	movs	r7, #2
 8014aaa:	e7b6      	b.n	8014a1a <rcl_clock_init+0x3a>
 8014aac:	200a      	movs	r0, #10
 8014aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ab0:	080149a9 	.word	0x080149a9
 8014ab4:	080149a1 	.word	0x080149a1
 8014ab8:	08014999 	.word	0x08014999

08014abc <rcl_clock_get_now>:
 8014abc:	b140      	cbz	r0, 8014ad0 <rcl_clock_get_now+0x14>
 8014abe:	b139      	cbz	r1, 8014ad0 <rcl_clock_get_now+0x14>
 8014ac0:	7803      	ldrb	r3, [r0, #0]
 8014ac2:	b11b      	cbz	r3, 8014acc <rcl_clock_get_now+0x10>
 8014ac4:	68c3      	ldr	r3, [r0, #12]
 8014ac6:	b10b      	cbz	r3, 8014acc <rcl_clock_get_now+0x10>
 8014ac8:	6900      	ldr	r0, [r0, #16]
 8014aca:	4718      	bx	r3
 8014acc:	2001      	movs	r0, #1
 8014ace:	4770      	bx	lr
 8014ad0:	200b      	movs	r0, #11
 8014ad2:	4770      	bx	lr

08014ad4 <rcl_is_enabled_ros_time_override>:
 8014ad4:	b158      	cbz	r0, 8014aee <rcl_is_enabled_ros_time_override+0x1a>
 8014ad6:	b151      	cbz	r1, 8014aee <rcl_is_enabled_ros_time_override+0x1a>
 8014ad8:	7803      	ldrb	r3, [r0, #0]
 8014ada:	2b01      	cmp	r3, #1
 8014adc:	d105      	bne.n	8014aea <rcl_is_enabled_ros_time_override+0x16>
 8014ade:	6902      	ldr	r2, [r0, #16]
 8014ae0:	b11a      	cbz	r2, 8014aea <rcl_is_enabled_ros_time_override+0x16>
 8014ae2:	7a13      	ldrb	r3, [r2, #8]
 8014ae4:	700b      	strb	r3, [r1, #0]
 8014ae6:	2000      	movs	r0, #0
 8014ae8:	4770      	bx	lr
 8014aea:	2001      	movs	r0, #1
 8014aec:	4770      	bx	lr
 8014aee:	200b      	movs	r0, #11
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop

08014af4 <rcl_clock_add_jump_callback>:
 8014af4:	b082      	sub	sp, #8
 8014af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014afa:	a906      	add	r1, sp, #24
 8014afc:	e881 000c 	stmia.w	r1, {r2, r3}
 8014b00:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8014b04:	b320      	cbz	r0, 8014b50 <rcl_clock_add_jump_callback+0x5c>
 8014b06:	4605      	mov	r5, r0
 8014b08:	3014      	adds	r0, #20
 8014b0a:	f7f9 f887 	bl	800dc1c <rcutils_allocator_is_valid>
 8014b0e:	b1f8      	cbz	r0, 8014b50 <rcl_clock_add_jump_callback+0x5c>
 8014b10:	b1f7      	cbz	r7, 8014b50 <rcl_clock_add_jump_callback+0x5c>
 8014b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	db1b      	blt.n	8014b50 <rcl_clock_add_jump_callback+0x5c>
 8014b18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014b1c:	2a01      	cmp	r2, #1
 8014b1e:	f173 0300 	sbcs.w	r3, r3, #0
 8014b22:	da15      	bge.n	8014b50 <rcl_clock_add_jump_callback+0x5c>
 8014b24:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8014b28:	2c00      	cmp	r4, #0
 8014b2a:	d042      	beq.n	8014bb2 <rcl_clock_add_jump_callback+0xbe>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	2200      	movs	r2, #0
 8014b30:	e003      	b.n	8014b3a <rcl_clock_add_jump_callback+0x46>
 8014b32:	4294      	cmp	r4, r2
 8014b34:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8014b38:	d011      	beq.n	8014b5e <rcl_clock_add_jump_callback+0x6a>
 8014b3a:	6819      	ldr	r1, [r3, #0]
 8014b3c:	42b9      	cmp	r1, r7
 8014b3e:	f102 0201 	add.w	r2, r2, #1
 8014b42:	d1f6      	bne.n	8014b32 <rcl_clock_add_jump_callback+0x3e>
 8014b44:	6a19      	ldr	r1, [r3, #32]
 8014b46:	42b1      	cmp	r1, r6
 8014b48:	d1f3      	bne.n	8014b32 <rcl_clock_add_jump_callback+0x3e>
 8014b4a:	f04f 0e01 	mov.w	lr, #1
 8014b4e:	e001      	b.n	8014b54 <rcl_clock_add_jump_callback+0x60>
 8014b50:	f04f 0e0b 	mov.w	lr, #11
 8014b54:	4670      	mov	r0, lr
 8014b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b5a:	b002      	add	sp, #8
 8014b5c:	4770      	bx	lr
 8014b5e:	3401      	adds	r4, #1
 8014b60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014b64:	00e1      	lsls	r1, r4, #3
 8014b66:	69eb      	ldr	r3, [r5, #28]
 8014b68:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014b6a:	4798      	blx	r3
 8014b6c:	b1f0      	cbz	r0, 8014bac <rcl_clock_add_jump_callback+0xb8>
 8014b6e:	68ab      	ldr	r3, [r5, #8]
 8014b70:	6068      	str	r0, [r5, #4]
 8014b72:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014b76:	f10d 0c18 	add.w	ip, sp, #24
 8014b7a:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8014b7e:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8014b82:	f103 0801 	add.w	r8, r3, #1
 8014b86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b8a:	f104 0708 	add.w	r7, r4, #8
 8014b8e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014b90:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014b94:	f04f 0e00 	mov.w	lr, #0
 8014b98:	e887 0003 	stmia.w	r7, {r0, r1}
 8014b9c:	6226      	str	r6, [r4, #32]
 8014b9e:	4670      	mov	r0, lr
 8014ba0:	f8c5 8008 	str.w	r8, [r5, #8]
 8014ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba8:	b002      	add	sp, #8
 8014baa:	4770      	bx	lr
 8014bac:	f04f 0e0a 	mov.w	lr, #10
 8014bb0:	e7d0      	b.n	8014b54 <rcl_clock_add_jump_callback+0x60>
 8014bb2:	2128      	movs	r1, #40	@ 0x28
 8014bb4:	e7d7      	b.n	8014b66 <rcl_clock_add_jump_callback+0x72>
 8014bb6:	bf00      	nop

08014bb8 <rcl_clock_remove_jump_callback>:
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d05a      	beq.n	8014c72 <rcl_clock_remove_jump_callback+0xba>
 8014bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bc0:	4605      	mov	r5, r0
 8014bc2:	3014      	adds	r0, #20
 8014bc4:	460f      	mov	r7, r1
 8014bc6:	4692      	mov	sl, r2
 8014bc8:	f7f9 f828 	bl	800dc1c <rcutils_allocator_is_valid>
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	d03f      	beq.n	8014c50 <rcl_clock_remove_jump_callback+0x98>
 8014bd0:	2f00      	cmp	r7, #0
 8014bd2:	d03d      	beq.n	8014c50 <rcl_clock_remove_jump_callback+0x98>
 8014bd4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8014bd8:	f1b8 0f00 	cmp.w	r8, #0
 8014bdc:	d00c      	beq.n	8014bf8 <rcl_clock_remove_jump_callback+0x40>
 8014bde:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014be2:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8014be6:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8014bea:	464c      	mov	r4, r9
 8014bec:	6823      	ldr	r3, [r4, #0]
 8014bee:	42bb      	cmp	r3, r7
 8014bf0:	d005      	beq.n	8014bfe <rcl_clock_remove_jump_callback+0x46>
 8014bf2:	3428      	adds	r4, #40	@ 0x28
 8014bf4:	42b4      	cmp	r4, r6
 8014bf6:	d1f9      	bne.n	8014bec <rcl_clock_remove_jump_callback+0x34>
 8014bf8:	2001      	movs	r0, #1
 8014bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bfe:	6a23      	ldr	r3, [r4, #32]
 8014c00:	3428      	adds	r4, #40	@ 0x28
 8014c02:	42b4      	cmp	r4, r6
 8014c04:	d02c      	beq.n	8014c60 <rcl_clock_remove_jump_callback+0xa8>
 8014c06:	4553      	cmp	r3, sl
 8014c08:	d1f0      	bne.n	8014bec <rcl_clock_remove_jump_callback+0x34>
 8014c0a:	46a6      	mov	lr, r4
 8014c0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c10:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014c14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014c24:	3428      	adds	r4, #40	@ 0x28
 8014c26:	42a6      	cmp	r6, r4
 8014c28:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014c2c:	d1ed      	bne.n	8014c0a <rcl_clock_remove_jump_callback+0x52>
 8014c2e:	f108 34ff 	add.w	r4, r8, #4294967295
 8014c32:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014c34:	60ac      	str	r4, [r5, #8]
 8014c36:	b174      	cbz	r4, 8014c56 <rcl_clock_remove_jump_callback+0x9e>
 8014c38:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014c3c:	00e1      	lsls	r1, r4, #3
 8014c3e:	69eb      	ldr	r3, [r5, #28]
 8014c40:	4648      	mov	r0, r9
 8014c42:	4798      	blx	r3
 8014c44:	4604      	mov	r4, r0
 8014c46:	b1b0      	cbz	r0, 8014c76 <rcl_clock_remove_jump_callback+0xbe>
 8014c48:	606c      	str	r4, [r5, #4]
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c50:	200b      	movs	r0, #11
 8014c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c56:	69ab      	ldr	r3, [r5, #24]
 8014c58:	4611      	mov	r1, r2
 8014c5a:	4648      	mov	r0, r9
 8014c5c:	4798      	blx	r3
 8014c5e:	e7f3      	b.n	8014c48 <rcl_clock_remove_jump_callback+0x90>
 8014c60:	4553      	cmp	r3, sl
 8014c62:	d1c9      	bne.n	8014bf8 <rcl_clock_remove_jump_callback+0x40>
 8014c64:	f108 34ff 	add.w	r4, r8, #4294967295
 8014c68:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014c6a:	60ac      	str	r4, [r5, #8]
 8014c6c:	2c00      	cmp	r4, #0
 8014c6e:	d1e3      	bne.n	8014c38 <rcl_clock_remove_jump_callback+0x80>
 8014c70:	e7f1      	b.n	8014c56 <rcl_clock_remove_jump_callback+0x9e>
 8014c72:	200b      	movs	r0, #11
 8014c74:	4770      	bx	lr
 8014c76:	200a      	movs	r0, #10
 8014c78:	e7eb      	b.n	8014c52 <rcl_clock_remove_jump_callback+0x9a>
 8014c7a:	bf00      	nop

08014c7c <_rcl_timer_time_jump>:
 8014c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c80:	4605      	mov	r5, r0
 8014c82:	b084      	sub	sp, #16
 8014c84:	4614      	mov	r4, r2
 8014c86:	b131      	cbz	r1, 8014c96 <_rcl_timer_time_jump+0x1a>
 8014c88:	7803      	ldrb	r3, [r0, #0]
 8014c8a:	3b02      	subs	r3, #2
 8014c8c:	2b01      	cmp	r3, #1
 8014c8e:	d93f      	bls.n	8014d10 <_rcl_timer_time_jump+0x94>
 8014c90:	b004      	add	sp, #16
 8014c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c96:	6813      	ldr	r3, [r2, #0]
 8014c98:	a902      	add	r1, sp, #8
 8014c9a:	6818      	ldr	r0, [r3, #0]
 8014c9c:	f7ff ff0e 	bl	8014abc <rcl_clock_get_now>
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	d1f5      	bne.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014ca4:	6820      	ldr	r0, [r4, #0]
 8014ca6:	2105      	movs	r1, #5
 8014ca8:	3020      	adds	r0, #32
 8014caa:	f001 fdf1 	bl	8016890 <__atomic_load_8>
 8014cae:	6823      	ldr	r3, [r4, #0]
 8014cb0:	4681      	mov	r9, r0
 8014cb2:	460f      	mov	r7, r1
 8014cb4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8014cb8:	2105      	movs	r1, #5
 8014cba:	f001 fde9 	bl	8016890 <__atomic_load_8>
 8014cbe:	4680      	mov	r8, r0
 8014cc0:	6820      	ldr	r0, [r4, #0]
 8014cc2:	460e      	mov	r6, r1
 8014cc4:	3018      	adds	r0, #24
 8014cc6:	2105      	movs	r1, #5
 8014cc8:	f001 fde2 	bl	8016890 <__atomic_load_8>
 8014ccc:	782b      	ldrb	r3, [r5, #0]
 8014cce:	3b02      	subs	r3, #2
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	460d      	mov	r5, r1
 8014cd4:	4682      	mov	sl, r0
 8014cd6:	d939      	bls.n	8014d4c <_rcl_timer_time_jump+0xd0>
 8014cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014cdc:	4542      	cmp	r2, r8
 8014cde:	eb73 0606 	sbcs.w	r6, r3, r6
 8014ce2:	da61      	bge.n	8014da8 <_rcl_timer_time_jump+0x12c>
 8014ce4:	454a      	cmp	r2, r9
 8014ce6:	eb73 0707 	sbcs.w	r7, r3, r7
 8014cea:	dad1      	bge.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014cec:	1882      	adds	r2, r0, r2
 8014cee:	6820      	ldr	r0, [r4, #0]
 8014cf0:	f04f 0505 	mov.w	r5, #5
 8014cf4:	eb43 0301 	adc.w	r3, r3, r1
 8014cf8:	9500      	str	r5, [sp, #0]
 8014cfa:	3028      	adds	r0, #40	@ 0x28
 8014cfc:	f001 fdfe 	bl	80168fc <__atomic_store_8>
 8014d00:	6820      	ldr	r0, [r4, #0]
 8014d02:	9500      	str	r5, [sp, #0]
 8014d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d08:	3020      	adds	r0, #32
 8014d0a:	f001 fdf7 	bl	80168fc <__atomic_store_8>
 8014d0e:	e7bf      	b.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014d10:	6813      	ldr	r3, [r2, #0]
 8014d12:	a902      	add	r1, sp, #8
 8014d14:	6818      	ldr	r0, [r3, #0]
 8014d16:	f7ff fed1 	bl	8014abc <rcl_clock_get_now>
 8014d1a:	2800      	cmp	r0, #0
 8014d1c:	d1b8      	bne.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014d1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8014d22:	4313      	orrs	r3, r2
 8014d24:	d0b4      	beq.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014d26:	6820      	ldr	r0, [r4, #0]
 8014d28:	2105      	movs	r1, #5
 8014d2a:	3028      	adds	r0, #40	@ 0x28
 8014d2c:	f001 fdb0 	bl	8016890 <__atomic_load_8>
 8014d30:	9d02      	ldr	r5, [sp, #8]
 8014d32:	9b03      	ldr	r3, [sp, #12]
 8014d34:	4602      	mov	r2, r0
 8014d36:	6820      	ldr	r0, [r4, #0]
 8014d38:	1b52      	subs	r2, r2, r5
 8014d3a:	f04f 0405 	mov.w	r4, #5
 8014d3e:	9400      	str	r4, [sp, #0]
 8014d40:	eb61 0303 	sbc.w	r3, r1, r3
 8014d44:	3030      	adds	r0, #48	@ 0x30
 8014d46:	f001 fdd9 	bl	80168fc <__atomic_store_8>
 8014d4a:	e7a1      	b.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014d4c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8014d50:	4313      	orrs	r3, r2
 8014d52:	d09d      	beq.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014d54:	6820      	ldr	r0, [r4, #0]
 8014d56:	f04f 0805 	mov.w	r8, #5
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	f8cd 8000 	str.w	r8, [sp]
 8014d60:	3030      	adds	r0, #48	@ 0x30
 8014d62:	2200      	movs	r2, #0
 8014d64:	f001 fe00 	bl	8016968 <__atomic_exchange_8>
 8014d68:	ea51 0300 	orrs.w	r3, r1, r0
 8014d6c:	4606      	mov	r6, r0
 8014d6e:	460f      	mov	r7, r1
 8014d70:	d08e      	beq.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014d72:	9a02      	ldr	r2, [sp, #8]
 8014d74:	9b03      	ldr	r3, [sp, #12]
 8014d76:	f8cd 8000 	str.w	r8, [sp]
 8014d7a:	1a12      	subs	r2, r2, r0
 8014d7c:	6820      	ldr	r0, [r4, #0]
 8014d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8014d82:	eb12 020a 	adds.w	r2, r2, sl
 8014d86:	eb43 0305 	adc.w	r3, r3, r5
 8014d8a:	3028      	adds	r0, #40	@ 0x28
 8014d8c:	f001 fdb6 	bl	80168fc <__atomic_store_8>
 8014d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d94:	f8cd 8000 	str.w	r8, [sp]
 8014d98:	6820      	ldr	r0, [r4, #0]
 8014d9a:	1b92      	subs	r2, r2, r6
 8014d9c:	eb63 0307 	sbc.w	r3, r3, r7
 8014da0:	3020      	adds	r0, #32
 8014da2:	f001 fdab 	bl	80168fc <__atomic_store_8>
 8014da6:	e773      	b.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014da8:	6820      	ldr	r0, [r4, #0]
 8014daa:	3008      	adds	r0, #8
 8014dac:	f004 fb32 	bl	8019414 <rcl_trigger_guard_condition>
 8014db0:	e76e      	b.n	8014c90 <_rcl_timer_time_jump+0x14>
 8014db2:	bf00      	nop

08014db4 <rcl_get_zero_initialized_timer>:
 8014db4:	4b01      	ldr	r3, [pc, #4]	@ (8014dbc <rcl_get_zero_initialized_timer+0x8>)
 8014db6:	6818      	ldr	r0, [r3, #0]
 8014db8:	4770      	bx	lr
 8014dba:	bf00      	nop
 8014dbc:	0801e960 	.word	0x0801e960

08014dc0 <rcl_timer_init2>:
 8014dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dc4:	b0ae      	sub	sp, #184	@ 0xb8
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	a839      	add	r0, sp, #228	@ 0xe4
 8014dca:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 8014dce:	460d      	mov	r5, r1
 8014dd0:	4691      	mov	r9, r2
 8014dd2:	f7f8 ff23 	bl	800dc1c <rcutils_allocator_is_valid>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	d06a      	beq.n	8014eb0 <rcl_timer_init2+0xf0>
 8014dda:	2c00      	cmp	r4, #0
 8014ddc:	d068      	beq.n	8014eb0 <rcl_timer_init2+0xf0>
 8014dde:	2d00      	cmp	r5, #0
 8014de0:	d066      	beq.n	8014eb0 <rcl_timer_init2+0xf0>
 8014de2:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	db63      	blt.n	8014eb0 <rcl_timer_init2+0xf0>
 8014de8:	6823      	ldr	r3, [r4, #0]
 8014dea:	b123      	cbz	r3, 8014df6 <rcl_timer_init2+0x36>
 8014dec:	2664      	movs	r6, #100	@ 0x64
 8014dee:	4630      	mov	r0, r6
 8014df0:	b02e      	add	sp, #184	@ 0xb8
 8014df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014df6:	a908      	add	r1, sp, #32
 8014df8:	4628      	mov	r0, r5
 8014dfa:	f7ff fe5f 	bl	8014abc <rcl_clock_get_now>
 8014dfe:	4606      	mov	r6, r0
 8014e00:	2800      	cmp	r0, #0
 8014e02:	d1f4      	bne.n	8014dee <rcl_timer_init2+0x2e>
 8014e04:	ae06      	add	r6, sp, #24
 8014e06:	4630      	mov	r0, r6
 8014e08:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 8014e0c:	f004 fa0e 	bl	801922c <rcl_get_zero_initialized_guard_condition>
 8014e10:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014e14:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8014e18:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014e1a:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014e1e:	4630      	mov	r0, r6
 8014e20:	f004 fadc 	bl	80193dc <rcl_guard_condition_get_default_options>
 8014e24:	ab0d      	add	r3, sp, #52	@ 0x34
 8014e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014e2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e2e:	4649      	mov	r1, r9
 8014e30:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014e34:	4650      	mov	r0, sl
 8014e36:	f004 fa03 	bl	8019240 <rcl_guard_condition_init>
 8014e3a:	4606      	mov	r6, r0
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d1d6      	bne.n	8014dee <rcl_timer_init2+0x2e>
 8014e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d038      	beq.n	8014eba <rcl_timer_init2+0xfa>
 8014e48:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8014e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e4c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8014e50:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014e54:	2300      	movs	r3, #0
 8014e56:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 8014e5a:	932c      	str	r3, [sp, #176]	@ 0xb0
 8014e5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e60:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8014e62:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8014f18 <rcl_timer_init2+0x158>
 8014e66:	19d0      	adds	r0, r2, r7
 8014e68:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8014e6a:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8014e6e:	eb43 0107 	adc.w	r1, r3, r7
 8014e72:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014e76:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014e7a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014e7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e82:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8014e86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8014e8e:	f8ce 3000 	str.w	r3, [lr]
 8014e92:	f088 0801 	eor.w	r8, r8, #1
 8014e96:	4619      	mov	r1, r3
 8014e98:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8014e9c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8014e9e:	2060      	movs	r0, #96	@ 0x60
 8014ea0:	4798      	blx	r3
 8014ea2:	6020      	str	r0, [r4, #0]
 8014ea4:	b358      	cbz	r0, 8014efe <rcl_timer_init2+0x13e>
 8014ea6:	2260      	movs	r2, #96	@ 0x60
 8014ea8:	a916      	add	r1, sp, #88	@ 0x58
 8014eaa:	f005 fff0 	bl	801ae8e <memcpy>
 8014eae:	e79e      	b.n	8014dee <rcl_timer_init2+0x2e>
 8014eb0:	260b      	movs	r6, #11
 8014eb2:	4630      	mov	r0, r6
 8014eb4:	b02e      	add	sp, #184	@ 0xb8
 8014eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eba:	2001      	movs	r0, #1
 8014ebc:	2100      	movs	r1, #0
 8014ebe:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8014ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8014eca:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8014ece:	4a14      	ldr	r2, [pc, #80]	@ (8014f20 <rcl_timer_init2+0x160>)
 8014ed0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014ed4:	9405      	str	r4, [sp, #20]
 8014ed6:	9204      	str	r2, [sp, #16]
 8014ed8:	ab12      	add	r3, sp, #72	@ 0x48
 8014eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014edc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014ee0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014ee4:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014ee8:	4628      	mov	r0, r5
 8014eea:	f7ff fe03 	bl	8014af4 <rcl_clock_add_jump_callback>
 8014eee:	4681      	mov	r9, r0
 8014ef0:	2800      	cmp	r0, #0
 8014ef2:	d0a9      	beq.n	8014e48 <rcl_timer_init2+0x88>
 8014ef4:	4650      	mov	r0, sl
 8014ef6:	f004 fa4f 	bl	8019398 <rcl_guard_condition_fini>
 8014efa:	464e      	mov	r6, r9
 8014efc:	e777      	b.n	8014dee <rcl_timer_init2+0x2e>
 8014efe:	4650      	mov	r0, sl
 8014f00:	f004 fa4a 	bl	8019398 <rcl_guard_condition_fini>
 8014f04:	4906      	ldr	r1, [pc, #24]	@ (8014f20 <rcl_timer_init2+0x160>)
 8014f06:	4622      	mov	r2, r4
 8014f08:	4628      	mov	r0, r5
 8014f0a:	f7ff fe55 	bl	8014bb8 <rcl_clock_remove_jump_callback>
 8014f0e:	260a      	movs	r6, #10
 8014f10:	e76d      	b.n	8014dee <rcl_timer_init2+0x2e>
 8014f12:	bf00      	nop
 8014f14:	f3af 8000 	nop.w
	...
 8014f20:	08014c7d 	.word	0x08014c7d

08014f24 <rcl_timer_clock>:
 8014f24:	b130      	cbz	r0, 8014f34 <rcl_timer_clock+0x10>
 8014f26:	b129      	cbz	r1, 8014f34 <rcl_timer_clock+0x10>
 8014f28:	6803      	ldr	r3, [r0, #0]
 8014f2a:	b12b      	cbz	r3, 8014f38 <rcl_timer_clock+0x14>
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	600b      	str	r3, [r1, #0]
 8014f30:	2000      	movs	r0, #0
 8014f32:	4770      	bx	lr
 8014f34:	200b      	movs	r0, #11
 8014f36:	4770      	bx	lr
 8014f38:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8014f3c:	4770      	bx	lr
 8014f3e:	bf00      	nop

08014f40 <rcl_timer_call>:
 8014f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f44:	b087      	sub	sp, #28
 8014f46:	2800      	cmp	r0, #0
 8014f48:	d067      	beq.n	801501a <rcl_timer_call+0xda>
 8014f4a:	6803      	ldr	r3, [r0, #0]
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d068      	beq.n	8015024 <rcl_timer_call+0xe4>
 8014f52:	f3bf 8f5b 	dmb	ish
 8014f56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014f5a:	f3bf 8f5b 	dmb	ish
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d150      	bne.n	8015004 <rcl_timer_call+0xc4>
 8014f62:	6803      	ldr	r3, [r0, #0]
 8014f64:	a904      	add	r1, sp, #16
 8014f66:	6818      	ldr	r0, [r3, #0]
 8014f68:	f7ff fda8 	bl	8014abc <rcl_clock_get_now>
 8014f6c:	4605      	mov	r5, r0
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	d144      	bne.n	8014ffc <rcl_timer_call+0xbc>
 8014f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	db4a      	blt.n	8015010 <rcl_timer_call+0xd0>
 8014f7a:	6820      	ldr	r0, [r4, #0]
 8014f7c:	f04f 0a05 	mov.w	sl, #5
 8014f80:	f8cd a000 	str.w	sl, [sp]
 8014f84:	3020      	adds	r0, #32
 8014f86:	f001 fcef 	bl	8016968 <__atomic_exchange_8>
 8014f8a:	6823      	ldr	r3, [r4, #0]
 8014f8c:	f3bf 8f5b 	dmb	ish
 8014f90:	4680      	mov	r8, r0
 8014f92:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014f96:	f3bf 8f5b 	dmb	ish
 8014f9a:	6820      	ldr	r0, [r4, #0]
 8014f9c:	4689      	mov	r9, r1
 8014f9e:	3028      	adds	r0, #40	@ 0x28
 8014fa0:	4651      	mov	r1, sl
 8014fa2:	f001 fc75 	bl	8016890 <__atomic_load_8>
 8014fa6:	4606      	mov	r6, r0
 8014fa8:	6820      	ldr	r0, [r4, #0]
 8014faa:	460f      	mov	r7, r1
 8014fac:	3018      	adds	r0, #24
 8014fae:	4651      	mov	r1, sl
 8014fb0:	f001 fc6e 	bl	8016890 <__atomic_load_8>
 8014fb4:	1836      	adds	r6, r6, r0
 8014fb6:	eb41 0707 	adc.w	r7, r1, r7
 8014fba:	4602      	mov	r2, r0
 8014fbc:	460b      	mov	r3, r1
 8014fbe:	4682      	mov	sl, r0
 8014fc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014fc4:	42b0      	cmp	r0, r6
 8014fc6:	eb71 0c07 	sbcs.w	ip, r1, r7
 8014fca:	db04      	blt.n	8014fd6 <rcl_timer_call+0x96>
 8014fcc:	ea53 0c02 	orrs.w	ip, r3, r2
 8014fd0:	d12b      	bne.n	801502a <rcl_timer_call+0xea>
 8014fd2:	4606      	mov	r6, r0
 8014fd4:	460f      	mov	r7, r1
 8014fd6:	6820      	ldr	r0, [r4, #0]
 8014fd8:	2105      	movs	r1, #5
 8014fda:	4632      	mov	r2, r6
 8014fdc:	463b      	mov	r3, r7
 8014fde:	3028      	adds	r0, #40	@ 0x28
 8014fe0:	9100      	str	r1, [sp, #0]
 8014fe2:	f001 fc8b 	bl	80168fc <__atomic_store_8>
 8014fe6:	f1bb 0f00 	cmp.w	fp, #0
 8014fea:	d007      	beq.n	8014ffc <rcl_timer_call+0xbc>
 8014fec:	9a04      	ldr	r2, [sp, #16]
 8014fee:	9b05      	ldr	r3, [sp, #20]
 8014ff0:	ebb2 0208 	subs.w	r2, r2, r8
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	eb63 0309 	sbc.w	r3, r3, r9
 8014ffa:	47d8      	blx	fp
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	b007      	add	sp, #28
 8015000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015004:	f240 3521 	movw	r5, #801	@ 0x321
 8015008:	4628      	mov	r0, r5
 801500a:	b007      	add	sp, #28
 801500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015010:	2501      	movs	r5, #1
 8015012:	4628      	mov	r0, r5
 8015014:	b007      	add	sp, #28
 8015016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801501a:	250b      	movs	r5, #11
 801501c:	4628      	mov	r0, r5
 801501e:	b007      	add	sp, #28
 8015020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015024:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015028:	e7e8      	b.n	8014ffc <rcl_timer_call+0xbc>
 801502a:	1b80      	subs	r0, r0, r6
 801502c:	eb61 0107 	sbc.w	r1, r1, r7
 8015030:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015034:	f7eb fe00 	bl	8000c38 <__aeabi_ldivmod>
 8015038:	9b02      	ldr	r3, [sp, #8]
 801503a:	3001      	adds	r0, #1
 801503c:	f141 0100 	adc.w	r1, r1, #0
 8015040:	fb00 f303 	mul.w	r3, r0, r3
 8015044:	fb01 330a 	mla	r3, r1, sl, r3
 8015048:	fba0 0a0a 	umull	r0, sl, r0, sl
 801504c:	1830      	adds	r0, r6, r0
 801504e:	4453      	add	r3, sl
 8015050:	eb43 0707 	adc.w	r7, r3, r7
 8015054:	4606      	mov	r6, r0
 8015056:	e7be      	b.n	8014fd6 <rcl_timer_call+0x96>

08015058 <rcl_timer_is_ready>:
 8015058:	b398      	cbz	r0, 80150c2 <rcl_timer_is_ready+0x6a>
 801505a:	b530      	push	{r4, r5, lr}
 801505c:	6803      	ldr	r3, [r0, #0]
 801505e:	b083      	sub	sp, #12
 8015060:	4604      	mov	r4, r0
 8015062:	b383      	cbz	r3, 80150c6 <rcl_timer_is_ready+0x6e>
 8015064:	460d      	mov	r5, r1
 8015066:	b349      	cbz	r1, 80150bc <rcl_timer_is_ready+0x64>
 8015068:	f3bf 8f5b 	dmb	ish
 801506c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015070:	f3bf 8f5b 	dmb	ish
 8015074:	b9fb      	cbnz	r3, 80150b6 <rcl_timer_is_ready+0x5e>
 8015076:	6803      	ldr	r3, [r0, #0]
 8015078:	4669      	mov	r1, sp
 801507a:	6818      	ldr	r0, [r3, #0]
 801507c:	f7ff fd1e 	bl	8014abc <rcl_clock_get_now>
 8015080:	b128      	cbz	r0, 801508e <rcl_timer_is_ready+0x36>
 8015082:	f240 3321 	movw	r3, #801	@ 0x321
 8015086:	4298      	cmp	r0, r3
 8015088:	d015      	beq.n	80150b6 <rcl_timer_is_ready+0x5e>
 801508a:	b003      	add	sp, #12
 801508c:	bd30      	pop	{r4, r5, pc}
 801508e:	6820      	ldr	r0, [r4, #0]
 8015090:	2105      	movs	r1, #5
 8015092:	3028      	adds	r0, #40	@ 0x28
 8015094:	f001 fbfc 	bl	8016890 <__atomic_load_8>
 8015098:	e9dd 3200 	ldrd	r3, r2, [sp]
 801509c:	1ac0      	subs	r0, r0, r3
 801509e:	eb61 0102 	sbc.w	r1, r1, r2
 80150a2:	2801      	cmp	r0, #1
 80150a4:	f171 0100 	sbcs.w	r1, r1, #0
 80150a8:	bfb4      	ite	lt
 80150aa:	2301      	movlt	r3, #1
 80150ac:	2300      	movge	r3, #0
 80150ae:	702b      	strb	r3, [r5, #0]
 80150b0:	2000      	movs	r0, #0
 80150b2:	b003      	add	sp, #12
 80150b4:	bd30      	pop	{r4, r5, pc}
 80150b6:	2300      	movs	r3, #0
 80150b8:	702b      	strb	r3, [r5, #0]
 80150ba:	e7f9      	b.n	80150b0 <rcl_timer_is_ready+0x58>
 80150bc:	200b      	movs	r0, #11
 80150be:	b003      	add	sp, #12
 80150c0:	bd30      	pop	{r4, r5, pc}
 80150c2:	200b      	movs	r0, #11
 80150c4:	4770      	bx	lr
 80150c6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80150ca:	e7de      	b.n	801508a <rcl_timer_is_ready+0x32>

080150cc <rcl_timer_get_next_call_time>:
 80150cc:	b1d8      	cbz	r0, 8015106 <rcl_timer_get_next_call_time+0x3a>
 80150ce:	b538      	push	{r3, r4, r5, lr}
 80150d0:	6803      	ldr	r3, [r0, #0]
 80150d2:	b1d3      	cbz	r3, 801510a <rcl_timer_get_next_call_time+0x3e>
 80150d4:	460c      	mov	r4, r1
 80150d6:	b1a1      	cbz	r1, 8015102 <rcl_timer_get_next_call_time+0x36>
 80150d8:	f3bf 8f5b 	dmb	ish
 80150dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80150e0:	f3bf 8f5b 	dmb	ish
 80150e4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80150e8:	b943      	cbnz	r3, 80150fc <rcl_timer_get_next_call_time+0x30>
 80150ea:	6800      	ldr	r0, [r0, #0]
 80150ec:	2105      	movs	r1, #5
 80150ee:	3028      	adds	r0, #40	@ 0x28
 80150f0:	f001 fbce 	bl	8016890 <__atomic_load_8>
 80150f4:	e9c4 0100 	strd	r0, r1, [r4]
 80150f8:	4628      	mov	r0, r5
 80150fa:	bd38      	pop	{r3, r4, r5, pc}
 80150fc:	f240 3021 	movw	r0, #801	@ 0x321
 8015100:	bd38      	pop	{r3, r4, r5, pc}
 8015102:	200b      	movs	r0, #11
 8015104:	bd38      	pop	{r3, r4, r5, pc}
 8015106:	200b      	movs	r0, #11
 8015108:	4770      	bx	lr
 801510a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801510e:	bd38      	pop	{r3, r4, r5, pc}

08015110 <rcl_timer_get_guard_condition>:
 8015110:	b130      	cbz	r0, 8015120 <rcl_timer_get_guard_condition+0x10>
 8015112:	6800      	ldr	r0, [r0, #0]
 8015114:	b120      	cbz	r0, 8015120 <rcl_timer_get_guard_condition+0x10>
 8015116:	68c3      	ldr	r3, [r0, #12]
 8015118:	b10b      	cbz	r3, 801511e <rcl_timer_get_guard_condition+0xe>
 801511a:	3008      	adds	r0, #8
 801511c:	4770      	bx	lr
 801511e:	4618      	mov	r0, r3
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop

08015124 <rcl_get_zero_initialized_wait_set>:
 8015124:	b510      	push	{r4, lr}
 8015126:	4c08      	ldr	r4, [pc, #32]	@ (8015148 <rcl_get_zero_initialized_wait_set+0x24>)
 8015128:	4686      	mov	lr, r0
 801512a:	4684      	mov	ip, r0
 801512c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801512e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801513a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801513e:	6823      	ldr	r3, [r4, #0]
 8015140:	f8cc 3000 	str.w	r3, [ip]
 8015144:	4670      	mov	r0, lr
 8015146:	bd10      	pop	{r4, pc}
 8015148:	0801e964 	.word	0x0801e964

0801514c <rcl_wait_set_is_valid>:
 801514c:	b118      	cbz	r0, 8015156 <rcl_wait_set_is_valid+0xa>
 801514e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015150:	3800      	subs	r0, #0
 8015152:	bf18      	it	ne
 8015154:	2001      	movne	r0, #1
 8015156:	4770      	bx	lr

08015158 <rcl_wait_set_fini>:
 8015158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801515c:	b083      	sub	sp, #12
 801515e:	2800      	cmp	r0, #0
 8015160:	f000 8098 	beq.w	8015294 <rcl_wait_set_fini+0x13c>
 8015164:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015166:	4605      	mov	r5, r0
 8015168:	2e00      	cmp	r6, #0
 801516a:	f000 808f 	beq.w	801528c <rcl_wait_set_fini+0x134>
 801516e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015170:	f002 fe20 	bl	8017db4 <rmw_destroy_wait_set>
 8015174:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015176:	1e06      	subs	r6, r0, #0
 8015178:	bf18      	it	ne
 801517a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801517e:	2c00      	cmp	r4, #0
 8015180:	f000 8084 	beq.w	801528c <rcl_wait_set_fini+0x134>
 8015184:	6828      	ldr	r0, [r5, #0]
 8015186:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 801518a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801518e:	2700      	movs	r7, #0
 8015190:	606f      	str	r7, [r5, #4]
 8015192:	6027      	str	r7, [r4, #0]
 8015194:	b118      	cbz	r0, 801519e <rcl_wait_set_fini+0x46>
 8015196:	4649      	mov	r1, r9
 8015198:	47c0      	blx	r8
 801519a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801519c:	602f      	str	r7, [r5, #0]
 801519e:	68a0      	ldr	r0, [r4, #8]
 80151a0:	b128      	cbz	r0, 80151ae <rcl_wait_set_fini+0x56>
 80151a2:	4649      	mov	r1, r9
 80151a4:	47c0      	blx	r8
 80151a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151a8:	2300      	movs	r3, #0
 80151aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80151ae:	68a8      	ldr	r0, [r5, #8]
 80151b0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80151b2:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80151b4:	f04f 0800 	mov.w	r8, #0
 80151b8:	f8c5 800c 	str.w	r8, [r5, #12]
 80151bc:	f8c4 800c 	str.w	r8, [r4, #12]
 80151c0:	b128      	cbz	r0, 80151ce <rcl_wait_set_fini+0x76>
 80151c2:	47b8      	blx	r7
 80151c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151c6:	f8c5 8008 	str.w	r8, [r5, #8]
 80151ca:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80151cc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80151ce:	6960      	ldr	r0, [r4, #20]
 80151d0:	f04f 0800 	mov.w	r8, #0
 80151d4:	f8c4 8010 	str.w	r8, [r4, #16]
 80151d8:	b128      	cbz	r0, 80151e6 <rcl_wait_set_fini+0x8e>
 80151da:	47b8      	blx	r7
 80151dc:	f8c4 8014 	str.w	r8, [r4, #20]
 80151e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151e2:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80151e4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80151e6:	6928      	ldr	r0, [r5, #16]
 80151e8:	f04f 0800 	mov.w	r8, #0
 80151ec:	f8c5 8014 	str.w	r8, [r5, #20]
 80151f0:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 80151f4:	b128      	cbz	r0, 8015202 <rcl_wait_set_fini+0xaa>
 80151f6:	47b8      	blx	r7
 80151f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80151fa:	f8c5 8010 	str.w	r8, [r5, #16]
 80151fe:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015200:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015202:	69a8      	ldr	r0, [r5, #24]
 8015204:	f04f 0800 	mov.w	r8, #0
 8015208:	f8c5 801c 	str.w	r8, [r5, #28]
 801520c:	f8c4 8018 	str.w	r8, [r4, #24]
 8015210:	b128      	cbz	r0, 801521e <rcl_wait_set_fini+0xc6>
 8015212:	9101      	str	r1, [sp, #4]
 8015214:	47b8      	blx	r7
 8015216:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015218:	9901      	ldr	r1, [sp, #4]
 801521a:	f8c5 8018 	str.w	r8, [r5, #24]
 801521e:	6a20      	ldr	r0, [r4, #32]
 8015220:	b120      	cbz	r0, 801522c <rcl_wait_set_fini+0xd4>
 8015222:	47b8      	blx	r7
 8015224:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015226:	2300      	movs	r3, #0
 8015228:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801522c:	6a28      	ldr	r0, [r5, #32]
 801522e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8015232:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015236:	2700      	movs	r7, #0
 8015238:	626f      	str	r7, [r5, #36]	@ 0x24
 801523a:	6267      	str	r7, [r4, #36]	@ 0x24
 801523c:	b118      	cbz	r0, 8015246 <rcl_wait_set_fini+0xee>
 801523e:	4649      	mov	r1, r9
 8015240:	47c0      	blx	r8
 8015242:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015244:	622f      	str	r7, [r5, #32]
 8015246:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015248:	b128      	cbz	r0, 8015256 <rcl_wait_set_fini+0xfe>
 801524a:	4649      	mov	r1, r9
 801524c:	47c0      	blx	r8
 801524e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015250:	2300      	movs	r3, #0
 8015252:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015256:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015258:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 801525c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015260:	2700      	movs	r7, #0
 8015262:	62ef      	str	r7, [r5, #44]	@ 0x2c
 8015264:	6327      	str	r7, [r4, #48]	@ 0x30
 8015266:	b118      	cbz	r0, 8015270 <rcl_wait_set_fini+0x118>
 8015268:	4649      	mov	r1, r9
 801526a:	47c0      	blx	r8
 801526c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801526e:	62af      	str	r7, [r5, #40]	@ 0x28
 8015270:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015272:	b128      	cbz	r0, 8015280 <rcl_wait_set_fini+0x128>
 8015274:	4649      	mov	r1, r9
 8015276:	47c0      	blx	r8
 8015278:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801527a:	2300      	movs	r3, #0
 801527c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8015280:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015282:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015284:	4620      	mov	r0, r4
 8015286:	4798      	blx	r3
 8015288:	2300      	movs	r3, #0
 801528a:	632b      	str	r3, [r5, #48]	@ 0x30
 801528c:	4630      	mov	r0, r6
 801528e:	b003      	add	sp, #12
 8015290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015294:	260b      	movs	r6, #11
 8015296:	4630      	mov	r0, r6
 8015298:	b003      	add	sp, #12
 801529a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801529e:	bf00      	nop

080152a0 <rcl_wait_set_add_subscription>:
 80152a0:	b318      	cbz	r0, 80152ea <rcl_wait_set_add_subscription+0x4a>
 80152a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80152a4:	b570      	push	{r4, r5, r6, lr}
 80152a6:	4604      	mov	r4, r0
 80152a8:	b30b      	cbz	r3, 80152ee <rcl_wait_set_add_subscription+0x4e>
 80152aa:	b319      	cbz	r1, 80152f4 <rcl_wait_set_add_subscription+0x54>
 80152ac:	681d      	ldr	r5, [r3, #0]
 80152ae:	6840      	ldr	r0, [r0, #4]
 80152b0:	4285      	cmp	r5, r0
 80152b2:	d217      	bcs.n	80152e4 <rcl_wait_set_add_subscription+0x44>
 80152b4:	6820      	ldr	r0, [r4, #0]
 80152b6:	1c6e      	adds	r6, r5, #1
 80152b8:	601e      	str	r6, [r3, #0]
 80152ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80152be:	b102      	cbz	r2, 80152c2 <rcl_wait_set_add_subscription+0x22>
 80152c0:	6015      	str	r5, [r2, #0]
 80152c2:	4608      	mov	r0, r1
 80152c4:	f7ff fb58 	bl	8014978 <rcl_subscription_get_rmw_handle>
 80152c8:	b150      	cbz	r0, 80152e0 <rcl_wait_set_add_subscription+0x40>
 80152ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80152cc:	6842      	ldr	r2, [r0, #4]
 80152ce:	689b      	ldr	r3, [r3, #8]
 80152d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80152d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80152d6:	6853      	ldr	r3, [r2, #4]
 80152d8:	3301      	adds	r3, #1
 80152da:	2000      	movs	r0, #0
 80152dc:	6053      	str	r3, [r2, #4]
 80152de:	bd70      	pop	{r4, r5, r6, pc}
 80152e0:	2001      	movs	r0, #1
 80152e2:	bd70      	pop	{r4, r5, r6, pc}
 80152e4:	f240 3086 	movw	r0, #902	@ 0x386
 80152e8:	bd70      	pop	{r4, r5, r6, pc}
 80152ea:	200b      	movs	r0, #11
 80152ec:	4770      	bx	lr
 80152ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80152f2:	bd70      	pop	{r4, r5, r6, pc}
 80152f4:	200b      	movs	r0, #11
 80152f6:	bd70      	pop	{r4, r5, r6, pc}

080152f8 <rcl_wait_set_clear>:
 80152f8:	2800      	cmp	r0, #0
 80152fa:	d074      	beq.n	80153e6 <rcl_wait_set_clear+0xee>
 80152fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80152fe:	b510      	push	{r4, lr}
 8015300:	4604      	mov	r4, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	d071      	beq.n	80153ea <rcl_wait_set_clear+0xf2>
 8015306:	6800      	ldr	r0, [r0, #0]
 8015308:	b138      	cbz	r0, 801531a <rcl_wait_set_clear+0x22>
 801530a:	6862      	ldr	r2, [r4, #4]
 801530c:	2100      	movs	r1, #0
 801530e:	0092      	lsls	r2, r2, #2
 8015310:	f005 fcdd 	bl	801acce <memset>
 8015314:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015316:	2200      	movs	r2, #0
 8015318:	601a      	str	r2, [r3, #0]
 801531a:	68a0      	ldr	r0, [r4, #8]
 801531c:	b138      	cbz	r0, 801532e <rcl_wait_set_clear+0x36>
 801531e:	68e2      	ldr	r2, [r4, #12]
 8015320:	2100      	movs	r1, #0
 8015322:	0092      	lsls	r2, r2, #2
 8015324:	f005 fcd3 	bl	801acce <memset>
 8015328:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801532a:	2200      	movs	r2, #0
 801532c:	60da      	str	r2, [r3, #12]
 801532e:	69a0      	ldr	r0, [r4, #24]
 8015330:	b138      	cbz	r0, 8015342 <rcl_wait_set_clear+0x4a>
 8015332:	69e2      	ldr	r2, [r4, #28]
 8015334:	2100      	movs	r1, #0
 8015336:	0092      	lsls	r2, r2, #2
 8015338:	f005 fcc9 	bl	801acce <memset>
 801533c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801533e:	2200      	movs	r2, #0
 8015340:	619a      	str	r2, [r3, #24]
 8015342:	6a20      	ldr	r0, [r4, #32]
 8015344:	b138      	cbz	r0, 8015356 <rcl_wait_set_clear+0x5e>
 8015346:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015348:	2100      	movs	r1, #0
 801534a:	0092      	lsls	r2, r2, #2
 801534c:	f005 fcbf 	bl	801acce <memset>
 8015350:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015352:	2200      	movs	r2, #0
 8015354:	625a      	str	r2, [r3, #36]	@ 0x24
 8015356:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015358:	b138      	cbz	r0, 801536a <rcl_wait_set_clear+0x72>
 801535a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801535c:	2100      	movs	r1, #0
 801535e:	0092      	lsls	r2, r2, #2
 8015360:	f005 fcb5 	bl	801acce <memset>
 8015364:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015366:	2200      	movs	r2, #0
 8015368:	631a      	str	r2, [r3, #48]	@ 0x30
 801536a:	6920      	ldr	r0, [r4, #16]
 801536c:	b138      	cbz	r0, 801537e <rcl_wait_set_clear+0x86>
 801536e:	6962      	ldr	r2, [r4, #20]
 8015370:	2100      	movs	r1, #0
 8015372:	0092      	lsls	r2, r2, #2
 8015374:	f005 fcab 	bl	801acce <memset>
 8015378:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801537a:	2200      	movs	r2, #0
 801537c:	641a      	str	r2, [r3, #64]	@ 0x40
 801537e:	6898      	ldr	r0, [r3, #8]
 8015380:	b138      	cbz	r0, 8015392 <rcl_wait_set_clear+0x9a>
 8015382:	685a      	ldr	r2, [r3, #4]
 8015384:	2100      	movs	r1, #0
 8015386:	0092      	lsls	r2, r2, #2
 8015388:	f005 fca1 	bl	801acce <memset>
 801538c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801538e:	2200      	movs	r2, #0
 8015390:	605a      	str	r2, [r3, #4]
 8015392:	6958      	ldr	r0, [r3, #20]
 8015394:	b138      	cbz	r0, 80153a6 <rcl_wait_set_clear+0xae>
 8015396:	691a      	ldr	r2, [r3, #16]
 8015398:	2100      	movs	r1, #0
 801539a:	0092      	lsls	r2, r2, #2
 801539c:	f005 fc97 	bl	801acce <memset>
 80153a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153a2:	2200      	movs	r2, #0
 80153a4:	611a      	str	r2, [r3, #16]
 80153a6:	6a18      	ldr	r0, [r3, #32]
 80153a8:	b138      	cbz	r0, 80153ba <rcl_wait_set_clear+0xc2>
 80153aa:	69da      	ldr	r2, [r3, #28]
 80153ac:	2100      	movs	r1, #0
 80153ae:	0092      	lsls	r2, r2, #2
 80153b0:	f005 fc8d 	bl	801acce <memset>
 80153b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153b6:	2200      	movs	r2, #0
 80153b8:	61da      	str	r2, [r3, #28]
 80153ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80153bc:	b138      	cbz	r0, 80153ce <rcl_wait_set_clear+0xd6>
 80153be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80153c0:	2100      	movs	r1, #0
 80153c2:	0092      	lsls	r2, r2, #2
 80153c4:	f005 fc83 	bl	801acce <memset>
 80153c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153ca:	2200      	movs	r2, #0
 80153cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80153ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80153d0:	b138      	cbz	r0, 80153e2 <rcl_wait_set_clear+0xea>
 80153d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80153d4:	2100      	movs	r1, #0
 80153d6:	0092      	lsls	r2, r2, #2
 80153d8:	f005 fc79 	bl	801acce <memset>
 80153dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80153de:	2200      	movs	r2, #0
 80153e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80153e2:	2000      	movs	r0, #0
 80153e4:	bd10      	pop	{r4, pc}
 80153e6:	200b      	movs	r0, #11
 80153e8:	4770      	bx	lr
 80153ea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80153ee:	bd10      	pop	{r4, pc}

080153f0 <rcl_wait_set_resize>:
 80153f0:	2800      	cmp	r0, #0
 80153f2:	f000 81a1 	beq.w	8015738 <rcl_wait_set_resize+0x348>
 80153f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153fa:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 80153fe:	b083      	sub	sp, #12
 8015400:	4604      	mov	r4, r0
 8015402:	f1ba 0f00 	cmp.w	sl, #0
 8015406:	f000 8199 	beq.w	801573c <rcl_wait_set_resize+0x34c>
 801540a:	f04f 0800 	mov.w	r8, #0
 801540e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8015412:	461e      	mov	r6, r3
 8015414:	460f      	mov	r7, r1
 8015416:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 801541a:	4615      	mov	r5, r2
 801541c:	f8c0 8004 	str.w	r8, [r0, #4]
 8015420:	6800      	ldr	r0, [r0, #0]
 8015422:	f8ca 8000 	str.w	r8, [sl]
 8015426:	2900      	cmp	r1, #0
 8015428:	f000 80cf 	beq.w	80155ca <rcl_wait_set_resize+0x1da>
 801542c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015430:	464a      	mov	r2, r9
 8015432:	4651      	mov	r1, sl
 8015434:	9301      	str	r3, [sp, #4]
 8015436:	4798      	blx	r3
 8015438:	9b01      	ldr	r3, [sp, #4]
 801543a:	6020      	str	r0, [r4, #0]
 801543c:	2800      	cmp	r0, #0
 801543e:	f000 8109 	beq.w	8015654 <rcl_wait_set_resize+0x264>
 8015442:	4652      	mov	r2, sl
 8015444:	4641      	mov	r1, r8
 8015446:	9301      	str	r3, [sp, #4]
 8015448:	f005 fc41 	bl	801acce <memset>
 801544c:	6067      	str	r7, [r4, #4]
 801544e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8015450:	9b01      	ldr	r3, [sp, #4]
 8015452:	68b8      	ldr	r0, [r7, #8]
 8015454:	f8c7 8004 	str.w	r8, [r7, #4]
 8015458:	464a      	mov	r2, r9
 801545a:	4651      	mov	r1, sl
 801545c:	4798      	blx	r3
 801545e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015460:	60b8      	str	r0, [r7, #8]
 8015462:	689f      	ldr	r7, [r3, #8]
 8015464:	2f00      	cmp	r7, #0
 8015466:	f000 80f0 	beq.w	801564a <rcl_wait_set_resize+0x25a>
 801546a:	4652      	mov	r2, sl
 801546c:	4641      	mov	r1, r8
 801546e:	4638      	mov	r0, r7
 8015470:	f005 fc2d 	bl	801acce <memset>
 8015474:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015478:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801547c:	68a0      	ldr	r0, [r4, #8]
 801547e:	2700      	movs	r7, #0
 8015480:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8015484:	60e7      	str	r7, [r4, #12]
 8015486:	f8ca 700c 	str.w	r7, [sl, #12]
 801548a:	2d00      	cmp	r5, #0
 801548c:	f040 80b0 	bne.w	80155f0 <rcl_wait_set_resize+0x200>
 8015490:	b130      	cbz	r0, 80154a0 <rcl_wait_set_resize+0xb0>
 8015492:	4641      	mov	r1, r8
 8015494:	4790      	blx	r2
 8015496:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801549a:	60a5      	str	r5, [r4, #8]
 801549c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80154a0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80154a4:	2700      	movs	r7, #0
 80154a6:	19ad      	adds	r5, r5, r6
 80154a8:	f8ca 7010 	str.w	r7, [sl, #16]
 80154ac:	f040 80b8 	bne.w	8015620 <rcl_wait_set_resize+0x230>
 80154b0:	b148      	cbz	r0, 80154c6 <rcl_wait_set_resize+0xd6>
 80154b2:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 80154b6:	4641      	mov	r1, r8
 80154b8:	4798      	blx	r3
 80154ba:	f8ca 5014 	str.w	r5, [sl, #20]
 80154be:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80154c2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80154c6:	6920      	ldr	r0, [r4, #16]
 80154c8:	2500      	movs	r5, #0
 80154ca:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80154ce:	6165      	str	r5, [r4, #20]
 80154d0:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 80154d4:	2e00      	cmp	r6, #0
 80154d6:	f040 80c1 	bne.w	801565c <rcl_wait_set_resize+0x26c>
 80154da:	b140      	cbz	r0, 80154ee <rcl_wait_set_resize+0xfe>
 80154dc:	4641      	mov	r1, r8
 80154de:	47c8      	blx	r9
 80154e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80154e4:	6126      	str	r6, [r4, #16]
 80154e6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80154ea:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80154ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80154f0:	69a0      	ldr	r0, [r4, #24]
 80154f2:	2500      	movs	r5, #0
 80154f4:	61e5      	str	r5, [r4, #28]
 80154f6:	f8ca 5018 	str.w	r5, [sl, #24]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	f040 80c2 	bne.w	8015684 <rcl_wait_set_resize+0x294>
 8015500:	b128      	cbz	r0, 801550e <rcl_wait_set_resize+0x11e>
 8015502:	4641      	mov	r1, r8
 8015504:	47c8      	blx	r9
 8015506:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015508:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801550c:	61a3      	str	r3, [r4, #24]
 801550e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015512:	b130      	cbz	r0, 8015522 <rcl_wait_set_resize+0x132>
 8015514:	4641      	mov	r1, r8
 8015516:	47c8      	blx	r9
 8015518:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801551c:	2300      	movs	r3, #0
 801551e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8015522:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015524:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015528:	6a20      	ldr	r0, [r4, #32]
 801552a:	2500      	movs	r5, #0
 801552c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8015530:	6265      	str	r5, [r4, #36]	@ 0x24
 8015532:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8015536:	2b00      	cmp	r3, #0
 8015538:	f000 80c8 	beq.w	80156cc <rcl_wait_set_resize+0x2dc>
 801553c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8015540:	4632      	mov	r2, r6
 8015542:	4649      	mov	r1, r9
 8015544:	47c0      	blx	r8
 8015546:	6220      	str	r0, [r4, #32]
 8015548:	2800      	cmp	r0, #0
 801554a:	f000 8083 	beq.w	8015654 <rcl_wait_set_resize+0x264>
 801554e:	464a      	mov	r2, r9
 8015550:	4629      	mov	r1, r5
 8015552:	f005 fbbc 	bl	801acce <memset>
 8015556:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801555a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801555c:	6263      	str	r3, [r4, #36]	@ 0x24
 801555e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8015562:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8015566:	4632      	mov	r2, r6
 8015568:	4649      	mov	r1, r9
 801556a:	47c0      	blx	r8
 801556c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801556e:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8015572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015574:	2b00      	cmp	r3, #0
 8015576:	f000 80fb 	beq.w	8015770 <rcl_wait_set_resize+0x380>
 801557a:	464a      	mov	r2, r9
 801557c:	4629      	mov	r1, r5
 801557e:	4618      	mov	r0, r3
 8015580:	f005 fba5 	bl	801acce <memset>
 8015584:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801558a:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 801558e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015590:	2500      	movs	r5, #0
 8015592:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8015596:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8015598:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 801559c:	2b00      	cmp	r3, #0
 801559e:	f040 80a9 	bne.w	80156f4 <rcl_wait_set_resize+0x304>
 80155a2:	b128      	cbz	r0, 80155b0 <rcl_wait_set_resize+0x1c0>
 80155a4:	4631      	mov	r1, r6
 80155a6:	47b8      	blx	r7
 80155a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155aa:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80155ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80155b0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80155b4:	b128      	cbz	r0, 80155c2 <rcl_wait_set_resize+0x1d2>
 80155b6:	4631      	mov	r1, r6
 80155b8:	47b8      	blx	r7
 80155ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155bc:	2200      	movs	r2, #0
 80155be:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 80155c2:	2000      	movs	r0, #0
 80155c4:	b003      	add	sp, #12
 80155c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ca:	b120      	cbz	r0, 80155d6 <rcl_wait_set_resize+0x1e6>
 80155cc:	4649      	mov	r1, r9
 80155ce:	47d8      	blx	fp
 80155d0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80155d4:	6027      	str	r7, [r4, #0]
 80155d6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80155da:	2800      	cmp	r0, #0
 80155dc:	f43f af4c 	beq.w	8015478 <rcl_wait_set_resize+0x88>
 80155e0:	4649      	mov	r1, r9
 80155e2:	47d8      	blx	fp
 80155e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80155e8:	2300      	movs	r3, #0
 80155ea:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80155ee:	e743      	b.n	8015478 <rcl_wait_set_resize+0x88>
 80155f0:	4642      	mov	r2, r8
 80155f2:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80155f6:	4641      	mov	r1, r8
 80155f8:	4798      	blx	r3
 80155fa:	60a0      	str	r0, [r4, #8]
 80155fc:	b350      	cbz	r0, 8015654 <rcl_wait_set_resize+0x264>
 80155fe:	4642      	mov	r2, r8
 8015600:	4639      	mov	r1, r7
 8015602:	f005 fb64 	bl	801acce <memset>
 8015606:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801560a:	60e5      	str	r5, [r4, #12]
 801560c:	2700      	movs	r7, #0
 801560e:	19ad      	adds	r5, r5, r6
 8015610:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015614:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015618:	f8ca 7010 	str.w	r7, [sl, #16]
 801561c:	f43f af48 	beq.w	80154b0 <rcl_wait_set_resize+0xc0>
 8015620:	00ad      	lsls	r5, r5, #2
 8015622:	4642      	mov	r2, r8
 8015624:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8015628:	4629      	mov	r1, r5
 801562a:	4798      	blx	r3
 801562c:	4680      	mov	r8, r0
 801562e:	f8ca 0014 	str.w	r0, [sl, #20]
 8015632:	2800      	cmp	r0, #0
 8015634:	f000 8085 	beq.w	8015742 <rcl_wait_set_resize+0x352>
 8015638:	462a      	mov	r2, r5
 801563a:	4639      	mov	r1, r7
 801563c:	f005 fb47 	bl	801acce <memset>
 8015640:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015644:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015648:	e73d      	b.n	80154c6 <rcl_wait_set_resize+0xd6>
 801564a:	6820      	ldr	r0, [r4, #0]
 801564c:	4649      	mov	r1, r9
 801564e:	47d8      	blx	fp
 8015650:	e9c4 7700 	strd	r7, r7, [r4]
 8015654:	200a      	movs	r0, #10
 8015656:	b003      	add	sp, #12
 8015658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801565c:	4642      	mov	r2, r8
 801565e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8015662:	4641      	mov	r1, r8
 8015664:	47b8      	blx	r7
 8015666:	6120      	str	r0, [r4, #16]
 8015668:	2800      	cmp	r0, #0
 801566a:	d0f3      	beq.n	8015654 <rcl_wait_set_resize+0x264>
 801566c:	4642      	mov	r2, r8
 801566e:	4629      	mov	r1, r5
 8015670:	f005 fb2d 	bl	801acce <memset>
 8015674:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015678:	6166      	str	r6, [r4, #20]
 801567a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801567e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015682:	e734      	b.n	80154ee <rcl_wait_set_resize+0xfe>
 8015684:	009e      	lsls	r6, r3, #2
 8015686:	4642      	mov	r2, r8
 8015688:	4631      	mov	r1, r6
 801568a:	47b8      	blx	r7
 801568c:	61a0      	str	r0, [r4, #24]
 801568e:	2800      	cmp	r0, #0
 8015690:	d0e0      	beq.n	8015654 <rcl_wait_set_resize+0x264>
 8015692:	4632      	mov	r2, r6
 8015694:	4629      	mov	r1, r5
 8015696:	f005 fb1a 	bl	801acce <memset>
 801569a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801569e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80156a0:	61e3      	str	r3, [r4, #28]
 80156a2:	f8da 0020 	ldr.w	r0, [sl, #32]
 80156a6:	f8ca 501c 	str.w	r5, [sl, #28]
 80156aa:	4642      	mov	r2, r8
 80156ac:	4631      	mov	r1, r6
 80156ae:	47b8      	blx	r7
 80156b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80156b2:	f8ca 0020 	str.w	r0, [sl, #32]
 80156b6:	6a1f      	ldr	r7, [r3, #32]
 80156b8:	2f00      	cmp	r7, #0
 80156ba:	d053      	beq.n	8015764 <rcl_wait_set_resize+0x374>
 80156bc:	4632      	mov	r2, r6
 80156be:	4629      	mov	r1, r5
 80156c0:	4638      	mov	r0, r7
 80156c2:	f005 fb04 	bl	801acce <memset>
 80156c6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80156ca:	e72a      	b.n	8015522 <rcl_wait_set_resize+0x132>
 80156cc:	b128      	cbz	r0, 80156da <rcl_wait_set_resize+0x2ea>
 80156ce:	4631      	mov	r1, r6
 80156d0:	47b8      	blx	r7
 80156d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80156d8:	6223      	str	r3, [r4, #32]
 80156da:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80156de:	2800      	cmp	r0, #0
 80156e0:	f43f af52 	beq.w	8015588 <rcl_wait_set_resize+0x198>
 80156e4:	4631      	mov	r1, r6
 80156e6:	47b8      	blx	r7
 80156e8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80156ec:	2300      	movs	r3, #0
 80156ee:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 80156f2:	e749      	b.n	8015588 <rcl_wait_set_resize+0x198>
 80156f4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80156f8:	4632      	mov	r2, r6
 80156fa:	4649      	mov	r1, r9
 80156fc:	47c0      	blx	r8
 80156fe:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015700:	2800      	cmp	r0, #0
 8015702:	d0a7      	beq.n	8015654 <rcl_wait_set_resize+0x264>
 8015704:	464a      	mov	r2, r9
 8015706:	4629      	mov	r1, r5
 8015708:	f005 fae1 	bl	801acce <memset>
 801570c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015712:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015714:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015718:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 801571c:	4632      	mov	r2, r6
 801571e:	4649      	mov	r1, r9
 8015720:	47c0      	blx	r8
 8015722:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015724:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801572a:	b34b      	cbz	r3, 8015780 <rcl_wait_set_resize+0x390>
 801572c:	464a      	mov	r2, r9
 801572e:	4629      	mov	r1, r5
 8015730:	4618      	mov	r0, r3
 8015732:	f005 facc 	bl	801acce <memset>
 8015736:	e744      	b.n	80155c2 <rcl_wait_set_resize+0x1d2>
 8015738:	200b      	movs	r0, #11
 801573a:	4770      	bx	lr
 801573c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015740:	e789      	b.n	8015656 <rcl_wait_set_resize+0x266>
 8015742:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015744:	68a0      	ldr	r0, [r4, #8]
 8015746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015748:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801574a:	4790      	blx	r2
 801574c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801574e:	6920      	ldr	r0, [r4, #16]
 8015750:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015752:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015754:	f8c4 800c 	str.w	r8, [r4, #12]
 8015758:	f8c4 8008 	str.w	r8, [r4, #8]
 801575c:	4790      	blx	r2
 801575e:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8015762:	e777      	b.n	8015654 <rcl_wait_set_resize+0x264>
 8015764:	69a0      	ldr	r0, [r4, #24]
 8015766:	4641      	mov	r1, r8
 8015768:	47c8      	blx	r9
 801576a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801576e:	e771      	b.n	8015654 <rcl_wait_set_resize+0x264>
 8015770:	6a20      	ldr	r0, [r4, #32]
 8015772:	9301      	str	r3, [sp, #4]
 8015774:	4631      	mov	r1, r6
 8015776:	47b8      	blx	r7
 8015778:	9b01      	ldr	r3, [sp, #4]
 801577a:	e9c4 3308 	strd	r3, r3, [r4, #32]
 801577e:	e769      	b.n	8015654 <rcl_wait_set_resize+0x264>
 8015780:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015782:	9301      	str	r3, [sp, #4]
 8015784:	4631      	mov	r1, r6
 8015786:	47b8      	blx	r7
 8015788:	9b01      	ldr	r3, [sp, #4]
 801578a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801578e:	e761      	b.n	8015654 <rcl_wait_set_resize+0x264>

08015790 <rcl_wait_set_init>:
 8015790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015794:	b084      	sub	sp, #16
 8015796:	4604      	mov	r4, r0
 8015798:	a810      	add	r0, sp, #64	@ 0x40
 801579a:	460d      	mov	r5, r1
 801579c:	4690      	mov	r8, r2
 801579e:	461f      	mov	r7, r3
 80157a0:	f7f8 fa3c 	bl	800dc1c <rcutils_allocator_is_valid>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	d06c      	beq.n	8015882 <rcl_wait_set_init+0xf2>
 80157a8:	2c00      	cmp	r4, #0
 80157aa:	d06a      	beq.n	8015882 <rcl_wait_set_init+0xf2>
 80157ac:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80157ae:	b126      	cbz	r6, 80157ba <rcl_wait_set_init+0x2a>
 80157b0:	2564      	movs	r5, #100	@ 0x64
 80157b2:	4628      	mov	r0, r5
 80157b4:	b004      	add	sp, #16
 80157b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d060      	beq.n	8015882 <rcl_wait_set_init+0xf2>
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7fe fa4f 	bl	8013c64 <rcl_context_is_valid>
 80157c6:	2800      	cmp	r0, #0
 80157c8:	d060      	beq.n	801588c <rcl_wait_set_init+0xfc>
 80157ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80157cc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80157ce:	205c      	movs	r0, #92	@ 0x5c
 80157d0:	4798      	blx	r3
 80157d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80157d4:	2800      	cmp	r0, #0
 80157d6:	d063      	beq.n	80158a0 <rcl_wait_set_init+0x110>
 80157d8:	4631      	mov	r1, r6
 80157da:	225c      	movs	r2, #92	@ 0x5c
 80157dc:	f005 fa77 	bl	801acce <memset>
 80157e0:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 80157e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157e6:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 80157ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80157ee:	eb03 0e02 	add.w	lr, r3, r2
 80157f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80157f4:	449e      	add	lr, r3
 80157f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157f8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80157fc:	f8d3 a000 	ldr.w	sl, [r3]
 8015800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015804:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8015808:	e9c9 6604 	strd	r6, r6, [r9, #16]
 801580c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8015810:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8015814:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8015818:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 801581c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801581e:	44c6      	add	lr, r8
 8015820:	f8dc 3000 	ldr.w	r3, [ip]
 8015824:	6033      	str	r3, [r6, #0]
 8015826:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 801582a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801582e:	f002 fab7 	bl	8017da0 <rmw_create_wait_set>
 8015832:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015834:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8015838:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801583a:	b348      	cbz	r0, 8015890 <rcl_wait_set_init+0x100>
 801583c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801583e:	9302      	str	r3, [sp, #8]
 8015840:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015842:	9301      	str	r3, [sp, #4]
 8015844:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	4629      	mov	r1, r5
 801584a:	463b      	mov	r3, r7
 801584c:	4642      	mov	r2, r8
 801584e:	4620      	mov	r0, r4
 8015850:	f7ff fdce 	bl	80153f0 <rcl_wait_set_resize>
 8015854:	4605      	mov	r5, r0
 8015856:	2800      	cmp	r0, #0
 8015858:	d0ab      	beq.n	80157b2 <rcl_wait_set_init+0x22>
 801585a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801585c:	bb13      	cbnz	r3, 80158a4 <rcl_wait_set_init+0x114>
 801585e:	2600      	movs	r6, #0
 8015860:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015864:	9600      	str	r6, [sp, #0]
 8015866:	4633      	mov	r3, r6
 8015868:	4632      	mov	r2, r6
 801586a:	4631      	mov	r1, r6
 801586c:	4620      	mov	r0, r4
 801586e:	f7ff fdbf 	bl	80153f0 <rcl_wait_set_resize>
 8015872:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015874:	2800      	cmp	r0, #0
 8015876:	d09c      	beq.n	80157b2 <rcl_wait_set_init+0x22>
 8015878:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801587a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801587c:	4798      	blx	r3
 801587e:	6326      	str	r6, [r4, #48]	@ 0x30
 8015880:	e797      	b.n	80157b2 <rcl_wait_set_init+0x22>
 8015882:	250b      	movs	r5, #11
 8015884:	4628      	mov	r0, r5
 8015886:	b004      	add	sp, #16
 8015888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801588c:	2565      	movs	r5, #101	@ 0x65
 801588e:	e790      	b.n	80157b2 <rcl_wait_set_init+0x22>
 8015890:	2501      	movs	r5, #1
 8015892:	f002 fa8f 	bl	8017db4 <rmw_destroy_wait_set>
 8015896:	2800      	cmp	r0, #0
 8015898:	bf18      	it	ne
 801589a:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801589e:	e7de      	b.n	801585e <rcl_wait_set_init+0xce>
 80158a0:	250a      	movs	r5, #10
 80158a2:	e786      	b.n	80157b2 <rcl_wait_set_init+0x22>
 80158a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80158a6:	e7f4      	b.n	8015892 <rcl_wait_set_init+0x102>

080158a8 <rcl_wait_set_add_guard_condition>:
 80158a8:	b318      	cbz	r0, 80158f2 <rcl_wait_set_add_guard_condition+0x4a>
 80158aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80158ac:	b570      	push	{r4, r5, r6, lr}
 80158ae:	4604      	mov	r4, r0
 80158b0:	b30b      	cbz	r3, 80158f6 <rcl_wait_set_add_guard_condition+0x4e>
 80158b2:	b319      	cbz	r1, 80158fc <rcl_wait_set_add_guard_condition+0x54>
 80158b4:	68dd      	ldr	r5, [r3, #12]
 80158b6:	68c0      	ldr	r0, [r0, #12]
 80158b8:	4285      	cmp	r5, r0
 80158ba:	d217      	bcs.n	80158ec <rcl_wait_set_add_guard_condition+0x44>
 80158bc:	68a0      	ldr	r0, [r4, #8]
 80158be:	1c6e      	adds	r6, r5, #1
 80158c0:	60de      	str	r6, [r3, #12]
 80158c2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80158c6:	b102      	cbz	r2, 80158ca <rcl_wait_set_add_guard_condition+0x22>
 80158c8:	6015      	str	r5, [r2, #0]
 80158ca:	4608      	mov	r0, r1
 80158cc:	f003 fdb2 	bl	8019434 <rcl_guard_condition_get_rmw_handle>
 80158d0:	b150      	cbz	r0, 80158e8 <rcl_wait_set_add_guard_condition+0x40>
 80158d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158d4:	6842      	ldr	r2, [r0, #4]
 80158d6:	695b      	ldr	r3, [r3, #20]
 80158d8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80158dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80158de:	6913      	ldr	r3, [r2, #16]
 80158e0:	3301      	adds	r3, #1
 80158e2:	2000      	movs	r0, #0
 80158e4:	6113      	str	r3, [r2, #16]
 80158e6:	bd70      	pop	{r4, r5, r6, pc}
 80158e8:	2001      	movs	r0, #1
 80158ea:	bd70      	pop	{r4, r5, r6, pc}
 80158ec:	f240 3086 	movw	r0, #902	@ 0x386
 80158f0:	bd70      	pop	{r4, r5, r6, pc}
 80158f2:	200b      	movs	r0, #11
 80158f4:	4770      	bx	lr
 80158f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80158fa:	bd70      	pop	{r4, r5, r6, pc}
 80158fc:	200b      	movs	r0, #11
 80158fe:	bd70      	pop	{r4, r5, r6, pc}

08015900 <rcl_wait_set_add_timer>:
 8015900:	b328      	cbz	r0, 801594e <rcl_wait_set_add_timer+0x4e>
 8015902:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015904:	b570      	push	{r4, r5, r6, lr}
 8015906:	4604      	mov	r4, r0
 8015908:	b31b      	cbz	r3, 8015952 <rcl_wait_set_add_timer+0x52>
 801590a:	b329      	cbz	r1, 8015958 <rcl_wait_set_add_timer+0x58>
 801590c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801590e:	6965      	ldr	r5, [r4, #20]
 8015910:	42a8      	cmp	r0, r5
 8015912:	d219      	bcs.n	8015948 <rcl_wait_set_add_timer+0x48>
 8015914:	6925      	ldr	r5, [r4, #16]
 8015916:	1c46      	adds	r6, r0, #1
 8015918:	641e      	str	r6, [r3, #64]	@ 0x40
 801591a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801591e:	b102      	cbz	r2, 8015922 <rcl_wait_set_add_timer+0x22>
 8015920:	6010      	str	r0, [r2, #0]
 8015922:	4608      	mov	r0, r1
 8015924:	f7ff fbf4 	bl	8015110 <rcl_timer_get_guard_condition>
 8015928:	b160      	cbz	r0, 8015944 <rcl_wait_set_add_timer+0x44>
 801592a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801592c:	68e3      	ldr	r3, [r4, #12]
 801592e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015930:	3b01      	subs	r3, #1
 8015932:	441d      	add	r5, r3
 8015934:	f003 fd7e 	bl	8019434 <rcl_guard_condition_get_rmw_handle>
 8015938:	b180      	cbz	r0, 801595c <rcl_wait_set_add_timer+0x5c>
 801593a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801593c:	6842      	ldr	r2, [r0, #4]
 801593e:	695b      	ldr	r3, [r3, #20]
 8015940:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015944:	2000      	movs	r0, #0
 8015946:	bd70      	pop	{r4, r5, r6, pc}
 8015948:	f240 3086 	movw	r0, #902	@ 0x386
 801594c:	bd70      	pop	{r4, r5, r6, pc}
 801594e:	200b      	movs	r0, #11
 8015950:	4770      	bx	lr
 8015952:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015956:	bd70      	pop	{r4, r5, r6, pc}
 8015958:	200b      	movs	r0, #11
 801595a:	bd70      	pop	{r4, r5, r6, pc}
 801595c:	2001      	movs	r0, #1
 801595e:	bd70      	pop	{r4, r5, r6, pc}

08015960 <rcl_wait_set_add_client>:
 8015960:	b318      	cbz	r0, 80159aa <rcl_wait_set_add_client+0x4a>
 8015962:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015964:	b570      	push	{r4, r5, r6, lr}
 8015966:	4604      	mov	r4, r0
 8015968:	b30b      	cbz	r3, 80159ae <rcl_wait_set_add_client+0x4e>
 801596a:	b319      	cbz	r1, 80159b4 <rcl_wait_set_add_client+0x54>
 801596c:	699d      	ldr	r5, [r3, #24]
 801596e:	69c0      	ldr	r0, [r0, #28]
 8015970:	4285      	cmp	r5, r0
 8015972:	d217      	bcs.n	80159a4 <rcl_wait_set_add_client+0x44>
 8015974:	69a0      	ldr	r0, [r4, #24]
 8015976:	1c6e      	adds	r6, r5, #1
 8015978:	619e      	str	r6, [r3, #24]
 801597a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801597e:	b102      	cbz	r2, 8015982 <rcl_wait_set_add_client+0x22>
 8015980:	6015      	str	r5, [r2, #0]
 8015982:	4608      	mov	r0, r1
 8015984:	f7fe f87e 	bl	8013a84 <rcl_client_get_rmw_handle>
 8015988:	b150      	cbz	r0, 80159a0 <rcl_wait_set_add_client+0x40>
 801598a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801598c:	6842      	ldr	r2, [r0, #4]
 801598e:	6a1b      	ldr	r3, [r3, #32]
 8015990:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015994:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015996:	69d3      	ldr	r3, [r2, #28]
 8015998:	3301      	adds	r3, #1
 801599a:	2000      	movs	r0, #0
 801599c:	61d3      	str	r3, [r2, #28]
 801599e:	bd70      	pop	{r4, r5, r6, pc}
 80159a0:	2001      	movs	r0, #1
 80159a2:	bd70      	pop	{r4, r5, r6, pc}
 80159a4:	f240 3086 	movw	r0, #902	@ 0x386
 80159a8:	bd70      	pop	{r4, r5, r6, pc}
 80159aa:	200b      	movs	r0, #11
 80159ac:	4770      	bx	lr
 80159ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80159b2:	bd70      	pop	{r4, r5, r6, pc}
 80159b4:	200b      	movs	r0, #11
 80159b6:	bd70      	pop	{r4, r5, r6, pc}

080159b8 <rcl_wait_set_add_service>:
 80159b8:	b318      	cbz	r0, 8015a02 <rcl_wait_set_add_service+0x4a>
 80159ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80159bc:	b570      	push	{r4, r5, r6, lr}
 80159be:	4604      	mov	r4, r0
 80159c0:	b30b      	cbz	r3, 8015a06 <rcl_wait_set_add_service+0x4e>
 80159c2:	b319      	cbz	r1, 8015a0c <rcl_wait_set_add_service+0x54>
 80159c4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80159c6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80159c8:	4285      	cmp	r5, r0
 80159ca:	d217      	bcs.n	80159fc <rcl_wait_set_add_service+0x44>
 80159cc:	6a20      	ldr	r0, [r4, #32]
 80159ce:	1c6e      	adds	r6, r5, #1
 80159d0:	625e      	str	r6, [r3, #36]	@ 0x24
 80159d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80159d6:	b102      	cbz	r2, 80159da <rcl_wait_set_add_service+0x22>
 80159d8:	6015      	str	r5, [r2, #0]
 80159da:	4608      	mov	r0, r1
 80159dc:	f7fe fd7e 	bl	80144dc <rcl_service_get_rmw_handle>
 80159e0:	b150      	cbz	r0, 80159f8 <rcl_wait_set_add_service+0x40>
 80159e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159e4:	6842      	ldr	r2, [r0, #4]
 80159e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80159ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80159ee:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80159f0:	3301      	adds	r3, #1
 80159f2:	2000      	movs	r0, #0
 80159f4:	6293      	str	r3, [r2, #40]	@ 0x28
 80159f6:	bd70      	pop	{r4, r5, r6, pc}
 80159f8:	2001      	movs	r0, #1
 80159fa:	bd70      	pop	{r4, r5, r6, pc}
 80159fc:	f240 3086 	movw	r0, #902	@ 0x386
 8015a00:	bd70      	pop	{r4, r5, r6, pc}
 8015a02:	200b      	movs	r0, #11
 8015a04:	4770      	bx	lr
 8015a06:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a0a:	bd70      	pop	{r4, r5, r6, pc}
 8015a0c:	200b      	movs	r0, #11
 8015a0e:	bd70      	pop	{r4, r5, r6, pc}

08015a10 <rcl_wait>:
 8015a10:	2800      	cmp	r0, #0
 8015a12:	f000 81d4 	beq.w	8015dbe <rcl_wait+0x3ae>
 8015a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a1a:	ed2d 8b02 	vpush	{d8}
 8015a1e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8015a20:	b099      	sub	sp, #100	@ 0x64
 8015a22:	4604      	mov	r4, r0
 8015a24:	2d00      	cmp	r5, #0
 8015a26:	f000 8178 	beq.w	8015d1a <rcl_wait+0x30a>
 8015a2a:	461f      	mov	r7, r3
 8015a2c:	6843      	ldr	r3, [r0, #4]
 8015a2e:	4690      	mov	r8, r2
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	f000 809b 	beq.w	8015b6c <rcl_wait+0x15c>
 8015a36:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8015a38:	2e00      	cmp	r6, #0
 8015a3a:	f000 80b2 	beq.w	8015ba2 <rcl_wait+0x192>
 8015a3e:	2100      	movs	r1, #0
 8015a40:	468c      	mov	ip, r1
 8015a42:	460a      	mov	r2, r1
 8015a44:	46a6      	mov	lr, r4
 8015a46:	f8de 3010 	ldr.w	r3, [lr, #16]
 8015a4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015a4e:	b173      	cbz	r3, 8015a6e <rcl_wait+0x5e>
 8015a50:	f8de 300c 	ldr.w	r3, [lr, #12]
 8015a54:	6968      	ldr	r0, [r5, #20]
 8015a56:	440b      	add	r3, r1
 8015a58:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8015a5c:	b13c      	cbz	r4, 8015a6e <rcl_wait+0x5e>
 8015a5e:	692b      	ldr	r3, [r5, #16]
 8015a60:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8015a64:	3301      	adds	r3, #1
 8015a66:	612b      	str	r3, [r5, #16]
 8015a68:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8015a6c:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8015a6e:	3101      	adds	r1, #1
 8015a70:	f14c 0c00 	adc.w	ip, ip, #0
 8015a74:	42b1      	cmp	r1, r6
 8015a76:	f17c 0300 	sbcs.w	r3, ip, #0
 8015a7a:	d3e4      	bcc.n	8015a46 <rcl_wait+0x36>
 8015a7c:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8015d28 <rcl_wait+0x318>
 8015a80:	ea58 0307 	orrs.w	r3, r8, r7
 8015a84:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8015a88:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8015a8c:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8015a90:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8015a94:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8015a98:	4674      	mov	r4, lr
 8015a9a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8015a9e:	f000 8094 	beq.w	8015bca <rcl_wait+0x1ba>
 8015aa2:	2e00      	cmp	r6, #0
 8015aa4:	f000 8145 	beq.w	8015d32 <rcl_wait+0x322>
 8015aa8:	2500      	movs	r5, #0
 8015aaa:	46bb      	mov	fp, r7
 8015aac:	e02c      	b.n	8015b08 <rcl_wait+0xf8>
 8015aae:	6923      	ldr	r3, [r4, #16]
 8015ab0:	f853 0009 	ldr.w	r0, [r3, r9]
 8015ab4:	a908      	add	r1, sp, #32
 8015ab6:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015aba:	f7ff fb07 	bl	80150cc <rcl_timer_get_next_call_time>
 8015abe:	f240 3321 	movw	r3, #801	@ 0x321
 8015ac2:	4298      	cmp	r0, r3
 8015ac4:	f000 80bb 	beq.w	8015c3e <rcl_wait+0x22e>
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d165      	bne.n	8015b98 <rcl_wait+0x188>
 8015acc:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8015ad0:	7830      	ldrb	r0, [r6, #0]
 8015ad2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015ad4:	ab18      	add	r3, sp, #96	@ 0x60
 8015ad6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8015ada:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8015ade:	9205      	str	r2, [sp, #20]
 8015ae0:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8015ae4:	4297      	cmp	r7, r2
 8015ae6:	9a05      	ldr	r2, [sp, #20]
 8015ae8:	eb71 0202 	sbcs.w	r2, r1, r2
 8015aec:	da06      	bge.n	8015afc <rcl_wait+0xec>
 8015aee:	e943 7108 	strd	r7, r1, [r3, #-32]
 8015af2:	ab18      	add	r3, sp, #96	@ 0x60
 8015af4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015af8:	f840 6c30 	str.w	r6, [r0, #-48]
 8015afc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015afe:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8015b00:	3501      	adds	r5, #1
 8015b02:	42b5      	cmp	r5, r6
 8015b04:	f080 8114 	bcs.w	8015d30 <rcl_wait+0x320>
 8015b08:	6923      	ldr	r3, [r4, #16]
 8015b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b0e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d0f4      	beq.n	8015b00 <rcl_wait+0xf0>
 8015b16:	a907      	add	r1, sp, #28
 8015b18:	f7ff fa04 	bl	8014f24 <rcl_timer_clock>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	f040 8141 	bne.w	8015da6 <rcl_wait+0x396>
 8015b24:	9807      	ldr	r0, [sp, #28]
 8015b26:	7802      	ldrb	r2, [r0, #0]
 8015b28:	2a01      	cmp	r2, #1
 8015b2a:	d1c0      	bne.n	8015aae <rcl_wait+0x9e>
 8015b2c:	f10d 011b 	add.w	r1, sp, #27
 8015b30:	f88d 301b 	strb.w	r3, [sp, #27]
 8015b34:	f7fe ffce 	bl	8014ad4 <rcl_is_enabled_ros_time_override>
 8015b38:	4602      	mov	r2, r0
 8015b3a:	2800      	cmp	r0, #0
 8015b3c:	f040 8133 	bne.w	8015da6 <rcl_wait+0x396>
 8015b40:	6923      	ldr	r3, [r4, #16]
 8015b42:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8015b46:	f853 0009 	ldr.w	r0, [r3, r9]
 8015b4a:	2900      	cmp	r1, #0
 8015b4c:	d0b0      	beq.n	8015ab0 <rcl_wait+0xa0>
 8015b4e:	ae08      	add	r6, sp, #32
 8015b50:	4631      	mov	r1, r6
 8015b52:	f88d 2020 	strb.w	r2, [sp, #32]
 8015b56:	f7ff fa7f 	bl	8015058 <rcl_timer_is_ready>
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	f040 8123 	bne.w	8015da6 <rcl_wait+0x396>
 8015b60:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d0c9      	beq.n	8015afc <rcl_wait+0xec>
 8015b68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015b6a:	e02f      	b.n	8015bcc <rcl_wait+0x1bc>
 8015b6c:	68c3      	ldr	r3, [r0, #12]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	f47f af61 	bne.w	8015a36 <rcl_wait+0x26>
 8015b74:	6943      	ldr	r3, [r0, #20]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	f47f af5d 	bne.w	8015a36 <rcl_wait+0x26>
 8015b7c:	69c3      	ldr	r3, [r0, #28]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f47f af59 	bne.w	8015a36 <rcl_wait+0x26>
 8015b84:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f47f af55 	bne.w	8015a36 <rcl_wait+0x26>
 8015b8c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	f47f af51 	bne.w	8015a36 <rcl_wait+0x26>
 8015b94:	f240 3085 	movw	r0, #901	@ 0x385
 8015b98:	b019      	add	sp, #100	@ 0x64
 8015b9a:	ecbd 8b02 	vpop	{d8}
 8015b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8015baa:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8015bae:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8015bb2:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8015bb6:	ea58 0307 	orrs.w	r3, r8, r7
 8015bba:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8015bbe:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8015bc2:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8015bc6:	f040 80b4 	bne.w	8015d32 <rcl_wait+0x322>
 8015bca:	ae08      	add	r6, sp, #32
 8015bcc:	2200      	movs	r2, #0
 8015bce:	2300      	movs	r3, #0
 8015bd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015bd4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015bd8:	9602      	str	r6, [sp, #8]
 8015bda:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8015bdc:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8015be0:	e9cd 3200 	strd	r3, r2, [sp]
 8015be4:	f105 0110 	add.w	r1, r5, #16
 8015be8:	f105 031c 	add.w	r3, r5, #28
 8015bec:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8015bf0:	1d28      	adds	r0, r5, #4
 8015bf2:	f001 ff53 	bl	8017a9c <rmw_wait>
 8015bf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015bfa:	4680      	mov	r8, r0
 8015bfc:	b332      	cbz	r2, 8015c4c <rcl_wait+0x23c>
 8015bfe:	2500      	movs	r5, #0
 8015c00:	462f      	mov	r7, r5
 8015c02:	462e      	mov	r6, r5
 8015c04:	e007      	b.n	8015c16 <rcl_wait+0x206>
 8015c06:	6922      	ldr	r2, [r4, #16]
 8015c08:	f842 3009 	str.w	r3, [r2, r9]
 8015c0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015c10:	3501      	adds	r5, #1
 8015c12:	4295      	cmp	r5, r2
 8015c14:	d21b      	bcs.n	8015c4e <rcl_wait+0x23e>
 8015c16:	6920      	ldr	r0, [r4, #16]
 8015c18:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015c1c:	a907      	add	r1, sp, #28
 8015c1e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d0f4      	beq.n	8015c10 <rcl_wait+0x200>
 8015c26:	f88d 601c 	strb.w	r6, [sp, #28]
 8015c2a:	f7ff fa15 	bl	8015058 <rcl_timer_is_ready>
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	d1b2      	bne.n	8015b98 <rcl_wait+0x188>
 8015c32:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d0e5      	beq.n	8015c06 <rcl_wait+0x1f6>
 8015c3a:	461f      	mov	r7, r3
 8015c3c:	e7e6      	b.n	8015c0c <rcl_wait+0x1fc>
 8015c3e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015c40:	6923      	ldr	r3, [r4, #16]
 8015c42:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8015c44:	2200      	movs	r2, #0
 8015c46:	f843 2009 	str.w	r2, [r3, r9]
 8015c4a:	e759      	b.n	8015b00 <rcl_wait+0xf0>
 8015c4c:	4617      	mov	r7, r2
 8015c4e:	f038 0002 	bics.w	r0, r8, #2
 8015c52:	f040 80a8 	bne.w	8015da6 <rcl_wait+0x396>
 8015c56:	6866      	ldr	r6, [r4, #4]
 8015c58:	4602      	mov	r2, r0
 8015c5a:	b91e      	cbnz	r6, 8015c64 <rcl_wait+0x254>
 8015c5c:	e00d      	b.n	8015c7a <rcl_wait+0x26a>
 8015c5e:	3201      	adds	r2, #1
 8015c60:	4296      	cmp	r6, r2
 8015c62:	d00a      	beq.n	8015c7a <rcl_wait+0x26a>
 8015c64:	6899      	ldr	r1, [r3, #8]
 8015c66:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015c6a:	2900      	cmp	r1, #0
 8015c6c:	d1f7      	bne.n	8015c5e <rcl_wait+0x24e>
 8015c6e:	6825      	ldr	r5, [r4, #0]
 8015c70:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015c74:	3201      	adds	r2, #1
 8015c76:	4296      	cmp	r6, r2
 8015c78:	d1f4      	bne.n	8015c64 <rcl_wait+0x254>
 8015c7a:	68e6      	ldr	r6, [r4, #12]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	b91e      	cbnz	r6, 8015c88 <rcl_wait+0x278>
 8015c80:	e00d      	b.n	8015c9e <rcl_wait+0x28e>
 8015c82:	3201      	adds	r2, #1
 8015c84:	42b2      	cmp	r2, r6
 8015c86:	d00a      	beq.n	8015c9e <rcl_wait+0x28e>
 8015c88:	6959      	ldr	r1, [r3, #20]
 8015c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015c8e:	2900      	cmp	r1, #0
 8015c90:	d1f7      	bne.n	8015c82 <rcl_wait+0x272>
 8015c92:	68a5      	ldr	r5, [r4, #8]
 8015c94:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015c98:	3201      	adds	r2, #1
 8015c9a:	42b2      	cmp	r2, r6
 8015c9c:	d1f4      	bne.n	8015c88 <rcl_wait+0x278>
 8015c9e:	69e6      	ldr	r6, [r4, #28]
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	b91e      	cbnz	r6, 8015cac <rcl_wait+0x29c>
 8015ca4:	e00d      	b.n	8015cc2 <rcl_wait+0x2b2>
 8015ca6:	3201      	adds	r2, #1
 8015ca8:	4296      	cmp	r6, r2
 8015caa:	d00a      	beq.n	8015cc2 <rcl_wait+0x2b2>
 8015cac:	6a19      	ldr	r1, [r3, #32]
 8015cae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015cb2:	2900      	cmp	r1, #0
 8015cb4:	d1f7      	bne.n	8015ca6 <rcl_wait+0x296>
 8015cb6:	69a5      	ldr	r5, [r4, #24]
 8015cb8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015cbc:	3201      	adds	r2, #1
 8015cbe:	4296      	cmp	r6, r2
 8015cc0:	d1f4      	bne.n	8015cac <rcl_wait+0x29c>
 8015cc2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	b91e      	cbnz	r6, 8015cd0 <rcl_wait+0x2c0>
 8015cc8:	e00d      	b.n	8015ce6 <rcl_wait+0x2d6>
 8015cca:	3201      	adds	r2, #1
 8015ccc:	42b2      	cmp	r2, r6
 8015cce:	d00a      	beq.n	8015ce6 <rcl_wait+0x2d6>
 8015cd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015cd2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015cd6:	2900      	cmp	r1, #0
 8015cd8:	d1f7      	bne.n	8015cca <rcl_wait+0x2ba>
 8015cda:	6a25      	ldr	r5, [r4, #32]
 8015cdc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015ce0:	3201      	adds	r2, #1
 8015ce2:	42b2      	cmp	r2, r6
 8015ce4:	d1f4      	bne.n	8015cd0 <rcl_wait+0x2c0>
 8015ce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015ce8:	2200      	movs	r2, #0
 8015cea:	b91e      	cbnz	r6, 8015cf4 <rcl_wait+0x2e4>
 8015cec:	e00d      	b.n	8015d0a <rcl_wait+0x2fa>
 8015cee:	3201      	adds	r2, #1
 8015cf0:	42b2      	cmp	r2, r6
 8015cf2:	d00a      	beq.n	8015d0a <rcl_wait+0x2fa>
 8015cf4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015cf6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015cfa:	2900      	cmp	r1, #0
 8015cfc:	d1f7      	bne.n	8015cee <rcl_wait+0x2de>
 8015cfe:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8015d00:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015d04:	3201      	adds	r2, #1
 8015d06:	42b2      	cmp	r2, r6
 8015d08:	d1f4      	bne.n	8015cf4 <rcl_wait+0x2e4>
 8015d0a:	f1b8 0f02 	cmp.w	r8, #2
 8015d0e:	f47f af43 	bne.w	8015b98 <rcl_wait+0x188>
 8015d12:	f087 0701 	eor.w	r7, r7, #1
 8015d16:	0078      	lsls	r0, r7, #1
 8015d18:	e73e      	b.n	8015b98 <rcl_wait+0x188>
 8015d1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015d1e:	b019      	add	sp, #100	@ 0x64
 8015d20:	ecbd 8b02 	vpop	{d8}
 8015d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d28:	ffffffff 	.word	0xffffffff
 8015d2c:	7fffffff 	.word	0x7fffffff
 8015d30:	465f      	mov	r7, fp
 8015d32:	f1b8 0f01 	cmp.w	r8, #1
 8015d36:	f177 0300 	sbcs.w	r3, r7, #0
 8015d3a:	db3a      	blt.n	8015db2 <rcl_wait+0x3a2>
 8015d3c:	2601      	movs	r6, #1
 8015d3e:	ad10      	add	r5, sp, #64	@ 0x40
 8015d40:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8015d44:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8015d48:	a908      	add	r1, sp, #32
 8015d4a:	b1a0      	cbz	r0, 8015d76 <rcl_wait+0x366>
 8015d4c:	f7fe feb6 	bl	8014abc <rcl_clock_get_now>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	f47f af21 	bne.w	8015b98 <rcl_wait+0x188>
 8015d56:	9a08      	ldr	r2, [sp, #32]
 8015d58:	68ab      	ldr	r3, [r5, #8]
 8015d5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015d5c:	1a9b      	subs	r3, r3, r2
 8015d5e:	68ea      	ldr	r2, [r5, #12]
 8015d60:	eb62 0201 	sbc.w	r2, r2, r1
 8015d64:	4598      	cmp	r8, r3
 8015d66:	eb77 0102 	sbcs.w	r1, r7, r2
 8015d6a:	bfba      	itte	lt
 8015d6c:	4643      	movlt	r3, r8
 8015d6e:	463a      	movlt	r2, r7
 8015d70:	2601      	movge	r6, #1
 8015d72:	4698      	mov	r8, r3
 8015d74:	4617      	mov	r7, r2
 8015d76:	3508      	adds	r5, #8
 8015d78:	45a9      	cmp	r9, r5
 8015d7a:	d1e3      	bne.n	8015d44 <rcl_wait+0x334>
 8015d7c:	2f00      	cmp	r7, #0
 8015d7e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d80:	bfab      	itete	ge
 8015d82:	4640      	movge	r0, r8
 8015d84:	2000      	movlt	r0, #0
 8015d86:	4639      	movge	r1, r7
 8015d88:	2100      	movlt	r1, #0
 8015d8a:	2e00      	cmp	r6, #0
 8015d8c:	f43f af24 	beq.w	8015bd8 <rcl_wait+0x1c8>
 8015d90:	a30d      	add	r3, pc, #52	@ (adr r3, 8015dc8 <rcl_wait+0x3b8>)
 8015d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d96:	f7ea ff4f 	bl	8000c38 <__aeabi_ldivmod>
 8015d9a:	ae08      	add	r6, sp, #32
 8015d9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015da0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015da4:	e718      	b.n	8015bd8 <rcl_wait+0x1c8>
 8015da6:	2001      	movs	r0, #1
 8015da8:	b019      	add	sp, #100	@ 0x64
 8015daa:	ecbd 8b02 	vpop	{d8}
 8015dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015db2:	2600      	movs	r6, #0
 8015db4:	f04f 38ff 	mov.w	r8, #4294967295
 8015db8:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015dbc:	e7bf      	b.n	8015d3e <rcl_wait+0x32e>
 8015dbe:	200b      	movs	r0, #11
 8015dc0:	4770      	bx	lr
 8015dc2:	bf00      	nop
 8015dc4:	f3af 8000 	nop.w
 8015dc8:	3b9aca00 	.word	0x3b9aca00
 8015dcc:	00000000 	.word	0x00000000

08015dd0 <rcl_action_take_goal_response>:
 8015dd0:	b3b0      	cbz	r0, 8015e40 <rcl_action_take_goal_response+0x70>
 8015dd2:	b570      	push	{r4, r5, r6, lr}
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	6800      	ldr	r0, [r0, #0]
 8015dd8:	b368      	cbz	r0, 8015e36 <rcl_action_take_goal_response+0x66>
 8015dda:	460d      	mov	r5, r1
 8015ddc:	4616      	mov	r6, r2
 8015dde:	f7fd ff17 	bl	8013c10 <rcl_client_is_valid>
 8015de2:	b330      	cbz	r0, 8015e32 <rcl_action_take_goal_response+0x62>
 8015de4:	6820      	ldr	r0, [r4, #0]
 8015de6:	3004      	adds	r0, #4
 8015de8:	f7fd ff12 	bl	8013c10 <rcl_client_is_valid>
 8015dec:	b308      	cbz	r0, 8015e32 <rcl_action_take_goal_response+0x62>
 8015dee:	6820      	ldr	r0, [r4, #0]
 8015df0:	3008      	adds	r0, #8
 8015df2:	f7fd ff0d 	bl	8013c10 <rcl_client_is_valid>
 8015df6:	b1e0      	cbz	r0, 8015e32 <rcl_action_take_goal_response+0x62>
 8015df8:	6820      	ldr	r0, [r4, #0]
 8015dfa:	300c      	adds	r0, #12
 8015dfc:	f7fe fdc2 	bl	8014984 <rcl_subscription_is_valid>
 8015e00:	b1b8      	cbz	r0, 8015e32 <rcl_action_take_goal_response+0x62>
 8015e02:	6820      	ldr	r0, [r4, #0]
 8015e04:	3010      	adds	r0, #16
 8015e06:	f7fe fdbd 	bl	8014984 <rcl_subscription_is_valid>
 8015e0a:	b190      	cbz	r0, 8015e32 <rcl_action_take_goal_response+0x62>
 8015e0c:	b1b5      	cbz	r5, 8015e3c <rcl_action_take_goal_response+0x6c>
 8015e0e:	b1ae      	cbz	r6, 8015e3c <rcl_action_take_goal_response+0x6c>
 8015e10:	6820      	ldr	r0, [r4, #0]
 8015e12:	4632      	mov	r2, r6
 8015e14:	4629      	mov	r1, r5
 8015e16:	f7fd fe8f 	bl	8013b38 <rcl_take_response>
 8015e1a:	b148      	cbz	r0, 8015e30 <rcl_action_take_goal_response+0x60>
 8015e1c:	280a      	cmp	r0, #10
 8015e1e:	d007      	beq.n	8015e30 <rcl_action_take_goal_response+0x60>
 8015e20:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015e24:	f640 0337 	movw	r3, #2103	@ 0x837
 8015e28:	4290      	cmp	r0, r2
 8015e2a:	bf0c      	ite	eq
 8015e2c:	4618      	moveq	r0, r3
 8015e2e:	2001      	movne	r0, #1
 8015e30:	bd70      	pop	{r4, r5, r6, pc}
 8015e32:	f7f7 ff19 	bl	800dc68 <rcutils_reset_error>
 8015e36:	f640 0036 	movw	r0, #2102	@ 0x836
 8015e3a:	bd70      	pop	{r4, r5, r6, pc}
 8015e3c:	200b      	movs	r0, #11
 8015e3e:	bd70      	pop	{r4, r5, r6, pc}
 8015e40:	f640 0036 	movw	r0, #2102	@ 0x836
 8015e44:	4770      	bx	lr
 8015e46:	bf00      	nop

08015e48 <rcl_action_send_result_request>:
 8015e48:	b378      	cbz	r0, 8015eaa <rcl_action_send_result_request+0x62>
 8015e4a:	b570      	push	{r4, r5, r6, lr}
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	6800      	ldr	r0, [r0, #0]
 8015e50:	b330      	cbz	r0, 8015ea0 <rcl_action_send_result_request+0x58>
 8015e52:	460d      	mov	r5, r1
 8015e54:	4616      	mov	r6, r2
 8015e56:	f7fd fedb 	bl	8013c10 <rcl_client_is_valid>
 8015e5a:	b1f8      	cbz	r0, 8015e9c <rcl_action_send_result_request+0x54>
 8015e5c:	6820      	ldr	r0, [r4, #0]
 8015e5e:	3004      	adds	r0, #4
 8015e60:	f7fd fed6 	bl	8013c10 <rcl_client_is_valid>
 8015e64:	b1d0      	cbz	r0, 8015e9c <rcl_action_send_result_request+0x54>
 8015e66:	6820      	ldr	r0, [r4, #0]
 8015e68:	3008      	adds	r0, #8
 8015e6a:	f7fd fed1 	bl	8013c10 <rcl_client_is_valid>
 8015e6e:	b1a8      	cbz	r0, 8015e9c <rcl_action_send_result_request+0x54>
 8015e70:	6820      	ldr	r0, [r4, #0]
 8015e72:	300c      	adds	r0, #12
 8015e74:	f7fe fd86 	bl	8014984 <rcl_subscription_is_valid>
 8015e78:	b180      	cbz	r0, 8015e9c <rcl_action_send_result_request+0x54>
 8015e7a:	6820      	ldr	r0, [r4, #0]
 8015e7c:	3010      	adds	r0, #16
 8015e7e:	f7fe fd81 	bl	8014984 <rcl_subscription_is_valid>
 8015e82:	b158      	cbz	r0, 8015e9c <rcl_action_send_result_request+0x54>
 8015e84:	b17d      	cbz	r5, 8015ea6 <rcl_action_send_result_request+0x5e>
 8015e86:	b176      	cbz	r6, 8015ea6 <rcl_action_send_result_request+0x5e>
 8015e88:	6820      	ldr	r0, [r4, #0]
 8015e8a:	4632      	mov	r2, r6
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	3008      	adds	r0, #8
 8015e90:	f7fd fdfe 	bl	8013a90 <rcl_send_request>
 8015e94:	3800      	subs	r0, #0
 8015e96:	bf18      	it	ne
 8015e98:	2001      	movne	r0, #1
 8015e9a:	bd70      	pop	{r4, r5, r6, pc}
 8015e9c:	f7f7 fee4 	bl	800dc68 <rcutils_reset_error>
 8015ea0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ea4:	bd70      	pop	{r4, r5, r6, pc}
 8015ea6:	200b      	movs	r0, #11
 8015ea8:	bd70      	pop	{r4, r5, r6, pc}
 8015eaa:	f640 0036 	movw	r0, #2102	@ 0x836
 8015eae:	4770      	bx	lr

08015eb0 <rcl_action_take_result_response>:
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	d037      	beq.n	8015f24 <rcl_action_take_result_response+0x74>
 8015eb4:	b570      	push	{r4, r5, r6, lr}
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	6800      	ldr	r0, [r0, #0]
 8015eba:	b370      	cbz	r0, 8015f1a <rcl_action_take_result_response+0x6a>
 8015ebc:	460d      	mov	r5, r1
 8015ebe:	4616      	mov	r6, r2
 8015ec0:	f7fd fea6 	bl	8013c10 <rcl_client_is_valid>
 8015ec4:	b338      	cbz	r0, 8015f16 <rcl_action_take_result_response+0x66>
 8015ec6:	6820      	ldr	r0, [r4, #0]
 8015ec8:	3004      	adds	r0, #4
 8015eca:	f7fd fea1 	bl	8013c10 <rcl_client_is_valid>
 8015ece:	b310      	cbz	r0, 8015f16 <rcl_action_take_result_response+0x66>
 8015ed0:	6820      	ldr	r0, [r4, #0]
 8015ed2:	3008      	adds	r0, #8
 8015ed4:	f7fd fe9c 	bl	8013c10 <rcl_client_is_valid>
 8015ed8:	b1e8      	cbz	r0, 8015f16 <rcl_action_take_result_response+0x66>
 8015eda:	6820      	ldr	r0, [r4, #0]
 8015edc:	300c      	adds	r0, #12
 8015ede:	f7fe fd51 	bl	8014984 <rcl_subscription_is_valid>
 8015ee2:	b1c0      	cbz	r0, 8015f16 <rcl_action_take_result_response+0x66>
 8015ee4:	6820      	ldr	r0, [r4, #0]
 8015ee6:	3010      	adds	r0, #16
 8015ee8:	f7fe fd4c 	bl	8014984 <rcl_subscription_is_valid>
 8015eec:	b198      	cbz	r0, 8015f16 <rcl_action_take_result_response+0x66>
 8015eee:	b1bd      	cbz	r5, 8015f20 <rcl_action_take_result_response+0x70>
 8015ef0:	b1b6      	cbz	r6, 8015f20 <rcl_action_take_result_response+0x70>
 8015ef2:	6820      	ldr	r0, [r4, #0]
 8015ef4:	4632      	mov	r2, r6
 8015ef6:	4629      	mov	r1, r5
 8015ef8:	3008      	adds	r0, #8
 8015efa:	f7fd fe1d 	bl	8013b38 <rcl_take_response>
 8015efe:	b148      	cbz	r0, 8015f14 <rcl_action_take_result_response+0x64>
 8015f00:	280a      	cmp	r0, #10
 8015f02:	d007      	beq.n	8015f14 <rcl_action_take_result_response+0x64>
 8015f04:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015f08:	f640 0337 	movw	r3, #2103	@ 0x837
 8015f0c:	4290      	cmp	r0, r2
 8015f0e:	bf0c      	ite	eq
 8015f10:	4618      	moveq	r0, r3
 8015f12:	2001      	movne	r0, #1
 8015f14:	bd70      	pop	{r4, r5, r6, pc}
 8015f16:	f7f7 fea7 	bl	800dc68 <rcutils_reset_error>
 8015f1a:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f1e:	bd70      	pop	{r4, r5, r6, pc}
 8015f20:	200b      	movs	r0, #11
 8015f22:	bd70      	pop	{r4, r5, r6, pc}
 8015f24:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f28:	4770      	bx	lr
 8015f2a:	bf00      	nop

08015f2c <rcl_action_take_cancel_response>:
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d037      	beq.n	8015fa0 <rcl_action_take_cancel_response+0x74>
 8015f30:	b570      	push	{r4, r5, r6, lr}
 8015f32:	4604      	mov	r4, r0
 8015f34:	6800      	ldr	r0, [r0, #0]
 8015f36:	b370      	cbz	r0, 8015f96 <rcl_action_take_cancel_response+0x6a>
 8015f38:	460d      	mov	r5, r1
 8015f3a:	4616      	mov	r6, r2
 8015f3c:	f7fd fe68 	bl	8013c10 <rcl_client_is_valid>
 8015f40:	b338      	cbz	r0, 8015f92 <rcl_action_take_cancel_response+0x66>
 8015f42:	6820      	ldr	r0, [r4, #0]
 8015f44:	3004      	adds	r0, #4
 8015f46:	f7fd fe63 	bl	8013c10 <rcl_client_is_valid>
 8015f4a:	b310      	cbz	r0, 8015f92 <rcl_action_take_cancel_response+0x66>
 8015f4c:	6820      	ldr	r0, [r4, #0]
 8015f4e:	3008      	adds	r0, #8
 8015f50:	f7fd fe5e 	bl	8013c10 <rcl_client_is_valid>
 8015f54:	b1e8      	cbz	r0, 8015f92 <rcl_action_take_cancel_response+0x66>
 8015f56:	6820      	ldr	r0, [r4, #0]
 8015f58:	300c      	adds	r0, #12
 8015f5a:	f7fe fd13 	bl	8014984 <rcl_subscription_is_valid>
 8015f5e:	b1c0      	cbz	r0, 8015f92 <rcl_action_take_cancel_response+0x66>
 8015f60:	6820      	ldr	r0, [r4, #0]
 8015f62:	3010      	adds	r0, #16
 8015f64:	f7fe fd0e 	bl	8014984 <rcl_subscription_is_valid>
 8015f68:	b198      	cbz	r0, 8015f92 <rcl_action_take_cancel_response+0x66>
 8015f6a:	b1bd      	cbz	r5, 8015f9c <rcl_action_take_cancel_response+0x70>
 8015f6c:	b1b6      	cbz	r6, 8015f9c <rcl_action_take_cancel_response+0x70>
 8015f6e:	6820      	ldr	r0, [r4, #0]
 8015f70:	4632      	mov	r2, r6
 8015f72:	4629      	mov	r1, r5
 8015f74:	3004      	adds	r0, #4
 8015f76:	f7fd fddf 	bl	8013b38 <rcl_take_response>
 8015f7a:	b148      	cbz	r0, 8015f90 <rcl_action_take_cancel_response+0x64>
 8015f7c:	280a      	cmp	r0, #10
 8015f7e:	d007      	beq.n	8015f90 <rcl_action_take_cancel_response+0x64>
 8015f80:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015f84:	f640 0337 	movw	r3, #2103	@ 0x837
 8015f88:	4290      	cmp	r0, r2
 8015f8a:	bf0c      	ite	eq
 8015f8c:	4618      	moveq	r0, r3
 8015f8e:	2001      	movne	r0, #1
 8015f90:	bd70      	pop	{r4, r5, r6, pc}
 8015f92:	f7f7 fe69 	bl	800dc68 <rcutils_reset_error>
 8015f96:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f9a:	bd70      	pop	{r4, r5, r6, pc}
 8015f9c:	200b      	movs	r0, #11
 8015f9e:	bd70      	pop	{r4, r5, r6, pc}
 8015fa0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fa4:	4770      	bx	lr
 8015fa6:	bf00      	nop

08015fa8 <rcl_action_take_feedback>:
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d037      	beq.n	801601c <rcl_action_take_feedback+0x74>
 8015fac:	b530      	push	{r4, r5, lr}
 8015fae:	4604      	mov	r4, r0
 8015fb0:	6800      	ldr	r0, [r0, #0]
 8015fb2:	b08f      	sub	sp, #60	@ 0x3c
 8015fb4:	b358      	cbz	r0, 801600e <rcl_action_take_feedback+0x66>
 8015fb6:	460d      	mov	r5, r1
 8015fb8:	f7fd fe2a 	bl	8013c10 <rcl_client_is_valid>
 8015fbc:	b328      	cbz	r0, 801600a <rcl_action_take_feedback+0x62>
 8015fbe:	6820      	ldr	r0, [r4, #0]
 8015fc0:	3004      	adds	r0, #4
 8015fc2:	f7fd fe25 	bl	8013c10 <rcl_client_is_valid>
 8015fc6:	b300      	cbz	r0, 801600a <rcl_action_take_feedback+0x62>
 8015fc8:	6820      	ldr	r0, [r4, #0]
 8015fca:	3008      	adds	r0, #8
 8015fcc:	f7fd fe20 	bl	8013c10 <rcl_client_is_valid>
 8015fd0:	b1d8      	cbz	r0, 801600a <rcl_action_take_feedback+0x62>
 8015fd2:	6820      	ldr	r0, [r4, #0]
 8015fd4:	300c      	adds	r0, #12
 8015fd6:	f7fe fcd5 	bl	8014984 <rcl_subscription_is_valid>
 8015fda:	b1b0      	cbz	r0, 801600a <rcl_action_take_feedback+0x62>
 8015fdc:	6820      	ldr	r0, [r4, #0]
 8015fde:	3010      	adds	r0, #16
 8015fe0:	f7fe fcd0 	bl	8014984 <rcl_subscription_is_valid>
 8015fe4:	b188      	cbz	r0, 801600a <rcl_action_take_feedback+0x62>
 8015fe6:	b1b5      	cbz	r5, 8016016 <rcl_action_take_feedback+0x6e>
 8015fe8:	6820      	ldr	r0, [r4, #0]
 8015fea:	2300      	movs	r3, #0
 8015fec:	466a      	mov	r2, sp
 8015fee:	4629      	mov	r1, r5
 8015ff0:	300c      	adds	r0, #12
 8015ff2:	f7fe fc69 	bl	80148c8 <rcl_take>
 8015ff6:	b160      	cbz	r0, 8016012 <rcl_action_take_feedback+0x6a>
 8015ff8:	f240 1391 	movw	r3, #401	@ 0x191
 8015ffc:	4298      	cmp	r0, r3
 8015ffe:	d010      	beq.n	8016022 <rcl_action_take_feedback+0x7a>
 8016000:	280a      	cmp	r0, #10
 8016002:	bf18      	it	ne
 8016004:	2001      	movne	r0, #1
 8016006:	b00f      	add	sp, #60	@ 0x3c
 8016008:	bd30      	pop	{r4, r5, pc}
 801600a:	f7f7 fe2d 	bl	800dc68 <rcutils_reset_error>
 801600e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016012:	b00f      	add	sp, #60	@ 0x3c
 8016014:	bd30      	pop	{r4, r5, pc}
 8016016:	200b      	movs	r0, #11
 8016018:	b00f      	add	sp, #60	@ 0x3c
 801601a:	bd30      	pop	{r4, r5, pc}
 801601c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016020:	4770      	bx	lr
 8016022:	f640 0037 	movw	r0, #2103	@ 0x837
 8016026:	e7f4      	b.n	8016012 <rcl_action_take_feedback+0x6a>

08016028 <rcl_action_wait_set_add_action_client>:
 8016028:	2800      	cmp	r0, #0
 801602a:	d045      	beq.n	80160b8 <rcl_action_wait_set_add_action_client+0x90>
 801602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801602e:	460c      	mov	r4, r1
 8016030:	2900      	cmp	r1, #0
 8016032:	d03e      	beq.n	80160b2 <rcl_action_wait_set_add_action_client+0x8a>
 8016034:	4605      	mov	r5, r0
 8016036:	6808      	ldr	r0, [r1, #0]
 8016038:	2800      	cmp	r0, #0
 801603a:	d03a      	beq.n	80160b2 <rcl_action_wait_set_add_action_client+0x8a>
 801603c:	4617      	mov	r7, r2
 801603e:	461e      	mov	r6, r3
 8016040:	f7fd fde6 	bl	8013c10 <rcl_client_is_valid>
 8016044:	b398      	cbz	r0, 80160ae <rcl_action_wait_set_add_action_client+0x86>
 8016046:	6820      	ldr	r0, [r4, #0]
 8016048:	3004      	adds	r0, #4
 801604a:	f7fd fde1 	bl	8013c10 <rcl_client_is_valid>
 801604e:	b370      	cbz	r0, 80160ae <rcl_action_wait_set_add_action_client+0x86>
 8016050:	6820      	ldr	r0, [r4, #0]
 8016052:	3008      	adds	r0, #8
 8016054:	f7fd fddc 	bl	8013c10 <rcl_client_is_valid>
 8016058:	b348      	cbz	r0, 80160ae <rcl_action_wait_set_add_action_client+0x86>
 801605a:	6820      	ldr	r0, [r4, #0]
 801605c:	300c      	adds	r0, #12
 801605e:	f7fe fc91 	bl	8014984 <rcl_subscription_is_valid>
 8016062:	b320      	cbz	r0, 80160ae <rcl_action_wait_set_add_action_client+0x86>
 8016064:	6820      	ldr	r0, [r4, #0]
 8016066:	3010      	adds	r0, #16
 8016068:	f7fe fc8c 	bl	8014984 <rcl_subscription_is_valid>
 801606c:	b1f8      	cbz	r0, 80160ae <rcl_action_wait_set_add_action_client+0x86>
 801606e:	6821      	ldr	r1, [r4, #0]
 8016070:	4628      	mov	r0, r5
 8016072:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016076:	f7ff fc73 	bl	8015960 <rcl_wait_set_add_client>
 801607a:	b9b8      	cbnz	r0, 80160ac <rcl_action_wait_set_add_action_client+0x84>
 801607c:	6821      	ldr	r1, [r4, #0]
 801607e:	4628      	mov	r0, r5
 8016080:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016084:	3104      	adds	r1, #4
 8016086:	f7ff fc6b 	bl	8015960 <rcl_wait_set_add_client>
 801608a:	b978      	cbnz	r0, 80160ac <rcl_action_wait_set_add_action_client+0x84>
 801608c:	6821      	ldr	r1, [r4, #0]
 801608e:	4628      	mov	r0, r5
 8016090:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016094:	3108      	adds	r1, #8
 8016096:	f7ff fc63 	bl	8015960 <rcl_wait_set_add_client>
 801609a:	b938      	cbnz	r0, 80160ac <rcl_action_wait_set_add_action_client+0x84>
 801609c:	6821      	ldr	r1, [r4, #0]
 801609e:	4628      	mov	r0, r5
 80160a0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80160a4:	310c      	adds	r1, #12
 80160a6:	f7ff f8fb 	bl	80152a0 <rcl_wait_set_add_subscription>
 80160aa:	b140      	cbz	r0, 80160be <rcl_action_wait_set_add_action_client+0x96>
 80160ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ae:	f7f7 fddb 	bl	800dc68 <rcutils_reset_error>
 80160b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80160b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80160bc:	4770      	bx	lr
 80160be:	6821      	ldr	r1, [r4, #0]
 80160c0:	4628      	mov	r0, r5
 80160c2:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80160c6:	3110      	adds	r1, #16
 80160c8:	f7ff f8ea 	bl	80152a0 <rcl_wait_set_add_subscription>
 80160cc:	2800      	cmp	r0, #0
 80160ce:	d1ed      	bne.n	80160ac <rcl_action_wait_set_add_action_client+0x84>
 80160d0:	b11f      	cbz	r7, 80160da <rcl_action_wait_set_add_action_client+0xb2>
 80160d2:	6823      	ldr	r3, [r4, #0]
 80160d4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80160d8:	603b      	str	r3, [r7, #0]
 80160da:	2e00      	cmp	r6, #0
 80160dc:	d0e6      	beq.n	80160ac <rcl_action_wait_set_add_action_client+0x84>
 80160de:	6823      	ldr	r3, [r4, #0]
 80160e0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80160e4:	6033      	str	r3, [r6, #0]
 80160e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080160e8 <rcl_action_client_wait_set_get_entities_ready>:
 80160e8:	2800      	cmp	r0, #0
 80160ea:	f000 8089 	beq.w	8016200 <rcl_action_client_wait_set_get_entities_ready+0x118>
 80160ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160f2:	460c      	mov	r4, r1
 80160f4:	2900      	cmp	r1, #0
 80160f6:	d079      	beq.n	80161ec <rcl_action_client_wait_set_get_entities_ready+0x104>
 80160f8:	4605      	mov	r5, r0
 80160fa:	6808      	ldr	r0, [r1, #0]
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d075      	beq.n	80161ec <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016100:	4616      	mov	r6, r2
 8016102:	461f      	mov	r7, r3
 8016104:	f7fd fd84 	bl	8013c10 <rcl_client_is_valid>
 8016108:	2800      	cmp	r0, #0
 801610a:	d06d      	beq.n	80161e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801610c:	6820      	ldr	r0, [r4, #0]
 801610e:	3004      	adds	r0, #4
 8016110:	f7fd fd7e 	bl	8013c10 <rcl_client_is_valid>
 8016114:	2800      	cmp	r0, #0
 8016116:	d067      	beq.n	80161e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016118:	6820      	ldr	r0, [r4, #0]
 801611a:	3008      	adds	r0, #8
 801611c:	f7fd fd78 	bl	8013c10 <rcl_client_is_valid>
 8016120:	2800      	cmp	r0, #0
 8016122:	d061      	beq.n	80161e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016124:	6820      	ldr	r0, [r4, #0]
 8016126:	300c      	adds	r0, #12
 8016128:	f7fe fc2c 	bl	8014984 <rcl_subscription_is_valid>
 801612c:	2800      	cmp	r0, #0
 801612e:	d05b      	beq.n	80161e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016130:	6820      	ldr	r0, [r4, #0]
 8016132:	3010      	adds	r0, #16
 8016134:	f7fe fc26 	bl	8014984 <rcl_subscription_is_valid>
 8016138:	2800      	cmp	r0, #0
 801613a:	d055      	beq.n	80161e8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801613c:	2e00      	cmp	r6, #0
 801613e:	d05c      	beq.n	80161fa <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016140:	2f00      	cmp	r7, #0
 8016142:	d05a      	beq.n	80161fa <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016144:	9b06      	ldr	r3, [sp, #24]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d057      	beq.n	80161fa <rcl_action_client_wait_set_get_entities_ready+0x112>
 801614a:	9b07      	ldr	r3, [sp, #28]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d054      	beq.n	80161fa <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016150:	9b08      	ldr	r3, [sp, #32]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d051      	beq.n	80161fa <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016156:	6823      	ldr	r3, [r4, #0]
 8016158:	686a      	ldr	r2, [r5, #4]
 801615a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801615e:	428a      	cmp	r2, r1
 8016160:	d948      	bls.n	80161f4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016162:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016166:	4282      	cmp	r2, r0
 8016168:	d944      	bls.n	80161f4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801616a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801616e:	69ea      	ldr	r2, [r5, #28]
 8016170:	42a2      	cmp	r2, r4
 8016172:	d93f      	bls.n	80161f4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016174:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016178:	4562      	cmp	r2, ip
 801617a:	d93b      	bls.n	80161f4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801617c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016180:	4572      	cmp	r2, lr
 8016182:	d937      	bls.n	80161f4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016184:	69aa      	ldr	r2, [r5, #24]
 8016186:	682d      	ldr	r5, [r5, #0]
 8016188:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801618c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016190:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016194:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016198:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801619c:	f103 0c0c 	add.w	ip, r3, #12
 80161a0:	eba5 050c 	sub.w	r5, r5, ip
 80161a4:	fab5 f585 	clz	r5, r5
 80161a8:	096d      	lsrs	r5, r5, #5
 80161aa:	7035      	strb	r5, [r6, #0]
 80161ac:	f103 0510 	add.w	r5, r3, #16
 80161b0:	1b64      	subs	r4, r4, r5
 80161b2:	fab4 f484 	clz	r4, r4
 80161b6:	0964      	lsrs	r4, r4, #5
 80161b8:	703c      	strb	r4, [r7, #0]
 80161ba:	eba3 0008 	sub.w	r0, r3, r8
 80161be:	1d1c      	adds	r4, r3, #4
 80161c0:	3308      	adds	r3, #8
 80161c2:	1ad3      	subs	r3, r2, r3
 80161c4:	fab0 f080 	clz	r0, r0
 80161c8:	9a06      	ldr	r2, [sp, #24]
 80161ca:	0940      	lsrs	r0, r0, #5
 80161cc:	1b09      	subs	r1, r1, r4
 80161ce:	7010      	strb	r0, [r2, #0]
 80161d0:	fab1 f181 	clz	r1, r1
 80161d4:	9a07      	ldr	r2, [sp, #28]
 80161d6:	0949      	lsrs	r1, r1, #5
 80161d8:	7011      	strb	r1, [r2, #0]
 80161da:	fab3 f383 	clz	r3, r3
 80161de:	9a08      	ldr	r2, [sp, #32]
 80161e0:	095b      	lsrs	r3, r3, #5
 80161e2:	2000      	movs	r0, #0
 80161e4:	7013      	strb	r3, [r2, #0]
 80161e6:	e003      	b.n	80161f0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161e8:	f7f7 fd3e 	bl	800dc68 <rcutils_reset_error>
 80161ec:	f640 0036 	movw	r0, #2102	@ 0x836
 80161f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f4:	2001      	movs	r0, #1
 80161f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161fa:	200b      	movs	r0, #11
 80161fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016200:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop

08016208 <rcl_action_take_goal_request>:
 8016208:	b3b0      	cbz	r0, 8016278 <rcl_action_take_goal_request+0x70>
 801620a:	b570      	push	{r4, r5, r6, lr}
 801620c:	4604      	mov	r4, r0
 801620e:	6800      	ldr	r0, [r0, #0]
 8016210:	b368      	cbz	r0, 801626e <rcl_action_take_goal_request+0x66>
 8016212:	460d      	mov	r5, r1
 8016214:	4616      	mov	r6, r2
 8016216:	f7fe f9e7 	bl	80145e8 <rcl_service_is_valid>
 801621a:	b330      	cbz	r0, 801626a <rcl_action_take_goal_request+0x62>
 801621c:	6820      	ldr	r0, [r4, #0]
 801621e:	3004      	adds	r0, #4
 8016220:	f7fe f9e2 	bl	80145e8 <rcl_service_is_valid>
 8016224:	b308      	cbz	r0, 801626a <rcl_action_take_goal_request+0x62>
 8016226:	6820      	ldr	r0, [r4, #0]
 8016228:	3008      	adds	r0, #8
 801622a:	f7fe f9dd 	bl	80145e8 <rcl_service_is_valid>
 801622e:	b1e0      	cbz	r0, 801626a <rcl_action_take_goal_request+0x62>
 8016230:	6820      	ldr	r0, [r4, #0]
 8016232:	300c      	adds	r0, #12
 8016234:	f7f6 fd9c 	bl	800cd70 <rcl_publisher_is_valid>
 8016238:	b1b8      	cbz	r0, 801626a <rcl_action_take_goal_request+0x62>
 801623a:	6820      	ldr	r0, [r4, #0]
 801623c:	3010      	adds	r0, #16
 801623e:	f7f6 fd97 	bl	800cd70 <rcl_publisher_is_valid>
 8016242:	b190      	cbz	r0, 801626a <rcl_action_take_goal_request+0x62>
 8016244:	b1b5      	cbz	r5, 8016274 <rcl_action_take_goal_request+0x6c>
 8016246:	b1ae      	cbz	r6, 8016274 <rcl_action_take_goal_request+0x6c>
 8016248:	6820      	ldr	r0, [r4, #0]
 801624a:	4632      	mov	r2, r6
 801624c:	4629      	mov	r1, r5
 801624e:	f7fe f94b 	bl	80144e8 <rcl_take_request>
 8016252:	b148      	cbz	r0, 8016268 <rcl_action_take_goal_request+0x60>
 8016254:	280a      	cmp	r0, #10
 8016256:	d007      	beq.n	8016268 <rcl_action_take_goal_request+0x60>
 8016258:	f240 2259 	movw	r2, #601	@ 0x259
 801625c:	f640 0399 	movw	r3, #2201	@ 0x899
 8016260:	4290      	cmp	r0, r2
 8016262:	bf0c      	ite	eq
 8016264:	4618      	moveq	r0, r3
 8016266:	2001      	movne	r0, #1
 8016268:	bd70      	pop	{r4, r5, r6, pc}
 801626a:	f7f7 fcfd 	bl	800dc68 <rcutils_reset_error>
 801626e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016272:	bd70      	pop	{r4, r5, r6, pc}
 8016274:	200b      	movs	r0, #11
 8016276:	bd70      	pop	{r4, r5, r6, pc}
 8016278:	f640 0098 	movw	r0, #2200	@ 0x898
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop

08016280 <rcl_action_send_goal_response>:
 8016280:	b378      	cbz	r0, 80162e2 <rcl_action_send_goal_response+0x62>
 8016282:	b570      	push	{r4, r5, r6, lr}
 8016284:	4604      	mov	r4, r0
 8016286:	6800      	ldr	r0, [r0, #0]
 8016288:	b330      	cbz	r0, 80162d8 <rcl_action_send_goal_response+0x58>
 801628a:	460d      	mov	r5, r1
 801628c:	4616      	mov	r6, r2
 801628e:	f7fe f9ab 	bl	80145e8 <rcl_service_is_valid>
 8016292:	b1f8      	cbz	r0, 80162d4 <rcl_action_send_goal_response+0x54>
 8016294:	6820      	ldr	r0, [r4, #0]
 8016296:	3004      	adds	r0, #4
 8016298:	f7fe f9a6 	bl	80145e8 <rcl_service_is_valid>
 801629c:	b1d0      	cbz	r0, 80162d4 <rcl_action_send_goal_response+0x54>
 801629e:	6820      	ldr	r0, [r4, #0]
 80162a0:	3008      	adds	r0, #8
 80162a2:	f7fe f9a1 	bl	80145e8 <rcl_service_is_valid>
 80162a6:	b1a8      	cbz	r0, 80162d4 <rcl_action_send_goal_response+0x54>
 80162a8:	6820      	ldr	r0, [r4, #0]
 80162aa:	300c      	adds	r0, #12
 80162ac:	f7f6 fd60 	bl	800cd70 <rcl_publisher_is_valid>
 80162b0:	b180      	cbz	r0, 80162d4 <rcl_action_send_goal_response+0x54>
 80162b2:	6820      	ldr	r0, [r4, #0]
 80162b4:	3010      	adds	r0, #16
 80162b6:	f7f6 fd5b 	bl	800cd70 <rcl_publisher_is_valid>
 80162ba:	b158      	cbz	r0, 80162d4 <rcl_action_send_goal_response+0x54>
 80162bc:	b17d      	cbz	r5, 80162de <rcl_action_send_goal_response+0x5e>
 80162be:	b176      	cbz	r6, 80162de <rcl_action_send_goal_response+0x5e>
 80162c0:	6820      	ldr	r0, [r4, #0]
 80162c2:	4632      	mov	r2, r6
 80162c4:	4629      	mov	r1, r5
 80162c6:	f7fe f95f 	bl	8014588 <rcl_send_response>
 80162ca:	b110      	cbz	r0, 80162d2 <rcl_action_send_goal_response+0x52>
 80162cc:	2802      	cmp	r0, #2
 80162ce:	bf18      	it	ne
 80162d0:	2001      	movne	r0, #1
 80162d2:	bd70      	pop	{r4, r5, r6, pc}
 80162d4:	f7f7 fcc8 	bl	800dc68 <rcutils_reset_error>
 80162d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80162dc:	bd70      	pop	{r4, r5, r6, pc}
 80162de:	200b      	movs	r0, #11
 80162e0:	bd70      	pop	{r4, r5, r6, pc}
 80162e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80162e6:	4770      	bx	lr

080162e8 <rcl_action_take_result_request>:
 80162e8:	2800      	cmp	r0, #0
 80162ea:	d037      	beq.n	801635c <rcl_action_take_result_request+0x74>
 80162ec:	b570      	push	{r4, r5, r6, lr}
 80162ee:	4604      	mov	r4, r0
 80162f0:	6800      	ldr	r0, [r0, #0]
 80162f2:	b370      	cbz	r0, 8016352 <rcl_action_take_result_request+0x6a>
 80162f4:	460d      	mov	r5, r1
 80162f6:	4616      	mov	r6, r2
 80162f8:	f7fe f976 	bl	80145e8 <rcl_service_is_valid>
 80162fc:	b338      	cbz	r0, 801634e <rcl_action_take_result_request+0x66>
 80162fe:	6820      	ldr	r0, [r4, #0]
 8016300:	3004      	adds	r0, #4
 8016302:	f7fe f971 	bl	80145e8 <rcl_service_is_valid>
 8016306:	b310      	cbz	r0, 801634e <rcl_action_take_result_request+0x66>
 8016308:	6820      	ldr	r0, [r4, #0]
 801630a:	3008      	adds	r0, #8
 801630c:	f7fe f96c 	bl	80145e8 <rcl_service_is_valid>
 8016310:	b1e8      	cbz	r0, 801634e <rcl_action_take_result_request+0x66>
 8016312:	6820      	ldr	r0, [r4, #0]
 8016314:	300c      	adds	r0, #12
 8016316:	f7f6 fd2b 	bl	800cd70 <rcl_publisher_is_valid>
 801631a:	b1c0      	cbz	r0, 801634e <rcl_action_take_result_request+0x66>
 801631c:	6820      	ldr	r0, [r4, #0]
 801631e:	3010      	adds	r0, #16
 8016320:	f7f6 fd26 	bl	800cd70 <rcl_publisher_is_valid>
 8016324:	b198      	cbz	r0, 801634e <rcl_action_take_result_request+0x66>
 8016326:	b1bd      	cbz	r5, 8016358 <rcl_action_take_result_request+0x70>
 8016328:	b1b6      	cbz	r6, 8016358 <rcl_action_take_result_request+0x70>
 801632a:	6820      	ldr	r0, [r4, #0]
 801632c:	4632      	mov	r2, r6
 801632e:	4629      	mov	r1, r5
 8016330:	3008      	adds	r0, #8
 8016332:	f7fe f8d9 	bl	80144e8 <rcl_take_request>
 8016336:	b148      	cbz	r0, 801634c <rcl_action_take_result_request+0x64>
 8016338:	280a      	cmp	r0, #10
 801633a:	d007      	beq.n	801634c <rcl_action_take_result_request+0x64>
 801633c:	f240 2259 	movw	r2, #601	@ 0x259
 8016340:	f640 0399 	movw	r3, #2201	@ 0x899
 8016344:	4290      	cmp	r0, r2
 8016346:	bf0c      	ite	eq
 8016348:	4618      	moveq	r0, r3
 801634a:	2001      	movne	r0, #1
 801634c:	bd70      	pop	{r4, r5, r6, pc}
 801634e:	f7f7 fc8b 	bl	800dc68 <rcutils_reset_error>
 8016352:	f640 0098 	movw	r0, #2200	@ 0x898
 8016356:	bd70      	pop	{r4, r5, r6, pc}
 8016358:	200b      	movs	r0, #11
 801635a:	bd70      	pop	{r4, r5, r6, pc}
 801635c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016360:	4770      	bx	lr
 8016362:	bf00      	nop

08016364 <rcl_action_take_cancel_request>:
 8016364:	2800      	cmp	r0, #0
 8016366:	d037      	beq.n	80163d8 <rcl_action_take_cancel_request+0x74>
 8016368:	b570      	push	{r4, r5, r6, lr}
 801636a:	4604      	mov	r4, r0
 801636c:	6800      	ldr	r0, [r0, #0]
 801636e:	b370      	cbz	r0, 80163ce <rcl_action_take_cancel_request+0x6a>
 8016370:	460d      	mov	r5, r1
 8016372:	4616      	mov	r6, r2
 8016374:	f7fe f938 	bl	80145e8 <rcl_service_is_valid>
 8016378:	b338      	cbz	r0, 80163ca <rcl_action_take_cancel_request+0x66>
 801637a:	6820      	ldr	r0, [r4, #0]
 801637c:	3004      	adds	r0, #4
 801637e:	f7fe f933 	bl	80145e8 <rcl_service_is_valid>
 8016382:	b310      	cbz	r0, 80163ca <rcl_action_take_cancel_request+0x66>
 8016384:	6820      	ldr	r0, [r4, #0]
 8016386:	3008      	adds	r0, #8
 8016388:	f7fe f92e 	bl	80145e8 <rcl_service_is_valid>
 801638c:	b1e8      	cbz	r0, 80163ca <rcl_action_take_cancel_request+0x66>
 801638e:	6820      	ldr	r0, [r4, #0]
 8016390:	300c      	adds	r0, #12
 8016392:	f7f6 fced 	bl	800cd70 <rcl_publisher_is_valid>
 8016396:	b1c0      	cbz	r0, 80163ca <rcl_action_take_cancel_request+0x66>
 8016398:	6820      	ldr	r0, [r4, #0]
 801639a:	3010      	adds	r0, #16
 801639c:	f7f6 fce8 	bl	800cd70 <rcl_publisher_is_valid>
 80163a0:	b198      	cbz	r0, 80163ca <rcl_action_take_cancel_request+0x66>
 80163a2:	b1bd      	cbz	r5, 80163d4 <rcl_action_take_cancel_request+0x70>
 80163a4:	b1b6      	cbz	r6, 80163d4 <rcl_action_take_cancel_request+0x70>
 80163a6:	6820      	ldr	r0, [r4, #0]
 80163a8:	4632      	mov	r2, r6
 80163aa:	4629      	mov	r1, r5
 80163ac:	3004      	adds	r0, #4
 80163ae:	f7fe f89b 	bl	80144e8 <rcl_take_request>
 80163b2:	b148      	cbz	r0, 80163c8 <rcl_action_take_cancel_request+0x64>
 80163b4:	280a      	cmp	r0, #10
 80163b6:	d007      	beq.n	80163c8 <rcl_action_take_cancel_request+0x64>
 80163b8:	f240 2259 	movw	r2, #601	@ 0x259
 80163bc:	f640 0399 	movw	r3, #2201	@ 0x899
 80163c0:	4290      	cmp	r0, r2
 80163c2:	bf0c      	ite	eq
 80163c4:	4618      	moveq	r0, r3
 80163c6:	2001      	movne	r0, #1
 80163c8:	bd70      	pop	{r4, r5, r6, pc}
 80163ca:	f7f7 fc4d 	bl	800dc68 <rcutils_reset_error>
 80163ce:	f640 0098 	movw	r0, #2200	@ 0x898
 80163d2:	bd70      	pop	{r4, r5, r6, pc}
 80163d4:	200b      	movs	r0, #11
 80163d6:	bd70      	pop	{r4, r5, r6, pc}
 80163d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80163dc:	4770      	bx	lr
 80163de:	bf00      	nop

080163e0 <rcl_action_send_cancel_response>:
 80163e0:	b380      	cbz	r0, 8016444 <rcl_action_send_cancel_response+0x64>
 80163e2:	b570      	push	{r4, r5, r6, lr}
 80163e4:	4604      	mov	r4, r0
 80163e6:	6800      	ldr	r0, [r0, #0]
 80163e8:	b338      	cbz	r0, 801643a <rcl_action_send_cancel_response+0x5a>
 80163ea:	460d      	mov	r5, r1
 80163ec:	4616      	mov	r6, r2
 80163ee:	f7fe f8fb 	bl	80145e8 <rcl_service_is_valid>
 80163f2:	b300      	cbz	r0, 8016436 <rcl_action_send_cancel_response+0x56>
 80163f4:	6820      	ldr	r0, [r4, #0]
 80163f6:	3004      	adds	r0, #4
 80163f8:	f7fe f8f6 	bl	80145e8 <rcl_service_is_valid>
 80163fc:	b1d8      	cbz	r0, 8016436 <rcl_action_send_cancel_response+0x56>
 80163fe:	6820      	ldr	r0, [r4, #0]
 8016400:	3008      	adds	r0, #8
 8016402:	f7fe f8f1 	bl	80145e8 <rcl_service_is_valid>
 8016406:	b1b0      	cbz	r0, 8016436 <rcl_action_send_cancel_response+0x56>
 8016408:	6820      	ldr	r0, [r4, #0]
 801640a:	300c      	adds	r0, #12
 801640c:	f7f6 fcb0 	bl	800cd70 <rcl_publisher_is_valid>
 8016410:	b188      	cbz	r0, 8016436 <rcl_action_send_cancel_response+0x56>
 8016412:	6820      	ldr	r0, [r4, #0]
 8016414:	3010      	adds	r0, #16
 8016416:	f7f6 fcab 	bl	800cd70 <rcl_publisher_is_valid>
 801641a:	b160      	cbz	r0, 8016436 <rcl_action_send_cancel_response+0x56>
 801641c:	b185      	cbz	r5, 8016440 <rcl_action_send_cancel_response+0x60>
 801641e:	b17e      	cbz	r6, 8016440 <rcl_action_send_cancel_response+0x60>
 8016420:	6820      	ldr	r0, [r4, #0]
 8016422:	4632      	mov	r2, r6
 8016424:	4629      	mov	r1, r5
 8016426:	3004      	adds	r0, #4
 8016428:	f7fe f8ae 	bl	8014588 <rcl_send_response>
 801642c:	b110      	cbz	r0, 8016434 <rcl_action_send_cancel_response+0x54>
 801642e:	2802      	cmp	r0, #2
 8016430:	bf18      	it	ne
 8016432:	2001      	movne	r0, #1
 8016434:	bd70      	pop	{r4, r5, r6, pc}
 8016436:	f7f7 fc17 	bl	800dc68 <rcutils_reset_error>
 801643a:	f640 0098 	movw	r0, #2200	@ 0x898
 801643e:	bd70      	pop	{r4, r5, r6, pc}
 8016440:	200b      	movs	r0, #11
 8016442:	bd70      	pop	{r4, r5, r6, pc}
 8016444:	f640 0098 	movw	r0, #2200	@ 0x898
 8016448:	4770      	bx	lr
 801644a:	bf00      	nop

0801644c <rcl_action_wait_set_add_action_server>:
 801644c:	2800      	cmp	r0, #0
 801644e:	d04d      	beq.n	80164ec <rcl_action_wait_set_add_action_server+0xa0>
 8016450:	b570      	push	{r4, r5, r6, lr}
 8016452:	460c      	mov	r4, r1
 8016454:	b159      	cbz	r1, 801646e <rcl_action_wait_set_add_action_server+0x22>
 8016456:	4605      	mov	r5, r0
 8016458:	6808      	ldr	r0, [r1, #0]
 801645a:	b140      	cbz	r0, 801646e <rcl_action_wait_set_add_action_server+0x22>
 801645c:	4616      	mov	r6, r2
 801645e:	f7fe f8c3 	bl	80145e8 <rcl_service_is_valid>
 8016462:	b120      	cbz	r0, 801646e <rcl_action_wait_set_add_action_server+0x22>
 8016464:	6820      	ldr	r0, [r4, #0]
 8016466:	3004      	adds	r0, #4
 8016468:	f7fe f8be 	bl	80145e8 <rcl_service_is_valid>
 801646c:	b910      	cbnz	r0, 8016474 <rcl_action_wait_set_add_action_server+0x28>
 801646e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016472:	bd70      	pop	{r4, r5, r6, pc}
 8016474:	6820      	ldr	r0, [r4, #0]
 8016476:	3008      	adds	r0, #8
 8016478:	f7fe f8b6 	bl	80145e8 <rcl_service_is_valid>
 801647c:	2800      	cmp	r0, #0
 801647e:	d0f6      	beq.n	801646e <rcl_action_wait_set_add_action_server+0x22>
 8016480:	6820      	ldr	r0, [r4, #0]
 8016482:	300c      	adds	r0, #12
 8016484:	f7f6 fc8c 	bl	800cda0 <rcl_publisher_is_valid_except_context>
 8016488:	2800      	cmp	r0, #0
 801648a:	d0f0      	beq.n	801646e <rcl_action_wait_set_add_action_server+0x22>
 801648c:	6820      	ldr	r0, [r4, #0]
 801648e:	3010      	adds	r0, #16
 8016490:	f7f6 fc86 	bl	800cda0 <rcl_publisher_is_valid_except_context>
 8016494:	2800      	cmp	r0, #0
 8016496:	d0ea      	beq.n	801646e <rcl_action_wait_set_add_action_server+0x22>
 8016498:	6821      	ldr	r1, [r4, #0]
 801649a:	4628      	mov	r0, r5
 801649c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80164a0:	f7ff fa8a 	bl	80159b8 <rcl_wait_set_add_service>
 80164a4:	2800      	cmp	r0, #0
 80164a6:	d1e4      	bne.n	8016472 <rcl_action_wait_set_add_action_server+0x26>
 80164a8:	6821      	ldr	r1, [r4, #0]
 80164aa:	4628      	mov	r0, r5
 80164ac:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80164b0:	3104      	adds	r1, #4
 80164b2:	f7ff fa81 	bl	80159b8 <rcl_wait_set_add_service>
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d1db      	bne.n	8016472 <rcl_action_wait_set_add_action_server+0x26>
 80164ba:	6821      	ldr	r1, [r4, #0]
 80164bc:	4628      	mov	r0, r5
 80164be:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80164c2:	3108      	adds	r1, #8
 80164c4:	f7ff fa78 	bl	80159b8 <rcl_wait_set_add_service>
 80164c8:	2800      	cmp	r0, #0
 80164ca:	d1d2      	bne.n	8016472 <rcl_action_wait_set_add_action_server+0x26>
 80164cc:	6821      	ldr	r1, [r4, #0]
 80164ce:	4628      	mov	r0, r5
 80164d0:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80164d4:	3114      	adds	r1, #20
 80164d6:	f7ff fa13 	bl	8015900 <rcl_wait_set_add_timer>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d1c9      	bne.n	8016472 <rcl_action_wait_set_add_action_server+0x26>
 80164de:	2e00      	cmp	r6, #0
 80164e0:	d0c7      	beq.n	8016472 <rcl_action_wait_set_add_action_server+0x26>
 80164e2:	6823      	ldr	r3, [r4, #0]
 80164e4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80164e8:	6033      	str	r3, [r6, #0]
 80164ea:	bd70      	pop	{r4, r5, r6, pc}
 80164ec:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80164f0:	4770      	bx	lr
 80164f2:	bf00      	nop

080164f4 <rcl_action_server_wait_set_get_entities_ready>:
 80164f4:	2800      	cmp	r0, #0
 80164f6:	d05a      	beq.n	80165ae <rcl_action_server_wait_set_get_entities_ready+0xba>
 80164f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164fa:	460c      	mov	r4, r1
 80164fc:	b161      	cbz	r1, 8016518 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80164fe:	4605      	mov	r5, r0
 8016500:	6808      	ldr	r0, [r1, #0]
 8016502:	b148      	cbz	r0, 8016518 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016504:	4616      	mov	r6, r2
 8016506:	461f      	mov	r7, r3
 8016508:	f7fe f86e 	bl	80145e8 <rcl_service_is_valid>
 801650c:	b120      	cbz	r0, 8016518 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801650e:	6820      	ldr	r0, [r4, #0]
 8016510:	3004      	adds	r0, #4
 8016512:	f7fe f869 	bl	80145e8 <rcl_service_is_valid>
 8016516:	b910      	cbnz	r0, 801651e <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016518:	f640 0098 	movw	r0, #2200	@ 0x898
 801651c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801651e:	6820      	ldr	r0, [r4, #0]
 8016520:	3008      	adds	r0, #8
 8016522:	f7fe f861 	bl	80145e8 <rcl_service_is_valid>
 8016526:	2800      	cmp	r0, #0
 8016528:	d0f6      	beq.n	8016518 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801652a:	6820      	ldr	r0, [r4, #0]
 801652c:	300c      	adds	r0, #12
 801652e:	f7f6 fc37 	bl	800cda0 <rcl_publisher_is_valid_except_context>
 8016532:	2800      	cmp	r0, #0
 8016534:	d0f0      	beq.n	8016518 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016536:	6820      	ldr	r0, [r4, #0]
 8016538:	3010      	adds	r0, #16
 801653a:	f7f6 fc31 	bl	800cda0 <rcl_publisher_is_valid_except_context>
 801653e:	2800      	cmp	r0, #0
 8016540:	d0ea      	beq.n	8016518 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016542:	b3be      	cbz	r6, 80165b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016544:	b3b7      	cbz	r7, 80165b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016546:	9b06      	ldr	r3, [sp, #24]
 8016548:	b3a3      	cbz	r3, 80165b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801654a:	9b07      	ldr	r3, [sp, #28]
 801654c:	b393      	cbz	r3, 80165b4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801654e:	6821      	ldr	r1, [r4, #0]
 8016550:	692a      	ldr	r2, [r5, #16]
 8016552:	6a2c      	ldr	r4, [r5, #32]
 8016554:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016558:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801655c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016560:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016564:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016568:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801656c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016570:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016574:	1a64      	subs	r4, r4, r1
 8016576:	fab4 f484 	clz	r4, r4
 801657a:	0964      	lsrs	r4, r4, #5
 801657c:	7034      	strb	r4, [r6, #0]
 801657e:	1d0c      	adds	r4, r1, #4
 8016580:	1b1b      	subs	r3, r3, r4
 8016582:	fab3 f383 	clz	r3, r3
 8016586:	095b      	lsrs	r3, r3, #5
 8016588:	f101 0408 	add.w	r4, r1, #8
 801658c:	703b      	strb	r3, [r7, #0]
 801658e:	f101 0314 	add.w	r3, r1, #20
 8016592:	1b01      	subs	r1, r0, r4
 8016594:	1ad3      	subs	r3, r2, r3
 8016596:	fab1 f181 	clz	r1, r1
 801659a:	9a06      	ldr	r2, [sp, #24]
 801659c:	0949      	lsrs	r1, r1, #5
 801659e:	7011      	strb	r1, [r2, #0]
 80165a0:	fab3 f383 	clz	r3, r3
 80165a4:	9a07      	ldr	r2, [sp, #28]
 80165a6:	095b      	lsrs	r3, r3, #5
 80165a8:	2000      	movs	r0, #0
 80165aa:	7013      	strb	r3, [r2, #0]
 80165ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80165b2:	4770      	bx	lr
 80165b4:	200b      	movs	r0, #11
 80165b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165b8 <_execute_event_handler>:
 80165b8:	2002      	movs	r0, #2
 80165ba:	4770      	bx	lr

080165bc <_cancel_goal_event_handler>:
 80165bc:	2003      	movs	r0, #3
 80165be:	4770      	bx	lr

080165c0 <_succeed_event_handler>:
 80165c0:	2004      	movs	r0, #4
 80165c2:	4770      	bx	lr

080165c4 <_abort_event_handler>:
 80165c4:	2006      	movs	r0, #6
 80165c6:	4770      	bx	lr

080165c8 <_canceled_event_handler>:
 80165c8:	2005      	movs	r0, #5
 80165ca:	4770      	bx	lr

080165cc <rcl_action_transition_goal_state>:
 80165cc:	fa5f fc80 	uxtb.w	ip, r0
 80165d0:	f1bc 0f06 	cmp.w	ip, #6
 80165d4:	d80c      	bhi.n	80165f0 <rcl_action_transition_goal_state+0x24>
 80165d6:	2904      	cmp	r1, #4
 80165d8:	d80a      	bhi.n	80165f0 <rcl_action_transition_goal_state+0x24>
 80165da:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80165de:	b410      	push	{r4}
 80165e0:	440b      	add	r3, r1
 80165e2:	4c06      	ldr	r4, [pc, #24]	@ (80165fc <rcl_action_transition_goal_state+0x30>)
 80165e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80165e8:	b123      	cbz	r3, 80165f4 <rcl_action_transition_goal_state+0x28>
 80165ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165ee:	4718      	bx	r3
 80165f0:	2000      	movs	r0, #0
 80165f2:	4770      	bx	lr
 80165f4:	2000      	movs	r0, #0
 80165f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165fa:	4770      	bx	lr
 80165fc:	0801e998 	.word	0x0801e998

08016600 <rcl_action_get_zero_initialized_cancel_response>:
 8016600:	b510      	push	{r4, lr}
 8016602:	4c07      	ldr	r4, [pc, #28]	@ (8016620 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016604:	4686      	mov	lr, r0
 8016606:	4684      	mov	ip, r0
 8016608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801660a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801660e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016610:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016614:	6823      	ldr	r3, [r4, #0]
 8016616:	f8cc 3000 	str.w	r3, [ip]
 801661a:	4670      	mov	r0, lr
 801661c:	bd10      	pop	{r4, pc}
 801661e:	bf00      	nop
 8016620:	0801ea24 	.word	0x0801ea24

08016624 <rclc_action_send_result_request>:
 8016624:	b1d0      	cbz	r0, 801665c <rclc_action_send_result_request+0x38>
 8016626:	b500      	push	{lr}
 8016628:	4684      	mov	ip, r0
 801662a:	b087      	sub	sp, #28
 801662c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016630:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8016634:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016638:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801663c:	f10d 0e08 	add.w	lr, sp, #8
 8016640:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016644:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016648:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801664c:	a902      	add	r1, sp, #8
 801664e:	3010      	adds	r0, #16
 8016650:	f7ff fbfa 	bl	8015e48 <rcl_action_send_result_request>
 8016654:	b920      	cbnz	r0, 8016660 <rclc_action_send_result_request+0x3c>
 8016656:	b007      	add	sp, #28
 8016658:	f85d fb04 	ldr.w	pc, [sp], #4
 801665c:	200b      	movs	r0, #11
 801665e:	4770      	bx	lr
 8016660:	9001      	str	r0, [sp, #4]
 8016662:	f7f7 fb01 	bl	800dc68 <rcutils_reset_error>
 8016666:	9801      	ldr	r0, [sp, #4]
 8016668:	b007      	add	sp, #28
 801666a:	f85d fb04 	ldr.w	pc, [sp], #4
 801666e:	bf00      	nop

08016670 <rclc_action_take_goal_handle>:
 8016670:	4603      	mov	r3, r0
 8016672:	b158      	cbz	r0, 801668c <rclc_action_take_goal_handle+0x1c>
 8016674:	6880      	ldr	r0, [r0, #8]
 8016676:	b148      	cbz	r0, 801668c <rclc_action_take_goal_handle+0x1c>
 8016678:	6801      	ldr	r1, [r0, #0]
 801667a:	6099      	str	r1, [r3, #8]
 801667c:	2200      	movs	r2, #0
 801667e:	7202      	strb	r2, [r0, #8]
 8016680:	68d9      	ldr	r1, [r3, #12]
 8016682:	6001      	str	r1, [r0, #0]
 8016684:	6202      	str	r2, [r0, #32]
 8016686:	8482      	strh	r2, [r0, #36]	@ 0x24
 8016688:	60d8      	str	r0, [r3, #12]
 801668a:	4770      	bx	lr
 801668c:	4770      	bx	lr
 801668e:	bf00      	nop

08016690 <rclc_action_remove_used_goal_handle>:
 8016690:	b180      	cbz	r0, 80166b4 <rclc_action_remove_used_goal_handle+0x24>
 8016692:	b179      	cbz	r1, 80166b4 <rclc_action_remove_used_goal_handle+0x24>
 8016694:	68c3      	ldr	r3, [r0, #12]
 8016696:	4299      	cmp	r1, r3
 8016698:	d00d      	beq.n	80166b6 <rclc_action_remove_used_goal_handle+0x26>
 801669a:	b12b      	cbz	r3, 80166a8 <rclc_action_remove_used_goal_handle+0x18>
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	4291      	cmp	r1, r2
 80166a0:	d003      	beq.n	80166aa <rclc_action_remove_used_goal_handle+0x1a>
 80166a2:	4613      	mov	r3, r2
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d1f9      	bne.n	801669c <rclc_action_remove_used_goal_handle+0xc>
 80166a8:	4770      	bx	lr
 80166aa:	680a      	ldr	r2, [r1, #0]
 80166ac:	601a      	str	r2, [r3, #0]
 80166ae:	6883      	ldr	r3, [r0, #8]
 80166b0:	600b      	str	r3, [r1, #0]
 80166b2:	6081      	str	r1, [r0, #8]
 80166b4:	4770      	bx	lr
 80166b6:	680b      	ldr	r3, [r1, #0]
 80166b8:	60c3      	str	r3, [r0, #12]
 80166ba:	e7f8      	b.n	80166ae <rclc_action_remove_used_goal_handle+0x1e>

080166bc <rclc_action_find_goal_handle_by_uuid>:
 80166bc:	b538      	push	{r3, r4, r5, lr}
 80166be:	b180      	cbz	r0, 80166e2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80166c0:	460d      	mov	r5, r1
 80166c2:	b181      	cbz	r1, 80166e6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80166c4:	68c4      	ldr	r4, [r0, #12]
 80166c6:	b914      	cbnz	r4, 80166ce <rclc_action_find_goal_handle_by_uuid+0x12>
 80166c8:	e009      	b.n	80166de <rclc_action_find_goal_handle_by_uuid+0x22>
 80166ca:	6824      	ldr	r4, [r4, #0]
 80166cc:	b13c      	cbz	r4, 80166de <rclc_action_find_goal_handle_by_uuid+0x22>
 80166ce:	2210      	movs	r2, #16
 80166d0:	4629      	mov	r1, r5
 80166d2:	f104 0009 	add.w	r0, r4, #9
 80166d6:	f004 fad1 	bl	801ac7c <memcmp>
 80166da:	2800      	cmp	r0, #0
 80166dc:	d1f5      	bne.n	80166ca <rclc_action_find_goal_handle_by_uuid+0xe>
 80166de:	4620      	mov	r0, r4
 80166e0:	bd38      	pop	{r3, r4, r5, pc}
 80166e2:	4604      	mov	r4, r0
 80166e4:	e7fb      	b.n	80166de <rclc_action_find_goal_handle_by_uuid+0x22>
 80166e6:	460c      	mov	r4, r1
 80166e8:	e7f9      	b.n	80166de <rclc_action_find_goal_handle_by_uuid+0x22>
 80166ea:	bf00      	nop

080166ec <rclc_action_find_first_handle_by_status>:
 80166ec:	b140      	cbz	r0, 8016700 <rclc_action_find_first_handle_by_status+0x14>
 80166ee:	68c0      	ldr	r0, [r0, #12]
 80166f0:	b910      	cbnz	r0, 80166f8 <rclc_action_find_first_handle_by_status+0xc>
 80166f2:	e005      	b.n	8016700 <rclc_action_find_first_handle_by_status+0x14>
 80166f4:	6800      	ldr	r0, [r0, #0]
 80166f6:	b118      	cbz	r0, 8016700 <rclc_action_find_first_handle_by_status+0x14>
 80166f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80166fc:	428b      	cmp	r3, r1
 80166fe:	d1f9      	bne.n	80166f4 <rclc_action_find_first_handle_by_status+0x8>
 8016700:	4770      	bx	lr
 8016702:	bf00      	nop

08016704 <rclc_action_find_first_terminated_handle>:
 8016704:	b140      	cbz	r0, 8016718 <rclc_action_find_first_terminated_handle+0x14>
 8016706:	68c0      	ldr	r0, [r0, #12]
 8016708:	b910      	cbnz	r0, 8016710 <rclc_action_find_first_terminated_handle+0xc>
 801670a:	e005      	b.n	8016718 <rclc_action_find_first_terminated_handle+0x14>
 801670c:	6800      	ldr	r0, [r0, #0]
 801670e:	b118      	cbz	r0, 8016718 <rclc_action_find_first_terminated_handle+0x14>
 8016710:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016714:	2b03      	cmp	r3, #3
 8016716:	ddf9      	ble.n	801670c <rclc_action_find_first_terminated_handle+0x8>
 8016718:	4770      	bx	lr
 801671a:	bf00      	nop

0801671c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801671c:	b170      	cbz	r0, 801673c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801671e:	68c0      	ldr	r0, [r0, #12]
 8016720:	b160      	cbz	r0, 801673c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016722:	b410      	push	{r4}
 8016724:	e001      	b.n	801672a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016726:	6800      	ldr	r0, [r0, #0]
 8016728:	b128      	cbz	r0, 8016736 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801672a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801672e:	4299      	cmp	r1, r3
 8016730:	bf08      	it	eq
 8016732:	4294      	cmpeq	r4, r2
 8016734:	d1f7      	bne.n	8016726 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801673a:	4770      	bx	lr
 801673c:	4770      	bx	lr
 801673e:	bf00      	nop

08016740 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016740:	b170      	cbz	r0, 8016760 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016742:	68c0      	ldr	r0, [r0, #12]
 8016744:	b160      	cbz	r0, 8016760 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016746:	b410      	push	{r4}
 8016748:	e001      	b.n	801674e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801674a:	6800      	ldr	r0, [r0, #0]
 801674c:	b128      	cbz	r0, 801675a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801674e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8016752:	4299      	cmp	r1, r3
 8016754:	bf08      	it	eq
 8016756:	4294      	cmpeq	r4, r2
 8016758:	d1f7      	bne.n	801674a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801675a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801675e:	4770      	bx	lr
 8016760:	4770      	bx	lr
 8016762:	bf00      	nop

08016764 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016764:	b170      	cbz	r0, 8016784 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016766:	68c0      	ldr	r0, [r0, #12]
 8016768:	b160      	cbz	r0, 8016784 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801676a:	b410      	push	{r4}
 801676c:	e001      	b.n	8016772 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801676e:	6800      	ldr	r0, [r0, #0]
 8016770:	b128      	cbz	r0, 801677e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016772:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016776:	4299      	cmp	r1, r3
 8016778:	bf08      	it	eq
 801677a:	4294      	cmpeq	r4, r2
 801677c:	d1f7      	bne.n	801676e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801677e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016782:	4770      	bx	lr
 8016784:	4770      	bx	lr
 8016786:	bf00      	nop

08016788 <rclc_action_find_first_handle_with_goal_response>:
 8016788:	b140      	cbz	r0, 801679c <rclc_action_find_first_handle_with_goal_response+0x14>
 801678a:	68c0      	ldr	r0, [r0, #12]
 801678c:	b910      	cbnz	r0, 8016794 <rclc_action_find_first_handle_with_goal_response+0xc>
 801678e:	e005      	b.n	801679c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016790:	6800      	ldr	r0, [r0, #0]
 8016792:	b118      	cbz	r0, 801679c <rclc_action_find_first_handle_with_goal_response+0x14>
 8016794:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d0f9      	beq.n	8016790 <rclc_action_find_first_handle_with_goal_response+0x8>
 801679c:	4770      	bx	lr
 801679e:	bf00      	nop

080167a0 <rclc_action_find_first_handle_with_result_response>:
 80167a0:	b140      	cbz	r0, 80167b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80167a2:	68c0      	ldr	r0, [r0, #12]
 80167a4:	b910      	cbnz	r0, 80167ac <rclc_action_find_first_handle_with_result_response+0xc>
 80167a6:	e005      	b.n	80167b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80167a8:	6800      	ldr	r0, [r0, #0]
 80167aa:	b118      	cbz	r0, 80167b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80167ac:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d0f9      	beq.n	80167a8 <rclc_action_find_first_handle_with_result_response+0x8>
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop

080167b8 <rclc_action_server_response_goal_request>:
 80167b8:	b198      	cbz	r0, 80167e2 <rclc_action_server_response_goal_request+0x2a>
 80167ba:	b510      	push	{r4, lr}
 80167bc:	6844      	ldr	r4, [r0, #4]
 80167be:	b086      	sub	sp, #24
 80167c0:	2200      	movs	r2, #0
 80167c2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80167c6:	460b      	mov	r3, r1
 80167c8:	9205      	str	r2, [sp, #20]
 80167ca:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80167ce:	aa03      	add	r2, sp, #12
 80167d0:	f104 0010 	add.w	r0, r4, #16
 80167d4:	f88d 300c 	strb.w	r3, [sp, #12]
 80167d8:	f7ff fd52 	bl	8016280 <rcl_action_send_goal_response>
 80167dc:	b918      	cbnz	r0, 80167e6 <rclc_action_server_response_goal_request+0x2e>
 80167de:	b006      	add	sp, #24
 80167e0:	bd10      	pop	{r4, pc}
 80167e2:	200b      	movs	r0, #11
 80167e4:	4770      	bx	lr
 80167e6:	9001      	str	r0, [sp, #4]
 80167e8:	f7f7 fa3e 	bl	800dc68 <rcutils_reset_error>
 80167ec:	9801      	ldr	r0, [sp, #4]
 80167ee:	b006      	add	sp, #24
 80167f0:	bd10      	pop	{r4, pc}
 80167f2:	bf00      	nop
 80167f4:	0000      	movs	r0, r0
	...

080167f8 <rclc_action_server_goal_cancel_accept>:
 80167f8:	b310      	cbz	r0, 8016840 <rclc_action_server_goal_cancel_accept+0x48>
 80167fa:	b510      	push	{r4, lr}
 80167fc:	b090      	sub	sp, #64	@ 0x40
 80167fe:	4604      	mov	r4, r0
 8016800:	a806      	add	r0, sp, #24
 8016802:	f7ff fefd 	bl	8016600 <rcl_action_get_zero_initialized_cancel_response>
 8016806:	2300      	movs	r3, #0
 8016808:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801680c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016810:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8016814:	f88d 3018 	strb.w	r3, [sp, #24]
 8016818:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801681c:	f8cd d01c 	str.w	sp, [sp, #28]
 8016820:	46ec      	mov	ip, sp
 8016822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016826:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016848 <rclc_action_server_goal_cancel_accept+0x50>
 801682a:	6860      	ldr	r0, [r4, #4]
 801682c:	aa06      	add	r2, sp, #24
 801682e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8016832:	3010      	adds	r0, #16
 8016834:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016838:	f7ff fdd2 	bl	80163e0 <rcl_action_send_cancel_response>
 801683c:	b010      	add	sp, #64	@ 0x40
 801683e:	bd10      	pop	{r4, pc}
 8016840:	200b      	movs	r0, #11
 8016842:	4770      	bx	lr
 8016844:	f3af 8000 	nop.w
 8016848:	00000001 	.word	0x00000001
 801684c:	00000001 	.word	0x00000001

08016850 <rclc_action_server_goal_cancel_reject>:
 8016850:	b082      	sub	sp, #8
 8016852:	b530      	push	{r4, r5, lr}
 8016854:	b08b      	sub	sp, #44	@ 0x2c
 8016856:	ac0e      	add	r4, sp, #56	@ 0x38
 8016858:	e884 000c 	stmia.w	r4, {r2, r3}
 801685c:	b188      	cbz	r0, 8016882 <rclc_action_server_goal_cancel_reject+0x32>
 801685e:	4604      	mov	r4, r0
 8016860:	a801      	add	r0, sp, #4
 8016862:	460d      	mov	r5, r1
 8016864:	f7ff fecc 	bl	8016600 <rcl_action_get_zero_initialized_cancel_response>
 8016868:	aa01      	add	r2, sp, #4
 801686a:	a90e      	add	r1, sp, #56	@ 0x38
 801686c:	f104 0010 	add.w	r0, r4, #16
 8016870:	f88d 5004 	strb.w	r5, [sp, #4]
 8016874:	f7ff fdb4 	bl	80163e0 <rcl_action_send_cancel_response>
 8016878:	b00b      	add	sp, #44	@ 0x2c
 801687a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801687e:	b002      	add	sp, #8
 8016880:	4770      	bx	lr
 8016882:	200b      	movs	r0, #11
 8016884:	b00b      	add	sp, #44	@ 0x2c
 8016886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801688a:	b002      	add	sp, #8
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop

08016890 <__atomic_load_8>:
 8016890:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016894:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016898:	4a15      	ldr	r2, [pc, #84]	@ (80168f0 <__atomic_load_8+0x60>)
 801689a:	4b16      	ldr	r3, [pc, #88]	@ (80168f4 <__atomic_load_8+0x64>)
 801689c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80168a0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80168a4:	fb02 f101 	mul.w	r1, r2, r1
 80168a8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80168ac:	fba3 2301 	umull	r2, r3, r3, r1
 80168b0:	091b      	lsrs	r3, r3, #4
 80168b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80168b6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80168ba:	b4f0      	push	{r4, r5, r6, r7}
 80168bc:	4d0e      	ldr	r5, [pc, #56]	@ (80168f8 <__atomic_load_8+0x68>)
 80168be:	1ac9      	subs	r1, r1, r3
 80168c0:	194a      	adds	r2, r1, r5
 80168c2:	f04f 0c01 	mov.w	ip, #1
 80168c6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80168ca:	e8c2 cf44 	strexb	r4, ip, [r2]
 80168ce:	2c00      	cmp	r4, #0
 80168d0:	d1f9      	bne.n	80168c6 <__atomic_load_8+0x36>
 80168d2:	f3bf 8f5b 	dmb	ish
 80168d6:	b2dc      	uxtb	r4, r3
 80168d8:	2c00      	cmp	r4, #0
 80168da:	d1f4      	bne.n	80168c6 <__atomic_load_8+0x36>
 80168dc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80168e0:	f3bf 8f5b 	dmb	ish
 80168e4:	546b      	strb	r3, [r5, r1]
 80168e6:	4630      	mov	r0, r6
 80168e8:	4639      	mov	r1, r7
 80168ea:	bcf0      	pop	{r4, r5, r6, r7}
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	27d4eb2d 	.word	0x27d4eb2d
 80168f4:	b21642c9 	.word	0xb21642c9
 80168f8:	2000d060 	.word	0x2000d060

080168fc <__atomic_store_8>:
 80168fc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016900:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016904:	b570      	push	{r4, r5, r6, lr}
 8016906:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801690a:	4c14      	ldr	r4, [pc, #80]	@ (801695c <__atomic_store_8+0x60>)
 801690c:	4e14      	ldr	r6, [pc, #80]	@ (8016960 <__atomic_store_8+0x64>)
 801690e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016912:	fb04 f101 	mul.w	r1, r4, r1
 8016916:	4c13      	ldr	r4, [pc, #76]	@ (8016964 <__atomic_store_8+0x68>)
 8016918:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801691c:	fba4 5401 	umull	r5, r4, r4, r1
 8016920:	0924      	lsrs	r4, r4, #4
 8016922:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016926:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801692a:	eba1 0e04 	sub.w	lr, r1, r4
 801692e:	f04f 0501 	mov.w	r5, #1
 8016932:	eb0e 0c06 	add.w	ip, lr, r6
 8016936:	e8dc 1f4f 	ldrexb	r1, [ip]
 801693a:	e8cc 5f44 	strexb	r4, r5, [ip]
 801693e:	2c00      	cmp	r4, #0
 8016940:	d1f9      	bne.n	8016936 <__atomic_store_8+0x3a>
 8016942:	f3bf 8f5b 	dmb	ish
 8016946:	b2cc      	uxtb	r4, r1
 8016948:	2c00      	cmp	r4, #0
 801694a:	d1f4      	bne.n	8016936 <__atomic_store_8+0x3a>
 801694c:	e9c0 2300 	strd	r2, r3, [r0]
 8016950:	f3bf 8f5b 	dmb	ish
 8016954:	f806 100e 	strb.w	r1, [r6, lr]
 8016958:	bd70      	pop	{r4, r5, r6, pc}
 801695a:	bf00      	nop
 801695c:	27d4eb2d 	.word	0x27d4eb2d
 8016960:	2000d060 	.word	0x2000d060
 8016964:	b21642c9 	.word	0xb21642c9

08016968 <__atomic_exchange_8>:
 8016968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801696a:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801696e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8016972:	4917      	ldr	r1, [pc, #92]	@ (80169d0 <__atomic_exchange_8+0x68>)
 8016974:	4f17      	ldr	r7, [pc, #92]	@ (80169d4 <__atomic_exchange_8+0x6c>)
 8016976:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801697a:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801697e:	fb01 fe0e 	mul.w	lr, r1, lr
 8016982:	4915      	ldr	r1, [pc, #84]	@ (80169d8 <__atomic_exchange_8+0x70>)
 8016984:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8016988:	4606      	mov	r6, r0
 801698a:	fba1 010e 	umull	r0, r1, r1, lr
 801698e:	0909      	lsrs	r1, r1, #4
 8016990:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8016994:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8016998:	ebae 0e01 	sub.w	lr, lr, r1
 801699c:	f04f 0501 	mov.w	r5, #1
 80169a0:	eb0e 0107 	add.w	r1, lr, r7
 80169a4:	e8d1 cf4f 	ldrexb	ip, [r1]
 80169a8:	e8c1 5f40 	strexb	r0, r5, [r1]
 80169ac:	2800      	cmp	r0, #0
 80169ae:	d1f9      	bne.n	80169a4 <__atomic_exchange_8+0x3c>
 80169b0:	f3bf 8f5b 	dmb	ish
 80169b4:	fa5f f48c 	uxtb.w	r4, ip
 80169b8:	2c00      	cmp	r4, #0
 80169ba:	d1f3      	bne.n	80169a4 <__atomic_exchange_8+0x3c>
 80169bc:	e9d6 0100 	ldrd	r0, r1, [r6]
 80169c0:	e9c6 2300 	strd	r2, r3, [r6]
 80169c4:	f3bf 8f5b 	dmb	ish
 80169c8:	f807 c00e 	strb.w	ip, [r7, lr]
 80169cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169ce:	bf00      	nop
 80169d0:	27d4eb2d 	.word	0x27d4eb2d
 80169d4:	2000d060 	.word	0x2000d060
 80169d8:	b21642c9 	.word	0xb21642c9

080169dc <rcutils_get_env>:
 80169dc:	b150      	cbz	r0, 80169f4 <rcutils_get_env+0x18>
 80169de:	b510      	push	{r4, lr}
 80169e0:	460c      	mov	r4, r1
 80169e2:	b909      	cbnz	r1, 80169e8 <rcutils_get_env+0xc>
 80169e4:	4806      	ldr	r0, [pc, #24]	@ (8016a00 <rcutils_get_env+0x24>)
 80169e6:	bd10      	pop	{r4, pc}
 80169e8:	f002 fffc 	bl	80199e4 <getenv>
 80169ec:	b120      	cbz	r0, 80169f8 <rcutils_get_env+0x1c>
 80169ee:	6020      	str	r0, [r4, #0]
 80169f0:	2000      	movs	r0, #0
 80169f2:	bd10      	pop	{r4, pc}
 80169f4:	4803      	ldr	r0, [pc, #12]	@ (8016a04 <rcutils_get_env+0x28>)
 80169f6:	4770      	bx	lr
 80169f8:	4b03      	ldr	r3, [pc, #12]	@ (8016a08 <rcutils_get_env+0x2c>)
 80169fa:	6023      	str	r3, [r4, #0]
 80169fc:	e7f8      	b.n	80169f0 <rcutils_get_env+0x14>
 80169fe:	bf00      	nop
 8016a00:	0801dccc 	.word	0x0801dccc
 8016a04:	0801dcb0 	.word	0x0801dcb0
 8016a08:	0801e18c 	.word	0x0801e18c

08016a0c <rcutils_format_string_limit>:
 8016a0c:	b40f      	push	{r0, r1, r2, r3}
 8016a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a10:	b083      	sub	sp, #12
 8016a12:	ac08      	add	r4, sp, #32
 8016a14:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016a1a:	b376      	cbz	r6, 8016a7a <rcutils_format_string_limit+0x6e>
 8016a1c:	4620      	mov	r0, r4
 8016a1e:	f7f7 f8fd 	bl	800dc1c <rcutils_allocator_is_valid>
 8016a22:	b350      	cbz	r0, 8016a7a <rcutils_format_string_limit+0x6e>
 8016a24:	2100      	movs	r1, #0
 8016a26:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016a28:	4632      	mov	r2, r6
 8016a2a:	4608      	mov	r0, r1
 8016a2c:	e9cd 3300 	strd	r3, r3, [sp]
 8016a30:	f000 f8f8 	bl	8016c24 <rcutils_vsnprintf>
 8016a34:	1c43      	adds	r3, r0, #1
 8016a36:	4605      	mov	r5, r0
 8016a38:	d01f      	beq.n	8016a7a <rcutils_format_string_limit+0x6e>
 8016a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016a3c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016a3e:	1c47      	adds	r7, r0, #1
 8016a40:	429f      	cmp	r7, r3
 8016a42:	bf84      	itt	hi
 8016a44:	461f      	movhi	r7, r3
 8016a46:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8016a4a:	4638      	mov	r0, r7
 8016a4c:	9b08      	ldr	r3, [sp, #32]
 8016a4e:	4798      	blx	r3
 8016a50:	4604      	mov	r4, r0
 8016a52:	b190      	cbz	r0, 8016a7a <rcutils_format_string_limit+0x6e>
 8016a54:	9b01      	ldr	r3, [sp, #4]
 8016a56:	4632      	mov	r2, r6
 8016a58:	4639      	mov	r1, r7
 8016a5a:	f000 f8e3 	bl	8016c24 <rcutils_vsnprintf>
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	db07      	blt.n	8016a72 <rcutils_format_string_limit+0x66>
 8016a62:	2300      	movs	r3, #0
 8016a64:	5563      	strb	r3, [r4, r5]
 8016a66:	4620      	mov	r0, r4
 8016a68:	b003      	add	sp, #12
 8016a6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a6e:	b004      	add	sp, #16
 8016a70:	4770      	bx	lr
 8016a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016a76:	4620      	mov	r0, r4
 8016a78:	4798      	blx	r3
 8016a7a:	2400      	movs	r4, #0
 8016a7c:	e7f3      	b.n	8016a66 <rcutils_format_string_limit+0x5a>
 8016a7e:	bf00      	nop

08016a80 <rcutils_repl_str>:
 8016a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a84:	4699      	mov	r9, r3
 8016a86:	b089      	sub	sp, #36	@ 0x24
 8016a88:	4603      	mov	r3, r0
 8016a8a:	4648      	mov	r0, r9
 8016a8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8016a90:	4698      	mov	r8, r3
 8016a92:	9300      	str	r3, [sp, #0]
 8016a94:	460c      	mov	r4, r1
 8016a96:	f7f7 f8c1 	bl	800dc1c <rcutils_allocator_is_valid>
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	f000 80a3 	beq.w	8016be6 <rcutils_repl_str+0x166>
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	f7e9 fbdd 	bl	8000260 <strlen>
 8016aa6:	f04f 0a00 	mov.w	sl, #0
 8016aaa:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8016aae:	9001      	str	r0, [sp, #4]
 8016ab0:	4657      	mov	r7, sl
 8016ab2:	4655      	mov	r5, sl
 8016ab4:	2610      	movs	r6, #16
 8016ab6:	e01e      	b.n	8016af6 <rcutils_repl_str+0x76>
 8016ab8:	3501      	adds	r5, #1
 8016aba:	45aa      	cmp	sl, r5
 8016abc:	d212      	bcs.n	8016ae4 <rcutils_repl_str+0x64>
 8016abe:	44b2      	add	sl, r6
 8016ac0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016ac4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8016ac8:	4798      	blx	r3
 8016aca:	2800      	cmp	r0, #0
 8016acc:	f000 8088 	beq.w	8016be0 <rcutils_repl_str+0x160>
 8016ad0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016ad4:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8016ad8:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8016adc:	4607      	mov	r7, r0
 8016ade:	bf28      	it	cs
 8016ae0:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8016ae4:	9a00      	ldr	r2, [sp, #0]
 8016ae6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8016aea:	1aa2      	subs	r2, r4, r2
 8016aec:	f843 2c04 	str.w	r2, [r3, #-4]
 8016af0:	9b01      	ldr	r3, [sp, #4]
 8016af2:	eb04 0803 	add.w	r8, r4, r3
 8016af6:	9902      	ldr	r1, [sp, #8]
 8016af8:	4640      	mov	r0, r8
 8016afa:	f004 f922 	bl	801ad42 <strstr>
 8016afe:	4604      	mov	r4, r0
 8016b00:	465a      	mov	r2, fp
 8016b02:	4638      	mov	r0, r7
 8016b04:	2c00      	cmp	r4, #0
 8016b06:	d1d7      	bne.n	8016ab8 <rcutils_repl_str+0x38>
 8016b08:	4640      	mov	r0, r8
 8016b0a:	f7e9 fba9 	bl	8000260 <strlen>
 8016b0e:	9b00      	ldr	r3, [sp, #0]
 8016b10:	eba8 0803 	sub.w	r8, r8, r3
 8016b14:	eb08 0300 	add.w	r3, r8, r0
 8016b18:	9304      	str	r3, [sp, #16]
 8016b1a:	f8d9 8000 	ldr.w	r8, [r9]
 8016b1e:	2d00      	cmp	r5, #0
 8016b20:	d03f      	beq.n	8016ba2 <rcutils_repl_str+0x122>
 8016b22:	9803      	ldr	r0, [sp, #12]
 8016b24:	f7e9 fb9c 	bl	8000260 <strlen>
 8016b28:	4606      	mov	r6, r0
 8016b2a:	9801      	ldr	r0, [sp, #4]
 8016b2c:	9a04      	ldr	r2, [sp, #16]
 8016b2e:	1a33      	subs	r3, r6, r0
 8016b30:	fb05 2a03 	mla	sl, r5, r3, r2
 8016b34:	4659      	mov	r1, fp
 8016b36:	f10a 0001 	add.w	r0, sl, #1
 8016b3a:	47c0      	blx	r8
 8016b3c:	4683      	mov	fp, r0
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	d04e      	beq.n	8016be0 <rcutils_repl_str+0x160>
 8016b42:	683a      	ldr	r2, [r7, #0]
 8016b44:	9900      	ldr	r1, [sp, #0]
 8016b46:	f004 f9a2 	bl	801ae8e <memcpy>
 8016b4a:	683b      	ldr	r3, [r7, #0]
 8016b4c:	9706      	str	r7, [sp, #24]
 8016b4e:	1e6a      	subs	r2, r5, #1
 8016b50:	445b      	add	r3, fp
 8016b52:	46a8      	mov	r8, r5
 8016b54:	9202      	str	r2, [sp, #8]
 8016b56:	4625      	mov	r5, r4
 8016b58:	f8cd 901c 	str.w	r9, [sp, #28]
 8016b5c:	461c      	mov	r4, r3
 8016b5e:	9903      	ldr	r1, [sp, #12]
 8016b60:	4632      	mov	r2, r6
 8016b62:	4620      	mov	r0, r4
 8016b64:	f004 f993 	bl	801ae8e <memcpy>
 8016b68:	9b01      	ldr	r3, [sp, #4]
 8016b6a:	f857 2b04 	ldr.w	r2, [r7], #4
 8016b6e:	eb02 0c03 	add.w	ip, r2, r3
 8016b72:	9b00      	ldr	r3, [sp, #0]
 8016b74:	eb03 010c 	add.w	r1, r3, ip
 8016b78:	9b02      	ldr	r3, [sp, #8]
 8016b7a:	4434      	add	r4, r6
 8016b7c:	429d      	cmp	r5, r3
 8016b7e:	4620      	mov	r0, r4
 8016b80:	d022      	beq.n	8016bc8 <rcutils_repl_str+0x148>
 8016b82:	683a      	ldr	r2, [r7, #0]
 8016b84:	eba2 090c 	sub.w	r9, r2, ip
 8016b88:	464a      	mov	r2, r9
 8016b8a:	3501      	adds	r5, #1
 8016b8c:	f004 f97f 	bl	801ae8e <memcpy>
 8016b90:	45a8      	cmp	r8, r5
 8016b92:	444c      	add	r4, r9
 8016b94:	d1e3      	bne.n	8016b5e <rcutils_repl_str+0xde>
 8016b96:	2300      	movs	r3, #0
 8016b98:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8016b9c:	f80b 300a 	strb.w	r3, [fp, sl]
 8016ba0:	e008      	b.n	8016bb4 <rcutils_repl_str+0x134>
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	4659      	mov	r1, fp
 8016ba6:	3001      	adds	r0, #1
 8016ba8:	47c0      	blx	r8
 8016baa:	4683      	mov	fp, r0
 8016bac:	b110      	cbz	r0, 8016bb4 <rcutils_repl_str+0x134>
 8016bae:	9900      	ldr	r1, [sp, #0]
 8016bb0:	f004 f965 	bl	801ae7e <strcpy>
 8016bb4:	4638      	mov	r0, r7
 8016bb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016bba:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016bbe:	4798      	blx	r3
 8016bc0:	4658      	mov	r0, fp
 8016bc2:	b009      	add	sp, #36	@ 0x24
 8016bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc8:	9b04      	ldr	r3, [sp, #16]
 8016bca:	eba3 020c 	sub.w	r2, r3, ip
 8016bce:	9205      	str	r2, [sp, #20]
 8016bd0:	3501      	adds	r5, #1
 8016bd2:	f004 f95c 	bl	801ae8e <memcpy>
 8016bd6:	9a05      	ldr	r2, [sp, #20]
 8016bd8:	45a8      	cmp	r8, r5
 8016bda:	4414      	add	r4, r2
 8016bdc:	d1bf      	bne.n	8016b5e <rcutils_repl_str+0xde>
 8016bde:	e7da      	b.n	8016b96 <rcutils_repl_str+0x116>
 8016be0:	f04f 0b00 	mov.w	fp, #0
 8016be4:	e7e6      	b.n	8016bb4 <rcutils_repl_str+0x134>
 8016be6:	4683      	mov	fp, r0
 8016be8:	4658      	mov	r0, fp
 8016bea:	b009      	add	sp, #36	@ 0x24
 8016bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bf0 <rcutils_snprintf>:
 8016bf0:	b40c      	push	{r2, r3}
 8016bf2:	b530      	push	{r4, r5, lr}
 8016bf4:	b083      	sub	sp, #12
 8016bf6:	ab06      	add	r3, sp, #24
 8016bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bfc:	9301      	str	r3, [sp, #4]
 8016bfe:	b152      	cbz	r2, 8016c16 <rcutils_snprintf+0x26>
 8016c00:	b138      	cbz	r0, 8016c12 <rcutils_snprintf+0x22>
 8016c02:	b141      	cbz	r1, 8016c16 <rcutils_snprintf+0x26>
 8016c04:	f003 ff9a 	bl	801ab3c <vsniprintf>
 8016c08:	b003      	add	sp, #12
 8016c0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c0e:	b002      	add	sp, #8
 8016c10:	4770      	bx	lr
 8016c12:	2900      	cmp	r1, #0
 8016c14:	d0f6      	beq.n	8016c04 <rcutils_snprintf+0x14>
 8016c16:	f004 f905 	bl	801ae24 <__errno>
 8016c1a:	2316      	movs	r3, #22
 8016c1c:	6003      	str	r3, [r0, #0]
 8016c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c22:	e7f1      	b.n	8016c08 <rcutils_snprintf+0x18>

08016c24 <rcutils_vsnprintf>:
 8016c24:	b570      	push	{r4, r5, r6, lr}
 8016c26:	b13a      	cbz	r2, 8016c38 <rcutils_vsnprintf+0x14>
 8016c28:	b120      	cbz	r0, 8016c34 <rcutils_vsnprintf+0x10>
 8016c2a:	b129      	cbz	r1, 8016c38 <rcutils_vsnprintf+0x14>
 8016c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c30:	f003 bf84 	b.w	801ab3c <vsniprintf>
 8016c34:	2900      	cmp	r1, #0
 8016c36:	d0f9      	beq.n	8016c2c <rcutils_vsnprintf+0x8>
 8016c38:	f004 f8f4 	bl	801ae24 <__errno>
 8016c3c:	2316      	movs	r3, #22
 8016c3e:	6003      	str	r3, [r0, #0]
 8016c40:	f04f 30ff 	mov.w	r0, #4294967295
 8016c44:	bd70      	pop	{r4, r5, r6, pc}
 8016c46:	bf00      	nop

08016c48 <rcutils_strdup>:
 8016c48:	b084      	sub	sp, #16
 8016c4a:	b570      	push	{r4, r5, r6, lr}
 8016c4c:	b086      	sub	sp, #24
 8016c4e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8016c52:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8016c56:	4604      	mov	r4, r0
 8016c58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c5c:	f10d 0e04 	add.w	lr, sp, #4
 8016c60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c64:	f8dc 3000 	ldr.w	r3, [ip]
 8016c68:	f8ce 3000 	str.w	r3, [lr]
 8016c6c:	b304      	cbz	r4, 8016cb0 <rcutils_strdup+0x68>
 8016c6e:	a801      	add	r0, sp, #4
 8016c70:	f7f6 ffd4 	bl	800dc1c <rcutils_allocator_is_valid>
 8016c74:	b1e0      	cbz	r0, 8016cb0 <rcutils_strdup+0x68>
 8016c76:	f04f 32ff 	mov.w	r2, #4294967295
 8016c7a:	2100      	movs	r1, #0
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	f7e9 fa9f 	bl	80001c0 <memchr>
 8016c82:	b190      	cbz	r0, 8016caa <rcutils_strdup+0x62>
 8016c84:	1b06      	subs	r6, r0, r4
 8016c86:	1c70      	adds	r0, r6, #1
 8016c88:	9b01      	ldr	r3, [sp, #4]
 8016c8a:	9905      	ldr	r1, [sp, #20]
 8016c8c:	4798      	blx	r3
 8016c8e:	4605      	mov	r5, r0
 8016c90:	b128      	cbz	r0, 8016c9e <rcutils_strdup+0x56>
 8016c92:	4632      	mov	r2, r6
 8016c94:	4621      	mov	r1, r4
 8016c96:	f004 f8fa 	bl	801ae8e <memcpy>
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	55ab      	strb	r3, [r5, r6]
 8016c9e:	4628      	mov	r0, r5
 8016ca0:	b006      	add	sp, #24
 8016ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ca6:	b004      	add	sp, #16
 8016ca8:	4770      	bx	lr
 8016caa:	f04f 36ff 	mov.w	r6, #4294967295
 8016cae:	e7eb      	b.n	8016c88 <rcutils_strdup+0x40>
 8016cb0:	2500      	movs	r5, #0
 8016cb2:	e7f4      	b.n	8016c9e <rcutils_strdup+0x56>

08016cb4 <rcutils_strndup>:
 8016cb4:	b082      	sub	sp, #8
 8016cb6:	b570      	push	{r4, r5, r6, lr}
 8016cb8:	ac04      	add	r4, sp, #16
 8016cba:	e884 000c 	stmia.w	r4, {r2, r3}
 8016cbe:	b1e8      	cbz	r0, 8016cfc <rcutils_strndup+0x48>
 8016cc0:	4605      	mov	r5, r0
 8016cc2:	a804      	add	r0, sp, #16
 8016cc4:	460c      	mov	r4, r1
 8016cc6:	f7f6 ffa9 	bl	800dc1c <rcutils_allocator_is_valid>
 8016cca:	b1b8      	cbz	r0, 8016cfc <rcutils_strndup+0x48>
 8016ccc:	4622      	mov	r2, r4
 8016cce:	2100      	movs	r1, #0
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	f7e9 fa75 	bl	80001c0 <memchr>
 8016cd6:	b100      	cbz	r0, 8016cda <rcutils_strndup+0x26>
 8016cd8:	1b44      	subs	r4, r0, r5
 8016cda:	9b04      	ldr	r3, [sp, #16]
 8016cdc:	9908      	ldr	r1, [sp, #32]
 8016cde:	1c60      	adds	r0, r4, #1
 8016ce0:	4798      	blx	r3
 8016ce2:	4606      	mov	r6, r0
 8016ce4:	b128      	cbz	r0, 8016cf2 <rcutils_strndup+0x3e>
 8016ce6:	4622      	mov	r2, r4
 8016ce8:	4629      	mov	r1, r5
 8016cea:	f004 f8d0 	bl	801ae8e <memcpy>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	5533      	strb	r3, [r6, r4]
 8016cf2:	4630      	mov	r0, r6
 8016cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cf8:	b002      	add	sp, #8
 8016cfa:	4770      	bx	lr
 8016cfc:	2600      	movs	r6, #0
 8016cfe:	4630      	mov	r0, r6
 8016d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d04:	b002      	add	sp, #8
 8016d06:	4770      	bx	lr

08016d08 <rcutils_get_zero_initialized_string_map>:
 8016d08:	4b01      	ldr	r3, [pc, #4]	@ (8016d10 <rcutils_get_zero_initialized_string_map+0x8>)
 8016d0a:	2000      	movs	r0, #0
 8016d0c:	6018      	str	r0, [r3, #0]
 8016d0e:	4770      	bx	lr
 8016d10:	2000d078 	.word	0x2000d078

08016d14 <rcutils_string_map_reserve>:
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d04e      	beq.n	8016db6 <rcutils_string_map_reserve+0xa2>
 8016d18:	b530      	push	{r4, r5, lr}
 8016d1a:	6803      	ldr	r3, [r0, #0]
 8016d1c:	b087      	sub	sp, #28
 8016d1e:	4604      	mov	r4, r0
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d043      	beq.n	8016dac <rcutils_string_map_reserve+0x98>
 8016d24:	f103 0c0c 	add.w	ip, r3, #12
 8016d28:	460d      	mov	r5, r1
 8016d2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016d2e:	f10d 0e04 	add.w	lr, sp, #4
 8016d32:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016d36:	f8dc 3000 	ldr.w	r3, [ip]
 8016d3a:	f8ce 3000 	str.w	r3, [lr]
 8016d3e:	a801      	add	r0, sp, #4
 8016d40:	f7f6 ff6c 	bl	800dc1c <rcutils_allocator_is_valid>
 8016d44:	b308      	cbz	r0, 8016d8a <rcutils_string_map_reserve+0x76>
 8016d46:	6823      	ldr	r3, [r4, #0]
 8016d48:	6899      	ldr	r1, [r3, #8]
 8016d4a:	42a9      	cmp	r1, r5
 8016d4c:	d829      	bhi.n	8016da2 <rcutils_string_map_reserve+0x8e>
 8016d4e:	685a      	ldr	r2, [r3, #4]
 8016d50:	42aa      	cmp	r2, r5
 8016d52:	d024      	beq.n	8016d9e <rcutils_string_map_reserve+0x8a>
 8016d54:	b1e5      	cbz	r5, 8016d90 <rcutils_string_map_reserve+0x7c>
 8016d56:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8016d5a:	d22a      	bcs.n	8016db2 <rcutils_string_map_reserve+0x9e>
 8016d5c:	6818      	ldr	r0, [r3, #0]
 8016d5e:	9a05      	ldr	r2, [sp, #20]
 8016d60:	9b03      	ldr	r3, [sp, #12]
 8016d62:	00e9      	lsls	r1, r5, #3
 8016d64:	4798      	blx	r3
 8016d66:	b320      	cbz	r0, 8016db2 <rcutils_string_map_reserve+0x9e>
 8016d68:	6824      	ldr	r4, [r4, #0]
 8016d6a:	6861      	ldr	r1, [r4, #4]
 8016d6c:	6020      	str	r0, [r4, #0]
 8016d6e:	42a9      	cmp	r1, r5
 8016d70:	d214      	bcs.n	8016d9c <rcutils_string_map_reserve+0x88>
 8016d72:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8016d76:	1a69      	subs	r1, r5, r1
 8016d78:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	e9c3 2200 	strd	r2, r2, [r3]
 8016d82:	3308      	adds	r3, #8
 8016d84:	428b      	cmp	r3, r1
 8016d86:	d1fa      	bne.n	8016d7e <rcutils_string_map_reserve+0x6a>
 8016d88:	e008      	b.n	8016d9c <rcutils_string_map_reserve+0x88>
 8016d8a:	200b      	movs	r0, #11
 8016d8c:	b007      	add	sp, #28
 8016d8e:	bd30      	pop	{r4, r5, pc}
 8016d90:	9a02      	ldr	r2, [sp, #8]
 8016d92:	9905      	ldr	r1, [sp, #20]
 8016d94:	6818      	ldr	r0, [r3, #0]
 8016d96:	4790      	blx	r2
 8016d98:	6824      	ldr	r4, [r4, #0]
 8016d9a:	6025      	str	r5, [r4, #0]
 8016d9c:	6065      	str	r5, [r4, #4]
 8016d9e:	2000      	movs	r0, #0
 8016da0:	e7f4      	b.n	8016d8c <rcutils_string_map_reserve+0x78>
 8016da2:	4620      	mov	r0, r4
 8016da4:	f7ff ffb6 	bl	8016d14 <rcutils_string_map_reserve>
 8016da8:	b007      	add	sp, #28
 8016daa:	bd30      	pop	{r4, r5, pc}
 8016dac:	201f      	movs	r0, #31
 8016dae:	b007      	add	sp, #28
 8016db0:	bd30      	pop	{r4, r5, pc}
 8016db2:	200a      	movs	r0, #10
 8016db4:	e7ea      	b.n	8016d8c <rcutils_string_map_reserve+0x78>
 8016db6:	200b      	movs	r0, #11
 8016db8:	4770      	bx	lr
 8016dba:	bf00      	nop

08016dbc <rcutils_string_map_init>:
 8016dbc:	b082      	sub	sp, #8
 8016dbe:	b570      	push	{r4, r5, r6, lr}
 8016dc0:	ac04      	add	r4, sp, #16
 8016dc2:	e884 000c 	stmia.w	r4, {r2, r3}
 8016dc6:	b378      	cbz	r0, 8016e28 <rcutils_string_map_init+0x6c>
 8016dc8:	6806      	ldr	r6, [r0, #0]
 8016dca:	4604      	mov	r4, r0
 8016dcc:	b12e      	cbz	r6, 8016dda <rcutils_string_map_init+0x1e>
 8016dce:	251e      	movs	r5, #30
 8016dd0:	4628      	mov	r0, r5
 8016dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dd6:	b002      	add	sp, #8
 8016dd8:	4770      	bx	lr
 8016dda:	a804      	add	r0, sp, #16
 8016ddc:	460d      	mov	r5, r1
 8016dde:	f7f6 ff1d 	bl	800dc1c <rcutils_allocator_is_valid>
 8016de2:	b308      	cbz	r0, 8016e28 <rcutils_string_map_init+0x6c>
 8016de4:	9b04      	ldr	r3, [sp, #16]
 8016de6:	9908      	ldr	r1, [sp, #32]
 8016de8:	2020      	movs	r0, #32
 8016dea:	4798      	blx	r3
 8016dec:	6020      	str	r0, [r4, #0]
 8016dee:	b308      	cbz	r0, 8016e34 <rcutils_string_map_init+0x78>
 8016df0:	f10d 0e10 	add.w	lr, sp, #16
 8016df4:	e9c0 6600 	strd	r6, r6, [r0]
 8016df8:	6086      	str	r6, [r0, #8]
 8016dfa:	f100 0c0c 	add.w	ip, r0, #12
 8016dfe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e06:	f8de 3000 	ldr.w	r3, [lr]
 8016e0a:	f8cc 3000 	str.w	r3, [ip]
 8016e0e:	4629      	mov	r1, r5
 8016e10:	4620      	mov	r0, r4
 8016e12:	f7ff ff7f 	bl	8016d14 <rcutils_string_map_reserve>
 8016e16:	4605      	mov	r5, r0
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	d0d9      	beq.n	8016dd0 <rcutils_string_map_init+0x14>
 8016e1c:	9b05      	ldr	r3, [sp, #20]
 8016e1e:	9908      	ldr	r1, [sp, #32]
 8016e20:	6820      	ldr	r0, [r4, #0]
 8016e22:	4798      	blx	r3
 8016e24:	6026      	str	r6, [r4, #0]
 8016e26:	e7d3      	b.n	8016dd0 <rcutils_string_map_init+0x14>
 8016e28:	250b      	movs	r5, #11
 8016e2a:	4628      	mov	r0, r5
 8016e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e30:	b002      	add	sp, #8
 8016e32:	4770      	bx	lr
 8016e34:	250a      	movs	r5, #10
 8016e36:	e7cb      	b.n	8016dd0 <rcutils_string_map_init+0x14>

08016e38 <rcutils_string_map_fini>:
 8016e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e3c:	b086      	sub	sp, #24
 8016e3e:	2800      	cmp	r0, #0
 8016e40:	d04f      	beq.n	8016ee2 <rcutils_string_map_fini+0xaa>
 8016e42:	6805      	ldr	r5, [r0, #0]
 8016e44:	4606      	mov	r6, r0
 8016e46:	2d00      	cmp	r5, #0
 8016e48:	d046      	beq.n	8016ed8 <rcutils_string_map_fini+0xa0>
 8016e4a:	686b      	ldr	r3, [r5, #4]
 8016e4c:	b353      	cbz	r3, 8016ea4 <rcutils_string_map_fini+0x6c>
 8016e4e:	2400      	movs	r4, #0
 8016e50:	682a      	ldr	r2, [r5, #0]
 8016e52:	4627      	mov	r7, r4
 8016e54:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8016e58:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8016e5c:	b1f8      	cbz	r0, 8016e9e <rcutils_string_map_fini+0x66>
 8016e5e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8016e62:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016e66:	4651      	mov	r1, sl
 8016e68:	47c8      	blx	r9
 8016e6a:	682b      	ldr	r3, [r5, #0]
 8016e6c:	eb03 0208 	add.w	r2, r3, r8
 8016e70:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8016e74:	6850      	ldr	r0, [r2, #4]
 8016e76:	4651      	mov	r1, sl
 8016e78:	47c8      	blx	r9
 8016e7a:	682a      	ldr	r2, [r5, #0]
 8016e7c:	68ab      	ldr	r3, [r5, #8]
 8016e7e:	4442      	add	r2, r8
 8016e80:	3b01      	subs	r3, #1
 8016e82:	6057      	str	r7, [r2, #4]
 8016e84:	60ab      	str	r3, [r5, #8]
 8016e86:	6835      	ldr	r5, [r6, #0]
 8016e88:	686b      	ldr	r3, [r5, #4]
 8016e8a:	3401      	adds	r4, #1
 8016e8c:	429c      	cmp	r4, r3
 8016e8e:	d209      	bcs.n	8016ea4 <rcutils_string_map_fini+0x6c>
 8016e90:	682a      	ldr	r2, [r5, #0]
 8016e92:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8016e96:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8016e9a:	2800      	cmp	r0, #0
 8016e9c:	d1df      	bne.n	8016e5e <rcutils_string_map_fini+0x26>
 8016e9e:	3401      	adds	r4, #1
 8016ea0:	42a3      	cmp	r3, r4
 8016ea2:	d8d7      	bhi.n	8016e54 <rcutils_string_map_fini+0x1c>
 8016ea4:	2100      	movs	r1, #0
 8016ea6:	4630      	mov	r0, r6
 8016ea8:	f7ff ff34 	bl	8016d14 <rcutils_string_map_reserve>
 8016eac:	4604      	mov	r4, r0
 8016eae:	b118      	cbz	r0, 8016eb8 <rcutils_string_map_fini+0x80>
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	b006      	add	sp, #24
 8016eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eb8:	6835      	ldr	r5, [r6, #0]
 8016eba:	350c      	adds	r5, #12
 8016ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ebe:	af01      	add	r7, sp, #4
 8016ec0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016ec2:	682b      	ldr	r3, [r5, #0]
 8016ec4:	603b      	str	r3, [r7, #0]
 8016ec6:	a801      	add	r0, sp, #4
 8016ec8:	f7f6 fea8 	bl	800dc1c <rcutils_allocator_is_valid>
 8016ecc:	b148      	cbz	r0, 8016ee2 <rcutils_string_map_fini+0xaa>
 8016ece:	9b02      	ldr	r3, [sp, #8]
 8016ed0:	9905      	ldr	r1, [sp, #20]
 8016ed2:	6830      	ldr	r0, [r6, #0]
 8016ed4:	4798      	blx	r3
 8016ed6:	6034      	str	r4, [r6, #0]
 8016ed8:	2400      	movs	r4, #0
 8016eda:	4620      	mov	r0, r4
 8016edc:	b006      	add	sp, #24
 8016ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ee2:	240b      	movs	r4, #11
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	b006      	add	sp, #24
 8016ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016eec <rcutils_string_map_getn>:
 8016eec:	b338      	cbz	r0, 8016f3e <rcutils_string_map_getn+0x52>
 8016eee:	6800      	ldr	r0, [r0, #0]
 8016ef0:	b328      	cbz	r0, 8016f3e <rcutils_string_map_getn+0x52>
 8016ef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ef6:	460e      	mov	r6, r1
 8016ef8:	b1c1      	cbz	r1, 8016f2c <rcutils_string_map_getn+0x40>
 8016efa:	e9d0 9800 	ldrd	r9, r8, [r0]
 8016efe:	f1b8 0f00 	cmp.w	r8, #0
 8016f02:	d013      	beq.n	8016f2c <rcutils_string_map_getn+0x40>
 8016f04:	4617      	mov	r7, r2
 8016f06:	2400      	movs	r4, #0
 8016f08:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	b155      	cbz	r5, 8016f26 <rcutils_string_map_getn+0x3a>
 8016f10:	f7e9 f9a6 	bl	8000260 <strlen>
 8016f14:	42b8      	cmp	r0, r7
 8016f16:	4602      	mov	r2, r0
 8016f18:	4629      	mov	r1, r5
 8016f1a:	bf38      	it	cc
 8016f1c:	463a      	movcc	r2, r7
 8016f1e:	4630      	mov	r0, r6
 8016f20:	f003 feea 	bl	801acf8 <strncmp>
 8016f24:	b128      	cbz	r0, 8016f32 <rcutils_string_map_getn+0x46>
 8016f26:	3401      	adds	r4, #1
 8016f28:	45a0      	cmp	r8, r4
 8016f2a:	d1ed      	bne.n	8016f08 <rcutils_string_map_getn+0x1c>
 8016f2c:	2000      	movs	r0, #0
 8016f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f32:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8016f36:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8016f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f3e:	4770      	bx	lr

08016f40 <rmw_get_zero_initialized_discovery_options>:
 8016f40:	b510      	push	{r4, lr}
 8016f42:	2220      	movs	r2, #32
 8016f44:	4604      	mov	r4, r0
 8016f46:	2100      	movs	r1, #0
 8016f48:	f003 fec1 	bl	801acce <memset>
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	bd10      	pop	{r4, pc}

08016f50 <rmw_discovery_options_init>:
 8016f50:	b328      	cbz	r0, 8016f9e <rmw_discovery_options_init+0x4e>
 8016f52:	b570      	push	{r4, r5, r6, lr}
 8016f54:	4604      	mov	r4, r0
 8016f56:	4610      	mov	r0, r2
 8016f58:	460e      	mov	r6, r1
 8016f5a:	4615      	mov	r5, r2
 8016f5c:	f7f6 fe5e 	bl	800dc1c <rcutils_allocator_is_valid>
 8016f60:	b1d8      	cbz	r0, 8016f9a <rmw_discovery_options_init+0x4a>
 8016f62:	68a3      	ldr	r3, [r4, #8]
 8016f64:	b9cb      	cbnz	r3, 8016f9a <rmw_discovery_options_init+0x4a>
 8016f66:	6863      	ldr	r3, [r4, #4]
 8016f68:	b9bb      	cbnz	r3, 8016f9a <rmw_discovery_options_init+0x4a>
 8016f6a:	7823      	ldrb	r3, [r4, #0]
 8016f6c:	b90b      	cbnz	r3, 8016f72 <rmw_discovery_options_init+0x22>
 8016f6e:	2302      	movs	r3, #2
 8016f70:	7023      	strb	r3, [r4, #0]
 8016f72:	b186      	cbz	r6, 8016f96 <rmw_discovery_options_init+0x46>
 8016f74:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8016f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016f7c:	4630      	mov	r0, r6
 8016f7e:	4798      	blx	r3
 8016f80:	6060      	str	r0, [r4, #4]
 8016f82:	b170      	cbz	r0, 8016fa2 <rmw_discovery_options_init+0x52>
 8016f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f86:	f104 0c0c 	add.w	ip, r4, #12
 8016f8a:	60a6      	str	r6, [r4, #8]
 8016f8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f90:	682b      	ldr	r3, [r5, #0]
 8016f92:	f8cc 3000 	str.w	r3, [ip]
 8016f96:	2000      	movs	r0, #0
 8016f98:	bd70      	pop	{r4, r5, r6, pc}
 8016f9a:	200b      	movs	r0, #11
 8016f9c:	bd70      	pop	{r4, r5, r6, pc}
 8016f9e:	200b      	movs	r0, #11
 8016fa0:	4770      	bx	lr
 8016fa2:	200a      	movs	r0, #10
 8016fa4:	bd70      	pop	{r4, r5, r6, pc}
 8016fa6:	bf00      	nop

08016fa8 <rmw_get_zero_initialized_context>:
 8016fa8:	b530      	push	{r4, r5, lr}
 8016faa:	b097      	sub	sp, #92	@ 0x5c
 8016fac:	4604      	mov	r4, r0
 8016fae:	4668      	mov	r0, sp
 8016fb0:	f7f6 feca 	bl	800dd48 <rmw_get_zero_initialized_init_options>
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	e9c4 2300 	strd	r2, r3, [r4]
 8016fbc:	2500      	movs	r5, #0
 8016fbe:	4669      	mov	r1, sp
 8016fc0:	2258      	movs	r2, #88	@ 0x58
 8016fc2:	f104 0010 	add.w	r0, r4, #16
 8016fc6:	60a5      	str	r5, [r4, #8]
 8016fc8:	f003 ff61 	bl	801ae8e <memcpy>
 8016fcc:	4620      	mov	r0, r4
 8016fce:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8016fd2:	b017      	add	sp, #92	@ 0x5c
 8016fd4:	bd30      	pop	{r4, r5, pc}
 8016fd6:	bf00      	nop

08016fd8 <rmw_subscription_content_filter_options_fini>:
 8016fd8:	b1b0      	cbz	r0, 8017008 <rmw_subscription_content_filter_options_fini+0x30>
 8016fda:	b538      	push	{r3, r4, r5, lr}
 8016fdc:	4604      	mov	r4, r0
 8016fde:	4608      	mov	r0, r1
 8016fe0:	460d      	mov	r5, r1
 8016fe2:	f7f6 fe1b 	bl	800dc1c <rcutils_allocator_is_valid>
 8016fe6:	b168      	cbz	r0, 8017004 <rmw_subscription_content_filter_options_fini+0x2c>
 8016fe8:	6820      	ldr	r0, [r4, #0]
 8016fea:	b120      	cbz	r0, 8016ff6 <rmw_subscription_content_filter_options_fini+0x1e>
 8016fec:	686b      	ldr	r3, [r5, #4]
 8016fee:	6929      	ldr	r1, [r5, #16]
 8016ff0:	4798      	blx	r3
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	6023      	str	r3, [r4, #0]
 8016ff6:	1d20      	adds	r0, r4, #4
 8016ff8:	f002 fc06 	bl	8019808 <rcutils_string_array_fini>
 8016ffc:	3800      	subs	r0, #0
 8016ffe:	bf18      	it	ne
 8017000:	2001      	movne	r0, #1
 8017002:	bd38      	pop	{r3, r4, r5, pc}
 8017004:	200b      	movs	r0, #11
 8017006:	bd38      	pop	{r3, r4, r5, pc}
 8017008:	200b      	movs	r0, #11
 801700a:	4770      	bx	lr

0801700c <rmw_get_default_subscription_options>:
 801700c:	2200      	movs	r2, #0
 801700e:	e9c0 2200 	strd	r2, r2, [r0]
 8017012:	6082      	str	r2, [r0, #8]
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop

08017018 <rmw_time_equal>:
 8017018:	b570      	push	{r4, r5, r6, lr}
 801701a:	b084      	sub	sp, #16
 801701c:	ac04      	add	r4, sp, #16
 801701e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017022:	4925      	ldr	r1, [pc, #148]	@ (80170b8 <rmw_time_equal+0xa0>)
 8017024:	9c01      	ldr	r4, [sp, #4]
 8017026:	2202      	movs	r2, #2
 8017028:	4281      	cmp	r1, r0
 801702a:	41a2      	sbcs	r2, r4
 801702c:	d333      	bcc.n	8017096 <rmw_time_equal+0x7e>
 801702e:	4603      	mov	r3, r0
 8017030:	4822      	ldr	r0, [pc, #136]	@ (80170bc <rmw_time_equal+0xa4>)
 8017032:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8017036:	fba3 3200 	umull	r3, r2, r3, r0
 801703a:	fb00 2204 	mla	r2, r0, r4, r2
 801703e:	43de      	mvns	r6, r3
 8017040:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017044:	1a84      	subs	r4, r0, r2
 8017046:	428e      	cmp	r6, r1
 8017048:	41ac      	sbcs	r4, r5
 801704a:	d332      	bcc.n	80170b2 <rmw_time_equal+0x9a>
 801704c:	eb11 0e03 	adds.w	lr, r1, r3
 8017050:	eb42 0005 	adc.w	r0, r2, r5
 8017054:	9b08      	ldr	r3, [sp, #32]
 8017056:	4918      	ldr	r1, [pc, #96]	@ (80170b8 <rmw_time_equal+0xa0>)
 8017058:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801705a:	2202      	movs	r2, #2
 801705c:	4299      	cmp	r1, r3
 801705e:	41aa      	sbcs	r2, r5
 8017060:	d31e      	bcc.n	80170a0 <rmw_time_equal+0x88>
 8017062:	4c16      	ldr	r4, [pc, #88]	@ (80170bc <rmw_time_equal+0xa4>)
 8017064:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017066:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017068:	fba3 3104 	umull	r3, r1, r3, r4
 801706c:	fb04 1105 	mla	r1, r4, r5, r1
 8017070:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8017074:	43dd      	mvns	r5, r3
 8017076:	ebac 0401 	sub.w	r4, ip, r1
 801707a:	4295      	cmp	r5, r2
 801707c:	41b4      	sbcs	r4, r6
 801707e:	d314      	bcc.n	80170aa <rmw_time_equal+0x92>
 8017080:	18d2      	adds	r2, r2, r3
 8017082:	eb41 0306 	adc.w	r3, r1, r6
 8017086:	4283      	cmp	r3, r0
 8017088:	bf08      	it	eq
 801708a:	4572      	cmpeq	r2, lr
 801708c:	bf0c      	ite	eq
 801708e:	2001      	moveq	r0, #1
 8017090:	2000      	movne	r0, #0
 8017092:	b004      	add	sp, #16
 8017094:	bd70      	pop	{r4, r5, r6, pc}
 8017096:	f04f 3eff 	mov.w	lr, #4294967295
 801709a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801709e:	e7d9      	b.n	8017054 <rmw_time_equal+0x3c>
 80170a0:	f04f 32ff 	mov.w	r2, #4294967295
 80170a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80170a8:	e7ed      	b.n	8017086 <rmw_time_equal+0x6e>
 80170aa:	f04f 32ff 	mov.w	r2, #4294967295
 80170ae:	4663      	mov	r3, ip
 80170b0:	e7e9      	b.n	8017086 <rmw_time_equal+0x6e>
 80170b2:	f04f 3eff 	mov.w	lr, #4294967295
 80170b6:	e7cd      	b.n	8017054 <rmw_time_equal+0x3c>
 80170b8:	25c17d04 	.word	0x25c17d04
 80170bc:	3b9aca00 	.word	0x3b9aca00

080170c0 <rmw_time_total_nsec>:
 80170c0:	b430      	push	{r4, r5}
 80170c2:	b084      	sub	sp, #16
 80170c4:	ac04      	add	r4, sp, #16
 80170c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80170ca:	4914      	ldr	r1, [pc, #80]	@ (801711c <rmw_time_total_nsec+0x5c>)
 80170cc:	9c01      	ldr	r4, [sp, #4]
 80170ce:	2202      	movs	r2, #2
 80170d0:	4281      	cmp	r1, r0
 80170d2:	41a2      	sbcs	r2, r4
 80170d4:	d315      	bcc.n	8017102 <rmw_time_total_nsec+0x42>
 80170d6:	4912      	ldr	r1, [pc, #72]	@ (8017120 <rmw_time_total_nsec+0x60>)
 80170d8:	4603      	mov	r3, r0
 80170da:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 80170de:	fba3 3201 	umull	r3, r2, r3, r1
 80170e2:	fb01 2204 	mla	r2, r1, r4, r2
 80170e6:	ea6f 0c03 	mvn.w	ip, r3
 80170ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80170ee:	1a8c      	subs	r4, r1, r2
 80170f0:	4584      	cmp	ip, r0
 80170f2:	41ac      	sbcs	r4, r5
 80170f4:	d30c      	bcc.n	8017110 <rmw_time_total_nsec+0x50>
 80170f6:	1818      	adds	r0, r3, r0
 80170f8:	eb42 0105 	adc.w	r1, r2, r5
 80170fc:	b004      	add	sp, #16
 80170fe:	bc30      	pop	{r4, r5}
 8017100:	4770      	bx	lr
 8017102:	f04f 30ff 	mov.w	r0, #4294967295
 8017106:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801710a:	b004      	add	sp, #16
 801710c:	bc30      	pop	{r4, r5}
 801710e:	4770      	bx	lr
 8017110:	f04f 30ff 	mov.w	r0, #4294967295
 8017114:	b004      	add	sp, #16
 8017116:	bc30      	pop	{r4, r5}
 8017118:	4770      	bx	lr
 801711a:	bf00      	nop
 801711c:	25c17d04 	.word	0x25c17d04
 8017120:	3b9aca00 	.word	0x3b9aca00

08017124 <rmw_get_zero_initialized_message_info>:
 8017124:	b510      	push	{r4, lr}
 8017126:	2238      	movs	r2, #56	@ 0x38
 8017128:	4604      	mov	r4, r0
 801712a:	2100      	movs	r1, #0
 801712c:	f003 fdcf 	bl	801acce <memset>
 8017130:	4620      	mov	r0, r4
 8017132:	bd10      	pop	{r4, pc}

08017134 <rmw_validate_full_topic_name>:
 8017134:	2800      	cmp	r0, #0
 8017136:	d049      	beq.n	80171cc <rmw_validate_full_topic_name+0x98>
 8017138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713c:	460e      	mov	r6, r1
 801713e:	2900      	cmp	r1, #0
 8017140:	d056      	beq.n	80171f0 <rmw_validate_full_topic_name+0xbc>
 8017142:	4615      	mov	r5, r2
 8017144:	4604      	mov	r4, r0
 8017146:	f7e9 f88b 	bl	8000260 <strlen>
 801714a:	b150      	cbz	r0, 8017162 <rmw_validate_full_topic_name+0x2e>
 801714c:	7823      	ldrb	r3, [r4, #0]
 801714e:	2b2f      	cmp	r3, #47	@ 0x2f
 8017150:	d00c      	beq.n	801716c <rmw_validate_full_topic_name+0x38>
 8017152:	2302      	movs	r3, #2
 8017154:	6033      	str	r3, [r6, #0]
 8017156:	b10d      	cbz	r5, 801715c <rmw_validate_full_topic_name+0x28>
 8017158:	2300      	movs	r3, #0
 801715a:	602b      	str	r3, [r5, #0]
 801715c:	2000      	movs	r0, #0
 801715e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017162:	2301      	movs	r3, #1
 8017164:	6033      	str	r3, [r6, #0]
 8017166:	2d00      	cmp	r5, #0
 8017168:	d1f6      	bne.n	8017158 <rmw_validate_full_topic_name+0x24>
 801716a:	e7f7      	b.n	801715c <rmw_validate_full_topic_name+0x28>
 801716c:	1e47      	subs	r7, r0, #1
 801716e:	5de3      	ldrb	r3, [r4, r7]
 8017170:	2b2f      	cmp	r3, #47	@ 0x2f
 8017172:	d03f      	beq.n	80171f4 <rmw_validate_full_topic_name+0xc0>
 8017174:	1e63      	subs	r3, r4, #1
 8017176:	4621      	mov	r1, r4
 8017178:	eb03 0e00 	add.w	lr, r3, r0
 801717c:	469c      	mov	ip, r3
 801717e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017182:	2a5f      	cmp	r2, #95	@ 0x5f
 8017184:	d006      	beq.n	8017194 <rmw_validate_full_topic_name+0x60>
 8017186:	d823      	bhi.n	80171d0 <rmw_validate_full_topic_name+0x9c>
 8017188:	2a39      	cmp	r2, #57	@ 0x39
 801718a:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801718e:	d82b      	bhi.n	80171e8 <rmw_validate_full_topic_name+0xb4>
 8017190:	2a2e      	cmp	r2, #46	@ 0x2e
 8017192:	d920      	bls.n	80171d6 <rmw_validate_full_topic_name+0xa2>
 8017194:	4573      	cmp	r3, lr
 8017196:	d1f1      	bne.n	801717c <rmw_validate_full_topic_name+0x48>
 8017198:	4c21      	ldr	r4, [pc, #132]	@ (8017220 <rmw_validate_full_topic_name+0xec>)
 801719a:	2300      	movs	r3, #0
 801719c:	e003      	b.n	80171a6 <rmw_validate_full_topic_name+0x72>
 801719e:	4298      	cmp	r0, r3
 80171a0:	f101 0101 	add.w	r1, r1, #1
 80171a4:	d02c      	beq.n	8017200 <rmw_validate_full_topic_name+0xcc>
 80171a6:	429f      	cmp	r7, r3
 80171a8:	f103 0301 	add.w	r3, r3, #1
 80171ac:	d0f7      	beq.n	801719e <rmw_validate_full_topic_name+0x6a>
 80171ae:	780a      	ldrb	r2, [r1, #0]
 80171b0:	2a2f      	cmp	r2, #47	@ 0x2f
 80171b2:	d1f4      	bne.n	801719e <rmw_validate_full_topic_name+0x6a>
 80171b4:	784a      	ldrb	r2, [r1, #1]
 80171b6:	2a2f      	cmp	r2, #47	@ 0x2f
 80171b8:	d02d      	beq.n	8017216 <rmw_validate_full_topic_name+0xe2>
 80171ba:	5ca2      	ldrb	r2, [r4, r2]
 80171bc:	0752      	lsls	r2, r2, #29
 80171be:	d5ee      	bpl.n	801719e <rmw_validate_full_topic_name+0x6a>
 80171c0:	2206      	movs	r2, #6
 80171c2:	6032      	str	r2, [r6, #0]
 80171c4:	2d00      	cmp	r5, #0
 80171c6:	d0c9      	beq.n	801715c <rmw_validate_full_topic_name+0x28>
 80171c8:	602b      	str	r3, [r5, #0]
 80171ca:	e7c7      	b.n	801715c <rmw_validate_full_topic_name+0x28>
 80171cc:	200b      	movs	r0, #11
 80171ce:	4770      	bx	lr
 80171d0:	3a61      	subs	r2, #97	@ 0x61
 80171d2:	2a19      	cmp	r2, #25
 80171d4:	d9de      	bls.n	8017194 <rmw_validate_full_topic_name+0x60>
 80171d6:	2304      	movs	r3, #4
 80171d8:	6033      	str	r3, [r6, #0]
 80171da:	2d00      	cmp	r5, #0
 80171dc:	d0be      	beq.n	801715c <rmw_validate_full_topic_name+0x28>
 80171de:	f1c4 0401 	rsb	r4, r4, #1
 80171e2:	4464      	add	r4, ip
 80171e4:	602c      	str	r4, [r5, #0]
 80171e6:	e7b9      	b.n	801715c <rmw_validate_full_topic_name+0x28>
 80171e8:	f1b8 0f19 	cmp.w	r8, #25
 80171ec:	d9d2      	bls.n	8017194 <rmw_validate_full_topic_name+0x60>
 80171ee:	e7f2      	b.n	80171d6 <rmw_validate_full_topic_name+0xa2>
 80171f0:	200b      	movs	r0, #11
 80171f2:	e7b4      	b.n	801715e <rmw_validate_full_topic_name+0x2a>
 80171f4:	2303      	movs	r3, #3
 80171f6:	6033      	str	r3, [r6, #0]
 80171f8:	2d00      	cmp	r5, #0
 80171fa:	d0af      	beq.n	801715c <rmw_validate_full_topic_name+0x28>
 80171fc:	602f      	str	r7, [r5, #0]
 80171fe:	e7ad      	b.n	801715c <rmw_validate_full_topic_name+0x28>
 8017200:	28f7      	cmp	r0, #247	@ 0xf7
 8017202:	d802      	bhi.n	801720a <rmw_validate_full_topic_name+0xd6>
 8017204:	2300      	movs	r3, #0
 8017206:	6033      	str	r3, [r6, #0]
 8017208:	e7a8      	b.n	801715c <rmw_validate_full_topic_name+0x28>
 801720a:	2307      	movs	r3, #7
 801720c:	6033      	str	r3, [r6, #0]
 801720e:	2d00      	cmp	r5, #0
 8017210:	d0a4      	beq.n	801715c <rmw_validate_full_topic_name+0x28>
 8017212:	23f6      	movs	r3, #246	@ 0xf6
 8017214:	e7d8      	b.n	80171c8 <rmw_validate_full_topic_name+0x94>
 8017216:	2205      	movs	r2, #5
 8017218:	6032      	str	r2, [r6, #0]
 801721a:	2d00      	cmp	r5, #0
 801721c:	d1d4      	bne.n	80171c8 <rmw_validate_full_topic_name+0x94>
 801721e:	e79d      	b.n	801715c <rmw_validate_full_topic_name+0x28>
 8017220:	0801ee34 	.word	0x0801ee34

08017224 <rmw_validate_namespace_with_size>:
 8017224:	2800      	cmp	r0, #0
 8017226:	d031      	beq.n	801728c <rmw_validate_namespace_with_size+0x68>
 8017228:	b570      	push	{r4, r5, r6, lr}
 801722a:	4614      	mov	r4, r2
 801722c:	b0c2      	sub	sp, #264	@ 0x108
 801722e:	b1ba      	cbz	r2, 8017260 <rmw_validate_namespace_with_size+0x3c>
 8017230:	2901      	cmp	r1, #1
 8017232:	460e      	mov	r6, r1
 8017234:	461d      	mov	r5, r3
 8017236:	d102      	bne.n	801723e <rmw_validate_namespace_with_size+0x1a>
 8017238:	7803      	ldrb	r3, [r0, #0]
 801723a:	2b2f      	cmp	r3, #47	@ 0x2f
 801723c:	d015      	beq.n	801726a <rmw_validate_namespace_with_size+0x46>
 801723e:	aa01      	add	r2, sp, #4
 8017240:	4669      	mov	r1, sp
 8017242:	f7ff ff77 	bl	8017134 <rmw_validate_full_topic_name>
 8017246:	b960      	cbnz	r0, 8017262 <rmw_validate_namespace_with_size+0x3e>
 8017248:	9b00      	ldr	r3, [sp, #0]
 801724a:	b163      	cbz	r3, 8017266 <rmw_validate_namespace_with_size+0x42>
 801724c:	2b07      	cmp	r3, #7
 801724e:	d00a      	beq.n	8017266 <rmw_validate_namespace_with_size+0x42>
 8017250:	1e5a      	subs	r2, r3, #1
 8017252:	2a05      	cmp	r2, #5
 8017254:	d81c      	bhi.n	8017290 <rmw_validate_namespace_with_size+0x6c>
 8017256:	e8df f002 	tbb	[pc, r2]
 801725a:	0c0c      	.short	0x0c0c
 801725c:	0c0c0c0c 	.word	0x0c0c0c0c
 8017260:	200b      	movs	r0, #11
 8017262:	b042      	add	sp, #264	@ 0x108
 8017264:	bd70      	pop	{r4, r5, r6, pc}
 8017266:	2ef5      	cmp	r6, #245	@ 0xf5
 8017268:	d809      	bhi.n	801727e <rmw_validate_namespace_with_size+0x5a>
 801726a:	2300      	movs	r3, #0
 801726c:	6023      	str	r3, [r4, #0]
 801726e:	2000      	movs	r0, #0
 8017270:	e7f7      	b.n	8017262 <rmw_validate_namespace_with_size+0x3e>
 8017272:	6023      	str	r3, [r4, #0]
 8017274:	2d00      	cmp	r5, #0
 8017276:	d0fa      	beq.n	801726e <rmw_validate_namespace_with_size+0x4a>
 8017278:	9b01      	ldr	r3, [sp, #4]
 801727a:	602b      	str	r3, [r5, #0]
 801727c:	e7f7      	b.n	801726e <rmw_validate_namespace_with_size+0x4a>
 801727e:	2307      	movs	r3, #7
 8017280:	6023      	str	r3, [r4, #0]
 8017282:	2d00      	cmp	r5, #0
 8017284:	d0f3      	beq.n	801726e <rmw_validate_namespace_with_size+0x4a>
 8017286:	23f4      	movs	r3, #244	@ 0xf4
 8017288:	602b      	str	r3, [r5, #0]
 801728a:	e7f0      	b.n	801726e <rmw_validate_namespace_with_size+0x4a>
 801728c:	200b      	movs	r0, #11
 801728e:	4770      	bx	lr
 8017290:	4a03      	ldr	r2, [pc, #12]	@ (80172a0 <rmw_validate_namespace_with_size+0x7c>)
 8017292:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017296:	a802      	add	r0, sp, #8
 8017298:	f7ff fcaa 	bl	8016bf0 <rcutils_snprintf>
 801729c:	2001      	movs	r0, #1
 801729e:	e7e0      	b.n	8017262 <rmw_validate_namespace_with_size+0x3e>
 80172a0:	0801dce8 	.word	0x0801dce8

080172a4 <rmw_validate_namespace>:
 80172a4:	b168      	cbz	r0, 80172c2 <rmw_validate_namespace+0x1e>
 80172a6:	b570      	push	{r4, r5, r6, lr}
 80172a8:	460d      	mov	r5, r1
 80172aa:	4616      	mov	r6, r2
 80172ac:	4604      	mov	r4, r0
 80172ae:	f7e8 ffd7 	bl	8000260 <strlen>
 80172b2:	4633      	mov	r3, r6
 80172b4:	4601      	mov	r1, r0
 80172b6:	462a      	mov	r2, r5
 80172b8:	4620      	mov	r0, r4
 80172ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172be:	f7ff bfb1 	b.w	8017224 <rmw_validate_namespace_with_size>
 80172c2:	200b      	movs	r0, #11
 80172c4:	4770      	bx	lr
 80172c6:	bf00      	nop

080172c8 <rmw_namespace_validation_result_string>:
 80172c8:	2807      	cmp	r0, #7
 80172ca:	bf9a      	itte	ls
 80172cc:	4b02      	ldrls	r3, [pc, #8]	@ (80172d8 <rmw_namespace_validation_result_string+0x10>)
 80172ce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80172d2:	4802      	ldrhi	r0, [pc, #8]	@ (80172dc <rmw_namespace_validation_result_string+0x14>)
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	0801ea48 	.word	0x0801ea48
 80172dc:	0801dd38 	.word	0x0801dd38

080172e0 <rmw_validate_node_name>:
 80172e0:	2800      	cmp	r0, #0
 80172e2:	d037      	beq.n	8017354 <rmw_validate_node_name+0x74>
 80172e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172e6:	460e      	mov	r6, r1
 80172e8:	2900      	cmp	r1, #0
 80172ea:	d035      	beq.n	8017358 <rmw_validate_node_name+0x78>
 80172ec:	4617      	mov	r7, r2
 80172ee:	4604      	mov	r4, r0
 80172f0:	f7e8 ffb6 	bl	8000260 <strlen>
 80172f4:	b1d8      	cbz	r0, 801732e <rmw_validate_node_name+0x4e>
 80172f6:	1e63      	subs	r3, r4, #1
 80172f8:	1819      	adds	r1, r3, r0
 80172fa:	461a      	mov	r2, r3
 80172fc:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017300:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8017304:	f02e 0c20 	bic.w	ip, lr, #32
 8017308:	2d09      	cmp	r5, #9
 801730a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801730e:	d915      	bls.n	801733c <rmw_validate_node_name+0x5c>
 8017310:	f1bc 0f19 	cmp.w	ip, #25
 8017314:	d912      	bls.n	801733c <rmw_validate_node_name+0x5c>
 8017316:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801731a:	d00f      	beq.n	801733c <rmw_validate_node_name+0x5c>
 801731c:	2302      	movs	r3, #2
 801731e:	6033      	str	r3, [r6, #0]
 8017320:	b11f      	cbz	r7, 801732a <rmw_validate_node_name+0x4a>
 8017322:	f1c4 0401 	rsb	r4, r4, #1
 8017326:	4414      	add	r4, r2
 8017328:	603c      	str	r4, [r7, #0]
 801732a:	2000      	movs	r0, #0
 801732c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801732e:	2301      	movs	r3, #1
 8017330:	6033      	str	r3, [r6, #0]
 8017332:	2f00      	cmp	r7, #0
 8017334:	d0f9      	beq.n	801732a <rmw_validate_node_name+0x4a>
 8017336:	2300      	movs	r3, #0
 8017338:	603b      	str	r3, [r7, #0]
 801733a:	e7f6      	b.n	801732a <rmw_validate_node_name+0x4a>
 801733c:	4299      	cmp	r1, r3
 801733e:	d1dc      	bne.n	80172fa <rmw_validate_node_name+0x1a>
 8017340:	7823      	ldrb	r3, [r4, #0]
 8017342:	4a0c      	ldr	r2, [pc, #48]	@ (8017374 <rmw_validate_node_name+0x94>)
 8017344:	5cd3      	ldrb	r3, [r2, r3]
 8017346:	f013 0304 	ands.w	r3, r3, #4
 801734a:	d10e      	bne.n	801736a <rmw_validate_node_name+0x8a>
 801734c:	28ff      	cmp	r0, #255	@ 0xff
 801734e:	d805      	bhi.n	801735c <rmw_validate_node_name+0x7c>
 8017350:	6033      	str	r3, [r6, #0]
 8017352:	e7ea      	b.n	801732a <rmw_validate_node_name+0x4a>
 8017354:	200b      	movs	r0, #11
 8017356:	4770      	bx	lr
 8017358:	200b      	movs	r0, #11
 801735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801735c:	2304      	movs	r3, #4
 801735e:	6033      	str	r3, [r6, #0]
 8017360:	2f00      	cmp	r7, #0
 8017362:	d0e2      	beq.n	801732a <rmw_validate_node_name+0x4a>
 8017364:	23fe      	movs	r3, #254	@ 0xfe
 8017366:	603b      	str	r3, [r7, #0]
 8017368:	e7df      	b.n	801732a <rmw_validate_node_name+0x4a>
 801736a:	2303      	movs	r3, #3
 801736c:	6033      	str	r3, [r6, #0]
 801736e:	2f00      	cmp	r7, #0
 8017370:	d1e1      	bne.n	8017336 <rmw_validate_node_name+0x56>
 8017372:	e7da      	b.n	801732a <rmw_validate_node_name+0x4a>
 8017374:	0801ee34 	.word	0x0801ee34

08017378 <rmw_node_name_validation_result_string>:
 8017378:	2804      	cmp	r0, #4
 801737a:	bf9a      	itte	ls
 801737c:	4b02      	ldrls	r3, [pc, #8]	@ (8017388 <rmw_node_name_validation_result_string+0x10>)
 801737e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017382:	4802      	ldrhi	r0, [pc, #8]	@ (801738c <rmw_node_name_validation_result_string+0x14>)
 8017384:	4770      	bx	lr
 8017386:	bf00      	nop
 8017388:	0801ea68 	.word	0x0801ea68
 801738c:	0801dee0 	.word	0x0801dee0

08017390 <on_status>:
 8017390:	b082      	sub	sp, #8
 8017392:	b002      	add	sp, #8
 8017394:	4770      	bx	lr
 8017396:	bf00      	nop

08017398 <on_topic>:
 8017398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801739c:	4a22      	ldr	r2, [pc, #136]	@ (8017428 <on_topic+0x90>)
 801739e:	b094      	sub	sp, #80	@ 0x50
 80173a0:	6812      	ldr	r2, [r2, #0]
 80173a2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80173a4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80173a8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80173ac:	b3c2      	cbz	r2, 8017420 <on_topic+0x88>
 80173ae:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80173b2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80173b6:	e001      	b.n	80173bc <on_topic+0x24>
 80173b8:	6852      	ldr	r2, [r2, #4]
 80173ba:	b38a      	cbz	r2, 8017420 <on_topic+0x88>
 80173bc:	6894      	ldr	r4, [r2, #8]
 80173be:	8aa3      	ldrh	r3, [r4, #20]
 80173c0:	428b      	cmp	r3, r1
 80173c2:	d1f9      	bne.n	80173b8 <on_topic+0x20>
 80173c4:	7da3      	ldrb	r3, [r4, #22]
 80173c6:	4283      	cmp	r3, r0
 80173c8:	d1f6      	bne.n	80173b8 <on_topic+0x20>
 80173ca:	2248      	movs	r2, #72	@ 0x48
 80173cc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80173d0:	4668      	mov	r0, sp
 80173d2:	f003 fd5c 	bl	801ae8e <memcpy>
 80173d6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80173da:	cb0c      	ldmia	r3, {r2, r3}
 80173dc:	4620      	mov	r0, r4
 80173de:	f7f7 fe13 	bl	800f008 <rmw_uxrce_get_static_input_buffer_for_entity>
 80173e2:	4607      	mov	r7, r0
 80173e4:	b1e0      	cbz	r0, 8017420 <on_topic+0x88>
 80173e6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80173ea:	4632      	mov	r2, r6
 80173ec:	4628      	mov	r0, r5
 80173ee:	f108 0110 	add.w	r1, r8, #16
 80173f2:	f000 fed7 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 80173f6:	b930      	cbnz	r0, 8017406 <on_topic+0x6e>
 80173f8:	480c      	ldr	r0, [pc, #48]	@ (801742c <on_topic+0x94>)
 80173fa:	4639      	mov	r1, r7
 80173fc:	b014      	add	sp, #80	@ 0x50
 80173fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017402:	f000 b8bd 	b.w	8017580 <put_memory>
 8017406:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801740a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801740e:	f7f7 fbf9 	bl	800ec04 <rmw_uros_epoch_nanos>
 8017412:	2305      	movs	r3, #5
 8017414:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017418:	e942 0102 	strd	r0, r1, [r2, #-8]
 801741c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017420:	b014      	add	sp, #80	@ 0x50
 8017422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017426:	bf00      	nop
 8017428:	2000b0f8 	.word	0x2000b0f8
 801742c:	2000ac60 	.word	0x2000ac60

08017430 <on_request>:
 8017430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017434:	4823      	ldr	r0, [pc, #140]	@ (80174c4 <on_request+0x94>)
 8017436:	b094      	sub	sp, #80	@ 0x50
 8017438:	6800      	ldr	r0, [r0, #0]
 801743a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801743c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017440:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017442:	2800      	cmp	r0, #0
 8017444:	d03b      	beq.n	80174be <on_request+0x8e>
 8017446:	461d      	mov	r5, r3
 8017448:	e001      	b.n	801744e <on_request+0x1e>
 801744a:	6840      	ldr	r0, [r0, #4]
 801744c:	b3b8      	cbz	r0, 80174be <on_request+0x8e>
 801744e:	6884      	ldr	r4, [r0, #8]
 8017450:	8b21      	ldrh	r1, [r4, #24]
 8017452:	4291      	cmp	r1, r2
 8017454:	d1f9      	bne.n	801744a <on_request+0x1a>
 8017456:	2248      	movs	r2, #72	@ 0x48
 8017458:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801745c:	4668      	mov	r0, sp
 801745e:	f003 fd16 	bl	801ae8e <memcpy>
 8017462:	f104 0320 	add.w	r3, r4, #32
 8017466:	cb0c      	ldmia	r3, {r2, r3}
 8017468:	4620      	mov	r0, r4
 801746a:	f7f7 fdcd 	bl	800f008 <rmw_uxrce_get_static_input_buffer_for_entity>
 801746e:	4680      	mov	r8, r0
 8017470:	b328      	cbz	r0, 80174be <on_request+0x8e>
 8017472:	4638      	mov	r0, r7
 8017474:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017478:	4632      	mov	r2, r6
 801747a:	f107 0110 	add.w	r1, r7, #16
 801747e:	f000 fe91 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 8017482:	b930      	cbnz	r0, 8017492 <on_request+0x62>
 8017484:	4810      	ldr	r0, [pc, #64]	@ (80174c8 <on_request+0x98>)
 8017486:	4641      	mov	r1, r8
 8017488:	b014      	add	sp, #80	@ 0x50
 801748a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801748e:	f000 b877 	b.w	8017580 <put_memory>
 8017492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017494:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017498:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801749c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80174a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80174a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80174ac:	f7f7 fbaa 	bl	800ec04 <rmw_uros_epoch_nanos>
 80174b0:	2303      	movs	r3, #3
 80174b2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80174b6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80174ba:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80174be:	b014      	add	sp, #80	@ 0x50
 80174c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174c4:	2000af38 	.word	0x2000af38
 80174c8:	2000ac60 	.word	0x2000ac60

080174cc <on_reply>:
 80174cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174d0:	4821      	ldr	r0, [pc, #132]	@ (8017558 <on_reply+0x8c>)
 80174d2:	b094      	sub	sp, #80	@ 0x50
 80174d4:	6800      	ldr	r0, [r0, #0]
 80174d6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80174d8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80174dc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80174de:	b3b8      	cbz	r0, 8017550 <on_reply+0x84>
 80174e0:	461d      	mov	r5, r3
 80174e2:	e001      	b.n	80174e8 <on_reply+0x1c>
 80174e4:	6840      	ldr	r0, [r0, #4]
 80174e6:	b398      	cbz	r0, 8017550 <on_reply+0x84>
 80174e8:	6884      	ldr	r4, [r0, #8]
 80174ea:	8b21      	ldrh	r1, [r4, #24]
 80174ec:	4291      	cmp	r1, r2
 80174ee:	d1f9      	bne.n	80174e4 <on_reply+0x18>
 80174f0:	2248      	movs	r2, #72	@ 0x48
 80174f2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80174f6:	4668      	mov	r0, sp
 80174f8:	f003 fcc9 	bl	801ae8e <memcpy>
 80174fc:	f104 0320 	add.w	r3, r4, #32
 8017500:	cb0c      	ldmia	r3, {r2, r3}
 8017502:	4620      	mov	r0, r4
 8017504:	f7f7 fd80 	bl	800f008 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017508:	4680      	mov	r8, r0
 801750a:	b308      	cbz	r0, 8017550 <on_reply+0x84>
 801750c:	4638      	mov	r0, r7
 801750e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017512:	4632      	mov	r2, r6
 8017514:	f107 0110 	add.w	r1, r7, #16
 8017518:	f000 fe44 	bl	80181a4 <ucdr_deserialize_array_uint8_t>
 801751c:	b930      	cbnz	r0, 801752c <on_reply+0x60>
 801751e:	480f      	ldr	r0, [pc, #60]	@ (801755c <on_reply+0x90>)
 8017520:	4641      	mov	r1, r8
 8017522:	b014      	add	sp, #80	@ 0x50
 8017524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017528:	f000 b82a 	b.w	8017580 <put_memory>
 801752c:	2200      	movs	r2, #0
 801752e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017532:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017536:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801753a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801753e:	f7f7 fb61 	bl	800ec04 <rmw_uros_epoch_nanos>
 8017542:	2304      	movs	r3, #4
 8017544:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017548:	e942 0102 	strd	r0, r1, [r2, #-8]
 801754c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017550:	b014      	add	sp, #80	@ 0x50
 8017552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017556:	bf00      	nop
 8017558:	2000ae60 	.word	0x2000ae60
 801755c:	2000ac60 	.word	0x2000ac60

08017560 <get_memory>:
 8017560:	4603      	mov	r3, r0
 8017562:	6840      	ldr	r0, [r0, #4]
 8017564:	b158      	cbz	r0, 801757e <get_memory+0x1e>
 8017566:	6842      	ldr	r2, [r0, #4]
 8017568:	605a      	str	r2, [r3, #4]
 801756a:	b10a      	cbz	r2, 8017570 <get_memory+0x10>
 801756c:	2100      	movs	r1, #0
 801756e:	6011      	str	r1, [r2, #0]
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	6042      	str	r2, [r0, #4]
 8017574:	b102      	cbz	r2, 8017578 <get_memory+0x18>
 8017576:	6010      	str	r0, [r2, #0]
 8017578:	2200      	movs	r2, #0
 801757a:	6002      	str	r2, [r0, #0]
 801757c:	6018      	str	r0, [r3, #0]
 801757e:	4770      	bx	lr

08017580 <put_memory>:
 8017580:	680b      	ldr	r3, [r1, #0]
 8017582:	b10b      	cbz	r3, 8017588 <put_memory+0x8>
 8017584:	684a      	ldr	r2, [r1, #4]
 8017586:	605a      	str	r2, [r3, #4]
 8017588:	684a      	ldr	r2, [r1, #4]
 801758a:	b102      	cbz	r2, 801758e <put_memory+0xe>
 801758c:	6013      	str	r3, [r2, #0]
 801758e:	6803      	ldr	r3, [r0, #0]
 8017590:	428b      	cmp	r3, r1
 8017592:	6843      	ldr	r3, [r0, #4]
 8017594:	bf08      	it	eq
 8017596:	6002      	streq	r2, [r0, #0]
 8017598:	604b      	str	r3, [r1, #4]
 801759a:	b103      	cbz	r3, 801759e <put_memory+0x1e>
 801759c:	6019      	str	r1, [r3, #0]
 801759e:	2300      	movs	r3, #0
 80175a0:	600b      	str	r3, [r1, #0]
 80175a2:	6041      	str	r1, [r0, #4]
 80175a4:	4770      	bx	lr
 80175a6:	bf00      	nop

080175a8 <rmw_destroy_client>:
 80175a8:	b570      	push	{r4, r5, r6, lr}
 80175aa:	b128      	cbz	r0, 80175b8 <rmw_destroy_client+0x10>
 80175ac:	4604      	mov	r4, r0
 80175ae:	6800      	ldr	r0, [r0, #0]
 80175b0:	460d      	mov	r5, r1
 80175b2:	f7f7 fead 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 80175b6:	b910      	cbnz	r0, 80175be <rmw_destroy_client+0x16>
 80175b8:	2401      	movs	r4, #1
 80175ba:	4620      	mov	r0, r4
 80175bc:	bd70      	pop	{r4, r5, r6, pc}
 80175be:	6863      	ldr	r3, [r4, #4]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d0f9      	beq.n	80175b8 <rmw_destroy_client+0x10>
 80175c4:	2d00      	cmp	r5, #0
 80175c6:	d0f7      	beq.n	80175b8 <rmw_destroy_client+0x10>
 80175c8:	6828      	ldr	r0, [r5, #0]
 80175ca:	f7f7 fea1 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 80175ce:	2800      	cmp	r0, #0
 80175d0:	d0f2      	beq.n	80175b8 <rmw_destroy_client+0x10>
 80175d2:	686e      	ldr	r6, [r5, #4]
 80175d4:	2e00      	cmp	r6, #0
 80175d6:	d0ef      	beq.n	80175b8 <rmw_destroy_client+0x10>
 80175d8:	6864      	ldr	r4, [r4, #4]
 80175da:	6932      	ldr	r2, [r6, #16]
 80175dc:	6920      	ldr	r0, [r4, #16]
 80175de:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80175e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80175e6:	6819      	ldr	r1, [r3, #0]
 80175e8:	f7f8 fdf6 	bl	80101d8 <uxr_buffer_cancel_data>
 80175ec:	4602      	mov	r2, r0
 80175ee:	6920      	ldr	r0, [r4, #16]
 80175f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80175f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80175f8:	f7f7 fe04 	bl	800f204 <run_xrce_session>
 80175fc:	6920      	ldr	r0, [r4, #16]
 80175fe:	6932      	ldr	r2, [r6, #16]
 8017600:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017604:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017608:	6819      	ldr	r1, [r3, #0]
 801760a:	f7f8 f9db 	bl	800f9c4 <uxr_buffer_delete_entity>
 801760e:	4602      	mov	r2, r0
 8017610:	6920      	ldr	r0, [r4, #16]
 8017612:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017616:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801761a:	f7f7 fdf3 	bl	800f204 <run_xrce_session>
 801761e:	f080 0401 	eor.w	r4, r0, #1
 8017622:	b2e4      	uxtb	r4, r4
 8017624:	4628      	mov	r0, r5
 8017626:	0064      	lsls	r4, r4, #1
 8017628:	f7f7 fccc 	bl	800efc4 <rmw_uxrce_fini_client_memory>
 801762c:	e7c5      	b.n	80175ba <rmw_destroy_client+0x12>
 801762e:	bf00      	nop

08017630 <rmw_get_gid_for_client>:
 8017630:	b1a8      	cbz	r0, 801765e <rmw_get_gid_for_client+0x2e>
 8017632:	b538      	push	{r3, r4, r5, lr}
 8017634:	460c      	mov	r4, r1
 8017636:	b1a1      	cbz	r1, 8017662 <rmw_get_gid_for_client+0x32>
 8017638:	4605      	mov	r5, r0
 801763a:	6800      	ldr	r0, [r0, #0]
 801763c:	b120      	cbz	r0, 8017648 <rmw_get_gid_for_client+0x18>
 801763e:	4b0a      	ldr	r3, [pc, #40]	@ (8017668 <rmw_get_gid_for_client+0x38>)
 8017640:	6819      	ldr	r1, [r3, #0]
 8017642:	f7e8 fdad 	bl	80001a0 <strcmp>
 8017646:	b940      	cbnz	r0, 801765a <rmw_get_gid_for_client+0x2a>
 8017648:	686b      	ldr	r3, [r5, #4]
 801764a:	2000      	movs	r0, #0
 801764c:	6060      	str	r0, [r4, #4]
 801764e:	60a0      	str	r0, [r4, #8]
 8017650:	60e0      	str	r0, [r4, #12]
 8017652:	6120      	str	r0, [r4, #16]
 8017654:	691b      	ldr	r3, [r3, #16]
 8017656:	6063      	str	r3, [r4, #4]
 8017658:	bd38      	pop	{r3, r4, r5, pc}
 801765a:	200c      	movs	r0, #12
 801765c:	bd38      	pop	{r3, r4, r5, pc}
 801765e:	200b      	movs	r0, #11
 8017660:	4770      	bx	lr
 8017662:	200b      	movs	r0, #11
 8017664:	bd38      	pop	{r3, r4, r5, pc}
 8017666:	bf00      	nop
 8017668:	0801ea7c 	.word	0x0801ea7c

0801766c <rmw_get_implementation_identifier>:
 801766c:	4b01      	ldr	r3, [pc, #4]	@ (8017674 <rmw_get_implementation_identifier+0x8>)
 801766e:	6818      	ldr	r0, [r3, #0]
 8017670:	4770      	bx	lr
 8017672:	bf00      	nop
 8017674:	0801ea7c 	.word	0x0801ea7c

08017678 <create_topic>:
 8017678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801767c:	4604      	mov	r4, r0
 801767e:	b084      	sub	sp, #16
 8017680:	4824      	ldr	r0, [pc, #144]	@ (8017714 <create_topic+0x9c>)
 8017682:	460f      	mov	r7, r1
 8017684:	4616      	mov	r6, r2
 8017686:	f7ff ff6b 	bl	8017560 <get_memory>
 801768a:	2800      	cmp	r0, #0
 801768c:	d03c      	beq.n	8017708 <create_topic+0x90>
 801768e:	6923      	ldr	r3, [r4, #16]
 8017690:	6885      	ldr	r5, [r0, #8]
 8017692:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801771c <create_topic+0xa4>
 8017696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801769a:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801769e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80176a2:	1c42      	adds	r2, r0, #1
 80176a4:	2102      	movs	r1, #2
 80176a6:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80176aa:	f7f8 fc25 	bl	800fef8 <uxr_object_id>
 80176ae:	223c      	movs	r2, #60	@ 0x3c
 80176b0:	6128      	str	r0, [r5, #16]
 80176b2:	4641      	mov	r1, r8
 80176b4:	4638      	mov	r0, r7
 80176b6:	f7f7 fe11 	bl	800f2dc <generate_topic_name>
 80176ba:	b310      	cbz	r0, 8017702 <create_topic+0x8a>
 80176bc:	4f16      	ldr	r7, [pc, #88]	@ (8017718 <create_topic+0xa0>)
 80176be:	4630      	mov	r0, r6
 80176c0:	2264      	movs	r2, #100	@ 0x64
 80176c2:	4639      	mov	r1, r7
 80176c4:	f7f7 fdda 	bl	800f27c <generate_type_name>
 80176c8:	b1d8      	cbz	r0, 8017702 <create_topic+0x8a>
 80176ca:	6920      	ldr	r0, [r4, #16]
 80176cc:	2306      	movs	r3, #6
 80176ce:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80176d2:	f8cd 8000 	str.w	r8, [sp]
 80176d6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80176da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176de:	6811      	ldr	r1, [r2, #0]
 80176e0:	6963      	ldr	r3, [r4, #20]
 80176e2:	692a      	ldr	r2, [r5, #16]
 80176e4:	f7f8 f9ea 	bl	800fabc <uxr_buffer_create_topic_bin>
 80176e8:	4602      	mov	r2, r0
 80176ea:	6920      	ldr	r0, [r4, #16]
 80176ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80176f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80176f4:	f7f7 fd86 	bl	800f204 <run_xrce_session>
 80176f8:	b118      	cbz	r0, 8017702 <create_topic+0x8a>
 80176fa:	4628      	mov	r0, r5
 80176fc:	b004      	add	sp, #16
 80176fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017702:	4628      	mov	r0, r5
 8017704:	f7f7 fc74 	bl	800eff0 <rmw_uxrce_fini_topic_memory>
 8017708:	2500      	movs	r5, #0
 801770a:	4628      	mov	r0, r5
 801770c:	b004      	add	sp, #16
 801770e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017712:	bf00      	nop
 8017714:	2000ad88 	.word	0x2000ad88
 8017718:	2000d07c 	.word	0x2000d07c
 801771c:	2000d0e0 	.word	0x2000d0e0

08017720 <destroy_topic>:
 8017720:	b538      	push	{r3, r4, r5, lr}
 8017722:	6984      	ldr	r4, [r0, #24]
 8017724:	b1d4      	cbz	r4, 801775c <destroy_topic+0x3c>
 8017726:	4605      	mov	r5, r0
 8017728:	6920      	ldr	r0, [r4, #16]
 801772a:	692a      	ldr	r2, [r5, #16]
 801772c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017730:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017734:	6819      	ldr	r1, [r3, #0]
 8017736:	f7f8 f945 	bl	800f9c4 <uxr_buffer_delete_entity>
 801773a:	4602      	mov	r2, r0
 801773c:	6920      	ldr	r0, [r4, #16]
 801773e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017742:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017746:	f7f7 fd5d 	bl	800f204 <run_xrce_session>
 801774a:	f080 0401 	eor.w	r4, r0, #1
 801774e:	b2e4      	uxtb	r4, r4
 8017750:	4628      	mov	r0, r5
 8017752:	0064      	lsls	r4, r4, #1
 8017754:	f7f7 fc4c 	bl	800eff0 <rmw_uxrce_fini_topic_memory>
 8017758:	4620      	mov	r0, r4
 801775a:	bd38      	pop	{r3, r4, r5, pc}
 801775c:	2401      	movs	r4, #1
 801775e:	4620      	mov	r0, r4
 8017760:	bd38      	pop	{r3, r4, r5, pc}
 8017762:	bf00      	nop

08017764 <rmw_send_request>:
 8017764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017768:	4604      	mov	r4, r0
 801776a:	6800      	ldr	r0, [r0, #0]
 801776c:	b08a      	sub	sp, #40	@ 0x28
 801776e:	460e      	mov	r6, r1
 8017770:	4615      	mov	r5, r2
 8017772:	b128      	cbz	r0, 8017780 <rmw_send_request+0x1c>
 8017774:	4b1e      	ldr	r3, [pc, #120]	@ (80177f0 <rmw_send_request+0x8c>)
 8017776:	6819      	ldr	r1, [r3, #0]
 8017778:	f7e8 fd12 	bl	80001a0 <strcmp>
 801777c:	2800      	cmp	r0, #0
 801777e:	d133      	bne.n	80177e8 <rmw_send_request+0x84>
 8017780:	6864      	ldr	r4, [r4, #4]
 8017782:	6963      	ldr	r3, [r4, #20]
 8017784:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 8017786:	689b      	ldr	r3, [r3, #8]
 8017788:	4798      	blx	r3
 801778a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801778e:	4630      	mov	r0, r6
 8017790:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017794:	4798      	blx	r3
 8017796:	693b      	ldr	r3, [r7, #16]
 8017798:	9000      	str	r0, [sp, #0]
 801779a:	6922      	ldr	r2, [r4, #16]
 801779c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801779e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80177a2:	ab02      	add	r3, sp, #8
 80177a4:	f7fa fd7c 	bl	80122a0 <uxr_prepare_output_stream>
 80177a8:	2300      	movs	r3, #0
 80177aa:	6028      	str	r0, [r5, #0]
 80177ac:	606b      	str	r3, [r5, #4]
 80177ae:	b190      	cbz	r0, 80177d6 <rmw_send_request+0x72>
 80177b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80177b4:	a902      	add	r1, sp, #8
 80177b6:	4630      	mov	r0, r6
 80177b8:	4798      	blx	r3
 80177ba:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80177be:	6938      	ldr	r0, [r7, #16]
 80177c0:	2b01      	cmp	r3, #1
 80177c2:	d00c      	beq.n	80177de <rmw_send_request+0x7a>
 80177c4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80177c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177ca:	f7f9 faab 	bl	8010d24 <uxr_run_session_until_confirm_delivery>
 80177ce:	2000      	movs	r0, #0
 80177d0:	b00a      	add	sp, #40	@ 0x28
 80177d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177d6:	2001      	movs	r0, #1
 80177d8:	b00a      	add	sp, #40	@ 0x28
 80177da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177e2:	f7f8 ff07 	bl	80105f4 <uxr_flash_output_streams>
 80177e6:	e7f2      	b.n	80177ce <rmw_send_request+0x6a>
 80177e8:	200c      	movs	r0, #12
 80177ea:	b00a      	add	sp, #40	@ 0x28
 80177ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f0:	0801ea7c 	.word	0x0801ea7c

080177f4 <rmw_take_request>:
 80177f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177f8:	4605      	mov	r5, r0
 80177fa:	6800      	ldr	r0, [r0, #0]
 80177fc:	b089      	sub	sp, #36	@ 0x24
 80177fe:	460c      	mov	r4, r1
 8017800:	4690      	mov	r8, r2
 8017802:	461e      	mov	r6, r3
 8017804:	b128      	cbz	r0, 8017812 <rmw_take_request+0x1e>
 8017806:	4b28      	ldr	r3, [pc, #160]	@ (80178a8 <rmw_take_request+0xb4>)
 8017808:	6819      	ldr	r1, [r3, #0]
 801780a:	f7e8 fcc9 	bl	80001a0 <strcmp>
 801780e:	2800      	cmp	r0, #0
 8017810:	d146      	bne.n	80178a0 <rmw_take_request+0xac>
 8017812:	b10e      	cbz	r6, 8017818 <rmw_take_request+0x24>
 8017814:	2300      	movs	r3, #0
 8017816:	7033      	strb	r3, [r6, #0]
 8017818:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801781c:	f7f7 fc74 	bl	800f108 <rmw_uxrce_clean_expired_static_input_buffer>
 8017820:	4648      	mov	r0, r9
 8017822:	f7f7 fc49 	bl	800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017826:	4607      	mov	r7, r0
 8017828:	b3b0      	cbz	r0, 8017898 <rmw_take_request+0xa4>
 801782a:	6885      	ldr	r5, [r0, #8]
 801782c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017830:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017834:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017838:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801783c:	7423      	strb	r3, [r4, #16]
 801783e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017842:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017846:	74e2      	strb	r2, [r4, #19]
 8017848:	f8a4 3011 	strh.w	r3, [r4, #17]
 801784c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017850:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017854:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017858:	61e1      	str	r1, [r4, #28]
 801785a:	6162      	str	r2, [r4, #20]
 801785c:	61a3      	str	r3, [r4, #24]
 801785e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	4798      	blx	r3
 8017866:	6844      	ldr	r4, [r0, #4]
 8017868:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801786c:	f105 0110 	add.w	r1, r5, #16
 8017870:	4668      	mov	r0, sp
 8017872:	f7f4 fe5d 	bl	800c530 <ucdr_init_buffer>
 8017876:	68e3      	ldr	r3, [r4, #12]
 8017878:	4641      	mov	r1, r8
 801787a:	4668      	mov	r0, sp
 801787c:	4798      	blx	r3
 801787e:	4639      	mov	r1, r7
 8017880:	4604      	mov	r4, r0
 8017882:	480a      	ldr	r0, [pc, #40]	@ (80178ac <rmw_take_request+0xb8>)
 8017884:	f7ff fe7c 	bl	8017580 <put_memory>
 8017888:	b106      	cbz	r6, 801788c <rmw_take_request+0x98>
 801788a:	7034      	strb	r4, [r6, #0]
 801788c:	f084 0001 	eor.w	r0, r4, #1
 8017890:	b2c0      	uxtb	r0, r0
 8017892:	b009      	add	sp, #36	@ 0x24
 8017894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017898:	2001      	movs	r0, #1
 801789a:	b009      	add	sp, #36	@ 0x24
 801789c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178a0:	200c      	movs	r0, #12
 80178a2:	b009      	add	sp, #36	@ 0x24
 80178a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178a8:	0801ea7c 	.word	0x0801ea7c
 80178ac:	2000ac60 	.word	0x2000ac60

080178b0 <rmw_send_response>:
 80178b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178b2:	4605      	mov	r5, r0
 80178b4:	6800      	ldr	r0, [r0, #0]
 80178b6:	b091      	sub	sp, #68	@ 0x44
 80178b8:	460c      	mov	r4, r1
 80178ba:	4616      	mov	r6, r2
 80178bc:	b128      	cbz	r0, 80178ca <rmw_send_response+0x1a>
 80178be:	4b28      	ldr	r3, [pc, #160]	@ (8017960 <rmw_send_response+0xb0>)
 80178c0:	6819      	ldr	r1, [r3, #0]
 80178c2:	f7e8 fc6d 	bl	80001a0 <strcmp>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d141      	bne.n	801794e <rmw_send_response+0x9e>
 80178ca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80178ce:	9306      	str	r3, [sp, #24]
 80178d0:	4623      	mov	r3, r4
 80178d2:	9207      	str	r2, [sp, #28]
 80178d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178d8:	686d      	ldr	r5, [r5, #4]
 80178da:	789b      	ldrb	r3, [r3, #2]
 80178dc:	68a1      	ldr	r1, [r4, #8]
 80178de:	f88d 2017 	strb.w	r2, [sp, #23]
 80178e2:	f88d 3016 	strb.w	r3, [sp, #22]
 80178e6:	68e2      	ldr	r2, [r4, #12]
 80178e8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80178ec:	6860      	ldr	r0, [r4, #4]
 80178ee:	f8ad 3014 	strh.w	r3, [sp, #20]
 80178f2:	ab02      	add	r3, sp, #8
 80178f4:	c307      	stmia	r3!, {r0, r1, r2}
 80178f6:	696b      	ldr	r3, [r5, #20]
 80178f8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80178fa:	68db      	ldr	r3, [r3, #12]
 80178fc:	4798      	blx	r3
 80178fe:	6844      	ldr	r4, [r0, #4]
 8017900:	4630      	mov	r0, r6
 8017902:	6923      	ldr	r3, [r4, #16]
 8017904:	4798      	blx	r3
 8017906:	f100 0318 	add.w	r3, r0, #24
 801790a:	6938      	ldr	r0, [r7, #16]
 801790c:	9300      	str	r3, [sp, #0]
 801790e:	692a      	ldr	r2, [r5, #16]
 8017910:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017912:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017916:	ab08      	add	r3, sp, #32
 8017918:	f7fa fcc2 	bl	80122a0 <uxr_prepare_output_stream>
 801791c:	b910      	cbnz	r0, 8017924 <rmw_send_response+0x74>
 801791e:	2001      	movs	r0, #1
 8017920:	b011      	add	sp, #68	@ 0x44
 8017922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017924:	a902      	add	r1, sp, #8
 8017926:	a808      	add	r0, sp, #32
 8017928:	f7fb fdec 	bl	8013504 <uxr_serialize_SampleIdentity>
 801792c:	68a3      	ldr	r3, [r4, #8]
 801792e:	a908      	add	r1, sp, #32
 8017930:	4630      	mov	r0, r6
 8017932:	4798      	blx	r3
 8017934:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017938:	6938      	ldr	r0, [r7, #16]
 801793a:	2b01      	cmp	r3, #1
 801793c:	d00a      	beq.n	8017954 <rmw_send_response+0xa4>
 801793e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017940:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017944:	f7f9 f9ee 	bl	8010d24 <uxr_run_session_until_confirm_delivery>
 8017948:	2000      	movs	r0, #0
 801794a:	b011      	add	sp, #68	@ 0x44
 801794c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801794e:	200c      	movs	r0, #12
 8017950:	b011      	add	sp, #68	@ 0x44
 8017952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017954:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017958:	f7f8 fe4c 	bl	80105f4 <uxr_flash_output_streams>
 801795c:	e7f4      	b.n	8017948 <rmw_send_response+0x98>
 801795e:	bf00      	nop
 8017960:	0801ea7c 	.word	0x0801ea7c

08017964 <rmw_take_response>:
 8017964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017968:	4604      	mov	r4, r0
 801796a:	6800      	ldr	r0, [r0, #0]
 801796c:	b088      	sub	sp, #32
 801796e:	4688      	mov	r8, r1
 8017970:	4617      	mov	r7, r2
 8017972:	461d      	mov	r5, r3
 8017974:	b120      	cbz	r0, 8017980 <rmw_take_response+0x1c>
 8017976:	4b1e      	ldr	r3, [pc, #120]	@ (80179f0 <rmw_take_response+0x8c>)
 8017978:	6819      	ldr	r1, [r3, #0]
 801797a:	f7e8 fc11 	bl	80001a0 <strcmp>
 801797e:	bb78      	cbnz	r0, 80179e0 <rmw_take_response+0x7c>
 8017980:	b10d      	cbz	r5, 8017986 <rmw_take_response+0x22>
 8017982:	2300      	movs	r3, #0
 8017984:	702b      	strb	r3, [r5, #0]
 8017986:	6864      	ldr	r4, [r4, #4]
 8017988:	f7f7 fbbe 	bl	800f108 <rmw_uxrce_clean_expired_static_input_buffer>
 801798c:	4620      	mov	r0, r4
 801798e:	f7f7 fb93 	bl	800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017992:	4606      	mov	r6, r0
 8017994:	b340      	cbz	r0, 80179e8 <rmw_take_response+0x84>
 8017996:	6963      	ldr	r3, [r4, #20]
 8017998:	6884      	ldr	r4, [r0, #8]
 801799a:	68db      	ldr	r3, [r3, #12]
 801799c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80179a0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80179a4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80179a8:	4798      	blx	r3
 80179aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80179ae:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80179b2:	f104 0110 	add.w	r1, r4, #16
 80179b6:	4668      	mov	r0, sp
 80179b8:	f7f4 fdba 	bl	800c530 <ucdr_init_buffer>
 80179bc:	4639      	mov	r1, r7
 80179be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80179c2:	4668      	mov	r0, sp
 80179c4:	4798      	blx	r3
 80179c6:	4631      	mov	r1, r6
 80179c8:	4604      	mov	r4, r0
 80179ca:	480a      	ldr	r0, [pc, #40]	@ (80179f4 <rmw_take_response+0x90>)
 80179cc:	f7ff fdd8 	bl	8017580 <put_memory>
 80179d0:	b105      	cbz	r5, 80179d4 <rmw_take_response+0x70>
 80179d2:	702c      	strb	r4, [r5, #0]
 80179d4:	f084 0001 	eor.w	r0, r4, #1
 80179d8:	b2c0      	uxtb	r0, r0
 80179da:	b008      	add	sp, #32
 80179dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e0:	200c      	movs	r0, #12
 80179e2:	b008      	add	sp, #32
 80179e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e8:	2001      	movs	r0, #1
 80179ea:	b008      	add	sp, #32
 80179ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f0:	0801ea7c 	.word	0x0801ea7c
 80179f4:	2000ac60 	.word	0x2000ac60

080179f8 <rmw_take_with_info>:
 80179f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179fa:	4604      	mov	r4, r0
 80179fc:	6800      	ldr	r0, [r0, #0]
 80179fe:	b089      	sub	sp, #36	@ 0x24
 8017a00:	460f      	mov	r7, r1
 8017a02:	4615      	mov	r5, r2
 8017a04:	b128      	cbz	r0, 8017a12 <rmw_take_with_info+0x1a>
 8017a06:	4b23      	ldr	r3, [pc, #140]	@ (8017a94 <rmw_take_with_info+0x9c>)
 8017a08:	6819      	ldr	r1, [r3, #0]
 8017a0a:	f7e8 fbc9 	bl	80001a0 <strcmp>
 8017a0e:	2800      	cmp	r0, #0
 8017a10:	d13d      	bne.n	8017a8e <rmw_take_with_info+0x96>
 8017a12:	6864      	ldr	r4, [r4, #4]
 8017a14:	b1fd      	cbz	r5, 8017a56 <rmw_take_with_info+0x5e>
 8017a16:	2300      	movs	r3, #0
 8017a18:	702b      	strb	r3, [r5, #0]
 8017a1a:	f7f7 fb75 	bl	800f108 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f7f7 fb4a 	bl	800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a24:	4606      	mov	r6, r0
 8017a26:	b1e8      	cbz	r0, 8017a64 <rmw_take_with_info+0x6c>
 8017a28:	6881      	ldr	r1, [r0, #8]
 8017a2a:	4668      	mov	r0, sp
 8017a2c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017a30:	3110      	adds	r1, #16
 8017a32:	f7f4 fd7d 	bl	800c530 <ucdr_init_buffer>
 8017a36:	69a3      	ldr	r3, [r4, #24]
 8017a38:	4639      	mov	r1, r7
 8017a3a:	68db      	ldr	r3, [r3, #12]
 8017a3c:	4668      	mov	r0, sp
 8017a3e:	4798      	blx	r3
 8017a40:	4631      	mov	r1, r6
 8017a42:	4604      	mov	r4, r0
 8017a44:	4814      	ldr	r0, [pc, #80]	@ (8017a98 <rmw_take_with_info+0xa0>)
 8017a46:	f7ff fd9b 	bl	8017580 <put_memory>
 8017a4a:	702c      	strb	r4, [r5, #0]
 8017a4c:	f084 0001 	eor.w	r0, r4, #1
 8017a50:	b2c0      	uxtb	r0, r0
 8017a52:	b009      	add	sp, #36	@ 0x24
 8017a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a56:	f7f7 fb57 	bl	800f108 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f7f7 fb2c 	bl	800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a60:	4605      	mov	r5, r0
 8017a62:	b910      	cbnz	r0, 8017a6a <rmw_take_with_info+0x72>
 8017a64:	2001      	movs	r0, #1
 8017a66:	b009      	add	sp, #36	@ 0x24
 8017a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a6a:	68a9      	ldr	r1, [r5, #8]
 8017a6c:	4668      	mov	r0, sp
 8017a6e:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017a72:	3110      	adds	r1, #16
 8017a74:	f7f4 fd5c 	bl	800c530 <ucdr_init_buffer>
 8017a78:	69a3      	ldr	r3, [r4, #24]
 8017a7a:	4639      	mov	r1, r7
 8017a7c:	68db      	ldr	r3, [r3, #12]
 8017a7e:	4668      	mov	r0, sp
 8017a80:	4798      	blx	r3
 8017a82:	4629      	mov	r1, r5
 8017a84:	4604      	mov	r4, r0
 8017a86:	4804      	ldr	r0, [pc, #16]	@ (8017a98 <rmw_take_with_info+0xa0>)
 8017a88:	f7ff fd7a 	bl	8017580 <put_memory>
 8017a8c:	e7de      	b.n	8017a4c <rmw_take_with_info+0x54>
 8017a8e:	200c      	movs	r0, #12
 8017a90:	b009      	add	sp, #36	@ 0x24
 8017a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a94:	0801ea7c 	.word	0x0801ea7c
 8017a98:	2000ac60 	.word	0x2000ac60

08017a9c <rmw_wait>:
 8017a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017aa0:	b089      	sub	sp, #36	@ 0x24
 8017aa2:	4607      	mov	r7, r0
 8017aa4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017aa6:	460e      	mov	r6, r1
 8017aa8:	4698      	mov	r8, r3
 8017aaa:	4691      	mov	r9, r2
 8017aac:	2a00      	cmp	r2, #0
 8017aae:	f000 811e 	beq.w	8017cee <rmw_wait+0x252>
 8017ab2:	2c00      	cmp	r4, #0
 8017ab4:	f000 80ef 	beq.w	8017c96 <rmw_wait+0x1fa>
 8017ab8:	4bb5      	ldr	r3, [pc, #724]	@ (8017d90 <rmw_wait+0x2f4>)
 8017aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017abc:	ad04      	add	r5, sp, #16
 8017abe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8017ac2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017ac6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017aca:	f7ff faa5 	bl	8017018 <rmw_time_equal>
 8017ace:	2800      	cmp	r0, #0
 8017ad0:	f000 811b 	beq.w	8017d0a <rmw_wait+0x26e>
 8017ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8017ad8:	f7f7 fb16 	bl	800f108 <rmw_uxrce_clean_expired_static_input_buffer>
 8017adc:	4bad      	ldr	r3, [pc, #692]	@ (8017d94 <rmw_wait+0x2f8>)
 8017ade:	681c      	ldr	r4, [r3, #0]
 8017ae0:	b14c      	cbz	r4, 8017af6 <rmw_wait+0x5a>
 8017ae2:	4623      	mov	r3, r4
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017aea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017aee:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d1f7      	bne.n	8017ae6 <rmw_wait+0x4a>
 8017af6:	f1b9 0f00 	cmp.w	r9, #0
 8017afa:	d011      	beq.n	8017b20 <rmw_wait+0x84>
 8017afc:	f8d9 1000 	ldr.w	r1, [r9]
 8017b00:	b171      	cbz	r1, 8017b20 <rmw_wait+0x84>
 8017b02:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017b06:	2300      	movs	r3, #0
 8017b08:	2001      	movs	r0, #1
 8017b0a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017b0e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017b10:	6912      	ldr	r2, [r2, #16]
 8017b12:	3301      	adds	r3, #1
 8017b14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b18:	4299      	cmp	r1, r3
 8017b1a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017b1e:	d1f4      	bne.n	8017b0a <rmw_wait+0x6e>
 8017b20:	f1b8 0f00 	cmp.w	r8, #0
 8017b24:	f000 8109 	beq.w	8017d3a <rmw_wait+0x29e>
 8017b28:	f8d8 1000 	ldr.w	r1, [r8]
 8017b2c:	2900      	cmp	r1, #0
 8017b2e:	f000 8116 	beq.w	8017d5e <rmw_wait+0x2c2>
 8017b32:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017b36:	2300      	movs	r3, #0
 8017b38:	2001      	movs	r0, #1
 8017b3a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017b3e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017b40:	6912      	ldr	r2, [r2, #16]
 8017b42:	3301      	adds	r3, #1
 8017b44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b48:	4299      	cmp	r1, r3
 8017b4a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017b4e:	d1f4      	bne.n	8017b3a <rmw_wait+0x9e>
 8017b50:	2f00      	cmp	r7, #0
 8017b52:	f000 8114 	beq.w	8017d7e <rmw_wait+0x2e2>
 8017b56:	6839      	ldr	r1, [r7, #0]
 8017b58:	b171      	cbz	r1, 8017b78 <rmw_wait+0xdc>
 8017b5a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8017b5e:	2300      	movs	r3, #0
 8017b60:	2001      	movs	r0, #1
 8017b62:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017b66:	6a12      	ldr	r2, [r2, #32]
 8017b68:	6912      	ldr	r2, [r2, #16]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b70:	4299      	cmp	r1, r3
 8017b72:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017b76:	d1f4      	bne.n	8017b62 <rmw_wait+0xc6>
 8017b78:	b344      	cbz	r4, 8017bcc <rmw_wait+0x130>
 8017b7a:	4622      	mov	r2, r4
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017b82:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017b86:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017b8a:	440b      	add	r3, r1
 8017b8c:	b2db      	uxtb	r3, r3
 8017b8e:	2a00      	cmp	r2, #0
 8017b90:	d1f5      	bne.n	8017b7e <rmw_wait+0xe2>
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d075      	beq.n	8017c82 <rmw_wait+0x1e6>
 8017b96:	1c6a      	adds	r2, r5, #1
 8017b98:	d00d      	beq.n	8017bb6 <rmw_wait+0x11a>
 8017b9a:	ee07 5a90 	vmov	s15, r5
 8017b9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017ba2:	ee07 3a90 	vmov	s15, r3
 8017ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017bae:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017bb2:	ee17 5a90 	vmov	r5, s15
 8017bb6:	68a0      	ldr	r0, [r4, #8]
 8017bb8:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017bbc:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	f040 808a 	bne.w	8017cda <rmw_wait+0x23e>
 8017bc6:	6864      	ldr	r4, [r4, #4]
 8017bc8:	2c00      	cmp	r4, #0
 8017bca:	d1f4      	bne.n	8017bb6 <rmw_wait+0x11a>
 8017bcc:	f1b9 0f00 	cmp.w	r9, #0
 8017bd0:	f000 80c3 	beq.w	8017d5a <rmw_wait+0x2be>
 8017bd4:	f8d9 5000 	ldr.w	r5, [r9]
 8017bd8:	b185      	cbz	r5, 8017bfc <rmw_wait+0x160>
 8017bda:	2400      	movs	r4, #0
 8017bdc:	4625      	mov	r5, r4
 8017bde:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017be2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017be6:	f7f7 fa67 	bl	800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017bea:	2800      	cmp	r0, #0
 8017bec:	d06d      	beq.n	8017cca <rmw_wait+0x22e>
 8017bee:	f8d9 3000 	ldr.w	r3, [r9]
 8017bf2:	3401      	adds	r4, #1
 8017bf4:	42a3      	cmp	r3, r4
 8017bf6:	f04f 0501 	mov.w	r5, #1
 8017bfa:	d8f0      	bhi.n	8017bde <rmw_wait+0x142>
 8017bfc:	f1b8 0f00 	cmp.w	r8, #0
 8017c00:	d012      	beq.n	8017c28 <rmw_wait+0x18c>
 8017c02:	f8d8 1000 	ldr.w	r1, [r8]
 8017c06:	2400      	movs	r4, #0
 8017c08:	b171      	cbz	r1, 8017c28 <rmw_wait+0x18c>
 8017c0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017c0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c12:	f7f7 fa51 	bl	800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c16:	2800      	cmp	r0, #0
 8017c18:	d047      	beq.n	8017caa <rmw_wait+0x20e>
 8017c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8017c1e:	3401      	adds	r4, #1
 8017c20:	42a3      	cmp	r3, r4
 8017c22:	f04f 0501 	mov.w	r5, #1
 8017c26:	d8f0      	bhi.n	8017c0a <rmw_wait+0x16e>
 8017c28:	b17f      	cbz	r7, 8017c4a <rmw_wait+0x1ae>
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	2400      	movs	r4, #0
 8017c2e:	b163      	cbz	r3, 8017c4a <rmw_wait+0x1ae>
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c36:	f7f7 fa3f 	bl	800f0b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c3a:	2800      	cmp	r0, #0
 8017c3c:	d03d      	beq.n	8017cba <rmw_wait+0x21e>
 8017c3e:	683b      	ldr	r3, [r7, #0]
 8017c40:	3401      	adds	r4, #1
 8017c42:	42a3      	cmp	r3, r4
 8017c44:	f04f 0501 	mov.w	r5, #1
 8017c48:	d8f2      	bhi.n	8017c30 <rmw_wait+0x194>
 8017c4a:	b1a6      	cbz	r6, 8017c76 <rmw_wait+0x1da>
 8017c4c:	6834      	ldr	r4, [r6, #0]
 8017c4e:	b194      	cbz	r4, 8017c76 <rmw_wait+0x1da>
 8017c50:	2300      	movs	r3, #0
 8017c52:	461f      	mov	r7, r3
 8017c54:	e004      	b.n	8017c60 <rmw_wait+0x1c4>
 8017c56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017c5a:	3301      	adds	r3, #1
 8017c5c:	429c      	cmp	r4, r3
 8017c5e:	d00a      	beq.n	8017c76 <rmw_wait+0x1da>
 8017c60:	6870      	ldr	r0, [r6, #4]
 8017c62:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017c66:	7c0a      	ldrb	r2, [r1, #16]
 8017c68:	2a00      	cmp	r2, #0
 8017c6a:	d0f4      	beq.n	8017c56 <rmw_wait+0x1ba>
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	429c      	cmp	r4, r3
 8017c70:	740f      	strb	r7, [r1, #16]
 8017c72:	4615      	mov	r5, r2
 8017c74:	d1f4      	bne.n	8017c60 <rmw_wait+0x1c4>
 8017c76:	f085 0001 	eor.w	r0, r5, #1
 8017c7a:	0040      	lsls	r0, r0, #1
 8017c7c:	b009      	add	sp, #36	@ 0x24
 8017c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c82:	68a0      	ldr	r0, [r4, #8]
 8017c84:	2100      	movs	r1, #0
 8017c86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c8a:	f7f9 f811 	bl	8010cb0 <uxr_run_session_timeout>
 8017c8e:	6864      	ldr	r4, [r4, #4]
 8017c90:	2c00      	cmp	r4, #0
 8017c92:	d1f6      	bne.n	8017c82 <rmw_wait+0x1e6>
 8017c94:	e79a      	b.n	8017bcc <rmw_wait+0x130>
 8017c96:	f7f7 fa37 	bl	800f108 <rmw_uxrce_clean_expired_static_input_buffer>
 8017c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8017d94 <rmw_wait+0x2f8>)
 8017c9c:	681c      	ldr	r4, [r3, #0]
 8017c9e:	f04f 35ff 	mov.w	r5, #4294967295
 8017ca2:	2c00      	cmp	r4, #0
 8017ca4:	f47f af1d 	bne.w	8017ae2 <rmw_wait+0x46>
 8017ca8:	e728      	b.n	8017afc <rmw_wait+0x60>
 8017caa:	e9d8 3200 	ldrd	r3, r2, [r8]
 8017cae:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017cb2:	3401      	adds	r4, #1
 8017cb4:	429c      	cmp	r4, r3
 8017cb6:	d3a8      	bcc.n	8017c0a <rmw_wait+0x16e>
 8017cb8:	e7b6      	b.n	8017c28 <rmw_wait+0x18c>
 8017cba:	e9d7 3200 	ldrd	r3, r2, [r7]
 8017cbe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017cc2:	3401      	adds	r4, #1
 8017cc4:	42a3      	cmp	r3, r4
 8017cc6:	d8b3      	bhi.n	8017c30 <rmw_wait+0x194>
 8017cc8:	e7bf      	b.n	8017c4a <rmw_wait+0x1ae>
 8017cca:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017cce:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017cd2:	3401      	adds	r4, #1
 8017cd4:	42a3      	cmp	r3, r4
 8017cd6:	d882      	bhi.n	8017bde <rmw_wait+0x142>
 8017cd8:	e790      	b.n	8017bfc <rmw_wait+0x160>
 8017cda:	4629      	mov	r1, r5
 8017cdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017ce0:	f7f9 f800 	bl	8010ce4 <uxr_run_session_until_data>
 8017ce4:	6864      	ldr	r4, [r4, #4]
 8017ce6:	2c00      	cmp	r4, #0
 8017ce8:	f47f af65 	bne.w	8017bb6 <rmw_wait+0x11a>
 8017cec:	e76e      	b.n	8017bcc <rmw_wait+0x130>
 8017cee:	b1f3      	cbz	r3, 8017d2e <rmw_wait+0x292>
 8017cf0:	2c00      	cmp	r4, #0
 8017cf2:	f47f aee1 	bne.w	8017ab8 <rmw_wait+0x1c>
 8017cf6:	f7f7 fa07 	bl	800f108 <rmw_uxrce_clean_expired_static_input_buffer>
 8017cfa:	4b26      	ldr	r3, [pc, #152]	@ (8017d94 <rmw_wait+0x2f8>)
 8017cfc:	681c      	ldr	r4, [r3, #0]
 8017cfe:	f04f 35ff 	mov.w	r5, #4294967295
 8017d02:	2c00      	cmp	r4, #0
 8017d04:	f47f aeed 	bne.w	8017ae2 <rmw_wait+0x46>
 8017d08:	e70a      	b.n	8017b20 <rmw_wait+0x84>
 8017d0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017d0e:	f7ff f9d7 	bl	80170c0 <rmw_time_total_nsec>
 8017d12:	4a21      	ldr	r2, [pc, #132]	@ (8017d98 <rmw_wait+0x2fc>)
 8017d14:	2300      	movs	r3, #0
 8017d16:	f7e8 ffdf 	bl	8000cd8 <__aeabi_uldivmod>
 8017d1a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017d1e:	f171 0100 	sbcs.w	r1, r1, #0
 8017d22:	4605      	mov	r5, r0
 8017d24:	f6ff aed8 	blt.w	8017ad8 <rmw_wait+0x3c>
 8017d28:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8017d2c:	e6d4      	b.n	8017ad8 <rmw_wait+0x3c>
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	d1de      	bne.n	8017cf0 <rmw_wait+0x254>
 8017d32:	2900      	cmp	r1, #0
 8017d34:	d1dc      	bne.n	8017cf0 <rmw_wait+0x254>
 8017d36:	4608      	mov	r0, r1
 8017d38:	e7a0      	b.n	8017c7c <rmw_wait+0x1e0>
 8017d3a:	2f00      	cmp	r7, #0
 8017d3c:	f47f af0b 	bne.w	8017b56 <rmw_wait+0xba>
 8017d40:	2c00      	cmp	r4, #0
 8017d42:	f47f af1a 	bne.w	8017b7a <rmw_wait+0xde>
 8017d46:	f1b9 0f00 	cmp.w	r9, #0
 8017d4a:	d027      	beq.n	8017d9c <rmw_wait+0x300>
 8017d4c:	f8d9 3000 	ldr.w	r3, [r9]
 8017d50:	4625      	mov	r5, r4
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	f47f af41 	bne.w	8017bda <rmw_wait+0x13e>
 8017d58:	e777      	b.n	8017c4a <rmw_wait+0x1ae>
 8017d5a:	464d      	mov	r5, r9
 8017d5c:	e74e      	b.n	8017bfc <rmw_wait+0x160>
 8017d5e:	2f00      	cmp	r7, #0
 8017d60:	f47f aef9 	bne.w	8017b56 <rmw_wait+0xba>
 8017d64:	2c00      	cmp	r4, #0
 8017d66:	f47f af08 	bne.w	8017b7a <rmw_wait+0xde>
 8017d6a:	f1b9 0f00 	cmp.w	r9, #0
 8017d6e:	d015      	beq.n	8017d9c <rmw_wait+0x300>
 8017d70:	f8d9 3000 	ldr.w	r3, [r9]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	f47f af30 	bne.w	8017bda <rmw_wait+0x13e>
 8017d7a:	2500      	movs	r5, #0
 8017d7c:	e743      	b.n	8017c06 <rmw_wait+0x16a>
 8017d7e:	2c00      	cmp	r4, #0
 8017d80:	f47f aefb 	bne.w	8017b7a <rmw_wait+0xde>
 8017d84:	f1b9 0f00 	cmp.w	r9, #0
 8017d88:	f47f af24 	bne.w	8017bd4 <rmw_wait+0x138>
 8017d8c:	e7f5      	b.n	8017d7a <rmw_wait+0x2de>
 8017d8e:	bf00      	nop
 8017d90:	0801d3c8 	.word	0x0801d3c8
 8017d94:	2000ce38 	.word	0x2000ce38
 8017d98:	000f4240 	.word	0x000f4240
 8017d9c:	464d      	mov	r5, r9
 8017d9e:	e754      	b.n	8017c4a <rmw_wait+0x1ae>

08017da0 <rmw_create_wait_set>:
 8017da0:	b508      	push	{r3, lr}
 8017da2:	4803      	ldr	r0, [pc, #12]	@ (8017db0 <rmw_create_wait_set+0x10>)
 8017da4:	f7ff fbdc 	bl	8017560 <get_memory>
 8017da8:	b108      	cbz	r0, 8017dae <rmw_create_wait_set+0xe>
 8017daa:	6880      	ldr	r0, [r0, #8]
 8017dac:	3010      	adds	r0, #16
 8017dae:	bd08      	pop	{r3, pc}
 8017db0:	20008ab8 	.word	0x20008ab8

08017db4 <rmw_destroy_wait_set>:
 8017db4:	b508      	push	{r3, lr}
 8017db6:	4b08      	ldr	r3, [pc, #32]	@ (8017dd8 <rmw_destroy_wait_set+0x24>)
 8017db8:	6819      	ldr	r1, [r3, #0]
 8017dba:	b911      	cbnz	r1, 8017dc2 <rmw_destroy_wait_set+0xe>
 8017dbc:	e00a      	b.n	8017dd4 <rmw_destroy_wait_set+0x20>
 8017dbe:	6849      	ldr	r1, [r1, #4]
 8017dc0:	b141      	cbz	r1, 8017dd4 <rmw_destroy_wait_set+0x20>
 8017dc2:	688b      	ldr	r3, [r1, #8]
 8017dc4:	3310      	adds	r3, #16
 8017dc6:	4298      	cmp	r0, r3
 8017dc8:	d1f9      	bne.n	8017dbe <rmw_destroy_wait_set+0xa>
 8017dca:	4803      	ldr	r0, [pc, #12]	@ (8017dd8 <rmw_destroy_wait_set+0x24>)
 8017dcc:	f7ff fbd8 	bl	8017580 <put_memory>
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	bd08      	pop	{r3, pc}
 8017dd4:	2001      	movs	r0, #1
 8017dd6:	bd08      	pop	{r3, pc}
 8017dd8:	20008ab8 	.word	0x20008ab8

08017ddc <sensor_msgs__msg__Range__get_type_hash>:
 8017ddc:	4800      	ldr	r0, [pc, #0]	@ (8017de0 <sensor_msgs__msg__Range__get_type_hash+0x4>)
 8017dde:	4770      	bx	lr
 8017de0:	20001288 	.word	0x20001288

08017de4 <sensor_msgs__msg__Range__get_type_description>:
 8017de4:	b570      	push	{r4, r5, r6, lr}
 8017de6:	4e0c      	ldr	r6, [pc, #48]	@ (8017e18 <sensor_msgs__msg__Range__get_type_description+0x34>)
 8017de8:	7835      	ldrb	r5, [r6, #0]
 8017dea:	b10d      	cbz	r5, 8017df0 <sensor_msgs__msg__Range__get_type_description+0xc>
 8017dec:	480b      	ldr	r0, [pc, #44]	@ (8017e1c <sensor_msgs__msg__Range__get_type_description+0x38>)
 8017dee:	bd70      	pop	{r4, r5, r6, pc}
 8017df0:	4628      	mov	r0, r5
 8017df2:	f000 f8dd 	bl	8017fb0 <builtin_interfaces__msg__Time__get_type_description>
 8017df6:	300c      	adds	r0, #12
 8017df8:	c807      	ldmia	r0, {r0, r1, r2}
 8017dfa:	4c09      	ldr	r4, [pc, #36]	@ (8017e20 <sensor_msgs__msg__Range__get_type_description+0x3c>)
 8017dfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017e00:	4628      	mov	r0, r5
 8017e02:	f000 f861 	bl	8017ec8 <std_msgs__msg__Header__get_type_description>
 8017e06:	300c      	adds	r0, #12
 8017e08:	c807      	ldmia	r0, {r0, r1, r2}
 8017e0a:	3418      	adds	r4, #24
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017e12:	7033      	strb	r3, [r6, #0]
 8017e14:	4801      	ldr	r0, [pc, #4]	@ (8017e1c <sensor_msgs__msg__Range__get_type_description+0x38>)
 8017e16:	bd70      	pop	{r4, r5, r6, pc}
 8017e18:	2000d189 	.word	0x2000d189
 8017e1c:	0801eab0 	.word	0x0801eab0
 8017e20:	20001b08 	.word	0x20001b08

08017e24 <sensor_msgs__msg__Range__get_individual_type_description_source>:
 8017e24:	4800      	ldr	r0, [pc, #0]	@ (8017e28 <sensor_msgs__msg__Range__get_individual_type_description_source+0x4>)
 8017e26:	4770      	bx	lr
 8017e28:	0801ea8c 	.word	0x0801ea8c

08017e2c <sensor_msgs__msg__Range__get_type_description_sources>:
 8017e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e2e:	4e17      	ldr	r6, [pc, #92]	@ (8017e8c <sensor_msgs__msg__Range__get_type_description_sources+0x60>)
 8017e30:	7837      	ldrb	r7, [r6, #0]
 8017e32:	b10f      	cbz	r7, 8017e38 <sensor_msgs__msg__Range__get_type_description_sources+0xc>
 8017e34:	4816      	ldr	r0, [pc, #88]	@ (8017e90 <sensor_msgs__msg__Range__get_type_description_sources+0x64>)
 8017e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e38:	4d16      	ldr	r5, [pc, #88]	@ (8017e94 <sensor_msgs__msg__Range__get_type_description_sources+0x68>)
 8017e3a:	4c17      	ldr	r4, [pc, #92]	@ (8017e98 <sensor_msgs__msg__Range__get_type_description_sources+0x6c>)
 8017e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e44:	682b      	ldr	r3, [r5, #0]
 8017e46:	4625      	mov	r5, r4
 8017e48:	4638      	mov	r0, r7
 8017e4a:	f845 3b04 	str.w	r3, [r5], #4
 8017e4e:	f000 f8bb 	bl	8017fc8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8017e52:	4684      	mov	ip, r0
 8017e54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017e5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017e60:	4638      	mov	r0, r7
 8017e62:	f8dc 3000 	ldr.w	r3, [ip]
 8017e66:	602b      	str	r3, [r5, #0]
 8017e68:	f000 f846 	bl	8017ef8 <std_msgs__msg__Header__get_individual_type_description_source>
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	4684      	mov	ip, r0
 8017e70:	7033      	strb	r3, [r6, #0]
 8017e72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017e76:	3428      	adds	r4, #40	@ 0x28
 8017e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017e80:	f8dc 3000 	ldr.w	r3, [ip]
 8017e84:	4802      	ldr	r0, [pc, #8]	@ (8017e90 <sensor_msgs__msg__Range__get_type_description_sources+0x64>)
 8017e86:	6023      	str	r3, [r4, #0]
 8017e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e8a:	bf00      	nop
 8017e8c:	2000d188 	.word	0x2000d188
 8017e90:	0801ea80 	.word	0x0801ea80
 8017e94:	0801ea8c 	.word	0x0801ea8c
 8017e98:	2000d11c 	.word	0x2000d11c

08017e9c <sensor_msgs__msg__Range__init>:
 8017e9c:	b150      	cbz	r0, 8017eb4 <sensor_msgs__msg__Range__init+0x18>
 8017e9e:	b510      	push	{r4, lr}
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	f000 f855 	bl	8017f50 <std_msgs__msg__Header__init>
 8017ea6:	b100      	cbz	r0, 8017eaa <sensor_msgs__msg__Range__init+0xe>
 8017ea8:	bd10      	pop	{r4, pc}
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f000 f870 	bl	8017f90 <std_msgs__msg__Header__fini>
 8017eb0:	2000      	movs	r0, #0
 8017eb2:	bd10      	pop	{r4, pc}
 8017eb4:	2000      	movs	r0, #0
 8017eb6:	4770      	bx	lr

08017eb8 <sensor_msgs__msg__Range__fini>:
 8017eb8:	b108      	cbz	r0, 8017ebe <sensor_msgs__msg__Range__fini+0x6>
 8017eba:	f000 b869 	b.w	8017f90 <std_msgs__msg__Header__fini>
 8017ebe:	4770      	bx	lr

08017ec0 <std_msgs__msg__Header__get_type_hash>:
 8017ec0:	4800      	ldr	r0, [pc, #0]	@ (8017ec4 <std_msgs__msg__Header__get_type_hash+0x4>)
 8017ec2:	4770      	bx	lr
 8017ec4:	20001dc4 	.word	0x20001dc4

08017ec8 <std_msgs__msg__Header__get_type_description>:
 8017ec8:	b510      	push	{r4, lr}
 8017eca:	4c08      	ldr	r4, [pc, #32]	@ (8017eec <std_msgs__msg__Header__get_type_description+0x24>)
 8017ecc:	7820      	ldrb	r0, [r4, #0]
 8017ece:	b108      	cbz	r0, 8017ed4 <std_msgs__msg__Header__get_type_description+0xc>
 8017ed0:	4807      	ldr	r0, [pc, #28]	@ (8017ef0 <std_msgs__msg__Header__get_type_description+0x28>)
 8017ed2:	bd10      	pop	{r4, pc}
 8017ed4:	f000 f86c 	bl	8017fb0 <builtin_interfaces__msg__Time__get_type_description>
 8017ed8:	300c      	adds	r0, #12
 8017eda:	c807      	ldmia	r0, {r0, r1, r2}
 8017edc:	4b05      	ldr	r3, [pc, #20]	@ (8017ef4 <std_msgs__msg__Header__get_type_description+0x2c>)
 8017ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	4802      	ldr	r0, [pc, #8]	@ (8017ef0 <std_msgs__msg__Header__get_type_description+0x28>)
 8017ee6:	7023      	strb	r3, [r4, #0]
 8017ee8:	bd10      	pop	{r4, pc}
 8017eea:	bf00      	nop
 8017eec:	2000d1d5 	.word	0x2000d1d5
 8017ef0:	0801eb04 	.word	0x0801eb04
 8017ef4:	20001f3c 	.word	0x20001f3c

08017ef8 <std_msgs__msg__Header__get_individual_type_description_source>:
 8017ef8:	4800      	ldr	r0, [pc, #0]	@ (8017efc <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 8017efa:	4770      	bx	lr
 8017efc:	0801eae0 	.word	0x0801eae0

08017f00 <std_msgs__msg__Header__get_type_description_sources>:
 8017f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f02:	4e0f      	ldr	r6, [pc, #60]	@ (8017f40 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 8017f04:	7837      	ldrb	r7, [r6, #0]
 8017f06:	b10f      	cbz	r7, 8017f0c <std_msgs__msg__Header__get_type_description_sources+0xc>
 8017f08:	480e      	ldr	r0, [pc, #56]	@ (8017f44 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8017f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f0c:	4d0e      	ldr	r5, [pc, #56]	@ (8017f48 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 8017f0e:	4c0f      	ldr	r4, [pc, #60]	@ (8017f4c <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 8017f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f18:	682b      	ldr	r3, [r5, #0]
 8017f1a:	f844 3b04 	str.w	r3, [r4], #4
 8017f1e:	4638      	mov	r0, r7
 8017f20:	f000 f852 	bl	8017fc8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8017f24:	2301      	movs	r3, #1
 8017f26:	4684      	mov	ip, r0
 8017f28:	7033      	strb	r3, [r6, #0]
 8017f2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f36:	f8dc 3000 	ldr.w	r3, [ip]
 8017f3a:	4802      	ldr	r0, [pc, #8]	@ (8017f44 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8017f3c:	6023      	str	r3, [r4, #0]
 8017f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f40:	2000d1d4 	.word	0x2000d1d4
 8017f44:	0801ead4 	.word	0x0801ead4
 8017f48:	0801eae0 	.word	0x0801eae0
 8017f4c:	2000d18c 	.word	0x2000d18c

08017f50 <std_msgs__msg__Header__init>:
 8017f50:	b1d8      	cbz	r0, 8017f8a <std_msgs__msg__Header__init+0x3a>
 8017f52:	b538      	push	{r3, r4, r5, lr}
 8017f54:	4604      	mov	r4, r0
 8017f56:	f000 f857 	bl	8018008 <builtin_interfaces__msg__Time__init>
 8017f5a:	b130      	cbz	r0, 8017f6a <std_msgs__msg__Header__init+0x1a>
 8017f5c:	f104 0508 	add.w	r5, r4, #8
 8017f60:	4628      	mov	r0, r5
 8017f62:	f001 fcaf 	bl	80198c4 <rosidl_runtime_c__String__init>
 8017f66:	b148      	cbz	r0, 8017f7c <std_msgs__msg__Header__init+0x2c>
 8017f68:	bd38      	pop	{r3, r4, r5, pc}
 8017f6a:	4620      	mov	r0, r4
 8017f6c:	f000 f850 	bl	8018010 <builtin_interfaces__msg__Time__fini>
 8017f70:	f104 0008 	add.w	r0, r4, #8
 8017f74:	f001 fcc0 	bl	80198f8 <rosidl_runtime_c__String__fini>
 8017f78:	2000      	movs	r0, #0
 8017f7a:	bd38      	pop	{r3, r4, r5, pc}
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	f000 f847 	bl	8018010 <builtin_interfaces__msg__Time__fini>
 8017f82:	4628      	mov	r0, r5
 8017f84:	f001 fcb8 	bl	80198f8 <rosidl_runtime_c__String__fini>
 8017f88:	e7f6      	b.n	8017f78 <std_msgs__msg__Header__init+0x28>
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	4770      	bx	lr
 8017f8e:	bf00      	nop

08017f90 <std_msgs__msg__Header__fini>:
 8017f90:	b148      	cbz	r0, 8017fa6 <std_msgs__msg__Header__fini+0x16>
 8017f92:	b510      	push	{r4, lr}
 8017f94:	4604      	mov	r4, r0
 8017f96:	f000 f83b 	bl	8018010 <builtin_interfaces__msg__Time__fini>
 8017f9a:	f104 0008 	add.w	r0, r4, #8
 8017f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fa2:	f001 bca9 	b.w	80198f8 <rosidl_runtime_c__String__fini>
 8017fa6:	4770      	bx	lr

08017fa8 <builtin_interfaces__msg__Time__get_type_hash>:
 8017fa8:	4800      	ldr	r0, [pc, #0]	@ (8017fac <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8017faa:	4770      	bx	lr
 8017fac:	2000201c 	.word	0x2000201c

08017fb0 <builtin_interfaces__msg__Time__get_type_description>:
 8017fb0:	4b03      	ldr	r3, [pc, #12]	@ (8017fc0 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8017fb2:	781a      	ldrb	r2, [r3, #0]
 8017fb4:	b90a      	cbnz	r2, 8017fba <builtin_interfaces__msg__Time__get_type_description+0xa>
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	701a      	strb	r2, [r3, #0]
 8017fba:	4802      	ldr	r0, [pc, #8]	@ (8017fc4 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8017fbc:	4770      	bx	lr
 8017fbe:	bf00      	nop
 8017fc0:	2000d1fd 	.word	0x2000d1fd
 8017fc4:	0801eb58 	.word	0x0801eb58

08017fc8 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8017fc8:	4800      	ldr	r0, [pc, #0]	@ (8017fcc <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8017fca:	4770      	bx	lr
 8017fcc:	0801eb34 	.word	0x0801eb34

08017fd0 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8017fd0:	4b09      	ldr	r3, [pc, #36]	@ (8017ff8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8017fd2:	781a      	ldrb	r2, [r3, #0]
 8017fd4:	b96a      	cbnz	r2, 8017ff2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8017fd6:	b430      	push	{r4, r5}
 8017fd8:	4d08      	ldr	r5, [pc, #32]	@ (8017ffc <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8017fda:	4c09      	ldr	r4, [pc, #36]	@ (8018000 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8017fdc:	2201      	movs	r2, #1
 8017fde:	701a      	strb	r2, [r3, #0]
 8017fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017fe8:	682b      	ldr	r3, [r5, #0]
 8017fea:	4806      	ldr	r0, [pc, #24]	@ (8018004 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8017fec:	6023      	str	r3, [r4, #0]
 8017fee:	bc30      	pop	{r4, r5}
 8017ff0:	4770      	bx	lr
 8017ff2:	4804      	ldr	r0, [pc, #16]	@ (8018004 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8017ff4:	4770      	bx	lr
 8017ff6:	bf00      	nop
 8017ff8:	2000d1fc 	.word	0x2000d1fc
 8017ffc:	0801eb34 	.word	0x0801eb34
 8018000:	2000d1d8 	.word	0x2000d1d8
 8018004:	0801eb28 	.word	0x0801eb28

08018008 <builtin_interfaces__msg__Time__init>:
 8018008:	3800      	subs	r0, #0
 801800a:	bf18      	it	ne
 801800c:	2001      	movne	r0, #1
 801800e:	4770      	bx	lr

08018010 <builtin_interfaces__msg__Time__fini>:
 8018010:	4770      	bx	lr
 8018012:	bf00      	nop

08018014 <ucdr_serialize_endian_array_char>:
 8018014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018018:	4619      	mov	r1, r3
 801801a:	461f      	mov	r7, r3
 801801c:	4605      	mov	r5, r0
 801801e:	4690      	mov	r8, r2
 8018020:	f7f4 fa32 	bl	800c488 <ucdr_check_buffer_available_for>
 8018024:	b9e0      	cbnz	r0, 8018060 <ucdr_serialize_endian_array_char+0x4c>
 8018026:	463e      	mov	r6, r7
 8018028:	e009      	b.n	801803e <ucdr_serialize_endian_array_char+0x2a>
 801802a:	68a8      	ldr	r0, [r5, #8]
 801802c:	f002 ff2f 	bl	801ae8e <memcpy>
 8018030:	68ab      	ldr	r3, [r5, #8]
 8018032:	6928      	ldr	r0, [r5, #16]
 8018034:	4423      	add	r3, r4
 8018036:	4420      	add	r0, r4
 8018038:	1b36      	subs	r6, r6, r4
 801803a:	60ab      	str	r3, [r5, #8]
 801803c:	6128      	str	r0, [r5, #16]
 801803e:	2201      	movs	r2, #1
 8018040:	4631      	mov	r1, r6
 8018042:	4628      	mov	r0, r5
 8018044:	f7f4 faa8 	bl	800c598 <ucdr_check_final_buffer_behavior_array>
 8018048:	1bb9      	subs	r1, r7, r6
 801804a:	4604      	mov	r4, r0
 801804c:	4602      	mov	r2, r0
 801804e:	4441      	add	r1, r8
 8018050:	2800      	cmp	r0, #0
 8018052:	d1ea      	bne.n	801802a <ucdr_serialize_endian_array_char+0x16>
 8018054:	2301      	movs	r3, #1
 8018056:	7da8      	ldrb	r0, [r5, #22]
 8018058:	756b      	strb	r3, [r5, #21]
 801805a:	4058      	eors	r0, r3
 801805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018060:	463a      	mov	r2, r7
 8018062:	68a8      	ldr	r0, [r5, #8]
 8018064:	4641      	mov	r1, r8
 8018066:	f002 ff12 	bl	801ae8e <memcpy>
 801806a:	68aa      	ldr	r2, [r5, #8]
 801806c:	692b      	ldr	r3, [r5, #16]
 801806e:	443a      	add	r2, r7
 8018070:	443b      	add	r3, r7
 8018072:	60aa      	str	r2, [r5, #8]
 8018074:	612b      	str	r3, [r5, #16]
 8018076:	e7ed      	b.n	8018054 <ucdr_serialize_endian_array_char+0x40>

08018078 <ucdr_deserialize_endian_array_char>:
 8018078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801807c:	4619      	mov	r1, r3
 801807e:	461f      	mov	r7, r3
 8018080:	4605      	mov	r5, r0
 8018082:	4690      	mov	r8, r2
 8018084:	f7f4 fa00 	bl	800c488 <ucdr_check_buffer_available_for>
 8018088:	b9e0      	cbnz	r0, 80180c4 <ucdr_deserialize_endian_array_char+0x4c>
 801808a:	463e      	mov	r6, r7
 801808c:	e009      	b.n	80180a2 <ucdr_deserialize_endian_array_char+0x2a>
 801808e:	68a9      	ldr	r1, [r5, #8]
 8018090:	f002 fefd 	bl	801ae8e <memcpy>
 8018094:	68aa      	ldr	r2, [r5, #8]
 8018096:	692b      	ldr	r3, [r5, #16]
 8018098:	4422      	add	r2, r4
 801809a:	4423      	add	r3, r4
 801809c:	1b36      	subs	r6, r6, r4
 801809e:	60aa      	str	r2, [r5, #8]
 80180a0:	612b      	str	r3, [r5, #16]
 80180a2:	2201      	movs	r2, #1
 80180a4:	4631      	mov	r1, r6
 80180a6:	4628      	mov	r0, r5
 80180a8:	f7f4 fa76 	bl	800c598 <ucdr_check_final_buffer_behavior_array>
 80180ac:	4604      	mov	r4, r0
 80180ae:	1bb8      	subs	r0, r7, r6
 80180b0:	4622      	mov	r2, r4
 80180b2:	4440      	add	r0, r8
 80180b4:	2c00      	cmp	r4, #0
 80180b6:	d1ea      	bne.n	801808e <ucdr_deserialize_endian_array_char+0x16>
 80180b8:	2301      	movs	r3, #1
 80180ba:	7da8      	ldrb	r0, [r5, #22]
 80180bc:	756b      	strb	r3, [r5, #21]
 80180be:	4058      	eors	r0, r3
 80180c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180c4:	463a      	mov	r2, r7
 80180c6:	68a9      	ldr	r1, [r5, #8]
 80180c8:	4640      	mov	r0, r8
 80180ca:	f002 fee0 	bl	801ae8e <memcpy>
 80180ce:	68aa      	ldr	r2, [r5, #8]
 80180d0:	692b      	ldr	r3, [r5, #16]
 80180d2:	443a      	add	r2, r7
 80180d4:	443b      	add	r3, r7
 80180d6:	60aa      	str	r2, [r5, #8]
 80180d8:	612b      	str	r3, [r5, #16]
 80180da:	e7ed      	b.n	80180b8 <ucdr_deserialize_endian_array_char+0x40>

080180dc <ucdr_serialize_array_uint8_t>:
 80180dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180e0:	4688      	mov	r8, r1
 80180e2:	4611      	mov	r1, r2
 80180e4:	4617      	mov	r7, r2
 80180e6:	4605      	mov	r5, r0
 80180e8:	f7f4 f9ce 	bl	800c488 <ucdr_check_buffer_available_for>
 80180ec:	b9e0      	cbnz	r0, 8018128 <ucdr_serialize_array_uint8_t+0x4c>
 80180ee:	463e      	mov	r6, r7
 80180f0:	e009      	b.n	8018106 <ucdr_serialize_array_uint8_t+0x2a>
 80180f2:	68a8      	ldr	r0, [r5, #8]
 80180f4:	f002 fecb 	bl	801ae8e <memcpy>
 80180f8:	68aa      	ldr	r2, [r5, #8]
 80180fa:	692b      	ldr	r3, [r5, #16]
 80180fc:	4422      	add	r2, r4
 80180fe:	4423      	add	r3, r4
 8018100:	1b36      	subs	r6, r6, r4
 8018102:	60aa      	str	r2, [r5, #8]
 8018104:	612b      	str	r3, [r5, #16]
 8018106:	2201      	movs	r2, #1
 8018108:	4631      	mov	r1, r6
 801810a:	4628      	mov	r0, r5
 801810c:	f7f4 fa44 	bl	800c598 <ucdr_check_final_buffer_behavior_array>
 8018110:	1bb9      	subs	r1, r7, r6
 8018112:	4604      	mov	r4, r0
 8018114:	4602      	mov	r2, r0
 8018116:	4441      	add	r1, r8
 8018118:	2800      	cmp	r0, #0
 801811a:	d1ea      	bne.n	80180f2 <ucdr_serialize_array_uint8_t+0x16>
 801811c:	2301      	movs	r3, #1
 801811e:	7da8      	ldrb	r0, [r5, #22]
 8018120:	756b      	strb	r3, [r5, #21]
 8018122:	4058      	eors	r0, r3
 8018124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018128:	463a      	mov	r2, r7
 801812a:	68a8      	ldr	r0, [r5, #8]
 801812c:	4641      	mov	r1, r8
 801812e:	f002 feae 	bl	801ae8e <memcpy>
 8018132:	68aa      	ldr	r2, [r5, #8]
 8018134:	692b      	ldr	r3, [r5, #16]
 8018136:	443a      	add	r2, r7
 8018138:	443b      	add	r3, r7
 801813a:	60aa      	str	r2, [r5, #8]
 801813c:	612b      	str	r3, [r5, #16]
 801813e:	e7ed      	b.n	801811c <ucdr_serialize_array_uint8_t+0x40>

08018140 <ucdr_serialize_endian_array_uint8_t>:
 8018140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018144:	4619      	mov	r1, r3
 8018146:	461f      	mov	r7, r3
 8018148:	4605      	mov	r5, r0
 801814a:	4690      	mov	r8, r2
 801814c:	f7f4 f99c 	bl	800c488 <ucdr_check_buffer_available_for>
 8018150:	b9e0      	cbnz	r0, 801818c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018152:	463e      	mov	r6, r7
 8018154:	e009      	b.n	801816a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8018156:	68a8      	ldr	r0, [r5, #8]
 8018158:	f002 fe99 	bl	801ae8e <memcpy>
 801815c:	68ab      	ldr	r3, [r5, #8]
 801815e:	6928      	ldr	r0, [r5, #16]
 8018160:	4423      	add	r3, r4
 8018162:	4420      	add	r0, r4
 8018164:	1b36      	subs	r6, r6, r4
 8018166:	60ab      	str	r3, [r5, #8]
 8018168:	6128      	str	r0, [r5, #16]
 801816a:	2201      	movs	r2, #1
 801816c:	4631      	mov	r1, r6
 801816e:	4628      	mov	r0, r5
 8018170:	f7f4 fa12 	bl	800c598 <ucdr_check_final_buffer_behavior_array>
 8018174:	1bb9      	subs	r1, r7, r6
 8018176:	4604      	mov	r4, r0
 8018178:	4602      	mov	r2, r0
 801817a:	4441      	add	r1, r8
 801817c:	2800      	cmp	r0, #0
 801817e:	d1ea      	bne.n	8018156 <ucdr_serialize_endian_array_uint8_t+0x16>
 8018180:	2301      	movs	r3, #1
 8018182:	7da8      	ldrb	r0, [r5, #22]
 8018184:	756b      	strb	r3, [r5, #21]
 8018186:	4058      	eors	r0, r3
 8018188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801818c:	463a      	mov	r2, r7
 801818e:	68a8      	ldr	r0, [r5, #8]
 8018190:	4641      	mov	r1, r8
 8018192:	f002 fe7c 	bl	801ae8e <memcpy>
 8018196:	68aa      	ldr	r2, [r5, #8]
 8018198:	692b      	ldr	r3, [r5, #16]
 801819a:	443a      	add	r2, r7
 801819c:	443b      	add	r3, r7
 801819e:	60aa      	str	r2, [r5, #8]
 80181a0:	612b      	str	r3, [r5, #16]
 80181a2:	e7ed      	b.n	8018180 <ucdr_serialize_endian_array_uint8_t+0x40>

080181a4 <ucdr_deserialize_array_uint8_t>:
 80181a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181a8:	4688      	mov	r8, r1
 80181aa:	4611      	mov	r1, r2
 80181ac:	4617      	mov	r7, r2
 80181ae:	4605      	mov	r5, r0
 80181b0:	f7f4 f96a 	bl	800c488 <ucdr_check_buffer_available_for>
 80181b4:	b9e0      	cbnz	r0, 80181f0 <ucdr_deserialize_array_uint8_t+0x4c>
 80181b6:	463e      	mov	r6, r7
 80181b8:	e009      	b.n	80181ce <ucdr_deserialize_array_uint8_t+0x2a>
 80181ba:	68a9      	ldr	r1, [r5, #8]
 80181bc:	f002 fe67 	bl	801ae8e <memcpy>
 80181c0:	68aa      	ldr	r2, [r5, #8]
 80181c2:	692b      	ldr	r3, [r5, #16]
 80181c4:	4422      	add	r2, r4
 80181c6:	4423      	add	r3, r4
 80181c8:	1b36      	subs	r6, r6, r4
 80181ca:	60aa      	str	r2, [r5, #8]
 80181cc:	612b      	str	r3, [r5, #16]
 80181ce:	2201      	movs	r2, #1
 80181d0:	4631      	mov	r1, r6
 80181d2:	4628      	mov	r0, r5
 80181d4:	f7f4 f9e0 	bl	800c598 <ucdr_check_final_buffer_behavior_array>
 80181d8:	4604      	mov	r4, r0
 80181da:	1bb8      	subs	r0, r7, r6
 80181dc:	4622      	mov	r2, r4
 80181de:	4440      	add	r0, r8
 80181e0:	2c00      	cmp	r4, #0
 80181e2:	d1ea      	bne.n	80181ba <ucdr_deserialize_array_uint8_t+0x16>
 80181e4:	2301      	movs	r3, #1
 80181e6:	7da8      	ldrb	r0, [r5, #22]
 80181e8:	756b      	strb	r3, [r5, #21]
 80181ea:	4058      	eors	r0, r3
 80181ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f0:	463a      	mov	r2, r7
 80181f2:	68a9      	ldr	r1, [r5, #8]
 80181f4:	4640      	mov	r0, r8
 80181f6:	f002 fe4a 	bl	801ae8e <memcpy>
 80181fa:	68aa      	ldr	r2, [r5, #8]
 80181fc:	692b      	ldr	r3, [r5, #16]
 80181fe:	443a      	add	r2, r7
 8018200:	443b      	add	r3, r7
 8018202:	60aa      	str	r2, [r5, #8]
 8018204:	612b      	str	r3, [r5, #16]
 8018206:	e7ed      	b.n	80181e4 <ucdr_deserialize_array_uint8_t+0x40>

08018208 <ucdr_deserialize_endian_array_uint8_t>:
 8018208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801820c:	4619      	mov	r1, r3
 801820e:	461f      	mov	r7, r3
 8018210:	4605      	mov	r5, r0
 8018212:	4690      	mov	r8, r2
 8018214:	f7f4 f938 	bl	800c488 <ucdr_check_buffer_available_for>
 8018218:	b9e0      	cbnz	r0, 8018254 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801821a:	463e      	mov	r6, r7
 801821c:	e009      	b.n	8018232 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801821e:	68a9      	ldr	r1, [r5, #8]
 8018220:	f002 fe35 	bl	801ae8e <memcpy>
 8018224:	68aa      	ldr	r2, [r5, #8]
 8018226:	692b      	ldr	r3, [r5, #16]
 8018228:	4422      	add	r2, r4
 801822a:	4423      	add	r3, r4
 801822c:	1b36      	subs	r6, r6, r4
 801822e:	60aa      	str	r2, [r5, #8]
 8018230:	612b      	str	r3, [r5, #16]
 8018232:	2201      	movs	r2, #1
 8018234:	4631      	mov	r1, r6
 8018236:	4628      	mov	r0, r5
 8018238:	f7f4 f9ae 	bl	800c598 <ucdr_check_final_buffer_behavior_array>
 801823c:	4604      	mov	r4, r0
 801823e:	1bb8      	subs	r0, r7, r6
 8018240:	4622      	mov	r2, r4
 8018242:	4440      	add	r0, r8
 8018244:	2c00      	cmp	r4, #0
 8018246:	d1ea      	bne.n	801821e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018248:	2301      	movs	r3, #1
 801824a:	7da8      	ldrb	r0, [r5, #22]
 801824c:	756b      	strb	r3, [r5, #21]
 801824e:	4058      	eors	r0, r3
 8018250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018254:	463a      	mov	r2, r7
 8018256:	68a9      	ldr	r1, [r5, #8]
 8018258:	4640      	mov	r0, r8
 801825a:	f002 fe18 	bl	801ae8e <memcpy>
 801825e:	68aa      	ldr	r2, [r5, #8]
 8018260:	692b      	ldr	r3, [r5, #16]
 8018262:	443a      	add	r2, r7
 8018264:	443b      	add	r3, r7
 8018266:	60aa      	str	r2, [r5, #8]
 8018268:	612b      	str	r3, [r5, #16]
 801826a:	e7ed      	b.n	8018248 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801826c <ucdr_serialize_string>:
 801826c:	b538      	push	{r3, r4, r5, lr}
 801826e:	4605      	mov	r5, r0
 8018270:	4608      	mov	r0, r1
 8018272:	460c      	mov	r4, r1
 8018274:	f7e7 fff4 	bl	8000260 <strlen>
 8018278:	4621      	mov	r1, r4
 801827a:	1c42      	adds	r2, r0, #1
 801827c:	4628      	mov	r0, r5
 801827e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018282:	f7f7 bb43 	b.w	800f90c <ucdr_serialize_sequence_char>
 8018286:	bf00      	nop

08018288 <ucdr_deserialize_string>:
 8018288:	b500      	push	{lr}
 801828a:	b083      	sub	sp, #12
 801828c:	ab01      	add	r3, sp, #4
 801828e:	f7f7 fb4f 	bl	800f930 <ucdr_deserialize_sequence_char>
 8018292:	b003      	add	sp, #12
 8018294:	f85d fb04 	ldr.w	pc, [sp], #4

08018298 <uxr_init_input_best_effort_stream>:
 8018298:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801829c:	8003      	strh	r3, [r0, #0]
 801829e:	4770      	bx	lr

080182a0 <uxr_reset_input_best_effort_stream>:
 80182a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80182a4:	8003      	strh	r3, [r0, #0]
 80182a6:	4770      	bx	lr

080182a8 <uxr_receive_best_effort_message>:
 80182a8:	b538      	push	{r3, r4, r5, lr}
 80182aa:	4604      	mov	r4, r0
 80182ac:	8800      	ldrh	r0, [r0, #0]
 80182ae:	460d      	mov	r5, r1
 80182b0:	f000 fd28 	bl	8018d04 <uxr_seq_num_cmp>
 80182b4:	4603      	mov	r3, r0
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80182bc:	bfb8      	it	lt
 80182be:	8025      	strhlt	r5, [r4, #0]
 80182c0:	bd38      	pop	{r3, r4, r5, pc}
 80182c2:	bf00      	nop

080182c4 <on_full_input_buffer>:
 80182c4:	b570      	push	{r4, r5, r6, lr}
 80182c6:	4605      	mov	r5, r0
 80182c8:	460c      	mov	r4, r1
 80182ca:	682b      	ldr	r3, [r5, #0]
 80182cc:	6809      	ldr	r1, [r1, #0]
 80182ce:	8920      	ldrh	r0, [r4, #8]
 80182d0:	6862      	ldr	r2, [r4, #4]
 80182d2:	fbb2 f2f0 	udiv	r2, r2, r0
 80182d6:	1a5b      	subs	r3, r3, r1
 80182d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80182dc:	3301      	adds	r3, #1
 80182de:	b29b      	uxth	r3, r3
 80182e0:	fbb3 f6f0 	udiv	r6, r3, r0
 80182e4:	fb00 3316 	mls	r3, r0, r6, r3
 80182e8:	b29b      	uxth	r3, r3
 80182ea:	fb02 f303 	mul.w	r3, r2, r3
 80182ee:	1d18      	adds	r0, r3, #4
 80182f0:	4408      	add	r0, r1
 80182f2:	7d26      	ldrb	r6, [r4, #20]
 80182f4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80182f8:	b116      	cbz	r6, 8018300 <on_full_input_buffer+0x3c>
 80182fa:	2600      	movs	r6, #0
 80182fc:	f840 6c04 	str.w	r6, [r0, #-4]
 8018300:	2a03      	cmp	r2, #3
 8018302:	d801      	bhi.n	8018308 <on_full_input_buffer+0x44>
 8018304:	2001      	movs	r0, #1
 8018306:	bd70      	pop	{r4, r5, r6, pc}
 8018308:	3308      	adds	r3, #8
 801830a:	4419      	add	r1, r3
 801830c:	4628      	mov	r0, r5
 801830e:	692b      	ldr	r3, [r5, #16]
 8018310:	3a04      	subs	r2, #4
 8018312:	f7f4 f905 	bl	800c520 <ucdr_init_buffer_origin>
 8018316:	4628      	mov	r0, r5
 8018318:	4902      	ldr	r1, [pc, #8]	@ (8018324 <on_full_input_buffer+0x60>)
 801831a:	4622      	mov	r2, r4
 801831c:	f7f4 f8dc 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 8018320:	2000      	movs	r0, #0
 8018322:	bd70      	pop	{r4, r5, r6, pc}
 8018324:	080182c5 	.word	0x080182c5

08018328 <uxr_init_input_reliable_stream>:
 8018328:	b500      	push	{lr}
 801832a:	e9c0 1200 	strd	r1, r2, [r0]
 801832e:	f04f 0e00 	mov.w	lr, #0
 8018332:	9a01      	ldr	r2, [sp, #4]
 8018334:	8103      	strh	r3, [r0, #8]
 8018336:	6102      	str	r2, [r0, #16]
 8018338:	f880 e014 	strb.w	lr, [r0, #20]
 801833c:	b1d3      	cbz	r3, 8018374 <uxr_init_input_reliable_stream+0x4c>
 801833e:	f8c1 e000 	str.w	lr, [r1]
 8018342:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018346:	f1bc 0f01 	cmp.w	ip, #1
 801834a:	d913      	bls.n	8018374 <uxr_init_input_reliable_stream+0x4c>
 801834c:	2301      	movs	r3, #1
 801834e:	fbb3 f1fc 	udiv	r1, r3, ip
 8018352:	fb0c 3111 	mls	r1, ip, r1, r3
 8018356:	b289      	uxth	r1, r1
 8018358:	6842      	ldr	r2, [r0, #4]
 801835a:	fbb2 f2fc 	udiv	r2, r2, ip
 801835e:	fb01 f202 	mul.w	r2, r1, r2
 8018362:	6801      	ldr	r1, [r0, #0]
 8018364:	f841 e002 	str.w	lr, [r1, r2]
 8018368:	3301      	adds	r3, #1
 801836a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801836e:	b29b      	uxth	r3, r3
 8018370:	459c      	cmp	ip, r3
 8018372:	d8ec      	bhi.n	801834e <uxr_init_input_reliable_stream+0x26>
 8018374:	f04f 33ff 	mov.w	r3, #4294967295
 8018378:	60c3      	str	r3, [r0, #12]
 801837a:	f85d fb04 	ldr.w	pc, [sp], #4
 801837e:	bf00      	nop

08018380 <uxr_reset_input_reliable_stream>:
 8018380:	8901      	ldrh	r1, [r0, #8]
 8018382:	b1e9      	cbz	r1, 80183c0 <uxr_reset_input_reliable_stream+0x40>
 8018384:	f04f 0c00 	mov.w	ip, #0
 8018388:	b500      	push	{lr}
 801838a:	4663      	mov	r3, ip
 801838c:	46e6      	mov	lr, ip
 801838e:	fbb3 f2f1 	udiv	r2, r3, r1
 8018392:	fb01 3312 	mls	r3, r1, r2, r3
 8018396:	b29b      	uxth	r3, r3
 8018398:	6842      	ldr	r2, [r0, #4]
 801839a:	fbb2 f2f1 	udiv	r2, r2, r1
 801839e:	fb03 f202 	mul.w	r2, r3, r2
 80183a2:	6803      	ldr	r3, [r0, #0]
 80183a4:	f843 e002 	str.w	lr, [r3, r2]
 80183a8:	f10c 0c01 	add.w	ip, ip, #1
 80183ac:	8901      	ldrh	r1, [r0, #8]
 80183ae:	fa1f f38c 	uxth.w	r3, ip
 80183b2:	4299      	cmp	r1, r3
 80183b4:	d8eb      	bhi.n	801838e <uxr_reset_input_reliable_stream+0xe>
 80183b6:	f04f 33ff 	mov.w	r3, #4294967295
 80183ba:	60c3      	str	r3, [r0, #12]
 80183bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80183c0:	f04f 33ff 	mov.w	r3, #4294967295
 80183c4:	60c3      	str	r3, [r0, #12]
 80183c6:	4770      	bx	lr

080183c8 <uxr_receive_reliable_message>:
 80183c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183cc:	4604      	mov	r4, r0
 80183ce:	460d      	mov	r5, r1
 80183d0:	8901      	ldrh	r1, [r0, #8]
 80183d2:	8980      	ldrh	r0, [r0, #12]
 80183d4:	4690      	mov	r8, r2
 80183d6:	461f      	mov	r7, r3
 80183d8:	f000 fc8c 	bl	8018cf4 <uxr_seq_num_add>
 80183dc:	4629      	mov	r1, r5
 80183de:	4606      	mov	r6, r0
 80183e0:	89a0      	ldrh	r0, [r4, #12]
 80183e2:	f000 fc8f 	bl	8018d04 <uxr_seq_num_cmp>
 80183e6:	2800      	cmp	r0, #0
 80183e8:	db0a      	blt.n	8018400 <uxr_receive_reliable_message+0x38>
 80183ea:	2600      	movs	r6, #0
 80183ec:	89e0      	ldrh	r0, [r4, #14]
 80183ee:	4629      	mov	r1, r5
 80183f0:	f000 fc88 	bl	8018d04 <uxr_seq_num_cmp>
 80183f4:	2800      	cmp	r0, #0
 80183f6:	bfb8      	it	lt
 80183f8:	81e5      	strhlt	r5, [r4, #14]
 80183fa:	4630      	mov	r0, r6
 80183fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018400:	4630      	mov	r0, r6
 8018402:	4629      	mov	r1, r5
 8018404:	f000 fc7e 	bl	8018d04 <uxr_seq_num_cmp>
 8018408:	2800      	cmp	r0, #0
 801840a:	dbee      	blt.n	80183ea <uxr_receive_reliable_message+0x22>
 801840c:	6923      	ldr	r3, [r4, #16]
 801840e:	4640      	mov	r0, r8
 8018410:	4798      	blx	r3
 8018412:	2101      	movs	r1, #1
 8018414:	4606      	mov	r6, r0
 8018416:	89a0      	ldrh	r0, [r4, #12]
 8018418:	f000 fc6c 	bl	8018cf4 <uxr_seq_num_add>
 801841c:	b90e      	cbnz	r6, 8018422 <uxr_receive_reliable_message+0x5a>
 801841e:	4285      	cmp	r5, r0
 8018420:	d046      	beq.n	80184b0 <uxr_receive_reliable_message+0xe8>
 8018422:	8921      	ldrh	r1, [r4, #8]
 8018424:	fbb5 f2f1 	udiv	r2, r5, r1
 8018428:	fb01 5212 	mls	r2, r1, r2, r5
 801842c:	b292      	uxth	r2, r2
 801842e:	6863      	ldr	r3, [r4, #4]
 8018430:	6820      	ldr	r0, [r4, #0]
 8018432:	fbb3 f3f1 	udiv	r3, r3, r1
 8018436:	fb02 f303 	mul.w	r3, r2, r3
 801843a:	3304      	adds	r3, #4
 801843c:	4418      	add	r0, r3
 801843e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d1d1      	bne.n	80183ea <uxr_receive_reliable_message+0x22>
 8018446:	4641      	mov	r1, r8
 8018448:	463a      	mov	r2, r7
 801844a:	f002 fd20 	bl	801ae8e <memcpy>
 801844e:	8921      	ldrh	r1, [r4, #8]
 8018450:	fbb5 f2f1 	udiv	r2, r5, r1
 8018454:	fb01 5212 	mls	r2, r1, r2, r5
 8018458:	b292      	uxth	r2, r2
 801845a:	6863      	ldr	r3, [r4, #4]
 801845c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018460:	fb02 f303 	mul.w	r3, r2, r3
 8018464:	6822      	ldr	r2, [r4, #0]
 8018466:	50d7      	str	r7, [r2, r3]
 8018468:	9a06      	ldr	r2, [sp, #24]
 801846a:	2301      	movs	r3, #1
 801846c:	7013      	strb	r3, [r2, #0]
 801846e:	2e00      	cmp	r6, #0
 8018470:	d0bb      	beq.n	80183ea <uxr_receive_reliable_message+0x22>
 8018472:	89a6      	ldrh	r6, [r4, #12]
 8018474:	2101      	movs	r1, #1
 8018476:	4630      	mov	r0, r6
 8018478:	f000 fc3c 	bl	8018cf4 <uxr_seq_num_add>
 801847c:	8921      	ldrh	r1, [r4, #8]
 801847e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018482:	fb01 0212 	mls	r2, r1, r2, r0
 8018486:	b292      	uxth	r2, r2
 8018488:	6863      	ldr	r3, [r4, #4]
 801848a:	fbb3 f3f1 	udiv	r3, r3, r1
 801848e:	4606      	mov	r6, r0
 8018490:	fb02 f303 	mul.w	r3, r2, r3
 8018494:	6820      	ldr	r0, [r4, #0]
 8018496:	3304      	adds	r3, #4
 8018498:	4418      	add	r0, r3
 801849a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d0a3      	beq.n	80183ea <uxr_receive_reliable_message+0x22>
 80184a2:	6923      	ldr	r3, [r4, #16]
 80184a4:	4798      	blx	r3
 80184a6:	2802      	cmp	r0, #2
 80184a8:	d005      	beq.n	80184b6 <uxr_receive_reliable_message+0xee>
 80184aa:	2801      	cmp	r0, #1
 80184ac:	d0e2      	beq.n	8018474 <uxr_receive_reliable_message+0xac>
 80184ae:	e79c      	b.n	80183ea <uxr_receive_reliable_message+0x22>
 80184b0:	9b06      	ldr	r3, [sp, #24]
 80184b2:	81a5      	strh	r5, [r4, #12]
 80184b4:	701e      	strb	r6, [r3, #0]
 80184b6:	2601      	movs	r6, #1
 80184b8:	e798      	b.n	80183ec <uxr_receive_reliable_message+0x24>
 80184ba:	bf00      	nop

080184bc <uxr_next_input_reliable_buffer_available>:
 80184bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184c0:	4604      	mov	r4, r0
 80184c2:	460f      	mov	r7, r1
 80184c4:	8980      	ldrh	r0, [r0, #12]
 80184c6:	2101      	movs	r1, #1
 80184c8:	4690      	mov	r8, r2
 80184ca:	f000 fc13 	bl	8018cf4 <uxr_seq_num_add>
 80184ce:	8921      	ldrh	r1, [r4, #8]
 80184d0:	fbb0 f2f1 	udiv	r2, r0, r1
 80184d4:	fb01 0212 	mls	r2, r1, r2, r0
 80184d8:	b292      	uxth	r2, r2
 80184da:	6863      	ldr	r3, [r4, #4]
 80184dc:	6826      	ldr	r6, [r4, #0]
 80184de:	fbb3 f3f1 	udiv	r3, r3, r1
 80184e2:	fb02 f303 	mul.w	r3, r2, r3
 80184e6:	3304      	adds	r3, #4
 80184e8:	441e      	add	r6, r3
 80184ea:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80184ee:	f1b9 0f00 	cmp.w	r9, #0
 80184f2:	d023      	beq.n	801853c <uxr_next_input_reliable_buffer_available+0x80>
 80184f4:	6923      	ldr	r3, [r4, #16]
 80184f6:	4605      	mov	r5, r0
 80184f8:	4630      	mov	r0, r6
 80184fa:	4798      	blx	r3
 80184fc:	4682      	mov	sl, r0
 80184fe:	b300      	cbz	r0, 8018542 <uxr_next_input_reliable_buffer_available+0x86>
 8018500:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018504:	2101      	movs	r1, #1
 8018506:	4650      	mov	r0, sl
 8018508:	f000 fbf4 	bl	8018cf4 <uxr_seq_num_add>
 801850c:	8921      	ldrh	r1, [r4, #8]
 801850e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018512:	4682      	mov	sl, r0
 8018514:	fb01 0212 	mls	r2, r1, r2, r0
 8018518:	e9d4 0300 	ldrd	r0, r3, [r4]
 801851c:	b292      	uxth	r2, r2
 801851e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018522:	fb02 f303 	mul.w	r3, r2, r3
 8018526:	3304      	adds	r3, #4
 8018528:	4418      	add	r0, r3
 801852a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801852e:	b12b      	cbz	r3, 801853c <uxr_next_input_reliable_buffer_available+0x80>
 8018530:	6923      	ldr	r3, [r4, #16]
 8018532:	4798      	blx	r3
 8018534:	2802      	cmp	r0, #2
 8018536:	d01b      	beq.n	8018570 <uxr_next_input_reliable_buffer_available+0xb4>
 8018538:	2801      	cmp	r0, #1
 801853a:	d0e3      	beq.n	8018504 <uxr_next_input_reliable_buffer_available+0x48>
 801853c:	2000      	movs	r0, #0
 801853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018542:	464a      	mov	r2, r9
 8018544:	4631      	mov	r1, r6
 8018546:	4638      	mov	r0, r7
 8018548:	f7f3 fff2 	bl	800c530 <ucdr_init_buffer>
 801854c:	8921      	ldrh	r1, [r4, #8]
 801854e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018552:	fb01 5212 	mls	r2, r1, r2, r5
 8018556:	b292      	uxth	r2, r2
 8018558:	6863      	ldr	r3, [r4, #4]
 801855a:	fbb3 f3f1 	udiv	r3, r3, r1
 801855e:	fb02 f303 	mul.w	r3, r2, r3
 8018562:	6822      	ldr	r2, [r4, #0]
 8018564:	f842 a003 	str.w	sl, [r2, r3]
 8018568:	81a5      	strh	r5, [r4, #12]
 801856a:	2001      	movs	r0, #1
 801856c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018570:	eb06 0108 	add.w	r1, r6, r8
 8018574:	8926      	ldrh	r6, [r4, #8]
 8018576:	fbb5 f0f6 	udiv	r0, r5, r6
 801857a:	fb06 5010 	mls	r0, r6, r0, r5
 801857e:	b280      	uxth	r0, r0
 8018580:	6863      	ldr	r3, [r4, #4]
 8018582:	fbb3 f3f6 	udiv	r3, r3, r6
 8018586:	fb00 f303 	mul.w	r3, r0, r3
 801858a:	6820      	ldr	r0, [r4, #0]
 801858c:	2500      	movs	r5, #0
 801858e:	50c5      	str	r5, [r0, r3]
 8018590:	eba9 0208 	sub.w	r2, r9, r8
 8018594:	4638      	mov	r0, r7
 8018596:	f7f3 ffcb 	bl	800c530 <ucdr_init_buffer>
 801859a:	4903      	ldr	r1, [pc, #12]	@ (80185a8 <uxr_next_input_reliable_buffer_available+0xec>)
 801859c:	4622      	mov	r2, r4
 801859e:	4638      	mov	r0, r7
 80185a0:	f7f3 ff9a 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 80185a4:	4655      	mov	r5, sl
 80185a6:	e7df      	b.n	8018568 <uxr_next_input_reliable_buffer_available+0xac>
 80185a8:	080182c5 	.word	0x080182c5

080185ac <uxr_process_heartbeat>:
 80185ac:	b538      	push	{r3, r4, r5, lr}
 80185ae:	4611      	mov	r1, r2
 80185b0:	4604      	mov	r4, r0
 80185b2:	89c0      	ldrh	r0, [r0, #14]
 80185b4:	4615      	mov	r5, r2
 80185b6:	f000 fba5 	bl	8018d04 <uxr_seq_num_cmp>
 80185ba:	2800      	cmp	r0, #0
 80185bc:	bfb8      	it	lt
 80185be:	81e5      	strhlt	r5, [r4, #14]
 80185c0:	bd38      	pop	{r3, r4, r5, pc}
 80185c2:	bf00      	nop

080185c4 <uxr_compute_acknack>:
 80185c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185c8:	8903      	ldrh	r3, [r0, #8]
 80185ca:	8985      	ldrh	r5, [r0, #12]
 80185cc:	4604      	mov	r4, r0
 80185ce:	460e      	mov	r6, r1
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d048      	beq.n	8018666 <uxr_compute_acknack+0xa2>
 80185d4:	4628      	mov	r0, r5
 80185d6:	2701      	movs	r7, #1
 80185d8:	e003      	b.n	80185e2 <uxr_compute_acknack+0x1e>
 80185da:	4567      	cmp	r7, ip
 80185dc:	d243      	bcs.n	8018666 <uxr_compute_acknack+0xa2>
 80185de:	89a0      	ldrh	r0, [r4, #12]
 80185e0:	3701      	adds	r7, #1
 80185e2:	b2b9      	uxth	r1, r7
 80185e4:	f000 fb86 	bl	8018cf4 <uxr_seq_num_add>
 80185e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80185ec:	fbb0 f2fc 	udiv	r2, r0, ip
 80185f0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80185f4:	fb0c 0212 	mls	r2, ip, r2, r0
 80185f8:	b292      	uxth	r2, r2
 80185fa:	fbb3 f3fc 	udiv	r3, r3, ip
 80185fe:	fb02 f303 	mul.w	r3, r2, r3
 8018602:	58cb      	ldr	r3, [r1, r3]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d1e8      	bne.n	80185da <uxr_compute_acknack+0x16>
 8018608:	8030      	strh	r0, [r6, #0]
 801860a:	2101      	movs	r1, #1
 801860c:	89e5      	ldrh	r5, [r4, #14]
 801860e:	f000 fb75 	bl	8018cfc <uxr_seq_num_sub>
 8018612:	4601      	mov	r1, r0
 8018614:	4628      	mov	r0, r5
 8018616:	f000 fb71 	bl	8018cfc <uxr_seq_num_sub>
 801861a:	4605      	mov	r5, r0
 801861c:	4607      	mov	r7, r0
 801861e:	b1f8      	cbz	r0, 8018660 <uxr_compute_acknack+0x9c>
 8018620:	f04f 0900 	mov.w	r9, #0
 8018624:	464d      	mov	r5, r9
 8018626:	f04f 0801 	mov.w	r8, #1
 801862a:	fa1f f189 	uxth.w	r1, r9
 801862e:	8830      	ldrh	r0, [r6, #0]
 8018630:	f000 fb60 	bl	8018cf4 <uxr_seq_num_add>
 8018634:	8921      	ldrh	r1, [r4, #8]
 8018636:	fbb0 f3f1 	udiv	r3, r0, r1
 801863a:	fb03 0011 	mls	r0, r3, r1, r0
 801863e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018642:	b280      	uxth	r0, r0
 8018644:	fbb3 f3f1 	udiv	r3, r3, r1
 8018648:	fb00 f303 	mul.w	r3, r0, r3
 801864c:	fa08 f109 	lsl.w	r1, r8, r9
 8018650:	58d3      	ldr	r3, [r2, r3]
 8018652:	f109 0901 	add.w	r9, r9, #1
 8018656:	b90b      	cbnz	r3, 801865c <uxr_compute_acknack+0x98>
 8018658:	4329      	orrs	r1, r5
 801865a:	b28d      	uxth	r5, r1
 801865c:	454f      	cmp	r7, r9
 801865e:	d1e4      	bne.n	801862a <uxr_compute_acknack+0x66>
 8018660:	4628      	mov	r0, r5
 8018662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018666:	4628      	mov	r0, r5
 8018668:	e7ce      	b.n	8018608 <uxr_compute_acknack+0x44>
 801866a:	bf00      	nop

0801866c <uxr_init_output_best_effort_stream>:
 801866c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018670:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018674:	6001      	str	r1, [r0, #0]
 8018676:	7303      	strb	r3, [r0, #12]
 8018678:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801867c:	4770      	bx	lr
 801867e:	bf00      	nop

08018680 <uxr_reset_output_best_effort_stream>:
 8018680:	7b02      	ldrb	r2, [r0, #12]
 8018682:	6042      	str	r2, [r0, #4]
 8018684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018688:	81c3      	strh	r3, [r0, #14]
 801868a:	4770      	bx	lr

0801868c <uxr_prepare_best_effort_buffer_to_write>:
 801868c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801868e:	4604      	mov	r4, r0
 8018690:	b083      	sub	sp, #12
 8018692:	6840      	ldr	r0, [r0, #4]
 8018694:	460d      	mov	r5, r1
 8018696:	4616      	mov	r6, r2
 8018698:	f7f9 fd40 	bl	801211c <uxr_submessage_padding>
 801869c:	6863      	ldr	r3, [r4, #4]
 801869e:	4418      	add	r0, r3
 80186a0:	68a3      	ldr	r3, [r4, #8]
 80186a2:	1942      	adds	r2, r0, r5
 80186a4:	4293      	cmp	r3, r2
 80186a6:	bf2c      	ite	cs
 80186a8:	2701      	movcs	r7, #1
 80186aa:	2700      	movcc	r7, #0
 80186ac:	d202      	bcs.n	80186b4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80186ae:	4638      	mov	r0, r7
 80186b0:	b003      	add	sp, #12
 80186b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186b4:	9000      	str	r0, [sp, #0]
 80186b6:	6821      	ldr	r1, [r4, #0]
 80186b8:	4630      	mov	r0, r6
 80186ba:	2300      	movs	r3, #0
 80186bc:	f7f3 ff26 	bl	800c50c <ucdr_init_buffer_origin_offset>
 80186c0:	6863      	ldr	r3, [r4, #4]
 80186c2:	4638      	mov	r0, r7
 80186c4:	442b      	add	r3, r5
 80186c6:	6063      	str	r3, [r4, #4]
 80186c8:	b003      	add	sp, #12
 80186ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186cc <uxr_prepare_best_effort_buffer_to_send>:
 80186cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d0:	4604      	mov	r4, r0
 80186d2:	461d      	mov	r5, r3
 80186d4:	6840      	ldr	r0, [r0, #4]
 80186d6:	7b23      	ldrb	r3, [r4, #12]
 80186d8:	4298      	cmp	r0, r3
 80186da:	bf8c      	ite	hi
 80186dc:	2601      	movhi	r6, #1
 80186de:	2600      	movls	r6, #0
 80186e0:	d802      	bhi.n	80186e8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80186e2:	4630      	mov	r0, r6
 80186e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186e8:	4688      	mov	r8, r1
 80186ea:	89e0      	ldrh	r0, [r4, #14]
 80186ec:	2101      	movs	r1, #1
 80186ee:	4617      	mov	r7, r2
 80186f0:	f000 fb00 	bl	8018cf4 <uxr_seq_num_add>
 80186f4:	6823      	ldr	r3, [r4, #0]
 80186f6:	81e0      	strh	r0, [r4, #14]
 80186f8:	8028      	strh	r0, [r5, #0]
 80186fa:	f8c8 3000 	str.w	r3, [r8]
 80186fe:	6863      	ldr	r3, [r4, #4]
 8018700:	603b      	str	r3, [r7, #0]
 8018702:	7b23      	ldrb	r3, [r4, #12]
 8018704:	6063      	str	r3, [r4, #4]
 8018706:	4630      	mov	r0, r6
 8018708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801870c <on_full_output_buffer>:
 801870c:	b538      	push	{r3, r4, r5, lr}
 801870e:	460c      	mov	r4, r1
 8018710:	6803      	ldr	r3, [r0, #0]
 8018712:	6809      	ldr	r1, [r1, #0]
 8018714:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018718:	6862      	ldr	r2, [r4, #4]
 801871a:	fbb2 f2fc 	udiv	r2, r2, ip
 801871e:	1a5b      	subs	r3, r3, r1
 8018720:	fbb3 f3f2 	udiv	r3, r3, r2
 8018724:	3301      	adds	r3, #1
 8018726:	b29b      	uxth	r3, r3
 8018728:	fbb3 fefc 	udiv	lr, r3, ip
 801872c:	fb0c 331e 	mls	r3, ip, lr, r3
 8018730:	b29b      	uxth	r3, r3
 8018732:	fb02 f303 	mul.w	r3, r2, r3
 8018736:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801873a:	58ca      	ldr	r2, [r1, r3]
 801873c:	4463      	add	r3, ip
 801873e:	eba2 020c 	sub.w	r2, r2, ip
 8018742:	3308      	adds	r3, #8
 8018744:	4605      	mov	r5, r0
 8018746:	4419      	add	r1, r3
 8018748:	3a04      	subs	r2, #4
 801874a:	6903      	ldr	r3, [r0, #16]
 801874c:	f7f3 fee8 	bl	800c520 <ucdr_init_buffer_origin>
 8018750:	4628      	mov	r0, r5
 8018752:	4903      	ldr	r1, [pc, #12]	@ (8018760 <on_full_output_buffer+0x54>)
 8018754:	4622      	mov	r2, r4
 8018756:	f7f3 febf 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 801875a:	2000      	movs	r0, #0
 801875c:	bd38      	pop	{r3, r4, r5, pc}
 801875e:	bf00      	nop
 8018760:	0801870d 	.word	0x0801870d

08018764 <uxr_init_output_reliable_stream>:
 8018764:	b410      	push	{r4}
 8018766:	f89d c004 	ldrb.w	ip, [sp, #4]
 801876a:	8103      	strh	r3, [r0, #8]
 801876c:	e9c0 1200 	strd	r1, r2, [r0]
 8018770:	f880 c00c 	strb.w	ip, [r0, #12]
 8018774:	b1d3      	cbz	r3, 80187ac <uxr_init_output_reliable_stream+0x48>
 8018776:	f8c1 c000 	str.w	ip, [r1]
 801877a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801877e:	f1bc 0f01 	cmp.w	ip, #1
 8018782:	d913      	bls.n	80187ac <uxr_init_output_reliable_stream+0x48>
 8018784:	2301      	movs	r3, #1
 8018786:	fbb3 f1fc 	udiv	r1, r3, ip
 801878a:	fb0c 3111 	mls	r1, ip, r1, r3
 801878e:	b289      	uxth	r1, r1
 8018790:	6842      	ldr	r2, [r0, #4]
 8018792:	6804      	ldr	r4, [r0, #0]
 8018794:	fbb2 f2fc 	udiv	r2, r2, ip
 8018798:	fb01 f202 	mul.w	r2, r1, r2
 801879c:	7b01      	ldrb	r1, [r0, #12]
 801879e:	50a1      	str	r1, [r4, r2]
 80187a0:	3301      	adds	r3, #1
 80187a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	459c      	cmp	ip, r3
 80187aa:	d8ec      	bhi.n	8018786 <uxr_init_output_reliable_stream+0x22>
 80187ac:	f04f 32ff 	mov.w	r2, #4294967295
 80187b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80187b4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80187b8:	4905      	ldr	r1, [pc, #20]	@ (80187d0 <uxr_init_output_reliable_stream+0x6c>)
 80187ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187be:	f8c0 100e 	str.w	r1, [r0, #14]
 80187c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80187c6:	2300      	movs	r3, #0
 80187c8:	8242      	strh	r2, [r0, #18]
 80187ca:	8403      	strh	r3, [r0, #32]
 80187cc:	4770      	bx	lr
 80187ce:	bf00      	nop
 80187d0:	ffff0000 	.word	0xffff0000

080187d4 <uxr_reset_output_reliable_stream>:
 80187d4:	8901      	ldrh	r1, [r0, #8]
 80187d6:	b1b1      	cbz	r1, 8018806 <uxr_reset_output_reliable_stream+0x32>
 80187d8:	f04f 0c00 	mov.w	ip, #0
 80187dc:	4663      	mov	r3, ip
 80187de:	fbb3 f2f1 	udiv	r2, r3, r1
 80187e2:	fb01 3312 	mls	r3, r1, r2, r3
 80187e6:	b29b      	uxth	r3, r3
 80187e8:	6842      	ldr	r2, [r0, #4]
 80187ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80187ee:	6801      	ldr	r1, [r0, #0]
 80187f0:	fb03 f202 	mul.w	r2, r3, r2
 80187f4:	7b03      	ldrb	r3, [r0, #12]
 80187f6:	508b      	str	r3, [r1, r2]
 80187f8:	f10c 0c01 	add.w	ip, ip, #1
 80187fc:	8901      	ldrh	r1, [r0, #8]
 80187fe:	fa1f f38c 	uxth.w	r3, ip
 8018802:	4299      	cmp	r1, r3
 8018804:	d8eb      	bhi.n	80187de <uxr_reset_output_reliable_stream+0xa>
 8018806:	f04f 32ff 	mov.w	r2, #4294967295
 801880a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801880e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018812:	4904      	ldr	r1, [pc, #16]	@ (8018824 <uxr_reset_output_reliable_stream+0x50>)
 8018814:	f8c0 100e 	str.w	r1, [r0, #14]
 8018818:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801881c:	2300      	movs	r3, #0
 801881e:	8242      	strh	r2, [r0, #18]
 8018820:	8403      	strh	r3, [r0, #32]
 8018822:	4770      	bx	lr
 8018824:	ffff0000 	.word	0xffff0000

08018828 <uxr_prepare_reliable_buffer_to_write>:
 8018828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801882c:	4604      	mov	r4, r0
 801882e:	b091      	sub	sp, #68	@ 0x44
 8018830:	8900      	ldrh	r0, [r0, #8]
 8018832:	89e7      	ldrh	r7, [r4, #14]
 8018834:	6823      	ldr	r3, [r4, #0]
 8018836:	9204      	str	r2, [sp, #16]
 8018838:	fbb7 f2f0 	udiv	r2, r7, r0
 801883c:	fb00 7212 	mls	r2, r0, r2, r7
 8018840:	b292      	uxth	r2, r2
 8018842:	6865      	ldr	r5, [r4, #4]
 8018844:	fbb5 f5f0 	udiv	r5, r5, r0
 8018848:	fb05 3202 	mla	r2, r5, r2, r3
 801884c:	3204      	adds	r2, #4
 801884e:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8018852:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8018856:	9203      	str	r2, [sp, #12]
 8018858:	4688      	mov	r8, r1
 801885a:	f1a5 0904 	sub.w	r9, r5, #4
 801885e:	2800      	cmp	r0, #0
 8018860:	f000 8143 	beq.w	8018aea <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8018864:	2100      	movs	r1, #0
 8018866:	460e      	mov	r6, r1
 8018868:	b28a      	uxth	r2, r1
 801886a:	fbb2 fcf0 	udiv	ip, r2, r0
 801886e:	fb00 221c 	mls	r2, r0, ip, r2
 8018872:	b292      	uxth	r2, r2
 8018874:	fb05 f202 	mul.w	r2, r5, r2
 8018878:	3101      	adds	r1, #1
 801887a:	589a      	ldr	r2, [r3, r2]
 801887c:	455a      	cmp	r2, fp
 801887e:	bf04      	itt	eq
 8018880:	3601      	addeq	r6, #1
 8018882:	b2b6      	uxtheq	r6, r6
 8018884:	4281      	cmp	r1, r0
 8018886:	d1ef      	bne.n	8018868 <uxr_prepare_reliable_buffer_to_write+0x40>
 8018888:	4650      	mov	r0, sl
 801888a:	2104      	movs	r1, #4
 801888c:	9605      	str	r6, [sp, #20]
 801888e:	f7f3 fe53 	bl	800c538 <ucdr_alignment>
 8018892:	4482      	add	sl, r0
 8018894:	eb0a 0208 	add.w	r2, sl, r8
 8018898:	454a      	cmp	r2, r9
 801889a:	f240 80ca 	bls.w	8018a32 <uxr_prepare_reliable_buffer_to_write+0x20a>
 801889e:	7b22      	ldrb	r2, [r4, #12]
 80188a0:	4442      	add	r2, r8
 80188a2:	454a      	cmp	r2, r9
 80188a4:	f240 80b2 	bls.w	8018a0c <uxr_prepare_reliable_buffer_to_write+0x1e4>
 80188a8:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 80188ac:	32fc      	adds	r2, #252	@ 0xfc
 80188ae:	fa1f f389 	uxth.w	r3, r9
 80188b2:	441a      	add	r2, r3
 80188b4:	b292      	uxth	r2, r2
 80188b6:	fb06 fb02 	mul.w	fp, r6, r2
 80188ba:	45c3      	cmp	fp, r8
 80188bc:	9205      	str	r2, [sp, #20]
 80188be:	9206      	str	r2, [sp, #24]
 80188c0:	f0c0 80b3 	bcc.w	8018a2a <uxr_prepare_reliable_buffer_to_write+0x202>
 80188c4:	f10a 0204 	add.w	r2, sl, #4
 80188c8:	454a      	cmp	r2, r9
 80188ca:	f080 80db 	bcs.w	8018a84 <uxr_prepare_reliable_buffer_to_write+0x25c>
 80188ce:	f1a3 0b04 	sub.w	fp, r3, #4
 80188d2:	ebab 0b0a 	sub.w	fp, fp, sl
 80188d6:	9b05      	ldr	r3, [sp, #20]
 80188d8:	fa1f fb8b 	uxth.w	fp, fp
 80188dc:	eba8 080b 	sub.w	r8, r8, fp
 80188e0:	fbb8 fcf3 	udiv	ip, r8, r3
 80188e4:	fb03 831c 	mls	r3, r3, ip, r8
 80188e8:	fa1f fc8c 	uxth.w	ip, ip
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f040 80c1 	bne.w	8018a74 <uxr_prepare_reliable_buffer_to_write+0x24c>
 80188f2:	45b4      	cmp	ip, r6
 80188f4:	f200 8099 	bhi.w	8018a2a <uxr_prepare_reliable_buffer_to_write+0x202>
 80188f8:	f10d 0820 	add.w	r8, sp, #32
 80188fc:	f1bc 0f00 	cmp.w	ip, #0
 8018900:	d040      	beq.n	8018984 <uxr_prepare_reliable_buffer_to_write+0x15c>
 8018902:	f8cd a01c 	str.w	sl, [sp, #28]
 8018906:	2600      	movs	r6, #0
 8018908:	f8dd a014 	ldr.w	sl, [sp, #20]
 801890c:	9505      	str	r5, [sp, #20]
 801890e:	f10d 0820 	add.w	r8, sp, #32
 8018912:	4665      	mov	r5, ip
 8018914:	e000      	b.n	8018918 <uxr_prepare_reliable_buffer_to_write+0xf0>
 8018916:	46d3      	mov	fp, sl
 8018918:	8921      	ldrh	r1, [r4, #8]
 801891a:	fbb7 f2f1 	udiv	r2, r7, r1
 801891e:	fb01 7212 	mls	r2, r1, r2, r7
 8018922:	b292      	uxth	r2, r2
 8018924:	6863      	ldr	r3, [r4, #4]
 8018926:	fbb3 f3f1 	udiv	r3, r3, r1
 801892a:	6821      	ldr	r1, [r4, #0]
 801892c:	fb02 f303 	mul.w	r3, r2, r3
 8018930:	3304      	adds	r3, #4
 8018932:	4419      	add	r1, r3
 8018934:	4640      	mov	r0, r8
 8018936:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801893a:	9200      	str	r2, [sp, #0]
 801893c:	2300      	movs	r3, #0
 801893e:	464a      	mov	r2, r9
 8018940:	f7f3 fde4 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8018944:	465a      	mov	r2, fp
 8018946:	2300      	movs	r3, #0
 8018948:	210d      	movs	r1, #13
 801894a:	4640      	mov	r0, r8
 801894c:	f7f9 fba6 	bl	801209c <uxr_buffer_submessage_header>
 8018950:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018954:	fbb7 f2fc 	udiv	r2, r7, ip
 8018958:	fb0c 7212 	mls	r2, ip, r2, r7
 801895c:	b292      	uxth	r2, r2
 801895e:	6863      	ldr	r3, [r4, #4]
 8018960:	fbb3 f3fc 	udiv	r3, r3, ip
 8018964:	fb02 f303 	mul.w	r3, r2, r3
 8018968:	6822      	ldr	r2, [r4, #0]
 801896a:	4638      	mov	r0, r7
 801896c:	f842 9003 	str.w	r9, [r2, r3]
 8018970:	2101      	movs	r1, #1
 8018972:	f000 f9bf 	bl	8018cf4 <uxr_seq_num_add>
 8018976:	3601      	adds	r6, #1
 8018978:	42ae      	cmp	r6, r5
 801897a:	4607      	mov	r7, r0
 801897c:	d1cb      	bne.n	8018916 <uxr_prepare_reliable_buffer_to_write+0xee>
 801897e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018982:	9d05      	ldr	r5, [sp, #20]
 8018984:	8920      	ldrh	r0, [r4, #8]
 8018986:	fbb7 f1f0 	udiv	r1, r7, r0
 801898a:	fb00 7111 	mls	r1, r0, r1, r7
 801898e:	b289      	uxth	r1, r1
 8018990:	6863      	ldr	r3, [r4, #4]
 8018992:	fbb3 f3f0 	udiv	r3, r3, r0
 8018996:	fb01 f303 	mul.w	r3, r1, r3
 801899a:	6821      	ldr	r1, [r4, #0]
 801899c:	3304      	adds	r3, #4
 801899e:	4419      	add	r1, r3
 80189a0:	464a      	mov	r2, r9
 80189a2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80189a6:	9000      	str	r0, [sp, #0]
 80189a8:	2300      	movs	r3, #0
 80189aa:	4640      	mov	r0, r8
 80189ac:	f7f3 fdae 	bl	800c50c <ucdr_init_buffer_origin_offset>
 80189b0:	4640      	mov	r0, r8
 80189b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80189b6:	2302      	movs	r3, #2
 80189b8:	fa1f f288 	uxth.w	r2, r8
 80189bc:	210d      	movs	r1, #13
 80189be:	f7f9 fb6d 	bl	801209c <uxr_buffer_submessage_header>
 80189c2:	8926      	ldrh	r6, [r4, #8]
 80189c4:	9b03      	ldr	r3, [sp, #12]
 80189c6:	7b20      	ldrb	r0, [r4, #12]
 80189c8:	f1a5 0208 	sub.w	r2, r5, #8
 80189cc:	f10a 0104 	add.w	r1, sl, #4
 80189d0:	fbb7 f5f6 	udiv	r5, r7, r6
 80189d4:	fb06 7515 	mls	r5, r6, r5, r7
 80189d8:	440b      	add	r3, r1
 80189da:	b2ad      	uxth	r5, r5
 80189dc:	4619      	mov	r1, r3
 80189de:	3004      	adds	r0, #4
 80189e0:	6863      	ldr	r3, [r4, #4]
 80189e2:	fbb3 f3f6 	udiv	r3, r3, r6
 80189e6:	fb05 f303 	mul.w	r3, r5, r3
 80189ea:	6825      	ldr	r5, [r4, #0]
 80189ec:	4440      	add	r0, r8
 80189ee:	50e8      	str	r0, [r5, r3]
 80189f0:	9d04      	ldr	r5, [sp, #16]
 80189f2:	eba2 020a 	sub.w	r2, r2, sl
 80189f6:	4628      	mov	r0, r5
 80189f8:	f7f3 fd9a 	bl	800c530 <ucdr_init_buffer>
 80189fc:	493c      	ldr	r1, [pc, #240]	@ (8018af0 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 80189fe:	4622      	mov	r2, r4
 8018a00:	4628      	mov	r0, r5
 8018a02:	f7f3 fd69 	bl	800c4d8 <ucdr_set_on_full_buffer_callback>
 8018a06:	81e7      	strh	r7, [r4, #14]
 8018a08:	2001      	movs	r0, #1
 8018a0a:	e00f      	b.n	8018a2c <uxr_prepare_reliable_buffer_to_write+0x204>
 8018a0c:	2101      	movs	r1, #1
 8018a0e:	89e0      	ldrh	r0, [r4, #14]
 8018a10:	f000 f970 	bl	8018cf4 <uxr_seq_num_add>
 8018a14:	8921      	ldrh	r1, [r4, #8]
 8018a16:	4605      	mov	r5, r0
 8018a18:	8a60      	ldrh	r0, [r4, #18]
 8018a1a:	f000 f96b 	bl	8018cf4 <uxr_seq_num_add>
 8018a1e:	4601      	mov	r1, r0
 8018a20:	4628      	mov	r0, r5
 8018a22:	f000 f96f 	bl	8018d04 <uxr_seq_num_cmp>
 8018a26:	2800      	cmp	r0, #0
 8018a28:	dd45      	ble.n	8018ab6 <uxr_prepare_reliable_buffer_to_write+0x28e>
 8018a2a:	2000      	movs	r0, #0
 8018a2c:	b011      	add	sp, #68	@ 0x44
 8018a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a32:	8921      	ldrh	r1, [r4, #8]
 8018a34:	8a60      	ldrh	r0, [r4, #18]
 8018a36:	9205      	str	r2, [sp, #20]
 8018a38:	f000 f95c 	bl	8018cf4 <uxr_seq_num_add>
 8018a3c:	4601      	mov	r1, r0
 8018a3e:	4638      	mov	r0, r7
 8018a40:	f000 f960 	bl	8018d04 <uxr_seq_num_cmp>
 8018a44:	2800      	cmp	r0, #0
 8018a46:	9a05      	ldr	r2, [sp, #20]
 8018a48:	dcef      	bgt.n	8018a2a <uxr_prepare_reliable_buffer_to_write+0x202>
 8018a4a:	8926      	ldrh	r6, [r4, #8]
 8018a4c:	fbb7 f5f6 	udiv	r5, r7, r6
 8018a50:	fb06 7515 	mls	r5, r6, r5, r7
 8018a54:	b2ad      	uxth	r5, r5
 8018a56:	6863      	ldr	r3, [r4, #4]
 8018a58:	6824      	ldr	r4, [r4, #0]
 8018a5a:	fbb3 f3f6 	udiv	r3, r3, r6
 8018a5e:	fb05 f303 	mul.w	r3, r5, r3
 8018a62:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018a66:	50e2      	str	r2, [r4, r3]
 8018a68:	2300      	movs	r3, #0
 8018a6a:	f8cd a000 	str.w	sl, [sp]
 8018a6e:	f7f3 fd4d 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8018a72:	e7c9      	b.n	8018a08 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8018a74:	f10c 0c01 	add.w	ip, ip, #1
 8018a78:	fa1f fc8c 	uxth.w	ip, ip
 8018a7c:	45b4      	cmp	ip, r6
 8018a7e:	9306      	str	r3, [sp, #24]
 8018a80:	d8d3      	bhi.n	8018a2a <uxr_prepare_reliable_buffer_to_write+0x202>
 8018a82:	e739      	b.n	80188f8 <uxr_prepare_reliable_buffer_to_write+0xd0>
 8018a84:	4638      	mov	r0, r7
 8018a86:	2101      	movs	r1, #1
 8018a88:	9307      	str	r3, [sp, #28]
 8018a8a:	f000 f933 	bl	8018cf4 <uxr_seq_num_add>
 8018a8e:	8921      	ldrh	r1, [r4, #8]
 8018a90:	6862      	ldr	r2, [r4, #4]
 8018a92:	4607      	mov	r7, r0
 8018a94:	fbb0 f0f1 	udiv	r0, r0, r1
 8018a98:	fb01 7010 	mls	r0, r1, r0, r7
 8018a9c:	b280      	uxth	r0, r0
 8018a9e:	fbb2 f1f1 	udiv	r1, r2, r1
 8018aa2:	6822      	ldr	r2, [r4, #0]
 8018aa4:	fb00 f101 	mul.w	r1, r0, r1
 8018aa8:	3104      	adds	r1, #4
 8018aaa:	1853      	adds	r3, r2, r1
 8018aac:	9303      	str	r3, [sp, #12]
 8018aae:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8018ab2:	9b07      	ldr	r3, [sp, #28]
 8018ab4:	e70b      	b.n	80188ce <uxr_prepare_reliable_buffer_to_write+0xa6>
 8018ab6:	8921      	ldrh	r1, [r4, #8]
 8018ab8:	fbb5 f2f1 	udiv	r2, r5, r1
 8018abc:	fb01 5212 	mls	r2, r1, r2, r5
 8018ac0:	b292      	uxth	r2, r2
 8018ac2:	6863      	ldr	r3, [r4, #4]
 8018ac4:	fbb3 f3f1 	udiv	r3, r3, r1
 8018ac8:	6821      	ldr	r1, [r4, #0]
 8018aca:	9804      	ldr	r0, [sp, #16]
 8018acc:	fb02 f303 	mul.w	r3, r2, r3
 8018ad0:	3304      	adds	r3, #4
 8018ad2:	7b22      	ldrb	r2, [r4, #12]
 8018ad4:	4419      	add	r1, r3
 8018ad6:	4442      	add	r2, r8
 8018ad8:	f841 2c04 	str.w	r2, [r1, #-4]
 8018adc:	7b23      	ldrb	r3, [r4, #12]
 8018ade:	9300      	str	r3, [sp, #0]
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	f7f3 fd13 	bl	800c50c <ucdr_init_buffer_origin_offset>
 8018ae6:	81e5      	strh	r5, [r4, #14]
 8018ae8:	e78e      	b.n	8018a08 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8018aea:	4606      	mov	r6, r0
 8018aec:	e6cc      	b.n	8018888 <uxr_prepare_reliable_buffer_to_write+0x60>
 8018aee:	bf00      	nop
 8018af0:	0801870d 	.word	0x0801870d

08018af4 <uxr_prepare_next_reliable_buffer_to_send>:
 8018af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018af6:	4604      	mov	r4, r0
 8018af8:	460f      	mov	r7, r1
 8018afa:	8a00      	ldrh	r0, [r0, #16]
 8018afc:	2101      	movs	r1, #1
 8018afe:	4615      	mov	r5, r2
 8018b00:	461e      	mov	r6, r3
 8018b02:	f000 f8f7 	bl	8018cf4 <uxr_seq_num_add>
 8018b06:	8030      	strh	r0, [r6, #0]
 8018b08:	8922      	ldrh	r2, [r4, #8]
 8018b0a:	fbb0 f3f2 	udiv	r3, r0, r2
 8018b0e:	fb02 0c13 	mls	ip, r2, r3, r0
 8018b12:	fa1f fc8c 	uxth.w	ip, ip
 8018b16:	6863      	ldr	r3, [r4, #4]
 8018b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b1c:	fb0c fc03 	mul.w	ip, ip, r3
 8018b20:	6823      	ldr	r3, [r4, #0]
 8018b22:	89e1      	ldrh	r1, [r4, #14]
 8018b24:	f10c 0c04 	add.w	ip, ip, #4
 8018b28:	4463      	add	r3, ip
 8018b2a:	603b      	str	r3, [r7, #0]
 8018b2c:	6823      	ldr	r3, [r4, #0]
 8018b2e:	4463      	add	r3, ip
 8018b30:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018b34:	602b      	str	r3, [r5, #0]
 8018b36:	f000 f8e5 	bl	8018d04 <uxr_seq_num_cmp>
 8018b3a:	2800      	cmp	r0, #0
 8018b3c:	dd01      	ble.n	8018b42 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018b3e:	2000      	movs	r0, #0
 8018b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b42:	7b23      	ldrb	r3, [r4, #12]
 8018b44:	682a      	ldr	r2, [r5, #0]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	d9f9      	bls.n	8018b3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018b4a:	8a61      	ldrh	r1, [r4, #18]
 8018b4c:	8a20      	ldrh	r0, [r4, #16]
 8018b4e:	f000 f8d5 	bl	8018cfc <uxr_seq_num_sub>
 8018b52:	8923      	ldrh	r3, [r4, #8]
 8018b54:	4283      	cmp	r3, r0
 8018b56:	d0f2      	beq.n	8018b3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018b58:	8830      	ldrh	r0, [r6, #0]
 8018b5a:	89e3      	ldrh	r3, [r4, #14]
 8018b5c:	8220      	strh	r0, [r4, #16]
 8018b5e:	4298      	cmp	r0, r3
 8018b60:	d001      	beq.n	8018b66 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018b62:	2001      	movs	r0, #1
 8018b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b66:	2101      	movs	r1, #1
 8018b68:	f000 f8c4 	bl	8018cf4 <uxr_seq_num_add>
 8018b6c:	81e0      	strh	r0, [r4, #14]
 8018b6e:	e7f8      	b.n	8018b62 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

08018b70 <uxr_update_output_stream_heartbeat_timestamp>:
 8018b70:	b570      	push	{r4, r5, r6, lr}
 8018b72:	8a01      	ldrh	r1, [r0, #16]
 8018b74:	4604      	mov	r4, r0
 8018b76:	8a40      	ldrh	r0, [r0, #18]
 8018b78:	4615      	mov	r5, r2
 8018b7a:	461e      	mov	r6, r3
 8018b7c:	f000 f8c2 	bl	8018d04 <uxr_seq_num_cmp>
 8018b80:	2800      	cmp	r0, #0
 8018b82:	db07      	blt.n	8018b94 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018b84:	f04f 35ff 	mov.w	r5, #4294967295
 8018b88:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8018b8c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018b90:	2000      	movs	r0, #0
 8018b92:	bd70      	pop	{r4, r5, r6, pc}
 8018b94:	f894 3020 	ldrb.w	r3, [r4, #32]
 8018b98:	b953      	cbnz	r3, 8018bb0 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8018b9a:	2301      	movs	r3, #1
 8018b9c:	f884 3020 	strb.w	r3, [r4, #32]
 8018ba0:	3564      	adds	r5, #100	@ 0x64
 8018ba2:	f04f 0000 	mov.w	r0, #0
 8018ba6:	f146 0600 	adc.w	r6, r6, #0
 8018baa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018bae:	bd70      	pop	{r4, r5, r6, pc}
 8018bb0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018bb4:	428d      	cmp	r5, r1
 8018bb6:	eb76 0202 	sbcs.w	r2, r6, r2
 8018bba:	dbf1      	blt.n	8018ba0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	3564      	adds	r5, #100	@ 0x64
 8018bc0:	f884 3020 	strb.w	r3, [r4, #32]
 8018bc4:	f04f 0001 	mov.w	r0, #1
 8018bc8:	f146 0600 	adc.w	r6, r6, #0
 8018bcc:	e7ed      	b.n	8018baa <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8018bce:	bf00      	nop

08018bd0 <uxr_begin_output_nack_buffer_it>:
 8018bd0:	8a40      	ldrh	r0, [r0, #18]
 8018bd2:	4770      	bx	lr

08018bd4 <uxr_next_reliable_nack_buffer_to_send>:
 8018bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018bdc:	f1b8 0f00 	cmp.w	r8, #0
 8018be0:	d104      	bne.n	8018bec <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018be2:	f04f 0800 	mov.w	r8, #0
 8018be6:	4640      	mov	r0, r8
 8018be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bec:	4604      	mov	r4, r0
 8018bee:	460e      	mov	r6, r1
 8018bf0:	8818      	ldrh	r0, [r3, #0]
 8018bf2:	4617      	mov	r7, r2
 8018bf4:	461d      	mov	r5, r3
 8018bf6:	e019      	b.n	8018c2c <uxr_next_reliable_nack_buffer_to_send+0x58>
 8018bf8:	8921      	ldrh	r1, [r4, #8]
 8018bfa:	8828      	ldrh	r0, [r5, #0]
 8018bfc:	fbb0 fcf1 	udiv	ip, r0, r1
 8018c00:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018c04:	fb01 0c1c 	mls	ip, r1, ip, r0
 8018c08:	fa1f fc8c 	uxth.w	ip, ip
 8018c0c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018c10:	fb02 fc0c 	mul.w	ip, r2, ip
 8018c14:	f10c 0c04 	add.w	ip, ip, #4
 8018c18:	4463      	add	r3, ip
 8018c1a:	6033      	str	r3, [r6, #0]
 8018c1c:	6823      	ldr	r3, [r4, #0]
 8018c1e:	4463      	add	r3, ip
 8018c20:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018c24:	603b      	str	r3, [r7, #0]
 8018c26:	7b22      	ldrb	r2, [r4, #12]
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	d1dc      	bne.n	8018be6 <uxr_next_reliable_nack_buffer_to_send+0x12>
 8018c2c:	2101      	movs	r1, #1
 8018c2e:	f000 f861 	bl	8018cf4 <uxr_seq_num_add>
 8018c32:	8028      	strh	r0, [r5, #0]
 8018c34:	8a21      	ldrh	r1, [r4, #16]
 8018c36:	f000 f865 	bl	8018d04 <uxr_seq_num_cmp>
 8018c3a:	2800      	cmp	r0, #0
 8018c3c:	dddc      	ble.n	8018bf8 <uxr_next_reliable_nack_buffer_to_send+0x24>
 8018c3e:	2300      	movs	r3, #0
 8018c40:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8018c44:	e7cd      	b.n	8018be2 <uxr_next_reliable_nack_buffer_to_send+0xe>
 8018c46:	bf00      	nop

08018c48 <uxr_process_acknack>:
 8018c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	460e      	mov	r6, r1
 8018c4e:	4610      	mov	r0, r2
 8018c50:	2101      	movs	r1, #1
 8018c52:	f000 f853 	bl	8018cfc <uxr_seq_num_sub>
 8018c56:	8a61      	ldrh	r1, [r4, #18]
 8018c58:	f000 f850 	bl	8018cfc <uxr_seq_num_sub>
 8018c5c:	b1c0      	cbz	r0, 8018c90 <uxr_process_acknack+0x48>
 8018c5e:	4605      	mov	r5, r0
 8018c60:	2700      	movs	r7, #0
 8018c62:	2101      	movs	r1, #1
 8018c64:	8a60      	ldrh	r0, [r4, #18]
 8018c66:	f000 f845 	bl	8018cf4 <uxr_seq_num_add>
 8018c6a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c6e:	fbb0 f1fc 	udiv	r1, r0, ip
 8018c72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018c76:	fb0c 0111 	mls	r1, ip, r1, r0
 8018c7a:	b289      	uxth	r1, r1
 8018c7c:	3701      	adds	r7, #1
 8018c7e:	fbb3 f3fc 	udiv	r3, r3, ip
 8018c82:	fb01 f303 	mul.w	r3, r1, r3
 8018c86:	42bd      	cmp	r5, r7
 8018c88:	7b21      	ldrb	r1, [r4, #12]
 8018c8a:	8260      	strh	r0, [r4, #18]
 8018c8c:	50d1      	str	r1, [r2, r3]
 8018c8e:	d1e8      	bne.n	8018c62 <uxr_process_acknack+0x1a>
 8018c90:	3e00      	subs	r6, #0
 8018c92:	f04f 0300 	mov.w	r3, #0
 8018c96:	bf18      	it	ne
 8018c98:	2601      	movne	r6, #1
 8018c9a:	f884 3020 	strb.w	r3, [r4, #32]
 8018c9e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ca4 <uxr_is_output_up_to_date>:
 8018ca4:	8a01      	ldrh	r1, [r0, #16]
 8018ca6:	8a40      	ldrh	r0, [r0, #18]
 8018ca8:	b508      	push	{r3, lr}
 8018caa:	f000 f82b 	bl	8018d04 <uxr_seq_num_cmp>
 8018cae:	fab0 f080 	clz	r0, r0
 8018cb2:	0940      	lsrs	r0, r0, #5
 8018cb4:	bd08      	pop	{r3, pc}
 8018cb6:	bf00      	nop

08018cb8 <get_available_free_slots>:
 8018cb8:	8901      	ldrh	r1, [r0, #8]
 8018cba:	b1c1      	cbz	r1, 8018cee <get_available_free_slots+0x36>
 8018cbc:	b530      	push	{r4, r5, lr}
 8018cbe:	2200      	movs	r2, #0
 8018cc0:	6843      	ldr	r3, [r0, #4]
 8018cc2:	6805      	ldr	r5, [r0, #0]
 8018cc4:	7b04      	ldrb	r4, [r0, #12]
 8018cc6:	fbb3 fef1 	udiv	lr, r3, r1
 8018cca:	4610      	mov	r0, r2
 8018ccc:	b293      	uxth	r3, r2
 8018cce:	fbb3 fcf1 	udiv	ip, r3, r1
 8018cd2:	fb01 331c 	mls	r3, r1, ip, r3
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	fb0e f303 	mul.w	r3, lr, r3
 8018cdc:	3201      	adds	r2, #1
 8018cde:	58eb      	ldr	r3, [r5, r3]
 8018ce0:	429c      	cmp	r4, r3
 8018ce2:	bf04      	itt	eq
 8018ce4:	3001      	addeq	r0, #1
 8018ce6:	b280      	uxtheq	r0, r0
 8018ce8:	4291      	cmp	r1, r2
 8018cea:	d1ef      	bne.n	8018ccc <get_available_free_slots+0x14>
 8018cec:	bd30      	pop	{r4, r5, pc}
 8018cee:	4608      	mov	r0, r1
 8018cf0:	4770      	bx	lr
 8018cf2:	bf00      	nop

08018cf4 <uxr_seq_num_add>:
 8018cf4:	4408      	add	r0, r1
 8018cf6:	b280      	uxth	r0, r0
 8018cf8:	4770      	bx	lr
 8018cfa:	bf00      	nop

08018cfc <uxr_seq_num_sub>:
 8018cfc:	1a40      	subs	r0, r0, r1
 8018cfe:	b280      	uxth	r0, r0
 8018d00:	4770      	bx	lr
 8018d02:	bf00      	nop

08018d04 <uxr_seq_num_cmp>:
 8018d04:	4288      	cmp	r0, r1
 8018d06:	d010      	beq.n	8018d2a <uxr_seq_num_cmp+0x26>
 8018d08:	d207      	bcs.n	8018d1a <uxr_seq_num_cmp+0x16>
 8018d0a:	1a09      	subs	r1, r1, r0
 8018d0c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018d10:	bfb4      	ite	lt
 8018d12:	f04f 30ff 	movlt.w	r0, #4294967295
 8018d16:	2001      	movge	r0, #1
 8018d18:	4770      	bx	lr
 8018d1a:	1a41      	subs	r1, r0, r1
 8018d1c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018d20:	bfcc      	ite	gt
 8018d22:	f04f 30ff 	movgt.w	r0, #4294967295
 8018d26:	2001      	movle	r0, #1
 8018d28:	4770      	bx	lr
 8018d2a:	2000      	movs	r0, #0
 8018d2c:	4770      	bx	lr
 8018d2e:	bf00      	nop

08018d30 <mobi_interfaces__msg__Encoders__get_type_hash>:
 8018d30:	4800      	ldr	r0, [pc, #0]	@ (8018d34 <mobi_interfaces__msg__Encoders__get_type_hash+0x4>)
 8018d32:	4770      	bx	lr
 8018d34:	200022a8 	.word	0x200022a8

08018d38 <mobi_interfaces__msg__Encoders__get_type_description>:
 8018d38:	4b03      	ldr	r3, [pc, #12]	@ (8018d48 <mobi_interfaces__msg__Encoders__get_type_description+0x10>)
 8018d3a:	781a      	ldrb	r2, [r3, #0]
 8018d3c:	b90a      	cbnz	r2, 8018d42 <mobi_interfaces__msg__Encoders__get_type_description+0xa>
 8018d3e:	2201      	movs	r2, #1
 8018d40:	701a      	strb	r2, [r3, #0]
 8018d42:	4802      	ldr	r0, [pc, #8]	@ (8018d4c <mobi_interfaces__msg__Encoders__get_type_description+0x14>)
 8018d44:	4770      	bx	lr
 8018d46:	bf00      	nop
 8018d48:	2000d225 	.word	0x2000d225
 8018d4c:	0801ebac 	.word	0x0801ebac

08018d50 <mobi_interfaces__msg__Encoders__get_individual_type_description_source>:
 8018d50:	4800      	ldr	r0, [pc, #0]	@ (8018d54 <mobi_interfaces__msg__Encoders__get_individual_type_description_source+0x4>)
 8018d52:	4770      	bx	lr
 8018d54:	0801eb88 	.word	0x0801eb88

08018d58 <mobi_interfaces__msg__Encoders__get_type_description_sources>:
 8018d58:	4b09      	ldr	r3, [pc, #36]	@ (8018d80 <mobi_interfaces__msg__Encoders__get_type_description_sources+0x28>)
 8018d5a:	781a      	ldrb	r2, [r3, #0]
 8018d5c:	b96a      	cbnz	r2, 8018d7a <mobi_interfaces__msg__Encoders__get_type_description_sources+0x22>
 8018d5e:	b430      	push	{r4, r5}
 8018d60:	4d08      	ldr	r5, [pc, #32]	@ (8018d84 <mobi_interfaces__msg__Encoders__get_type_description_sources+0x2c>)
 8018d62:	4c09      	ldr	r4, [pc, #36]	@ (8018d88 <mobi_interfaces__msg__Encoders__get_type_description_sources+0x30>)
 8018d64:	2201      	movs	r2, #1
 8018d66:	701a      	strb	r2, [r3, #0]
 8018d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d70:	682b      	ldr	r3, [r5, #0]
 8018d72:	4806      	ldr	r0, [pc, #24]	@ (8018d8c <mobi_interfaces__msg__Encoders__get_type_description_sources+0x34>)
 8018d74:	6023      	str	r3, [r4, #0]
 8018d76:	bc30      	pop	{r4, r5}
 8018d78:	4770      	bx	lr
 8018d7a:	4804      	ldr	r0, [pc, #16]	@ (8018d8c <mobi_interfaces__msg__Encoders__get_type_description_sources+0x34>)
 8018d7c:	4770      	bx	lr
 8018d7e:	bf00      	nop
 8018d80:	2000d224 	.word	0x2000d224
 8018d84:	0801eb88 	.word	0x0801eb88
 8018d88:	2000d200 	.word	0x2000d200
 8018d8c:	0801eb7c 	.word	0x0801eb7c

08018d90 <mobi_interfaces__msg__Encoders__init>:
 8018d90:	3800      	subs	r0, #0
 8018d92:	bf18      	it	ne
 8018d94:	2001      	movne	r0, #1
 8018d96:	4770      	bx	lr

08018d98 <mobi_interfaces__msg__Encoders__fini>:
 8018d98:	4770      	bx	lr
 8018d9a:	bf00      	nop

08018d9c <rcl_get_automatic_discovery_range>:
 8018d9c:	b530      	push	{r4, r5, lr}
 8018d9e:	b083      	sub	sp, #12
 8018da0:	2300      	movs	r3, #0
 8018da2:	9301      	str	r3, [sp, #4]
 8018da4:	b1c0      	cbz	r0, 8018dd8 <rcl_get_automatic_discovery_range+0x3c>
 8018da6:	4604      	mov	r4, r0
 8018da8:	a901      	add	r1, sp, #4
 8018daa:	4818      	ldr	r0, [pc, #96]	@ (8018e0c <rcl_get_automatic_discovery_range+0x70>)
 8018dac:	f7fd fe16 	bl	80169dc <rcutils_get_env>
 8018db0:	b110      	cbz	r0, 8018db8 <rcl_get_automatic_discovery_range+0x1c>
 8018db2:	2001      	movs	r0, #1
 8018db4:	b003      	add	sp, #12
 8018db6:	bd30      	pop	{r4, r5, pc}
 8018db8:	9d01      	ldr	r5, [sp, #4]
 8018dba:	782b      	ldrb	r3, [r5, #0]
 8018dbc:	b923      	cbnz	r3, 8018dc8 <rcl_get_automatic_discovery_range+0x2c>
 8018dbe:	2303      	movs	r3, #3
 8018dc0:	7023      	strb	r3, [r4, #0]
 8018dc2:	2000      	movs	r0, #0
 8018dc4:	b003      	add	sp, #12
 8018dc6:	bd30      	pop	{r4, r5, pc}
 8018dc8:	4911      	ldr	r1, [pc, #68]	@ (8018e10 <rcl_get_automatic_discovery_range+0x74>)
 8018dca:	4628      	mov	r0, r5
 8018dcc:	f7e7 f9e8 	bl	80001a0 <strcmp>
 8018dd0:	b928      	cbnz	r0, 8018dde <rcl_get_automatic_discovery_range+0x42>
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	7023      	strb	r3, [r4, #0]
 8018dd6:	e7f4      	b.n	8018dc2 <rcl_get_automatic_discovery_range+0x26>
 8018dd8:	200b      	movs	r0, #11
 8018dda:	b003      	add	sp, #12
 8018ddc:	bd30      	pop	{r4, r5, pc}
 8018dde:	490d      	ldr	r1, [pc, #52]	@ (8018e14 <rcl_get_automatic_discovery_range+0x78>)
 8018de0:	4628      	mov	r0, r5
 8018de2:	f7e7 f9dd 	bl	80001a0 <strcmp>
 8018de6:	b168      	cbz	r0, 8018e04 <rcl_get_automatic_discovery_range+0x68>
 8018de8:	490b      	ldr	r1, [pc, #44]	@ (8018e18 <rcl_get_automatic_discovery_range+0x7c>)
 8018dea:	4628      	mov	r0, r5
 8018dec:	f7e7 f9d8 	bl	80001a0 <strcmp>
 8018df0:	2800      	cmp	r0, #0
 8018df2:	d0e4      	beq.n	8018dbe <rcl_get_automatic_discovery_range+0x22>
 8018df4:	4909      	ldr	r1, [pc, #36]	@ (8018e1c <rcl_get_automatic_discovery_range+0x80>)
 8018df6:	4628      	mov	r0, r5
 8018df8:	f7e7 f9d2 	bl	80001a0 <strcmp>
 8018dfc:	b910      	cbnz	r0, 8018e04 <rcl_get_automatic_discovery_range+0x68>
 8018dfe:	2304      	movs	r3, #4
 8018e00:	7023      	strb	r3, [r4, #0]
 8018e02:	e7de      	b.n	8018dc2 <rcl_get_automatic_discovery_range+0x26>
 8018e04:	2302      	movs	r3, #2
 8018e06:	7023      	strb	r3, [r4, #0]
 8018e08:	e7db      	b.n	8018dc2 <rcl_get_automatic_discovery_range+0x26>
 8018e0a:	bf00      	nop
 8018e0c:	0801dfe4 	.word	0x0801dfe4
 8018e10:	0801e004 	.word	0x0801e004
 8018e14:	0801e008 	.word	0x0801e008
 8018e18:	0801e014 	.word	0x0801e014
 8018e1c:	0801e01c 	.word	0x0801e01c

08018e20 <rcl_automatic_discovery_range_to_string>:
 8018e20:	2804      	cmp	r0, #4
 8018e22:	bf9a      	itte	ls
 8018e24:	4b02      	ldrls	r3, [pc, #8]	@ (8018e30 <rcl_automatic_discovery_range_to_string+0x10>)
 8018e26:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018e2a:	2000      	movhi	r0, #0
 8018e2c:	4770      	bx	lr
 8018e2e:	bf00      	nop
 8018e30:	0801ebd0 	.word	0x0801ebd0

08018e34 <rcl_get_discovery_static_peers>:
 8018e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e38:	b08c      	sub	sp, #48	@ 0x30
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	9304      	str	r3, [sp, #16]
 8018e3e:	2800      	cmp	r0, #0
 8018e40:	d04e      	beq.n	8018ee0 <rcl_get_discovery_static_peers+0xac>
 8018e42:	460d      	mov	r5, r1
 8018e44:	2900      	cmp	r1, #0
 8018e46:	d04b      	beq.n	8018ee0 <rcl_get_discovery_static_peers+0xac>
 8018e48:	4604      	mov	r4, r0
 8018e4a:	a904      	add	r1, sp, #16
 8018e4c:	482d      	ldr	r0, [pc, #180]	@ (8018f04 <rcl_get_discovery_static_peers+0xd0>)
 8018e4e:	f7fd fdc5 	bl	80169dc <rcutils_get_env>
 8018e52:	b118      	cbz	r0, 8018e5c <rcl_get_discovery_static_peers+0x28>
 8018e54:	2001      	movs	r0, #1
 8018e56:	b00c      	add	sp, #48	@ 0x30
 8018e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e5c:	9b04      	ldr	r3, [sp, #16]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d0f8      	beq.n	8018e54 <rcl_get_discovery_static_peers+0x20>
 8018e62:	af05      	add	r7, sp, #20
 8018e64:	4638      	mov	r0, r7
 8018e66:	f000 fc8f 	bl	8019788 <rcutils_get_zero_initialized_string_array>
 8018e6a:	f105 0308 	add.w	r3, r5, #8
 8018e6e:	9703      	str	r7, [sp, #12]
 8018e70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018e74:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018e78:	9804      	ldr	r0, [sp, #16]
 8018e7a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8018e7e:	213b      	movs	r1, #59	@ 0x3b
 8018e80:	f000 fbd0 	bl	8019624 <rcutils_split>
 8018e84:	2800      	cmp	r0, #0
 8018e86:	d1e5      	bne.n	8018e54 <rcl_get_discovery_static_peers+0x20>
 8018e88:	9905      	ldr	r1, [sp, #20]
 8018e8a:	462a      	mov	r2, r5
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	f7fe f85f 	bl	8016f50 <rmw_discovery_options_init>
 8018e92:	4606      	mov	r6, r0
 8018e94:	bb90      	cbnz	r0, 8018efc <rcl_get_discovery_static_peers+0xc8>
 8018e96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018e9a:	f1b9 0f00 	cmp.w	r9, #0
 8018e9e:	d026      	beq.n	8018eee <rcl_get_discovery_static_peers+0xba>
 8018ea0:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018ea4:	4680      	mov	r8, r0
 8018ea6:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8018eaa:	4628      	mov	r0, r5
 8018eac:	f7e7 f9d8 	bl	8000260 <strlen>
 8018eb0:	28ff      	cmp	r0, #255	@ 0xff
 8018eb2:	4629      	mov	r1, r5
 8018eb4:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8018eb8:	d816      	bhi.n	8018ee8 <rcl_get_discovery_static_peers+0xb4>
 8018eba:	6860      	ldr	r0, [r4, #4]
 8018ebc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018ec0:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8018ec4:	f001 ff2a 	bl	801ad1c <strncpy>
 8018ec8:	6863      	ldr	r3, [r4, #4]
 8018eca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018ece:	3601      	adds	r6, #1
 8018ed0:	442b      	add	r3, r5
 8018ed2:	454e      	cmp	r6, r9
 8018ed4:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8018ed8:	d209      	bcs.n	8018eee <rcl_get_discovery_static_peers+0xba>
 8018eda:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018ede:	e7e2      	b.n	8018ea6 <rcl_get_discovery_static_peers+0x72>
 8018ee0:	200b      	movs	r0, #11
 8018ee2:	b00c      	add	sp, #48	@ 0x30
 8018ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ee8:	3601      	adds	r6, #1
 8018eea:	454e      	cmp	r6, r9
 8018eec:	d3db      	bcc.n	8018ea6 <rcl_get_discovery_static_peers+0x72>
 8018eee:	4638      	mov	r0, r7
 8018ef0:	f000 fc8a 	bl	8019808 <rcutils_string_array_fini>
 8018ef4:	3800      	subs	r0, #0
 8018ef6:	bf18      	it	ne
 8018ef8:	2001      	movne	r0, #1
 8018efa:	e7ac      	b.n	8018e56 <rcl_get_discovery_static_peers+0x22>
 8018efc:	f7fa fe92 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 8018f00:	e7a9      	b.n	8018e56 <rcl_get_discovery_static_peers+0x22>
 8018f02:	bf00      	nop
 8018f04:	0801e02c 	.word	0x0801e02c

08018f08 <rcl_get_default_domain_id>:
 8018f08:	b530      	push	{r4, r5, lr}
 8018f0a:	b083      	sub	sp, #12
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	9300      	str	r3, [sp, #0]
 8018f10:	b1f0      	cbz	r0, 8018f50 <rcl_get_default_domain_id+0x48>
 8018f12:	4604      	mov	r4, r0
 8018f14:	4669      	mov	r1, sp
 8018f16:	4812      	ldr	r0, [pc, #72]	@ (8018f60 <rcl_get_default_domain_id+0x58>)
 8018f18:	f7fd fd60 	bl	80169dc <rcutils_get_env>
 8018f1c:	4602      	mov	r2, r0
 8018f1e:	b108      	cbz	r0, 8018f24 <rcl_get_default_domain_id+0x1c>
 8018f20:	2001      	movs	r0, #1
 8018f22:	e004      	b.n	8018f2e <rcl_get_default_domain_id+0x26>
 8018f24:	9800      	ldr	r0, [sp, #0]
 8018f26:	b108      	cbz	r0, 8018f2c <rcl_get_default_domain_id+0x24>
 8018f28:	7803      	ldrb	r3, [r0, #0]
 8018f2a:	b913      	cbnz	r3, 8018f32 <rcl_get_default_domain_id+0x2a>
 8018f2c:	2000      	movs	r0, #0
 8018f2e:	b003      	add	sp, #12
 8018f30:	bd30      	pop	{r4, r5, pc}
 8018f32:	a901      	add	r1, sp, #4
 8018f34:	9201      	str	r2, [sp, #4]
 8018f36:	f000 ff6b 	bl	8019e10 <strtoul>
 8018f3a:	4605      	mov	r5, r0
 8018f3c:	b158      	cbz	r0, 8018f56 <rcl_get_default_domain_id+0x4e>
 8018f3e:	1c43      	adds	r3, r0, #1
 8018f40:	d104      	bne.n	8018f4c <rcl_get_default_domain_id+0x44>
 8018f42:	f001 ff6f 	bl	801ae24 <__errno>
 8018f46:	6803      	ldr	r3, [r0, #0]
 8018f48:	2b22      	cmp	r3, #34	@ 0x22
 8018f4a:	d0e9      	beq.n	8018f20 <rcl_get_default_domain_id+0x18>
 8018f4c:	6025      	str	r5, [r4, #0]
 8018f4e:	e7ed      	b.n	8018f2c <rcl_get_default_domain_id+0x24>
 8018f50:	200b      	movs	r0, #11
 8018f52:	b003      	add	sp, #12
 8018f54:	bd30      	pop	{r4, r5, pc}
 8018f56:	9b01      	ldr	r3, [sp, #4]
 8018f58:	781b      	ldrb	r3, [r3, #0]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d0f6      	beq.n	8018f4c <rcl_get_default_domain_id+0x44>
 8018f5e:	e7df      	b.n	8018f20 <rcl_get_default_domain_id+0x18>
 8018f60:	0801e10c 	.word	0x0801e10c

08018f64 <rcl_expand_topic_name>:
 8018f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f68:	b08b      	sub	sp, #44	@ 0x2c
 8018f6a:	9306      	str	r3, [sp, #24]
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	f000 80ad 	beq.w	80190cc <rcl_expand_topic_name+0x168>
 8018f72:	460e      	mov	r6, r1
 8018f74:	2900      	cmp	r1, #0
 8018f76:	f000 80a9 	beq.w	80190cc <rcl_expand_topic_name+0x168>
 8018f7a:	4617      	mov	r7, r2
 8018f7c:	2a00      	cmp	r2, #0
 8018f7e:	f000 80a5 	beq.w	80190cc <rcl_expand_topic_name+0x168>
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	f000 80a2 	beq.w	80190cc <rcl_expand_topic_name+0x168>
 8018f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	f000 809e 	beq.w	80190cc <rcl_expand_topic_name+0x168>
 8018f90:	2200      	movs	r2, #0
 8018f92:	a909      	add	r1, sp, #36	@ 0x24
 8018f94:	4680      	mov	r8, r0
 8018f96:	f000 fa53 	bl	8019440 <rcl_validate_topic_name>
 8018f9a:	4605      	mov	r5, r0
 8018f9c:	2800      	cmp	r0, #0
 8018f9e:	f040 8096 	bne.w	80190ce <rcl_expand_topic_name+0x16a>
 8018fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	f040 809a 	bne.w	80190de <rcl_expand_topic_name+0x17a>
 8018faa:	4602      	mov	r2, r0
 8018fac:	a909      	add	r1, sp, #36	@ 0x24
 8018fae:	4630      	mov	r0, r6
 8018fb0:	f7fe f996 	bl	80172e0 <rmw_validate_node_name>
 8018fb4:	2800      	cmp	r0, #0
 8018fb6:	f040 808e 	bne.w	80190d6 <rcl_expand_topic_name+0x172>
 8018fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018fbc:	2a00      	cmp	r2, #0
 8018fbe:	f040 8093 	bne.w	80190e8 <rcl_expand_topic_name+0x184>
 8018fc2:	a909      	add	r1, sp, #36	@ 0x24
 8018fc4:	4638      	mov	r0, r7
 8018fc6:	f7fe f96d 	bl	80172a4 <rmw_validate_namespace>
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	f040 8083 	bne.w	80190d6 <rcl_expand_topic_name+0x172>
 8018fd0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8018fd2:	2d00      	cmp	r5, #0
 8018fd4:	f040 80f4 	bne.w	80191c0 <rcl_expand_topic_name+0x25c>
 8018fd8:	217b      	movs	r1, #123	@ 0x7b
 8018fda:	4640      	mov	r0, r8
 8018fdc:	f001 fe7f 	bl	801acde <strchr>
 8018fe0:	f898 3000 	ldrb.w	r3, [r8]
 8018fe4:	2b2f      	cmp	r3, #47	@ 0x2f
 8018fe6:	4604      	mov	r4, r0
 8018fe8:	f000 809f 	beq.w	801912a <rcl_expand_topic_name+0x1c6>
 8018fec:	2b7e      	cmp	r3, #126	@ 0x7e
 8018fee:	f040 80e9 	bne.w	80191c4 <rcl_expand_topic_name+0x260>
 8018ff2:	4638      	mov	r0, r7
 8018ff4:	f7e7 f934 	bl	8000260 <strlen>
 8018ff8:	4a82      	ldr	r2, [pc, #520]	@ (8019204 <rcl_expand_topic_name+0x2a0>)
 8018ffa:	4b83      	ldr	r3, [pc, #524]	@ (8019208 <rcl_expand_topic_name+0x2a4>)
 8018ffc:	2801      	cmp	r0, #1
 8018ffe:	bf08      	it	eq
 8019000:	4613      	moveq	r3, r2
 8019002:	9302      	str	r3, [sp, #8]
 8019004:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019006:	9300      	str	r3, [sp, #0]
 8019008:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801900c:	f108 0301 	add.w	r3, r8, #1
 8019010:	9305      	str	r3, [sp, #20]
 8019012:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019016:	9301      	str	r3, [sp, #4]
 8019018:	ab14      	add	r3, sp, #80	@ 0x50
 801901a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801901c:	f7fd fcf6 	bl	8016a0c <rcutils_format_string_limit>
 8019020:	4682      	mov	sl, r0
 8019022:	2800      	cmp	r0, #0
 8019024:	f000 80d1 	beq.w	80191ca <rcl_expand_topic_name+0x266>
 8019028:	2c00      	cmp	r4, #0
 801902a:	f000 8085 	beq.w	8019138 <rcl_expand_topic_name+0x1d4>
 801902e:	217b      	movs	r1, #123	@ 0x7b
 8019030:	f001 fe55 	bl	801acde <strchr>
 8019034:	46d1      	mov	r9, sl
 8019036:	4604      	mov	r4, r0
 8019038:	9507      	str	r5, [sp, #28]
 801903a:	464d      	mov	r5, r9
 801903c:	2c00      	cmp	r4, #0
 801903e:	f000 80a0 	beq.w	8019182 <rcl_expand_topic_name+0x21e>
 8019042:	217d      	movs	r1, #125	@ 0x7d
 8019044:	4628      	mov	r0, r5
 8019046:	f001 fe4a 	bl	801acde <strchr>
 801904a:	eba0 0904 	sub.w	r9, r0, r4
 801904e:	f109 0b01 	add.w	fp, r9, #1
 8019052:	486e      	ldr	r0, [pc, #440]	@ (801920c <rcl_expand_topic_name+0x2a8>)
 8019054:	465a      	mov	r2, fp
 8019056:	4621      	mov	r1, r4
 8019058:	f001 fe4e 	bl	801acf8 <strncmp>
 801905c:	2800      	cmp	r0, #0
 801905e:	d069      	beq.n	8019134 <rcl_expand_topic_name+0x1d0>
 8019060:	486b      	ldr	r0, [pc, #428]	@ (8019210 <rcl_expand_topic_name+0x2ac>)
 8019062:	465a      	mov	r2, fp
 8019064:	4621      	mov	r1, r4
 8019066:	f001 fe47 	bl	801acf8 <strncmp>
 801906a:	b130      	cbz	r0, 801907a <rcl_expand_topic_name+0x116>
 801906c:	4869      	ldr	r0, [pc, #420]	@ (8019214 <rcl_expand_topic_name+0x2b0>)
 801906e:	465a      	mov	r2, fp
 8019070:	4621      	mov	r1, r4
 8019072:	f001 fe41 	bl	801acf8 <strncmp>
 8019076:	2800      	cmp	r0, #0
 8019078:	d138      	bne.n	80190ec <rcl_expand_topic_name+0x188>
 801907a:	46b9      	mov	r9, r7
 801907c:	ab16      	add	r3, sp, #88	@ 0x58
 801907e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019082:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019086:	ab14      	add	r3, sp, #80	@ 0x50
 8019088:	4620      	mov	r0, r4
 801908a:	cb0c      	ldmia	r3, {r2, r3}
 801908c:	4659      	mov	r1, fp
 801908e:	f7fd fe11 	bl	8016cb4 <rcutils_strndup>
 8019092:	4604      	mov	r4, r0
 8019094:	2800      	cmp	r0, #0
 8019096:	f000 809d 	beq.w	80191d4 <rcl_expand_topic_name+0x270>
 801909a:	464a      	mov	r2, r9
 801909c:	4628      	mov	r0, r5
 801909e:	ab14      	add	r3, sp, #80	@ 0x50
 80190a0:	4621      	mov	r1, r4
 80190a2:	f7fd fced 	bl	8016a80 <rcutils_repl_str>
 80190a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80190a8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80190aa:	4605      	mov	r5, r0
 80190ac:	4620      	mov	r0, r4
 80190ae:	4798      	blx	r3
 80190b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80190b2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80190b4:	4650      	mov	r0, sl
 80190b6:	4798      	blx	r3
 80190b8:	2d00      	cmp	r5, #0
 80190ba:	f000 8086 	beq.w	80191ca <rcl_expand_topic_name+0x266>
 80190be:	217b      	movs	r1, #123	@ 0x7b
 80190c0:	4628      	mov	r0, r5
 80190c2:	f001 fe0c 	bl	801acde <strchr>
 80190c6:	46aa      	mov	sl, r5
 80190c8:	4604      	mov	r4, r0
 80190ca:	e7b7      	b.n	801903c <rcl_expand_topic_name+0xd8>
 80190cc:	250b      	movs	r5, #11
 80190ce:	4628      	mov	r0, r5
 80190d0:	b00b      	add	sp, #44	@ 0x2c
 80190d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190d6:	f7fa fda5 	bl	8013c24 <rcl_convert_rmw_ret_to_rcl_ret>
 80190da:	4605      	mov	r5, r0
 80190dc:	e7f7      	b.n	80190ce <rcl_expand_topic_name+0x16a>
 80190de:	2567      	movs	r5, #103	@ 0x67
 80190e0:	4628      	mov	r0, r5
 80190e2:	b00b      	add	sp, #44	@ 0x2c
 80190e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e8:	25c9      	movs	r5, #201	@ 0xc9
 80190ea:	e7f0      	b.n	80190ce <rcl_expand_topic_name+0x16a>
 80190ec:	f109 32ff 	add.w	r2, r9, #4294967295
 80190f0:	9806      	ldr	r0, [sp, #24]
 80190f2:	1c61      	adds	r1, r4, #1
 80190f4:	f7fd fefa 	bl	8016eec <rcutils_string_map_getn>
 80190f8:	4681      	mov	r9, r0
 80190fa:	2800      	cmp	r0, #0
 80190fc:	d1be      	bne.n	801907c <rcl_expand_topic_name+0x118>
 80190fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019100:	ab16      	add	r3, sp, #88	@ 0x58
 8019102:	6010      	str	r0, [r2, #0]
 8019104:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019108:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801910c:	ab14      	add	r3, sp, #80	@ 0x50
 801910e:	cb0c      	ldmia	r3, {r2, r3}
 8019110:	4659      	mov	r1, fp
 8019112:	4620      	mov	r0, r4
 8019114:	f7fd fdce 	bl	8016cb4 <rcutils_strndup>
 8019118:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801911a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801911c:	4798      	blx	r3
 801911e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019120:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019122:	4650      	mov	r0, sl
 8019124:	4798      	blx	r3
 8019126:	2569      	movs	r5, #105	@ 0x69
 8019128:	e7d1      	b.n	80190ce <rcl_expand_topic_name+0x16a>
 801912a:	2800      	cmp	r0, #0
 801912c:	d059      	beq.n	80191e2 <rcl_expand_topic_name+0x27e>
 801912e:	46c1      	mov	r9, r8
 8019130:	46aa      	mov	sl, r5
 8019132:	e781      	b.n	8019038 <rcl_expand_topic_name+0xd4>
 8019134:	46b1      	mov	r9, r6
 8019136:	e7a1      	b.n	801907c <rcl_expand_topic_name+0x118>
 8019138:	f89a 3000 	ldrb.w	r3, [sl]
 801913c:	2b2f      	cmp	r3, #47	@ 0x2f
 801913e:	d01c      	beq.n	801917a <rcl_expand_topic_name+0x216>
 8019140:	4638      	mov	r0, r7
 8019142:	f7e7 f88d 	bl	8000260 <strlen>
 8019146:	4a34      	ldr	r2, [pc, #208]	@ (8019218 <rcl_expand_topic_name+0x2b4>)
 8019148:	4b34      	ldr	r3, [pc, #208]	@ (801921c <rcl_expand_topic_name+0x2b8>)
 801914a:	f8cd a010 	str.w	sl, [sp, #16]
 801914e:	2801      	cmp	r0, #1
 8019150:	bf18      	it	ne
 8019152:	4613      	movne	r3, r2
 8019154:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019158:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801915c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801915e:	9703      	str	r7, [sp, #12]
 8019160:	9200      	str	r2, [sp, #0]
 8019162:	ab14      	add	r3, sp, #80	@ 0x50
 8019164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019166:	f7fd fc51 	bl	8016a0c <rcutils_format_string_limit>
 801916a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801916c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801916e:	4604      	mov	r4, r0
 8019170:	4650      	mov	r0, sl
 8019172:	4798      	blx	r3
 8019174:	46a2      	mov	sl, r4
 8019176:	4653      	mov	r3, sl
 8019178:	b33b      	cbz	r3, 80191ca <rcl_expand_topic_name+0x266>
 801917a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801917c:	f8c3 a000 	str.w	sl, [r3]
 8019180:	e7a5      	b.n	80190ce <rcl_expand_topic_name+0x16a>
 8019182:	4653      	mov	r3, sl
 8019184:	9d07      	ldr	r5, [sp, #28]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d1d6      	bne.n	8019138 <rcl_expand_topic_name+0x1d4>
 801918a:	f898 3000 	ldrb.w	r3, [r8]
 801918e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019190:	d0f3      	beq.n	801917a <rcl_expand_topic_name+0x216>
 8019192:	4638      	mov	r0, r7
 8019194:	f7e7 f864 	bl	8000260 <strlen>
 8019198:	4a1f      	ldr	r2, [pc, #124]	@ (8019218 <rcl_expand_topic_name+0x2b4>)
 801919a:	4b20      	ldr	r3, [pc, #128]	@ (801921c <rcl_expand_topic_name+0x2b8>)
 801919c:	f8cd 8010 	str.w	r8, [sp, #16]
 80191a0:	2801      	cmp	r0, #1
 80191a2:	bf18      	it	ne
 80191a4:	4613      	movne	r3, r2
 80191a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80191aa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80191ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80191b0:	9703      	str	r7, [sp, #12]
 80191b2:	9200      	str	r2, [sp, #0]
 80191b4:	ab14      	add	r3, sp, #80	@ 0x50
 80191b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80191b8:	f7fd fc28 	bl	8016a0c <rcutils_format_string_limit>
 80191bc:	4682      	mov	sl, r0
 80191be:	e7da      	b.n	8019176 <rcl_expand_topic_name+0x212>
 80191c0:	25ca      	movs	r5, #202	@ 0xca
 80191c2:	e784      	b.n	80190ce <rcl_expand_topic_name+0x16a>
 80191c4:	2800      	cmp	r0, #0
 80191c6:	d1b2      	bne.n	801912e <rcl_expand_topic_name+0x1ca>
 80191c8:	e7e3      	b.n	8019192 <rcl_expand_topic_name+0x22e>
 80191ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80191cc:	2300      	movs	r3, #0
 80191ce:	6013      	str	r3, [r2, #0]
 80191d0:	250a      	movs	r5, #10
 80191d2:	e77c      	b.n	80190ce <rcl_expand_topic_name+0x16a>
 80191d4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80191d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80191da:	6014      	str	r4, [r2, #0]
 80191dc:	4650      	mov	r0, sl
 80191de:	4798      	blx	r3
 80191e0:	e7f6      	b.n	80191d0 <rcl_expand_topic_name+0x26c>
 80191e2:	ab17      	add	r3, sp, #92	@ 0x5c
 80191e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80191e8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80191ec:	ab14      	add	r3, sp, #80	@ 0x50
 80191ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80191f0:	4640      	mov	r0, r8
 80191f2:	f7fd fd29 	bl	8016c48 <rcutils_strdup>
 80191f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80191f8:	6018      	str	r0, [r3, #0]
 80191fa:	2800      	cmp	r0, #0
 80191fc:	f47f af67 	bne.w	80190ce <rcl_expand_topic_name+0x16a>
 8019200:	e7e6      	b.n	80191d0 <rcl_expand_topic_name+0x26c>
 8019202:	bf00      	nop
 8019204:	0801db48 	.word	0x0801db48
 8019208:	0801e11c 	.word	0x0801e11c
 801920c:	0801e124 	.word	0x0801e124
 8019210:	0801e12c 	.word	0x0801e12c
 8019214:	0801e134 	.word	0x0801e134
 8019218:	0801db34 	.word	0x0801db34
 801921c:	0801db58 	.word	0x0801db58

08019220 <rcl_get_default_topic_name_substitutions>:
 8019220:	2800      	cmp	r0, #0
 8019222:	bf0c      	ite	eq
 8019224:	200b      	moveq	r0, #11
 8019226:	2000      	movne	r0, #0
 8019228:	4770      	bx	lr
 801922a:	bf00      	nop

0801922c <rcl_get_zero_initialized_guard_condition>:
 801922c:	4a03      	ldr	r2, [pc, #12]	@ (801923c <rcl_get_zero_initialized_guard_condition+0x10>)
 801922e:	4603      	mov	r3, r0
 8019230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019234:	e883 0003 	stmia.w	r3, {r0, r1}
 8019238:	4618      	mov	r0, r3
 801923a:	4770      	bx	lr
 801923c:	0801ebe4 	.word	0x0801ebe4

08019240 <rcl_guard_condition_init>:
 8019240:	b082      	sub	sp, #8
 8019242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019244:	b087      	sub	sp, #28
 8019246:	ac0c      	add	r4, sp, #48	@ 0x30
 8019248:	e884 000c 	stmia.w	r4, {r2, r3}
 801924c:	46a6      	mov	lr, r4
 801924e:	460d      	mov	r5, r1
 8019250:	4604      	mov	r4, r0
 8019252:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019256:	f10d 0c04 	add.w	ip, sp, #4
 801925a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801925e:	f8de 3000 	ldr.w	r3, [lr]
 8019262:	f8cc 3000 	str.w	r3, [ip]
 8019266:	a801      	add	r0, sp, #4
 8019268:	f7f4 fcd8 	bl	800dc1c <rcutils_allocator_is_valid>
 801926c:	b338      	cbz	r0, 80192be <rcl_guard_condition_init+0x7e>
 801926e:	b334      	cbz	r4, 80192be <rcl_guard_condition_init+0x7e>
 8019270:	6866      	ldr	r6, [r4, #4]
 8019272:	b9ee      	cbnz	r6, 80192b0 <rcl_guard_condition_init+0x70>
 8019274:	b31d      	cbz	r5, 80192be <rcl_guard_condition_init+0x7e>
 8019276:	4628      	mov	r0, r5
 8019278:	f7fa fcf4 	bl	8013c64 <rcl_context_is_valid>
 801927c:	b308      	cbz	r0, 80192c2 <rcl_guard_condition_init+0x82>
 801927e:	9b01      	ldr	r3, [sp, #4]
 8019280:	9905      	ldr	r1, [sp, #20]
 8019282:	201c      	movs	r0, #28
 8019284:	4798      	blx	r3
 8019286:	4607      	mov	r7, r0
 8019288:	6060      	str	r0, [r4, #4]
 801928a:	b310      	cbz	r0, 80192d2 <rcl_guard_condition_init+0x92>
 801928c:	6828      	ldr	r0, [r5, #0]
 801928e:	3028      	adds	r0, #40	@ 0x28
 8019290:	f000 fae0 	bl	8019854 <rmw_create_guard_condition>
 8019294:	6038      	str	r0, [r7, #0]
 8019296:	6860      	ldr	r0, [r4, #4]
 8019298:	6807      	ldr	r7, [r0, #0]
 801929a:	b1a7      	cbz	r7, 80192c6 <rcl_guard_condition_init+0x86>
 801929c:	2301      	movs	r3, #1
 801929e:	ac01      	add	r4, sp, #4
 80192a0:	7103      	strb	r3, [r0, #4]
 80192a2:	f100 0708 	add.w	r7, r0, #8
 80192a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80192aa:	6823      	ldr	r3, [r4, #0]
 80192ac:	603b      	str	r3, [r7, #0]
 80192ae:	e000      	b.n	80192b2 <rcl_guard_condition_init+0x72>
 80192b0:	2664      	movs	r6, #100	@ 0x64
 80192b2:	4630      	mov	r0, r6
 80192b4:	b007      	add	sp, #28
 80192b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80192ba:	b002      	add	sp, #8
 80192bc:	4770      	bx	lr
 80192be:	260b      	movs	r6, #11
 80192c0:	e7f7      	b.n	80192b2 <rcl_guard_condition_init+0x72>
 80192c2:	2665      	movs	r6, #101	@ 0x65
 80192c4:	e7f5      	b.n	80192b2 <rcl_guard_condition_init+0x72>
 80192c6:	9b02      	ldr	r3, [sp, #8]
 80192c8:	9905      	ldr	r1, [sp, #20]
 80192ca:	4798      	blx	r3
 80192cc:	2601      	movs	r6, #1
 80192ce:	6067      	str	r7, [r4, #4]
 80192d0:	e7ef      	b.n	80192b2 <rcl_guard_condition_init+0x72>
 80192d2:	260a      	movs	r6, #10
 80192d4:	e7ed      	b.n	80192b2 <rcl_guard_condition_init+0x72>
 80192d6:	bf00      	nop

080192d8 <rcl_guard_condition_init_from_rmw>:
 80192d8:	b082      	sub	sp, #8
 80192da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192de:	b086      	sub	sp, #24
 80192e0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80192e4:	4604      	mov	r4, r0
 80192e6:	f84c 3f04 	str.w	r3, [ip, #4]!
 80192ea:	460e      	mov	r6, r1
 80192ec:	4617      	mov	r7, r2
 80192ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80192f2:	f10d 0e04 	add.w	lr, sp, #4
 80192f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80192fa:	f8dc 3000 	ldr.w	r3, [ip]
 80192fe:	f8ce 3000 	str.w	r3, [lr]
 8019302:	a801      	add	r0, sp, #4
 8019304:	f7f4 fc8a 	bl	800dc1c <rcutils_allocator_is_valid>
 8019308:	b350      	cbz	r0, 8019360 <rcl_guard_condition_init_from_rmw+0x88>
 801930a:	b34c      	cbz	r4, 8019360 <rcl_guard_condition_init_from_rmw+0x88>
 801930c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019310:	f1b8 0f00 	cmp.w	r8, #0
 8019314:	d11e      	bne.n	8019354 <rcl_guard_condition_init_from_rmw+0x7c>
 8019316:	b31f      	cbz	r7, 8019360 <rcl_guard_condition_init_from_rmw+0x88>
 8019318:	4638      	mov	r0, r7
 801931a:	f7fa fca3 	bl	8013c64 <rcl_context_is_valid>
 801931e:	b328      	cbz	r0, 801936c <rcl_guard_condition_init_from_rmw+0x94>
 8019320:	9b01      	ldr	r3, [sp, #4]
 8019322:	9905      	ldr	r1, [sp, #20]
 8019324:	201c      	movs	r0, #28
 8019326:	4798      	blx	r3
 8019328:	4605      	mov	r5, r0
 801932a:	6060      	str	r0, [r4, #4]
 801932c:	b358      	cbz	r0, 8019386 <rcl_guard_condition_init_from_rmw+0xae>
 801932e:	b1fe      	cbz	r6, 8019370 <rcl_guard_condition_init_from_rmw+0x98>
 8019330:	6006      	str	r6, [r0, #0]
 8019332:	f880 8004 	strb.w	r8, [r0, #4]
 8019336:	ac01      	add	r4, sp, #4
 8019338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801933a:	f105 0c08 	add.w	ip, r5, #8
 801933e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019342:	6823      	ldr	r3, [r4, #0]
 8019344:	f8cc 3000 	str.w	r3, [ip]
 8019348:	2000      	movs	r0, #0
 801934a:	b006      	add	sp, #24
 801934c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019350:	b002      	add	sp, #8
 8019352:	4770      	bx	lr
 8019354:	2064      	movs	r0, #100	@ 0x64
 8019356:	b006      	add	sp, #24
 8019358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801935c:	b002      	add	sp, #8
 801935e:	4770      	bx	lr
 8019360:	200b      	movs	r0, #11
 8019362:	b006      	add	sp, #24
 8019364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019368:	b002      	add	sp, #8
 801936a:	4770      	bx	lr
 801936c:	2065      	movs	r0, #101	@ 0x65
 801936e:	e7f2      	b.n	8019356 <rcl_guard_condition_init_from_rmw+0x7e>
 8019370:	6838      	ldr	r0, [r7, #0]
 8019372:	3028      	adds	r0, #40	@ 0x28
 8019374:	f000 fa6e 	bl	8019854 <rmw_create_guard_condition>
 8019378:	6028      	str	r0, [r5, #0]
 801937a:	6865      	ldr	r5, [r4, #4]
 801937c:	682e      	ldr	r6, [r5, #0]
 801937e:	b126      	cbz	r6, 801938a <rcl_guard_condition_init_from_rmw+0xb2>
 8019380:	2301      	movs	r3, #1
 8019382:	712b      	strb	r3, [r5, #4]
 8019384:	e7d7      	b.n	8019336 <rcl_guard_condition_init_from_rmw+0x5e>
 8019386:	200a      	movs	r0, #10
 8019388:	e7e5      	b.n	8019356 <rcl_guard_condition_init_from_rmw+0x7e>
 801938a:	4628      	mov	r0, r5
 801938c:	9b02      	ldr	r3, [sp, #8]
 801938e:	9905      	ldr	r1, [sp, #20]
 8019390:	4798      	blx	r3
 8019392:	2001      	movs	r0, #1
 8019394:	6066      	str	r6, [r4, #4]
 8019396:	e7de      	b.n	8019356 <rcl_guard_condition_init_from_rmw+0x7e>

08019398 <rcl_guard_condition_fini>:
 8019398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801939a:	b1d8      	cbz	r0, 80193d4 <rcl_guard_condition_fini+0x3c>
 801939c:	4604      	mov	r4, r0
 801939e:	6840      	ldr	r0, [r0, #4]
 80193a0:	b158      	cbz	r0, 80193ba <rcl_guard_condition_fini+0x22>
 80193a2:	6803      	ldr	r3, [r0, #0]
 80193a4:	68c6      	ldr	r6, [r0, #12]
 80193a6:	6987      	ldr	r7, [r0, #24]
 80193a8:	b153      	cbz	r3, 80193c0 <rcl_guard_condition_fini+0x28>
 80193aa:	7905      	ldrb	r5, [r0, #4]
 80193ac:	b955      	cbnz	r5, 80193c4 <rcl_guard_condition_fini+0x2c>
 80193ae:	4639      	mov	r1, r7
 80193b0:	47b0      	blx	r6
 80193b2:	2300      	movs	r3, #0
 80193b4:	6063      	str	r3, [r4, #4]
 80193b6:	4628      	mov	r0, r5
 80193b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193ba:	4605      	mov	r5, r0
 80193bc:	4628      	mov	r0, r5
 80193be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193c0:	461d      	mov	r5, r3
 80193c2:	e7f4      	b.n	80193ae <rcl_guard_condition_fini+0x16>
 80193c4:	4618      	mov	r0, r3
 80193c6:	f000 fa59 	bl	801987c <rmw_destroy_guard_condition>
 80193ca:	1e05      	subs	r5, r0, #0
 80193cc:	bf18      	it	ne
 80193ce:	2501      	movne	r5, #1
 80193d0:	6860      	ldr	r0, [r4, #4]
 80193d2:	e7ec      	b.n	80193ae <rcl_guard_condition_fini+0x16>
 80193d4:	250b      	movs	r5, #11
 80193d6:	4628      	mov	r0, r5
 80193d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193da:	bf00      	nop

080193dc <rcl_guard_condition_get_default_options>:
 80193dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193de:	b087      	sub	sp, #28
 80193e0:	4606      	mov	r6, r0
 80193e2:	4668      	mov	r0, sp
 80193e4:	f7f4 fbee 	bl	800dbc4 <rcutils_get_default_allocator>
 80193e8:	46ee      	mov	lr, sp
 80193ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80193ee:	4c08      	ldr	r4, [pc, #32]	@ (8019410 <rcl_guard_condition_get_default_options+0x34>)
 80193f0:	46a4      	mov	ip, r4
 80193f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80193f6:	4625      	mov	r5, r4
 80193f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193fa:	4634      	mov	r4, r6
 80193fc:	f8de 7000 	ldr.w	r7, [lr]
 8019400:	f8cc 7000 	str.w	r7, [ip]
 8019404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019406:	4630      	mov	r0, r6
 8019408:	6027      	str	r7, [r4, #0]
 801940a:	b007      	add	sp, #28
 801940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801940e:	bf00      	nop
 8019410:	2000d228 	.word	0x2000d228

08019414 <rcl_trigger_guard_condition>:
 8019414:	b148      	cbz	r0, 801942a <rcl_trigger_guard_condition+0x16>
 8019416:	b508      	push	{r3, lr}
 8019418:	6843      	ldr	r3, [r0, #4]
 801941a:	b143      	cbz	r3, 801942e <rcl_trigger_guard_condition+0x1a>
 801941c:	6818      	ldr	r0, [r3, #0]
 801941e:	f000 fa41 	bl	80198a4 <rmw_trigger_guard_condition>
 8019422:	3800      	subs	r0, #0
 8019424:	bf18      	it	ne
 8019426:	2001      	movne	r0, #1
 8019428:	bd08      	pop	{r3, pc}
 801942a:	200b      	movs	r0, #11
 801942c:	4770      	bx	lr
 801942e:	200b      	movs	r0, #11
 8019430:	bd08      	pop	{r3, pc}
 8019432:	bf00      	nop

08019434 <rcl_guard_condition_get_rmw_handle>:
 8019434:	b110      	cbz	r0, 801943c <rcl_guard_condition_get_rmw_handle+0x8>
 8019436:	6840      	ldr	r0, [r0, #4]
 8019438:	b100      	cbz	r0, 801943c <rcl_guard_condition_get_rmw_handle+0x8>
 801943a:	6800      	ldr	r0, [r0, #0]
 801943c:	4770      	bx	lr
 801943e:	bf00      	nop

08019440 <rcl_validate_topic_name>:
 8019440:	2800      	cmp	r0, #0
 8019442:	d06b      	beq.n	801951c <rcl_validate_topic_name+0xdc>
 8019444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019448:	460d      	mov	r5, r1
 801944a:	2900      	cmp	r1, #0
 801944c:	d06d      	beq.n	801952a <rcl_validate_topic_name+0xea>
 801944e:	4616      	mov	r6, r2
 8019450:	4604      	mov	r4, r0
 8019452:	f7e6 ff05 	bl	8000260 <strlen>
 8019456:	b190      	cbz	r0, 801947e <rcl_validate_topic_name+0x3e>
 8019458:	7821      	ldrb	r1, [r4, #0]
 801945a:	4a71      	ldr	r2, [pc, #452]	@ (8019620 <rcl_validate_topic_name+0x1e0>)
 801945c:	5c53      	ldrb	r3, [r2, r1]
 801945e:	f013 0304 	ands.w	r3, r3, #4
 8019462:	d15d      	bne.n	8019520 <rcl_validate_topic_name+0xe0>
 8019464:	1e47      	subs	r7, r0, #1
 8019466:	f814 c007 	ldrb.w	ip, [r4, r7]
 801946a:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801946e:	d10d      	bne.n	801948c <rcl_validate_topic_name+0x4c>
 8019470:	2302      	movs	r3, #2
 8019472:	602b      	str	r3, [r5, #0]
 8019474:	b146      	cbz	r6, 8019488 <rcl_validate_topic_name+0x48>
 8019476:	6037      	str	r7, [r6, #0]
 8019478:	2000      	movs	r0, #0
 801947a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801947e:	2301      	movs	r3, #1
 8019480:	602b      	str	r3, [r5, #0]
 8019482:	b10e      	cbz	r6, 8019488 <rcl_validate_topic_name+0x48>
 8019484:	2300      	movs	r3, #0
 8019486:	6033      	str	r3, [r6, #0]
 8019488:	2000      	movs	r0, #0
 801948a:	e7f6      	b.n	801947a <rcl_validate_topic_name+0x3a>
 801948c:	f104 38ff 	add.w	r8, r4, #4294967295
 8019490:	469a      	mov	sl, r3
 8019492:	469e      	mov	lr, r3
 8019494:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8019498:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801949c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 80194a0:	d85b      	bhi.n	801955a <rcl_validate_topic_name+0x11a>
 80194a2:	e8df f00c 	tbb	[pc, ip]
 80194a6:	4463      	.short	0x4463
 80194a8:	44444444 	.word	0x44444444
 80194ac:	44444444 	.word	0x44444444
 80194b0:	5a5a5a44 	.word	0x5a5a5a44
 80194b4:	5a5a5a5a 	.word	0x5a5a5a5a
 80194b8:	44444444 	.word	0x44444444
 80194bc:	44444444 	.word	0x44444444
 80194c0:	44444444 	.word	0x44444444
 80194c4:	44444444 	.word	0x44444444
 80194c8:	44444444 	.word	0x44444444
 80194cc:	44444444 	.word	0x44444444
 80194d0:	5a5a4444 	.word	0x5a5a4444
 80194d4:	5a2e5a5a 	.word	0x5a2e5a5a
 80194d8:	44444444 	.word	0x44444444
 80194dc:	44444444 	.word	0x44444444
 80194e0:	44444444 	.word	0x44444444
 80194e4:	44444444 	.word	0x44444444
 80194e8:	44444444 	.word	0x44444444
 80194ec:	44444444 	.word	0x44444444
 80194f0:	5a284444 	.word	0x5a284444
 80194f4:	6b73      	.short	0x6b73
 80194f6:	f1ba 0f00 	cmp.w	sl, #0
 80194fa:	d13a      	bne.n	8019572 <rcl_validate_topic_name+0x132>
 80194fc:	4673      	mov	r3, lr
 80194fe:	f04f 0a01 	mov.w	sl, #1
 8019502:	f10e 0e01 	add.w	lr, lr, #1
 8019506:	4570      	cmp	r0, lr
 8019508:	d1c4      	bne.n	8019494 <rcl_validate_topic_name+0x54>
 801950a:	f1ba 0f00 	cmp.w	sl, #0
 801950e:	d048      	beq.n	80195a2 <rcl_validate_topic_name+0x162>
 8019510:	2205      	movs	r2, #5
 8019512:	602a      	str	r2, [r5, #0]
 8019514:	2e00      	cmp	r6, #0
 8019516:	d0b7      	beq.n	8019488 <rcl_validate_topic_name+0x48>
 8019518:	6033      	str	r3, [r6, #0]
 801951a:	e7b5      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801951c:	200b      	movs	r0, #11
 801951e:	4770      	bx	lr
 8019520:	2304      	movs	r3, #4
 8019522:	602b      	str	r3, [r5, #0]
 8019524:	2e00      	cmp	r6, #0
 8019526:	d1ad      	bne.n	8019484 <rcl_validate_topic_name+0x44>
 8019528:	e7ae      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801952a:	200b      	movs	r0, #11
 801952c:	e7a5      	b.n	801947a <rcl_validate_topic_name+0x3a>
 801952e:	f812 c009 	ldrb.w	ip, [r2, r9]
 8019532:	f01c 0f04 	tst.w	ip, #4
 8019536:	d0e4      	beq.n	8019502 <rcl_validate_topic_name+0xc2>
 8019538:	f1ba 0f00 	cmp.w	sl, #0
 801953c:	d0e1      	beq.n	8019502 <rcl_validate_topic_name+0xc2>
 801953e:	f1be 0f00 	cmp.w	lr, #0
 8019542:	d0de      	beq.n	8019502 <rcl_validate_topic_name+0xc2>
 8019544:	f10e 3cff 	add.w	ip, lr, #4294967295
 8019548:	4563      	cmp	r3, ip
 801954a:	d1da      	bne.n	8019502 <rcl_validate_topic_name+0xc2>
 801954c:	2309      	movs	r3, #9
 801954e:	602b      	str	r3, [r5, #0]
 8019550:	2e00      	cmp	r6, #0
 8019552:	d099      	beq.n	8019488 <rcl_validate_topic_name+0x48>
 8019554:	f8c6 e000 	str.w	lr, [r6]
 8019558:	e796      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801955a:	f1ba 0f00 	cmp.w	sl, #0
 801955e:	bf0c      	ite	eq
 8019560:	2303      	moveq	r3, #3
 8019562:	2308      	movne	r3, #8
 8019564:	602b      	str	r3, [r5, #0]
 8019566:	2e00      	cmp	r6, #0
 8019568:	d1f4      	bne.n	8019554 <rcl_validate_topic_name+0x114>
 801956a:	e78d      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801956c:	f1ba 0f00 	cmp.w	sl, #0
 8019570:	d0c7      	beq.n	8019502 <rcl_validate_topic_name+0xc2>
 8019572:	2308      	movs	r3, #8
 8019574:	602b      	str	r3, [r5, #0]
 8019576:	2e00      	cmp	r6, #0
 8019578:	d1ec      	bne.n	8019554 <rcl_validate_topic_name+0x114>
 801957a:	e785      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801957c:	f1be 0f00 	cmp.w	lr, #0
 8019580:	d0bf      	beq.n	8019502 <rcl_validate_topic_name+0xc2>
 8019582:	2306      	movs	r3, #6
 8019584:	602b      	str	r3, [r5, #0]
 8019586:	2e00      	cmp	r6, #0
 8019588:	d1e4      	bne.n	8019554 <rcl_validate_topic_name+0x114>
 801958a:	e77d      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801958c:	f1ba 0f00 	cmp.w	sl, #0
 8019590:	d104      	bne.n	801959c <rcl_validate_topic_name+0x15c>
 8019592:	2305      	movs	r3, #5
 8019594:	602b      	str	r3, [r5, #0]
 8019596:	2e00      	cmp	r6, #0
 8019598:	d1dc      	bne.n	8019554 <rcl_validate_topic_name+0x114>
 801959a:	e775      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801959c:	f04f 0a00 	mov.w	sl, #0
 80195a0:	e7af      	b.n	8019502 <rcl_validate_topic_name+0xc2>
 80195a2:	297e      	cmp	r1, #126	@ 0x7e
 80195a4:	d01d      	beq.n	80195e2 <rcl_validate_topic_name+0x1a2>
 80195a6:	2101      	movs	r1, #1
 80195a8:	e006      	b.n	80195b8 <rcl_validate_topic_name+0x178>
 80195aa:	458e      	cmp	lr, r1
 80195ac:	f104 0401 	add.w	r4, r4, #1
 80195b0:	f101 0301 	add.w	r3, r1, #1
 80195b4:	d912      	bls.n	80195dc <rcl_validate_topic_name+0x19c>
 80195b6:	4619      	mov	r1, r3
 80195b8:	4557      	cmp	r7, sl
 80195ba:	f10a 0a01 	add.w	sl, sl, #1
 80195be:	d0f4      	beq.n	80195aa <rcl_validate_topic_name+0x16a>
 80195c0:	7823      	ldrb	r3, [r4, #0]
 80195c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80195c4:	d1f1      	bne.n	80195aa <rcl_validate_topic_name+0x16a>
 80195c6:	7863      	ldrb	r3, [r4, #1]
 80195c8:	5cd3      	ldrb	r3, [r2, r3]
 80195ca:	075b      	lsls	r3, r3, #29
 80195cc:	d5ed      	bpl.n	80195aa <rcl_validate_topic_name+0x16a>
 80195ce:	2304      	movs	r3, #4
 80195d0:	602b      	str	r3, [r5, #0]
 80195d2:	2e00      	cmp	r6, #0
 80195d4:	f43f af58 	beq.w	8019488 <rcl_validate_topic_name+0x48>
 80195d8:	6031      	str	r1, [r6, #0]
 80195da:	e755      	b.n	8019488 <rcl_validate_topic_name+0x48>
 80195dc:	2300      	movs	r3, #0
 80195de:	602b      	str	r3, [r5, #0]
 80195e0:	e752      	b.n	8019488 <rcl_validate_topic_name+0x48>
 80195e2:	4653      	mov	r3, sl
 80195e4:	2101      	movs	r1, #1
 80195e6:	e00a      	b.n	80195fe <rcl_validate_topic_name+0x1be>
 80195e8:	2b01      	cmp	r3, #1
 80195ea:	d012      	beq.n	8019612 <rcl_validate_topic_name+0x1d2>
 80195ec:	458e      	cmp	lr, r1
 80195ee:	f103 0301 	add.w	r3, r3, #1
 80195f2:	f104 0401 	add.w	r4, r4, #1
 80195f6:	f101 0001 	add.w	r0, r1, #1
 80195fa:	d9ef      	bls.n	80195dc <rcl_validate_topic_name+0x19c>
 80195fc:	4601      	mov	r1, r0
 80195fe:	429f      	cmp	r7, r3
 8019600:	d0f4      	beq.n	80195ec <rcl_validate_topic_name+0x1ac>
 8019602:	7820      	ldrb	r0, [r4, #0]
 8019604:	282f      	cmp	r0, #47	@ 0x2f
 8019606:	d1ef      	bne.n	80195e8 <rcl_validate_topic_name+0x1a8>
 8019608:	7860      	ldrb	r0, [r4, #1]
 801960a:	5c10      	ldrb	r0, [r2, r0]
 801960c:	0740      	lsls	r0, r0, #29
 801960e:	d5ed      	bpl.n	80195ec <rcl_validate_topic_name+0x1ac>
 8019610:	e7dd      	b.n	80195ce <rcl_validate_topic_name+0x18e>
 8019612:	2207      	movs	r2, #7
 8019614:	602a      	str	r2, [r5, #0]
 8019616:	2e00      	cmp	r6, #0
 8019618:	f47f af7e 	bne.w	8019518 <rcl_validate_topic_name+0xd8>
 801961c:	e734      	b.n	8019488 <rcl_validate_topic_name+0x48>
 801961e:	bf00      	nop
 8019620:	0801ee34 	.word	0x0801ee34

08019624 <rcutils_split>:
 8019624:	b082      	sub	sp, #8
 8019626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801962a:	b08b      	sub	sp, #44	@ 0x2c
 801962c:	ac14      	add	r4, sp, #80	@ 0x50
 801962e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8019630:	e884 000c 	stmia.w	r4, {r2, r3}
 8019634:	2f00      	cmp	r7, #0
 8019636:	f000 809f 	beq.w	8019778 <rcutils_split+0x154>
 801963a:	4606      	mov	r6, r0
 801963c:	2800      	cmp	r0, #0
 801963e:	d071      	beq.n	8019724 <rcutils_split+0x100>
 8019640:	7804      	ldrb	r4, [r0, #0]
 8019642:	2c00      	cmp	r4, #0
 8019644:	d06e      	beq.n	8019724 <rcutils_split+0x100>
 8019646:	460d      	mov	r5, r1
 8019648:	f7e6 fe0a 	bl	8000260 <strlen>
 801964c:	1833      	adds	r3, r6, r0
 801964e:	1b64      	subs	r4, r4, r5
 8019650:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019654:	4680      	mov	r8, r0
 8019656:	fab4 f484 	clz	r4, r4
 801965a:	0964      	lsrs	r4, r4, #5
 801965c:	42ab      	cmp	r3, r5
 801965e:	bf08      	it	eq
 8019660:	f1a8 0801 	subeq.w	r8, r8, #1
 8019664:	4544      	cmp	r4, r8
 8019666:	d278      	bcs.n	801975a <rcutils_split+0x136>
 8019668:	1933      	adds	r3, r6, r4
 801966a:	eb06 0008 	add.w	r0, r6, r8
 801966e:	2101      	movs	r1, #1
 8019670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019674:	42aa      	cmp	r2, r5
 8019676:	bf08      	it	eq
 8019678:	3101      	addeq	r1, #1
 801967a:	4283      	cmp	r3, r0
 801967c:	d1f8      	bne.n	8019670 <rcutils_split+0x4c>
 801967e:	aa14      	add	r2, sp, #80	@ 0x50
 8019680:	4638      	mov	r0, r7
 8019682:	f000 f89f 	bl	80197c4 <rcutils_string_array_init>
 8019686:	4681      	mov	r9, r0
 8019688:	2800      	cmp	r0, #0
 801968a:	d159      	bne.n	8019740 <rcutils_split+0x11c>
 801968c:	687a      	ldr	r2, [r7, #4]
 801968e:	46a2      	mov	sl, r4
 8019690:	e002      	b.n	8019698 <rcutils_split+0x74>
 8019692:	3401      	adds	r4, #1
 8019694:	4544      	cmp	r4, r8
 8019696:	d222      	bcs.n	80196de <rcutils_split+0xba>
 8019698:	5d33      	ldrb	r3, [r6, r4]
 801969a:	42ab      	cmp	r3, r5
 801969c:	d1f9      	bne.n	8019692 <rcutils_split+0x6e>
 801969e:	4554      	cmp	r4, sl
 80196a0:	eba4 0b0a 	sub.w	fp, r4, sl
 80196a4:	d037      	beq.n	8019716 <rcutils_split+0xf2>
 80196a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80196a8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80196aa:	9201      	str	r2, [sp, #4]
 80196ac:	f10b 0002 	add.w	r0, fp, #2
 80196b0:	4798      	blx	r3
 80196b2:	9a01      	ldr	r2, [sp, #4]
 80196b4:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 80196b8:	687a      	ldr	r2, [r7, #4]
 80196ba:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80196be:	eb06 030a 	add.w	r3, r6, sl
 80196c2:	f10b 0101 	add.w	r1, fp, #1
 80196c6:	2800      	cmp	r0, #0
 80196c8:	d038      	beq.n	801973c <rcutils_split+0x118>
 80196ca:	4a2e      	ldr	r2, [pc, #184]	@ (8019784 <rcutils_split+0x160>)
 80196cc:	f001 f98e 	bl	801a9ec <sniprintf>
 80196d0:	687a      	ldr	r2, [r7, #4]
 80196d2:	f109 0901 	add.w	r9, r9, #1
 80196d6:	3401      	adds	r4, #1
 80196d8:	4544      	cmp	r4, r8
 80196da:	46a2      	mov	sl, r4
 80196dc:	d3dc      	bcc.n	8019698 <rcutils_split+0x74>
 80196de:	4554      	cmp	r4, sl
 80196e0:	d043      	beq.n	801976a <rcutils_split+0x146>
 80196e2:	eba4 040a 	sub.w	r4, r4, sl
 80196e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80196e8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80196ea:	9201      	str	r2, [sp, #4]
 80196ec:	1ca0      	adds	r0, r4, #2
 80196ee:	4798      	blx	r3
 80196f0:	9a01      	ldr	r2, [sp, #4]
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 80196f8:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80196fc:	b300      	cbz	r0, 8019740 <rcutils_split+0x11c>
 80196fe:	4a21      	ldr	r2, [pc, #132]	@ (8019784 <rcutils_split+0x160>)
 8019700:	eb06 030a 	add.w	r3, r6, sl
 8019704:	1c61      	adds	r1, r4, #1
 8019706:	f001 f971 	bl	801a9ec <sniprintf>
 801970a:	2000      	movs	r0, #0
 801970c:	b00b      	add	sp, #44	@ 0x2c
 801970e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019712:	b002      	add	sp, #8
 8019714:	4770      	bx	lr
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	3b01      	subs	r3, #1
 801971a:	2100      	movs	r1, #0
 801971c:	603b      	str	r3, [r7, #0]
 801971e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019722:	e7d8      	b.n	80196d6 <rcutils_split+0xb2>
 8019724:	a802      	add	r0, sp, #8
 8019726:	ac02      	add	r4, sp, #8
 8019728:	f000 f82e 	bl	8019788 <rcutils_get_zero_initialized_string_array>
 801972c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801972e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019730:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019734:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8019738:	2000      	movs	r0, #0
 801973a:	e7e7      	b.n	801970c <rcutils_split+0xe8>
 801973c:	f8c7 9000 	str.w	r9, [r7]
 8019740:	4638      	mov	r0, r7
 8019742:	f000 f861 	bl	8019808 <rcutils_string_array_fini>
 8019746:	b928      	cbnz	r0, 8019754 <rcutils_split+0x130>
 8019748:	200a      	movs	r0, #10
 801974a:	b00b      	add	sp, #44	@ 0x2c
 801974c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019750:	b002      	add	sp, #8
 8019752:	4770      	bx	lr
 8019754:	f7f4 fa88 	bl	800dc68 <rcutils_reset_error>
 8019758:	e7f6      	b.n	8019748 <rcutils_split+0x124>
 801975a:	aa14      	add	r2, sp, #80	@ 0x50
 801975c:	2101      	movs	r1, #1
 801975e:	4638      	mov	r0, r7
 8019760:	f000 f830 	bl	80197c4 <rcutils_string_array_init>
 8019764:	2800      	cmp	r0, #0
 8019766:	d1eb      	bne.n	8019740 <rcutils_split+0x11c>
 8019768:	687a      	ldr	r2, [r7, #4]
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	3b01      	subs	r3, #1
 801976e:	2100      	movs	r1, #0
 8019770:	603b      	str	r3, [r7, #0]
 8019772:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019776:	e7df      	b.n	8019738 <rcutils_split+0x114>
 8019778:	200b      	movs	r0, #11
 801977a:	b00b      	add	sp, #44	@ 0x2c
 801977c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019780:	b002      	add	sp, #8
 8019782:	4770      	bx	lr
 8019784:	0801db4c 	.word	0x0801db4c

08019788 <rcutils_get_zero_initialized_string_array>:
 8019788:	b570      	push	{r4, r5, r6, lr}
 801978a:	b086      	sub	sp, #24
 801978c:	4606      	mov	r6, r0
 801978e:	4668      	mov	r0, sp
 8019790:	f7f4 fa0a 	bl	800dba8 <rcutils_get_zero_initialized_allocator>
 8019794:	46ee      	mov	lr, sp
 8019796:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801979a:	4c09      	ldr	r4, [pc, #36]	@ (80197c0 <rcutils_get_zero_initialized_string_array+0x38>)
 801979c:	f104 0508 	add.w	r5, r4, #8
 80197a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80197a2:	46a4      	mov	ip, r4
 80197a4:	f8de 3000 	ldr.w	r3, [lr]
 80197a8:	602b      	str	r3, [r5, #0]
 80197aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80197ae:	4634      	mov	r4, r6
 80197b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197b2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80197b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80197ba:	4630      	mov	r0, r6
 80197bc:	b006      	add	sp, #24
 80197be:	bd70      	pop	{r4, r5, r6, pc}
 80197c0:	2000d23c 	.word	0x2000d23c

080197c4 <rcutils_string_array_init>:
 80197c4:	b1da      	cbz	r2, 80197fe <rcutils_string_array_init+0x3a>
 80197c6:	b570      	push	{r4, r5, r6, lr}
 80197c8:	4605      	mov	r5, r0
 80197ca:	b1d0      	cbz	r0, 8019802 <rcutils_string_array_init+0x3e>
 80197cc:	460e      	mov	r6, r1
 80197ce:	4614      	mov	r4, r2
 80197d0:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 80197d4:	6001      	str	r1, [r0, #0]
 80197d6:	2104      	movs	r1, #4
 80197d8:	4630      	mov	r0, r6
 80197da:	4798      	blx	r3
 80197dc:	6068      	str	r0, [r5, #4]
 80197de:	b150      	cbz	r0, 80197f6 <rcutils_string_array_init+0x32>
 80197e0:	46a4      	mov	ip, r4
 80197e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80197e6:	f105 0408 	add.w	r4, r5, #8
 80197ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197ec:	f8dc 3000 	ldr.w	r3, [ip]
 80197f0:	6023      	str	r3, [r4, #0]
 80197f2:	2000      	movs	r0, #0
 80197f4:	bd70      	pop	{r4, r5, r6, pc}
 80197f6:	2e00      	cmp	r6, #0
 80197f8:	d0f2      	beq.n	80197e0 <rcutils_string_array_init+0x1c>
 80197fa:	200a      	movs	r0, #10
 80197fc:	bd70      	pop	{r4, r5, r6, pc}
 80197fe:	200b      	movs	r0, #11
 8019800:	4770      	bx	lr
 8019802:	200b      	movs	r0, #11
 8019804:	bd70      	pop	{r4, r5, r6, pc}
 8019806:	bf00      	nop

08019808 <rcutils_string_array_fini>:
 8019808:	b310      	cbz	r0, 8019850 <rcutils_string_array_fini+0x48>
 801980a:	6843      	ldr	r3, [r0, #4]
 801980c:	b570      	push	{r4, r5, r6, lr}
 801980e:	4604      	mov	r4, r0
 8019810:	b1d3      	cbz	r3, 8019848 <rcutils_string_array_fini+0x40>
 8019812:	3008      	adds	r0, #8
 8019814:	f7f4 fa02 	bl	800dc1c <rcutils_allocator_is_valid>
 8019818:	b1c0      	cbz	r0, 801984c <rcutils_string_array_fini+0x44>
 801981a:	e9d4 3000 	ldrd	r3, r0, [r4]
 801981e:	b16b      	cbz	r3, 801983c <rcutils_string_array_fini+0x34>
 8019820:	2500      	movs	r5, #0
 8019822:	462e      	mov	r6, r5
 8019824:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019828:	68e3      	ldr	r3, [r4, #12]
 801982a:	69a1      	ldr	r1, [r4, #24]
 801982c:	4798      	blx	r3
 801982e:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019832:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019836:	3501      	adds	r5, #1
 8019838:	42ab      	cmp	r3, r5
 801983a:	d8f3      	bhi.n	8019824 <rcutils_string_array_fini+0x1c>
 801983c:	68e3      	ldr	r3, [r4, #12]
 801983e:	69a1      	ldr	r1, [r4, #24]
 8019840:	4798      	blx	r3
 8019842:	2300      	movs	r3, #0
 8019844:	e9c4 3300 	strd	r3, r3, [r4]
 8019848:	2000      	movs	r0, #0
 801984a:	bd70      	pop	{r4, r5, r6, pc}
 801984c:	200b      	movs	r0, #11
 801984e:	bd70      	pop	{r4, r5, r6, pc}
 8019850:	200b      	movs	r0, #11
 8019852:	4770      	bx	lr

08019854 <rmw_create_guard_condition>:
 8019854:	b538      	push	{r3, r4, r5, lr}
 8019856:	4605      	mov	r5, r0
 8019858:	4807      	ldr	r0, [pc, #28]	@ (8019878 <rmw_create_guard_condition+0x24>)
 801985a:	f7fd fe81 	bl	8017560 <get_memory>
 801985e:	b148      	cbz	r0, 8019874 <rmw_create_guard_condition+0x20>
 8019860:	6884      	ldr	r4, [r0, #8]
 8019862:	2300      	movs	r3, #0
 8019864:	7423      	strb	r3, [r4, #16]
 8019866:	61e5      	str	r5, [r4, #28]
 8019868:	f7fd ff00 	bl	801766c <rmw_get_implementation_identifier>
 801986c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019870:	f104 0014 	add.w	r0, r4, #20
 8019874:	bd38      	pop	{r3, r4, r5, pc}
 8019876:	bf00      	nop
 8019878:	20008a38 	.word	0x20008a38

0801987c <rmw_destroy_guard_condition>:
 801987c:	b508      	push	{r3, lr}
 801987e:	4b08      	ldr	r3, [pc, #32]	@ (80198a0 <rmw_destroy_guard_condition+0x24>)
 8019880:	6819      	ldr	r1, [r3, #0]
 8019882:	b911      	cbnz	r1, 801988a <rmw_destroy_guard_condition+0xe>
 8019884:	e00a      	b.n	801989c <rmw_destroy_guard_condition+0x20>
 8019886:	6849      	ldr	r1, [r1, #4]
 8019888:	b141      	cbz	r1, 801989c <rmw_destroy_guard_condition+0x20>
 801988a:	688b      	ldr	r3, [r1, #8]
 801988c:	3314      	adds	r3, #20
 801988e:	4298      	cmp	r0, r3
 8019890:	d1f9      	bne.n	8019886 <rmw_destroy_guard_condition+0xa>
 8019892:	4803      	ldr	r0, [pc, #12]	@ (80198a0 <rmw_destroy_guard_condition+0x24>)
 8019894:	f7fd fe74 	bl	8017580 <put_memory>
 8019898:	2000      	movs	r0, #0
 801989a:	bd08      	pop	{r3, pc}
 801989c:	2001      	movs	r0, #1
 801989e:	bd08      	pop	{r3, pc}
 80198a0:	20008a38 	.word	0x20008a38

080198a4 <rmw_trigger_guard_condition>:
 80198a4:	b160      	cbz	r0, 80198c0 <rmw_trigger_guard_condition+0x1c>
 80198a6:	b510      	push	{r4, lr}
 80198a8:	4604      	mov	r4, r0
 80198aa:	6800      	ldr	r0, [r0, #0]
 80198ac:	f7f5 fd30 	bl	800f310 <is_uxrce_rmw_identifier_valid>
 80198b0:	b908      	cbnz	r0, 80198b6 <rmw_trigger_guard_condition+0x12>
 80198b2:	2001      	movs	r0, #1
 80198b4:	bd10      	pop	{r4, pc}
 80198b6:	6863      	ldr	r3, [r4, #4]
 80198b8:	2201      	movs	r2, #1
 80198ba:	741a      	strb	r2, [r3, #16]
 80198bc:	2000      	movs	r0, #0
 80198be:	bd10      	pop	{r4, pc}
 80198c0:	2001      	movs	r0, #1
 80198c2:	4770      	bx	lr

080198c4 <rosidl_runtime_c__String__init>:
 80198c4:	b1b0      	cbz	r0, 80198f4 <rosidl_runtime_c__String__init+0x30>
 80198c6:	b510      	push	{r4, lr}
 80198c8:	b086      	sub	sp, #24
 80198ca:	4604      	mov	r4, r0
 80198cc:	a801      	add	r0, sp, #4
 80198ce:	f7f4 f979 	bl	800dbc4 <rcutils_get_default_allocator>
 80198d2:	9b01      	ldr	r3, [sp, #4]
 80198d4:	9905      	ldr	r1, [sp, #20]
 80198d6:	2001      	movs	r0, #1
 80198d8:	4798      	blx	r3
 80198da:	6020      	str	r0, [r4, #0]
 80198dc:	b138      	cbz	r0, 80198ee <rosidl_runtime_c__String__init+0x2a>
 80198de:	2200      	movs	r2, #0
 80198e0:	2301      	movs	r3, #1
 80198e2:	7002      	strb	r2, [r0, #0]
 80198e4:	4618      	mov	r0, r3
 80198e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80198ea:	b006      	add	sp, #24
 80198ec:	bd10      	pop	{r4, pc}
 80198ee:	2000      	movs	r0, #0
 80198f0:	b006      	add	sp, #24
 80198f2:	bd10      	pop	{r4, pc}
 80198f4:	2000      	movs	r0, #0
 80198f6:	4770      	bx	lr

080198f8 <rosidl_runtime_c__String__fini>:
 80198f8:	b320      	cbz	r0, 8019944 <rosidl_runtime_c__String__fini+0x4c>
 80198fa:	b510      	push	{r4, lr}
 80198fc:	6803      	ldr	r3, [r0, #0]
 80198fe:	b086      	sub	sp, #24
 8019900:	4604      	mov	r4, r0
 8019902:	b173      	cbz	r3, 8019922 <rosidl_runtime_c__String__fini+0x2a>
 8019904:	6883      	ldr	r3, [r0, #8]
 8019906:	b1f3      	cbz	r3, 8019946 <rosidl_runtime_c__String__fini+0x4e>
 8019908:	a801      	add	r0, sp, #4
 801990a:	f7f4 f95b 	bl	800dbc4 <rcutils_get_default_allocator>
 801990e:	9b02      	ldr	r3, [sp, #8]
 8019910:	9905      	ldr	r1, [sp, #20]
 8019912:	6820      	ldr	r0, [r4, #0]
 8019914:	4798      	blx	r3
 8019916:	2300      	movs	r3, #0
 8019918:	e9c4 3300 	strd	r3, r3, [r4]
 801991c:	60a3      	str	r3, [r4, #8]
 801991e:	b006      	add	sp, #24
 8019920:	bd10      	pop	{r4, pc}
 8019922:	6843      	ldr	r3, [r0, #4]
 8019924:	b9db      	cbnz	r3, 801995e <rosidl_runtime_c__String__fini+0x66>
 8019926:	6883      	ldr	r3, [r0, #8]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d0f8      	beq.n	801991e <rosidl_runtime_c__String__fini+0x26>
 801992c:	4b12      	ldr	r3, [pc, #72]	@ (8019978 <rosidl_runtime_c__String__fini+0x80>)
 801992e:	4813      	ldr	r0, [pc, #76]	@ (801997c <rosidl_runtime_c__String__fini+0x84>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	2251      	movs	r2, #81	@ 0x51
 8019934:	68db      	ldr	r3, [r3, #12]
 8019936:	2101      	movs	r1, #1
 8019938:	f000 ffda 	bl	801a8f0 <fwrite>
 801993c:	f04f 30ff 	mov.w	r0, #4294967295
 8019940:	f000 f83e 	bl	80199c0 <exit>
 8019944:	4770      	bx	lr
 8019946:	4b0c      	ldr	r3, [pc, #48]	@ (8019978 <rosidl_runtime_c__String__fini+0x80>)
 8019948:	480d      	ldr	r0, [pc, #52]	@ (8019980 <rosidl_runtime_c__String__fini+0x88>)
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	224c      	movs	r2, #76	@ 0x4c
 801994e:	68db      	ldr	r3, [r3, #12]
 8019950:	2101      	movs	r1, #1
 8019952:	f000 ffcd 	bl	801a8f0 <fwrite>
 8019956:	f04f 30ff 	mov.w	r0, #4294967295
 801995a:	f000 f831 	bl	80199c0 <exit>
 801995e:	4b06      	ldr	r3, [pc, #24]	@ (8019978 <rosidl_runtime_c__String__fini+0x80>)
 8019960:	4808      	ldr	r0, [pc, #32]	@ (8019984 <rosidl_runtime_c__String__fini+0x8c>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	224e      	movs	r2, #78	@ 0x4e
 8019966:	68db      	ldr	r3, [r3, #12]
 8019968:	2101      	movs	r1, #1
 801996a:	f000 ffc1 	bl	801a8f0 <fwrite>
 801996e:	f04f 30ff 	mov.w	r0, #4294967295
 8019972:	f000 f825 	bl	80199c0 <exit>
 8019976:	bf00      	nop
 8019978:	200024a4 	.word	0x200024a4
 801997c:	0801e1e0 	.word	0x0801e1e0
 8019980:	0801e140 	.word	0x0801e140
 8019984:	0801e190 	.word	0x0801e190

08019988 <calloc>:
 8019988:	4b02      	ldr	r3, [pc, #8]	@ (8019994 <calloc+0xc>)
 801998a:	460a      	mov	r2, r1
 801998c:	4601      	mov	r1, r0
 801998e:	6818      	ldr	r0, [r3, #0]
 8019990:	f000 b802 	b.w	8019998 <_calloc_r>
 8019994:	200024a4 	.word	0x200024a4

08019998 <_calloc_r>:
 8019998:	b570      	push	{r4, r5, r6, lr}
 801999a:	fba1 5402 	umull	r5, r4, r1, r2
 801999e:	b934      	cbnz	r4, 80199ae <_calloc_r+0x16>
 80199a0:	4629      	mov	r1, r5
 80199a2:	f000 f899 	bl	8019ad8 <_malloc_r>
 80199a6:	4606      	mov	r6, r0
 80199a8:	b928      	cbnz	r0, 80199b6 <_calloc_r+0x1e>
 80199aa:	4630      	mov	r0, r6
 80199ac:	bd70      	pop	{r4, r5, r6, pc}
 80199ae:	220c      	movs	r2, #12
 80199b0:	6002      	str	r2, [r0, #0]
 80199b2:	2600      	movs	r6, #0
 80199b4:	e7f9      	b.n	80199aa <_calloc_r+0x12>
 80199b6:	462a      	mov	r2, r5
 80199b8:	4621      	mov	r1, r4
 80199ba:	f001 f988 	bl	801acce <memset>
 80199be:	e7f4      	b.n	80199aa <_calloc_r+0x12>

080199c0 <exit>:
 80199c0:	b508      	push	{r3, lr}
 80199c2:	4b06      	ldr	r3, [pc, #24]	@ (80199dc <exit+0x1c>)
 80199c4:	4604      	mov	r4, r0
 80199c6:	b113      	cbz	r3, 80199ce <exit+0xe>
 80199c8:	2100      	movs	r1, #0
 80199ca:	f001 fa6f 	bl	801aeac <__call_exitprocs>
 80199ce:	4b04      	ldr	r3, [pc, #16]	@ (80199e0 <exit+0x20>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	b103      	cbz	r3, 80199d6 <exit+0x16>
 80199d4:	4798      	blx	r3
 80199d6:	4620      	mov	r0, r4
 80199d8:	f7ef fec8 	bl	800976c <_exit>
 80199dc:	0801aead 	.word	0x0801aead
 80199e0:	2000d398 	.word	0x2000d398

080199e4 <getenv>:
 80199e4:	b507      	push	{r0, r1, r2, lr}
 80199e6:	4b04      	ldr	r3, [pc, #16]	@ (80199f8 <getenv+0x14>)
 80199e8:	4601      	mov	r1, r0
 80199ea:	aa01      	add	r2, sp, #4
 80199ec:	6818      	ldr	r0, [r3, #0]
 80199ee:	f000 f805 	bl	80199fc <_findenv_r>
 80199f2:	b003      	add	sp, #12
 80199f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80199f8:	200024a4 	.word	0x200024a4

080199fc <_findenv_r>:
 80199fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a00:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019a70 <_findenv_r+0x74>
 8019a04:	4606      	mov	r6, r0
 8019a06:	4689      	mov	r9, r1
 8019a08:	4617      	mov	r7, r2
 8019a0a:	f002 f935 	bl	801bc78 <__env_lock>
 8019a0e:	f8da 4000 	ldr.w	r4, [sl]
 8019a12:	b134      	cbz	r4, 8019a22 <_findenv_r+0x26>
 8019a14:	464b      	mov	r3, r9
 8019a16:	4698      	mov	r8, r3
 8019a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a1c:	b13a      	cbz	r2, 8019a2e <_findenv_r+0x32>
 8019a1e:	2a3d      	cmp	r2, #61	@ 0x3d
 8019a20:	d1f9      	bne.n	8019a16 <_findenv_r+0x1a>
 8019a22:	4630      	mov	r0, r6
 8019a24:	f002 f92e 	bl	801bc84 <__env_unlock>
 8019a28:	2000      	movs	r0, #0
 8019a2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2e:	eba8 0809 	sub.w	r8, r8, r9
 8019a32:	46a3      	mov	fp, r4
 8019a34:	f854 0b04 	ldr.w	r0, [r4], #4
 8019a38:	2800      	cmp	r0, #0
 8019a3a:	d0f2      	beq.n	8019a22 <_findenv_r+0x26>
 8019a3c:	4642      	mov	r2, r8
 8019a3e:	4649      	mov	r1, r9
 8019a40:	f001 f95a 	bl	801acf8 <strncmp>
 8019a44:	2800      	cmp	r0, #0
 8019a46:	d1f4      	bne.n	8019a32 <_findenv_r+0x36>
 8019a48:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019a4c:	eb03 0508 	add.w	r5, r3, r8
 8019a50:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019a54:	2b3d      	cmp	r3, #61	@ 0x3d
 8019a56:	d1ec      	bne.n	8019a32 <_findenv_r+0x36>
 8019a58:	f8da 3000 	ldr.w	r3, [sl]
 8019a5c:	ebab 0303 	sub.w	r3, fp, r3
 8019a60:	109b      	asrs	r3, r3, #2
 8019a62:	4630      	mov	r0, r6
 8019a64:	603b      	str	r3, [r7, #0]
 8019a66:	f002 f90d 	bl	801bc84 <__env_unlock>
 8019a6a:	1c68      	adds	r0, r5, #1
 8019a6c:	e7dd      	b.n	8019a2a <_findenv_r+0x2e>
 8019a6e:	bf00      	nop
 8019a70:	20000010 	.word	0x20000010

08019a74 <malloc>:
 8019a74:	4b02      	ldr	r3, [pc, #8]	@ (8019a80 <malloc+0xc>)
 8019a76:	4601      	mov	r1, r0
 8019a78:	6818      	ldr	r0, [r3, #0]
 8019a7a:	f000 b82d 	b.w	8019ad8 <_malloc_r>
 8019a7e:	bf00      	nop
 8019a80:	200024a4 	.word	0x200024a4

08019a84 <free>:
 8019a84:	4b02      	ldr	r3, [pc, #8]	@ (8019a90 <free+0xc>)
 8019a86:	4601      	mov	r1, r0
 8019a88:	6818      	ldr	r0, [r3, #0]
 8019a8a:	f002 b901 	b.w	801bc90 <_free_r>
 8019a8e:	bf00      	nop
 8019a90:	200024a4 	.word	0x200024a4

08019a94 <sbrk_aligned>:
 8019a94:	b570      	push	{r4, r5, r6, lr}
 8019a96:	4e0f      	ldr	r6, [pc, #60]	@ (8019ad4 <sbrk_aligned+0x40>)
 8019a98:	460c      	mov	r4, r1
 8019a9a:	6831      	ldr	r1, [r6, #0]
 8019a9c:	4605      	mov	r5, r0
 8019a9e:	b911      	cbnz	r1, 8019aa6 <sbrk_aligned+0x12>
 8019aa0:	f001 f99e 	bl	801ade0 <_sbrk_r>
 8019aa4:	6030      	str	r0, [r6, #0]
 8019aa6:	4621      	mov	r1, r4
 8019aa8:	4628      	mov	r0, r5
 8019aaa:	f001 f999 	bl	801ade0 <_sbrk_r>
 8019aae:	1c43      	adds	r3, r0, #1
 8019ab0:	d103      	bne.n	8019aba <sbrk_aligned+0x26>
 8019ab2:	f04f 34ff 	mov.w	r4, #4294967295
 8019ab6:	4620      	mov	r0, r4
 8019ab8:	bd70      	pop	{r4, r5, r6, pc}
 8019aba:	1cc4      	adds	r4, r0, #3
 8019abc:	f024 0403 	bic.w	r4, r4, #3
 8019ac0:	42a0      	cmp	r0, r4
 8019ac2:	d0f8      	beq.n	8019ab6 <sbrk_aligned+0x22>
 8019ac4:	1a21      	subs	r1, r4, r0
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	f001 f98a 	bl	801ade0 <_sbrk_r>
 8019acc:	3001      	adds	r0, #1
 8019ace:	d1f2      	bne.n	8019ab6 <sbrk_aligned+0x22>
 8019ad0:	e7ef      	b.n	8019ab2 <sbrk_aligned+0x1e>
 8019ad2:	bf00      	nop
 8019ad4:	2000d258 	.word	0x2000d258

08019ad8 <_malloc_r>:
 8019ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019adc:	1ccd      	adds	r5, r1, #3
 8019ade:	f025 0503 	bic.w	r5, r5, #3
 8019ae2:	3508      	adds	r5, #8
 8019ae4:	2d0c      	cmp	r5, #12
 8019ae6:	bf38      	it	cc
 8019ae8:	250c      	movcc	r5, #12
 8019aea:	2d00      	cmp	r5, #0
 8019aec:	4606      	mov	r6, r0
 8019aee:	db01      	blt.n	8019af4 <_malloc_r+0x1c>
 8019af0:	42a9      	cmp	r1, r5
 8019af2:	d904      	bls.n	8019afe <_malloc_r+0x26>
 8019af4:	230c      	movs	r3, #12
 8019af6:	6033      	str	r3, [r6, #0]
 8019af8:	2000      	movs	r0, #0
 8019afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019bd4 <_malloc_r+0xfc>
 8019b02:	f000 f869 	bl	8019bd8 <__malloc_lock>
 8019b06:	f8d8 3000 	ldr.w	r3, [r8]
 8019b0a:	461c      	mov	r4, r3
 8019b0c:	bb44      	cbnz	r4, 8019b60 <_malloc_r+0x88>
 8019b0e:	4629      	mov	r1, r5
 8019b10:	4630      	mov	r0, r6
 8019b12:	f7ff ffbf 	bl	8019a94 <sbrk_aligned>
 8019b16:	1c43      	adds	r3, r0, #1
 8019b18:	4604      	mov	r4, r0
 8019b1a:	d158      	bne.n	8019bce <_malloc_r+0xf6>
 8019b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8019b20:	4627      	mov	r7, r4
 8019b22:	2f00      	cmp	r7, #0
 8019b24:	d143      	bne.n	8019bae <_malloc_r+0xd6>
 8019b26:	2c00      	cmp	r4, #0
 8019b28:	d04b      	beq.n	8019bc2 <_malloc_r+0xea>
 8019b2a:	6823      	ldr	r3, [r4, #0]
 8019b2c:	4639      	mov	r1, r7
 8019b2e:	4630      	mov	r0, r6
 8019b30:	eb04 0903 	add.w	r9, r4, r3
 8019b34:	f001 f954 	bl	801ade0 <_sbrk_r>
 8019b38:	4581      	cmp	r9, r0
 8019b3a:	d142      	bne.n	8019bc2 <_malloc_r+0xea>
 8019b3c:	6821      	ldr	r1, [r4, #0]
 8019b3e:	1a6d      	subs	r5, r5, r1
 8019b40:	4629      	mov	r1, r5
 8019b42:	4630      	mov	r0, r6
 8019b44:	f7ff ffa6 	bl	8019a94 <sbrk_aligned>
 8019b48:	3001      	adds	r0, #1
 8019b4a:	d03a      	beq.n	8019bc2 <_malloc_r+0xea>
 8019b4c:	6823      	ldr	r3, [r4, #0]
 8019b4e:	442b      	add	r3, r5
 8019b50:	6023      	str	r3, [r4, #0]
 8019b52:	f8d8 3000 	ldr.w	r3, [r8]
 8019b56:	685a      	ldr	r2, [r3, #4]
 8019b58:	bb62      	cbnz	r2, 8019bb4 <_malloc_r+0xdc>
 8019b5a:	f8c8 7000 	str.w	r7, [r8]
 8019b5e:	e00f      	b.n	8019b80 <_malloc_r+0xa8>
 8019b60:	6822      	ldr	r2, [r4, #0]
 8019b62:	1b52      	subs	r2, r2, r5
 8019b64:	d420      	bmi.n	8019ba8 <_malloc_r+0xd0>
 8019b66:	2a0b      	cmp	r2, #11
 8019b68:	d917      	bls.n	8019b9a <_malloc_r+0xc2>
 8019b6a:	1961      	adds	r1, r4, r5
 8019b6c:	42a3      	cmp	r3, r4
 8019b6e:	6025      	str	r5, [r4, #0]
 8019b70:	bf18      	it	ne
 8019b72:	6059      	strne	r1, [r3, #4]
 8019b74:	6863      	ldr	r3, [r4, #4]
 8019b76:	bf08      	it	eq
 8019b78:	f8c8 1000 	streq.w	r1, [r8]
 8019b7c:	5162      	str	r2, [r4, r5]
 8019b7e:	604b      	str	r3, [r1, #4]
 8019b80:	4630      	mov	r0, r6
 8019b82:	f000 f82f 	bl	8019be4 <__malloc_unlock>
 8019b86:	f104 000b 	add.w	r0, r4, #11
 8019b8a:	1d23      	adds	r3, r4, #4
 8019b8c:	f020 0007 	bic.w	r0, r0, #7
 8019b90:	1ac2      	subs	r2, r0, r3
 8019b92:	bf1c      	itt	ne
 8019b94:	1a1b      	subne	r3, r3, r0
 8019b96:	50a3      	strne	r3, [r4, r2]
 8019b98:	e7af      	b.n	8019afa <_malloc_r+0x22>
 8019b9a:	6862      	ldr	r2, [r4, #4]
 8019b9c:	42a3      	cmp	r3, r4
 8019b9e:	bf0c      	ite	eq
 8019ba0:	f8c8 2000 	streq.w	r2, [r8]
 8019ba4:	605a      	strne	r2, [r3, #4]
 8019ba6:	e7eb      	b.n	8019b80 <_malloc_r+0xa8>
 8019ba8:	4623      	mov	r3, r4
 8019baa:	6864      	ldr	r4, [r4, #4]
 8019bac:	e7ae      	b.n	8019b0c <_malloc_r+0x34>
 8019bae:	463c      	mov	r4, r7
 8019bb0:	687f      	ldr	r7, [r7, #4]
 8019bb2:	e7b6      	b.n	8019b22 <_malloc_r+0x4a>
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	685b      	ldr	r3, [r3, #4]
 8019bb8:	42a3      	cmp	r3, r4
 8019bba:	d1fb      	bne.n	8019bb4 <_malloc_r+0xdc>
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	6053      	str	r3, [r2, #4]
 8019bc0:	e7de      	b.n	8019b80 <_malloc_r+0xa8>
 8019bc2:	230c      	movs	r3, #12
 8019bc4:	6033      	str	r3, [r6, #0]
 8019bc6:	4630      	mov	r0, r6
 8019bc8:	f000 f80c 	bl	8019be4 <__malloc_unlock>
 8019bcc:	e794      	b.n	8019af8 <_malloc_r+0x20>
 8019bce:	6005      	str	r5, [r0, #0]
 8019bd0:	e7d6      	b.n	8019b80 <_malloc_r+0xa8>
 8019bd2:	bf00      	nop
 8019bd4:	2000d25c 	.word	0x2000d25c

08019bd8 <__malloc_lock>:
 8019bd8:	4801      	ldr	r0, [pc, #4]	@ (8019be0 <__malloc_lock+0x8>)
 8019bda:	f001 b94e 	b.w	801ae7a <__retarget_lock_acquire_recursive>
 8019bde:	bf00      	nop
 8019be0:	2000d3a1 	.word	0x2000d3a1

08019be4 <__malloc_unlock>:
 8019be4:	4801      	ldr	r0, [pc, #4]	@ (8019bec <__malloc_unlock+0x8>)
 8019be6:	f001 b949 	b.w	801ae7c <__retarget_lock_release_recursive>
 8019bea:	bf00      	nop
 8019bec:	2000d3a1 	.word	0x2000d3a1

08019bf0 <srand>:
 8019bf0:	b538      	push	{r3, r4, r5, lr}
 8019bf2:	4b10      	ldr	r3, [pc, #64]	@ (8019c34 <srand+0x44>)
 8019bf4:	681d      	ldr	r5, [r3, #0]
 8019bf6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8019bf8:	4604      	mov	r4, r0
 8019bfa:	b9b2      	cbnz	r2, 8019c2a <srand+0x3a>
 8019bfc:	2018      	movs	r0, #24
 8019bfe:	f7ff ff39 	bl	8019a74 <malloc>
 8019c02:	4602      	mov	r2, r0
 8019c04:	6328      	str	r0, [r5, #48]	@ 0x30
 8019c06:	b920      	cbnz	r0, 8019c12 <srand+0x22>
 8019c08:	4b0b      	ldr	r3, [pc, #44]	@ (8019c38 <srand+0x48>)
 8019c0a:	480c      	ldr	r0, [pc, #48]	@ (8019c3c <srand+0x4c>)
 8019c0c:	2146      	movs	r1, #70	@ 0x46
 8019c0e:	f001 f9ab 	bl	801af68 <__assert_func>
 8019c12:	490b      	ldr	r1, [pc, #44]	@ (8019c40 <srand+0x50>)
 8019c14:	4b0b      	ldr	r3, [pc, #44]	@ (8019c44 <srand+0x54>)
 8019c16:	e9c0 1300 	strd	r1, r3, [r0]
 8019c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8019c48 <srand+0x58>)
 8019c1c:	6083      	str	r3, [r0, #8]
 8019c1e:	230b      	movs	r3, #11
 8019c20:	8183      	strh	r3, [r0, #12]
 8019c22:	2100      	movs	r1, #0
 8019c24:	2001      	movs	r0, #1
 8019c26:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	6114      	str	r4, [r2, #16]
 8019c2e:	6153      	str	r3, [r2, #20]
 8019c30:	bd38      	pop	{r3, r4, r5, pc}
 8019c32:	bf00      	nop
 8019c34:	200024a4 	.word	0x200024a4
 8019c38:	0801ebec 	.word	0x0801ebec
 8019c3c:	0801ec03 	.word	0x0801ec03
 8019c40:	abcd330e 	.word	0xabcd330e
 8019c44:	e66d1234 	.word	0xe66d1234
 8019c48:	0005deec 	.word	0x0005deec

08019c4c <rand>:
 8019c4c:	4b16      	ldr	r3, [pc, #88]	@ (8019ca8 <rand+0x5c>)
 8019c4e:	b510      	push	{r4, lr}
 8019c50:	681c      	ldr	r4, [r3, #0]
 8019c52:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019c54:	b9b2      	cbnz	r2, 8019c84 <rand+0x38>
 8019c56:	2018      	movs	r0, #24
 8019c58:	f7ff ff0c 	bl	8019a74 <malloc>
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	6320      	str	r0, [r4, #48]	@ 0x30
 8019c60:	b920      	cbnz	r0, 8019c6c <rand+0x20>
 8019c62:	4b12      	ldr	r3, [pc, #72]	@ (8019cac <rand+0x60>)
 8019c64:	4812      	ldr	r0, [pc, #72]	@ (8019cb0 <rand+0x64>)
 8019c66:	2152      	movs	r1, #82	@ 0x52
 8019c68:	f001 f97e 	bl	801af68 <__assert_func>
 8019c6c:	4911      	ldr	r1, [pc, #68]	@ (8019cb4 <rand+0x68>)
 8019c6e:	4b12      	ldr	r3, [pc, #72]	@ (8019cb8 <rand+0x6c>)
 8019c70:	e9c0 1300 	strd	r1, r3, [r0]
 8019c74:	4b11      	ldr	r3, [pc, #68]	@ (8019cbc <rand+0x70>)
 8019c76:	6083      	str	r3, [r0, #8]
 8019c78:	230b      	movs	r3, #11
 8019c7a:	8183      	strh	r3, [r0, #12]
 8019c7c:	2100      	movs	r1, #0
 8019c7e:	2001      	movs	r0, #1
 8019c80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019c84:	6913      	ldr	r3, [r2, #16]
 8019c86:	480e      	ldr	r0, [pc, #56]	@ (8019cc0 <rand+0x74>)
 8019c88:	6954      	ldr	r4, [r2, #20]
 8019c8a:	490e      	ldr	r1, [pc, #56]	@ (8019cc4 <rand+0x78>)
 8019c8c:	4358      	muls	r0, r3
 8019c8e:	fb01 0004 	mla	r0, r1, r4, r0
 8019c92:	fba3 3101 	umull	r3, r1, r3, r1
 8019c96:	3301      	adds	r3, #1
 8019c98:	eb40 0001 	adc.w	r0, r0, r1
 8019c9c:	e9c2 3004 	strd	r3, r0, [r2, #16]
 8019ca0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019ca4:	bd10      	pop	{r4, pc}
 8019ca6:	bf00      	nop
 8019ca8:	200024a4 	.word	0x200024a4
 8019cac:	0801ebec 	.word	0x0801ebec
 8019cb0:	0801ec03 	.word	0x0801ec03
 8019cb4:	abcd330e 	.word	0xabcd330e
 8019cb8:	e66d1234 	.word	0xe66d1234
 8019cbc:	0005deec 	.word	0x0005deec
 8019cc0:	5851f42d 	.word	0x5851f42d
 8019cc4:	4c957f2d 	.word	0x4c957f2d

08019cc8 <realloc>:
 8019cc8:	4b02      	ldr	r3, [pc, #8]	@ (8019cd4 <realloc+0xc>)
 8019cca:	460a      	mov	r2, r1
 8019ccc:	4601      	mov	r1, r0
 8019cce:	6818      	ldr	r0, [r3, #0]
 8019cd0:	f000 b802 	b.w	8019cd8 <_realloc_r>
 8019cd4:	200024a4 	.word	0x200024a4

08019cd8 <_realloc_r>:
 8019cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cdc:	4607      	mov	r7, r0
 8019cde:	4614      	mov	r4, r2
 8019ce0:	460d      	mov	r5, r1
 8019ce2:	b921      	cbnz	r1, 8019cee <_realloc_r+0x16>
 8019ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ce8:	4611      	mov	r1, r2
 8019cea:	f7ff bef5 	b.w	8019ad8 <_malloc_r>
 8019cee:	b92a      	cbnz	r2, 8019cfc <_realloc_r+0x24>
 8019cf0:	f001 ffce 	bl	801bc90 <_free_r>
 8019cf4:	4625      	mov	r5, r4
 8019cf6:	4628      	mov	r0, r5
 8019cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cfc:	f002 fb9a 	bl	801c434 <_malloc_usable_size_r>
 8019d00:	4284      	cmp	r4, r0
 8019d02:	4606      	mov	r6, r0
 8019d04:	d802      	bhi.n	8019d0c <_realloc_r+0x34>
 8019d06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019d0a:	d8f4      	bhi.n	8019cf6 <_realloc_r+0x1e>
 8019d0c:	4621      	mov	r1, r4
 8019d0e:	4638      	mov	r0, r7
 8019d10:	f7ff fee2 	bl	8019ad8 <_malloc_r>
 8019d14:	4680      	mov	r8, r0
 8019d16:	b908      	cbnz	r0, 8019d1c <_realloc_r+0x44>
 8019d18:	4645      	mov	r5, r8
 8019d1a:	e7ec      	b.n	8019cf6 <_realloc_r+0x1e>
 8019d1c:	42b4      	cmp	r4, r6
 8019d1e:	4622      	mov	r2, r4
 8019d20:	4629      	mov	r1, r5
 8019d22:	bf28      	it	cs
 8019d24:	4632      	movcs	r2, r6
 8019d26:	f001 f8b2 	bl	801ae8e <memcpy>
 8019d2a:	4629      	mov	r1, r5
 8019d2c:	4638      	mov	r0, r7
 8019d2e:	f001 ffaf 	bl	801bc90 <_free_r>
 8019d32:	e7f1      	b.n	8019d18 <_realloc_r+0x40>

08019d34 <_strtoul_l.isra.0>:
 8019d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d38:	4e34      	ldr	r6, [pc, #208]	@ (8019e0c <_strtoul_l.isra.0+0xd8>)
 8019d3a:	4686      	mov	lr, r0
 8019d3c:	460d      	mov	r5, r1
 8019d3e:	4628      	mov	r0, r5
 8019d40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d44:	5d37      	ldrb	r7, [r6, r4]
 8019d46:	f017 0708 	ands.w	r7, r7, #8
 8019d4a:	d1f8      	bne.n	8019d3e <_strtoul_l.isra.0+0xa>
 8019d4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8019d4e:	d110      	bne.n	8019d72 <_strtoul_l.isra.0+0x3e>
 8019d50:	782c      	ldrb	r4, [r5, #0]
 8019d52:	2701      	movs	r7, #1
 8019d54:	1c85      	adds	r5, r0, #2
 8019d56:	f033 0010 	bics.w	r0, r3, #16
 8019d5a:	d115      	bne.n	8019d88 <_strtoul_l.isra.0+0x54>
 8019d5c:	2c30      	cmp	r4, #48	@ 0x30
 8019d5e:	d10d      	bne.n	8019d7c <_strtoul_l.isra.0+0x48>
 8019d60:	7828      	ldrb	r0, [r5, #0]
 8019d62:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019d66:	2858      	cmp	r0, #88	@ 0x58
 8019d68:	d108      	bne.n	8019d7c <_strtoul_l.isra.0+0x48>
 8019d6a:	786c      	ldrb	r4, [r5, #1]
 8019d6c:	3502      	adds	r5, #2
 8019d6e:	2310      	movs	r3, #16
 8019d70:	e00a      	b.n	8019d88 <_strtoul_l.isra.0+0x54>
 8019d72:	2c2b      	cmp	r4, #43	@ 0x2b
 8019d74:	bf04      	itt	eq
 8019d76:	782c      	ldrbeq	r4, [r5, #0]
 8019d78:	1c85      	addeq	r5, r0, #2
 8019d7a:	e7ec      	b.n	8019d56 <_strtoul_l.isra.0+0x22>
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d1f6      	bne.n	8019d6e <_strtoul_l.isra.0+0x3a>
 8019d80:	2c30      	cmp	r4, #48	@ 0x30
 8019d82:	bf14      	ite	ne
 8019d84:	230a      	movne	r3, #10
 8019d86:	2308      	moveq	r3, #8
 8019d88:	f04f 38ff 	mov.w	r8, #4294967295
 8019d8c:	2600      	movs	r6, #0
 8019d8e:	fbb8 f8f3 	udiv	r8, r8, r3
 8019d92:	fb03 f908 	mul.w	r9, r3, r8
 8019d96:	ea6f 0909 	mvn.w	r9, r9
 8019d9a:	4630      	mov	r0, r6
 8019d9c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019da0:	f1bc 0f09 	cmp.w	ip, #9
 8019da4:	d810      	bhi.n	8019dc8 <_strtoul_l.isra.0+0x94>
 8019da6:	4664      	mov	r4, ip
 8019da8:	42a3      	cmp	r3, r4
 8019daa:	dd1e      	ble.n	8019dea <_strtoul_l.isra.0+0xb6>
 8019dac:	f1b6 3fff 	cmp.w	r6, #4294967295
 8019db0:	d007      	beq.n	8019dc2 <_strtoul_l.isra.0+0x8e>
 8019db2:	4580      	cmp	r8, r0
 8019db4:	d316      	bcc.n	8019de4 <_strtoul_l.isra.0+0xb0>
 8019db6:	d101      	bne.n	8019dbc <_strtoul_l.isra.0+0x88>
 8019db8:	45a1      	cmp	r9, r4
 8019dba:	db13      	blt.n	8019de4 <_strtoul_l.isra.0+0xb0>
 8019dbc:	fb00 4003 	mla	r0, r0, r3, r4
 8019dc0:	2601      	movs	r6, #1
 8019dc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019dc6:	e7e9      	b.n	8019d9c <_strtoul_l.isra.0+0x68>
 8019dc8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019dcc:	f1bc 0f19 	cmp.w	ip, #25
 8019dd0:	d801      	bhi.n	8019dd6 <_strtoul_l.isra.0+0xa2>
 8019dd2:	3c37      	subs	r4, #55	@ 0x37
 8019dd4:	e7e8      	b.n	8019da8 <_strtoul_l.isra.0+0x74>
 8019dd6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019dda:	f1bc 0f19 	cmp.w	ip, #25
 8019dde:	d804      	bhi.n	8019dea <_strtoul_l.isra.0+0xb6>
 8019de0:	3c57      	subs	r4, #87	@ 0x57
 8019de2:	e7e1      	b.n	8019da8 <_strtoul_l.isra.0+0x74>
 8019de4:	f04f 36ff 	mov.w	r6, #4294967295
 8019de8:	e7eb      	b.n	8019dc2 <_strtoul_l.isra.0+0x8e>
 8019dea:	1c73      	adds	r3, r6, #1
 8019dec:	d106      	bne.n	8019dfc <_strtoul_l.isra.0+0xc8>
 8019dee:	2322      	movs	r3, #34	@ 0x22
 8019df0:	f8ce 3000 	str.w	r3, [lr]
 8019df4:	4630      	mov	r0, r6
 8019df6:	b932      	cbnz	r2, 8019e06 <_strtoul_l.isra.0+0xd2>
 8019df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019dfc:	b107      	cbz	r7, 8019e00 <_strtoul_l.isra.0+0xcc>
 8019dfe:	4240      	negs	r0, r0
 8019e00:	2a00      	cmp	r2, #0
 8019e02:	d0f9      	beq.n	8019df8 <_strtoul_l.isra.0+0xc4>
 8019e04:	b106      	cbz	r6, 8019e08 <_strtoul_l.isra.0+0xd4>
 8019e06:	1e69      	subs	r1, r5, #1
 8019e08:	6011      	str	r1, [r2, #0]
 8019e0a:	e7f5      	b.n	8019df8 <_strtoul_l.isra.0+0xc4>
 8019e0c:	0801ee34 	.word	0x0801ee34

08019e10 <strtoul>:
 8019e10:	4613      	mov	r3, r2
 8019e12:	460a      	mov	r2, r1
 8019e14:	4601      	mov	r1, r0
 8019e16:	4802      	ldr	r0, [pc, #8]	@ (8019e20 <strtoul+0x10>)
 8019e18:	6800      	ldr	r0, [r0, #0]
 8019e1a:	f7ff bf8b 	b.w	8019d34 <_strtoul_l.isra.0>
 8019e1e:	bf00      	nop
 8019e20:	200024a4 	.word	0x200024a4

08019e24 <__cvt>:
 8019e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e28:	ec57 6b10 	vmov	r6, r7, d0
 8019e2c:	2f00      	cmp	r7, #0
 8019e2e:	460c      	mov	r4, r1
 8019e30:	4619      	mov	r1, r3
 8019e32:	463b      	mov	r3, r7
 8019e34:	bfbb      	ittet	lt
 8019e36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8019e3a:	461f      	movlt	r7, r3
 8019e3c:	2300      	movge	r3, #0
 8019e3e:	232d      	movlt	r3, #45	@ 0x2d
 8019e40:	700b      	strb	r3, [r1, #0]
 8019e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019e44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8019e48:	4691      	mov	r9, r2
 8019e4a:	f023 0820 	bic.w	r8, r3, #32
 8019e4e:	bfbc      	itt	lt
 8019e50:	4632      	movlt	r2, r6
 8019e52:	4616      	movlt	r6, r2
 8019e54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019e58:	d005      	beq.n	8019e66 <__cvt+0x42>
 8019e5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8019e5e:	d100      	bne.n	8019e62 <__cvt+0x3e>
 8019e60:	3401      	adds	r4, #1
 8019e62:	2102      	movs	r1, #2
 8019e64:	e000      	b.n	8019e68 <__cvt+0x44>
 8019e66:	2103      	movs	r1, #3
 8019e68:	ab03      	add	r3, sp, #12
 8019e6a:	9301      	str	r3, [sp, #4]
 8019e6c:	ab02      	add	r3, sp, #8
 8019e6e:	9300      	str	r3, [sp, #0]
 8019e70:	ec47 6b10 	vmov	d0, r6, r7
 8019e74:	4653      	mov	r3, sl
 8019e76:	4622      	mov	r2, r4
 8019e78:	f001 f91e 	bl	801b0b8 <_dtoa_r>
 8019e7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019e80:	4605      	mov	r5, r0
 8019e82:	d119      	bne.n	8019eb8 <__cvt+0x94>
 8019e84:	f019 0f01 	tst.w	r9, #1
 8019e88:	d00e      	beq.n	8019ea8 <__cvt+0x84>
 8019e8a:	eb00 0904 	add.w	r9, r0, r4
 8019e8e:	2200      	movs	r2, #0
 8019e90:	2300      	movs	r3, #0
 8019e92:	4630      	mov	r0, r6
 8019e94:	4639      	mov	r1, r7
 8019e96:	f7e6 fe0f 	bl	8000ab8 <__aeabi_dcmpeq>
 8019e9a:	b108      	cbz	r0, 8019ea0 <__cvt+0x7c>
 8019e9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8019ea0:	2230      	movs	r2, #48	@ 0x30
 8019ea2:	9b03      	ldr	r3, [sp, #12]
 8019ea4:	454b      	cmp	r3, r9
 8019ea6:	d31e      	bcc.n	8019ee6 <__cvt+0xc2>
 8019ea8:	9b03      	ldr	r3, [sp, #12]
 8019eaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019eac:	1b5b      	subs	r3, r3, r5
 8019eae:	4628      	mov	r0, r5
 8019eb0:	6013      	str	r3, [r2, #0]
 8019eb2:	b004      	add	sp, #16
 8019eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019eb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019ebc:	eb00 0904 	add.w	r9, r0, r4
 8019ec0:	d1e5      	bne.n	8019e8e <__cvt+0x6a>
 8019ec2:	7803      	ldrb	r3, [r0, #0]
 8019ec4:	2b30      	cmp	r3, #48	@ 0x30
 8019ec6:	d10a      	bne.n	8019ede <__cvt+0xba>
 8019ec8:	2200      	movs	r2, #0
 8019eca:	2300      	movs	r3, #0
 8019ecc:	4630      	mov	r0, r6
 8019ece:	4639      	mov	r1, r7
 8019ed0:	f7e6 fdf2 	bl	8000ab8 <__aeabi_dcmpeq>
 8019ed4:	b918      	cbnz	r0, 8019ede <__cvt+0xba>
 8019ed6:	f1c4 0401 	rsb	r4, r4, #1
 8019eda:	f8ca 4000 	str.w	r4, [sl]
 8019ede:	f8da 3000 	ldr.w	r3, [sl]
 8019ee2:	4499      	add	r9, r3
 8019ee4:	e7d3      	b.n	8019e8e <__cvt+0x6a>
 8019ee6:	1c59      	adds	r1, r3, #1
 8019ee8:	9103      	str	r1, [sp, #12]
 8019eea:	701a      	strb	r2, [r3, #0]
 8019eec:	e7d9      	b.n	8019ea2 <__cvt+0x7e>

08019eee <__exponent>:
 8019eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ef0:	2900      	cmp	r1, #0
 8019ef2:	bfba      	itte	lt
 8019ef4:	4249      	neglt	r1, r1
 8019ef6:	232d      	movlt	r3, #45	@ 0x2d
 8019ef8:	232b      	movge	r3, #43	@ 0x2b
 8019efa:	2909      	cmp	r1, #9
 8019efc:	7002      	strb	r2, [r0, #0]
 8019efe:	7043      	strb	r3, [r0, #1]
 8019f00:	dd29      	ble.n	8019f56 <__exponent+0x68>
 8019f02:	f10d 0407 	add.w	r4, sp, #7
 8019f06:	4625      	mov	r5, r4
 8019f08:	270a      	movs	r7, #10
 8019f0a:	4622      	mov	r2, r4
 8019f0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8019f10:	fb07 1316 	mls	r3, r7, r6, r1
 8019f14:	3330      	adds	r3, #48	@ 0x30
 8019f16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019f1a:	460b      	mov	r3, r1
 8019f1c:	2b63      	cmp	r3, #99	@ 0x63
 8019f1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019f22:	4631      	mov	r1, r6
 8019f24:	dcf1      	bgt.n	8019f0a <__exponent+0x1c>
 8019f26:	3130      	adds	r1, #48	@ 0x30
 8019f28:	1e93      	subs	r3, r2, #2
 8019f2a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019f2e:	1c41      	adds	r1, r0, #1
 8019f30:	461c      	mov	r4, r3
 8019f32:	42ab      	cmp	r3, r5
 8019f34:	d30a      	bcc.n	8019f4c <__exponent+0x5e>
 8019f36:	f10d 0309 	add.w	r3, sp, #9
 8019f3a:	1a9b      	subs	r3, r3, r2
 8019f3c:	42a5      	cmp	r5, r4
 8019f3e:	bf38      	it	cc
 8019f40:	2300      	movcc	r3, #0
 8019f42:	1c82      	adds	r2, r0, #2
 8019f44:	4413      	add	r3, r2
 8019f46:	1a18      	subs	r0, r3, r0
 8019f48:	b003      	add	sp, #12
 8019f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019f50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019f54:	e7ed      	b.n	8019f32 <__exponent+0x44>
 8019f56:	2330      	movs	r3, #48	@ 0x30
 8019f58:	3130      	adds	r1, #48	@ 0x30
 8019f5a:	7083      	strb	r3, [r0, #2]
 8019f5c:	70c1      	strb	r1, [r0, #3]
 8019f5e:	1d03      	adds	r3, r0, #4
 8019f60:	e7f1      	b.n	8019f46 <__exponent+0x58>
	...

08019f64 <_printf_float>:
 8019f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f68:	b08d      	sub	sp, #52	@ 0x34
 8019f6a:	460c      	mov	r4, r1
 8019f6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019f70:	4616      	mov	r6, r2
 8019f72:	461f      	mov	r7, r3
 8019f74:	4605      	mov	r5, r0
 8019f76:	f000 fefb 	bl	801ad70 <_localeconv_r>
 8019f7a:	6803      	ldr	r3, [r0, #0]
 8019f7c:	9306      	str	r3, [sp, #24]
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f7e6 f96e 	bl	8000260 <strlen>
 8019f84:	2300      	movs	r3, #0
 8019f86:	930a      	str	r3, [sp, #40]	@ 0x28
 8019f88:	f8d8 3000 	ldr.w	r3, [r8]
 8019f8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019f90:	f8d4 b000 	ldr.w	fp, [r4]
 8019f94:	9007      	str	r0, [sp, #28]
 8019f96:	3307      	adds	r3, #7
 8019f98:	f023 0307 	bic.w	r3, r3, #7
 8019f9c:	ecb3 7b02 	vldmia	r3!, {d7}
 8019fa0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019fa4:	f8c8 3000 	str.w	r3, [r8]
 8019fa8:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 8019fac:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8019fb0:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 8019fb4:	4b9c      	ldr	r3, [pc, #624]	@ (801a228 <_printf_float+0x2c4>)
 8019fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8019fba:	4640      	mov	r0, r8
 8019fbc:	4649      	mov	r1, r9
 8019fbe:	f7e6 fdad 	bl	8000b1c <__aeabi_dcmpun>
 8019fc2:	bb70      	cbnz	r0, 801a022 <_printf_float+0xbe>
 8019fc4:	4b98      	ldr	r3, [pc, #608]	@ (801a228 <_printf_float+0x2c4>)
 8019fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8019fca:	4640      	mov	r0, r8
 8019fcc:	4649      	mov	r1, r9
 8019fce:	f7e6 fd87 	bl	8000ae0 <__aeabi_dcmple>
 8019fd2:	bb30      	cbnz	r0, 801a022 <_printf_float+0xbe>
 8019fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019fd8:	2200      	movs	r2, #0
 8019fda:	2300      	movs	r3, #0
 8019fdc:	f7e6 fd76 	bl	8000acc <__aeabi_dcmplt>
 8019fe0:	b110      	cbz	r0, 8019fe8 <_printf_float+0x84>
 8019fe2:	232d      	movs	r3, #45	@ 0x2d
 8019fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fe8:	4a90      	ldr	r2, [pc, #576]	@ (801a22c <_printf_float+0x2c8>)
 8019fea:	4b91      	ldr	r3, [pc, #580]	@ (801a230 <_printf_float+0x2cc>)
 8019fec:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019ff0:	bf8c      	ite	hi
 8019ff2:	4690      	movhi	r8, r2
 8019ff4:	4698      	movls	r8, r3
 8019ff6:	2303      	movs	r3, #3
 8019ff8:	6123      	str	r3, [r4, #16]
 8019ffa:	f02b 0304 	bic.w	r3, fp, #4
 8019ffe:	6023      	str	r3, [r4, #0]
 801a000:	f04f 0900 	mov.w	r9, #0
 801a004:	9700      	str	r7, [sp, #0]
 801a006:	4633      	mov	r3, r6
 801a008:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a00a:	4621      	mov	r1, r4
 801a00c:	4628      	mov	r0, r5
 801a00e:	f000 f9d1 	bl	801a3b4 <_printf_common>
 801a012:	3001      	adds	r0, #1
 801a014:	f040 808c 	bne.w	801a130 <_printf_float+0x1cc>
 801a018:	f04f 30ff 	mov.w	r0, #4294967295
 801a01c:	b00d      	add	sp, #52	@ 0x34
 801a01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a026:	4610      	mov	r0, r2
 801a028:	4619      	mov	r1, r3
 801a02a:	f7e6 fd77 	bl	8000b1c <__aeabi_dcmpun>
 801a02e:	b140      	cbz	r0, 801a042 <_printf_float+0xde>
 801a030:	9b05      	ldr	r3, [sp, #20]
 801a032:	4a80      	ldr	r2, [pc, #512]	@ (801a234 <_printf_float+0x2d0>)
 801a034:	2b00      	cmp	r3, #0
 801a036:	bfbc      	itt	lt
 801a038:	232d      	movlt	r3, #45	@ 0x2d
 801a03a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a03e:	4b7e      	ldr	r3, [pc, #504]	@ (801a238 <_printf_float+0x2d4>)
 801a040:	e7d4      	b.n	8019fec <_printf_float+0x88>
 801a042:	6863      	ldr	r3, [r4, #4]
 801a044:	1c5a      	adds	r2, r3, #1
 801a046:	f00a 09df 	and.w	r9, sl, #223	@ 0xdf
 801a04a:	d13b      	bne.n	801a0c4 <_printf_float+0x160>
 801a04c:	2306      	movs	r3, #6
 801a04e:	6063      	str	r3, [r4, #4]
 801a050:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a054:	2300      	movs	r3, #0
 801a056:	6022      	str	r2, [r4, #0]
 801a058:	9303      	str	r3, [sp, #12]
 801a05a:	ab0a      	add	r3, sp, #40	@ 0x28
 801a05c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a060:	ab09      	add	r3, sp, #36	@ 0x24
 801a062:	9300      	str	r3, [sp, #0]
 801a064:	6861      	ldr	r1, [r4, #4]
 801a066:	ed9d 0b04 	vldr	d0, [sp, #16]
 801a06a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a06e:	4628      	mov	r0, r5
 801a070:	f7ff fed8 	bl	8019e24 <__cvt>
 801a074:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801a078:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a07a:	4680      	mov	r8, r0
 801a07c:	d129      	bne.n	801a0d2 <_printf_float+0x16e>
 801a07e:	1cc8      	adds	r0, r1, #3
 801a080:	db02      	blt.n	801a088 <_printf_float+0x124>
 801a082:	6863      	ldr	r3, [r4, #4]
 801a084:	428b      	cmp	r3, r1
 801a086:	da41      	bge.n	801a10c <_printf_float+0x1a8>
 801a088:	f1aa 0a02 	sub.w	sl, sl, #2
 801a08c:	fa5f fa8a 	uxtb.w	sl, sl
 801a090:	3901      	subs	r1, #1
 801a092:	4652      	mov	r2, sl
 801a094:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a098:	9109      	str	r1, [sp, #36]	@ 0x24
 801a09a:	f7ff ff28 	bl	8019eee <__exponent>
 801a09e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a0a0:	1813      	adds	r3, r2, r0
 801a0a2:	2a01      	cmp	r2, #1
 801a0a4:	4681      	mov	r9, r0
 801a0a6:	6123      	str	r3, [r4, #16]
 801a0a8:	dc02      	bgt.n	801a0b0 <_printf_float+0x14c>
 801a0aa:	6822      	ldr	r2, [r4, #0]
 801a0ac:	07d2      	lsls	r2, r2, #31
 801a0ae:	d501      	bpl.n	801a0b4 <_printf_float+0x150>
 801a0b0:	3301      	adds	r3, #1
 801a0b2:	6123      	str	r3, [r4, #16]
 801a0b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d0a3      	beq.n	801a004 <_printf_float+0xa0>
 801a0bc:	232d      	movs	r3, #45	@ 0x2d
 801a0be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a0c2:	e79f      	b.n	801a004 <_printf_float+0xa0>
 801a0c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801a0c8:	d1c2      	bne.n	801a050 <_printf_float+0xec>
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d1c0      	bne.n	801a050 <_printf_float+0xec>
 801a0ce:	2301      	movs	r3, #1
 801a0d0:	e7bd      	b.n	801a04e <_printf_float+0xea>
 801a0d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a0d6:	d9db      	bls.n	801a090 <_printf_float+0x12c>
 801a0d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a0dc:	d118      	bne.n	801a110 <_printf_float+0x1ac>
 801a0de:	2900      	cmp	r1, #0
 801a0e0:	6863      	ldr	r3, [r4, #4]
 801a0e2:	dd0b      	ble.n	801a0fc <_printf_float+0x198>
 801a0e4:	6121      	str	r1, [r4, #16]
 801a0e6:	b913      	cbnz	r3, 801a0ee <_printf_float+0x18a>
 801a0e8:	6822      	ldr	r2, [r4, #0]
 801a0ea:	07d0      	lsls	r0, r2, #31
 801a0ec:	d502      	bpl.n	801a0f4 <_printf_float+0x190>
 801a0ee:	3301      	adds	r3, #1
 801a0f0:	440b      	add	r3, r1
 801a0f2:	6123      	str	r3, [r4, #16]
 801a0f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a0f6:	f04f 0900 	mov.w	r9, #0
 801a0fa:	e7db      	b.n	801a0b4 <_printf_float+0x150>
 801a0fc:	b913      	cbnz	r3, 801a104 <_printf_float+0x1a0>
 801a0fe:	6822      	ldr	r2, [r4, #0]
 801a100:	07d2      	lsls	r2, r2, #31
 801a102:	d501      	bpl.n	801a108 <_printf_float+0x1a4>
 801a104:	3302      	adds	r3, #2
 801a106:	e7f4      	b.n	801a0f2 <_printf_float+0x18e>
 801a108:	2301      	movs	r3, #1
 801a10a:	e7f2      	b.n	801a0f2 <_printf_float+0x18e>
 801a10c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a112:	428b      	cmp	r3, r1
 801a114:	dc05      	bgt.n	801a122 <_printf_float+0x1be>
 801a116:	6823      	ldr	r3, [r4, #0]
 801a118:	6121      	str	r1, [r4, #16]
 801a11a:	07d8      	lsls	r0, r3, #31
 801a11c:	d5ea      	bpl.n	801a0f4 <_printf_float+0x190>
 801a11e:	1c4b      	adds	r3, r1, #1
 801a120:	e7e7      	b.n	801a0f2 <_printf_float+0x18e>
 801a122:	2900      	cmp	r1, #0
 801a124:	bfd4      	ite	le
 801a126:	f1c1 0202 	rsble	r2, r1, #2
 801a12a:	2201      	movgt	r2, #1
 801a12c:	4413      	add	r3, r2
 801a12e:	e7e0      	b.n	801a0f2 <_printf_float+0x18e>
 801a130:	6823      	ldr	r3, [r4, #0]
 801a132:	055a      	lsls	r2, r3, #21
 801a134:	d407      	bmi.n	801a146 <_printf_float+0x1e2>
 801a136:	6923      	ldr	r3, [r4, #16]
 801a138:	4642      	mov	r2, r8
 801a13a:	4631      	mov	r1, r6
 801a13c:	4628      	mov	r0, r5
 801a13e:	47b8      	blx	r7
 801a140:	3001      	adds	r0, #1
 801a142:	d12b      	bne.n	801a19c <_printf_float+0x238>
 801a144:	e768      	b.n	801a018 <_printf_float+0xb4>
 801a146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a14a:	f240 80dd 	bls.w	801a308 <_printf_float+0x3a4>
 801a14e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a152:	2200      	movs	r2, #0
 801a154:	2300      	movs	r3, #0
 801a156:	f7e6 fcaf 	bl	8000ab8 <__aeabi_dcmpeq>
 801a15a:	2800      	cmp	r0, #0
 801a15c:	d033      	beq.n	801a1c6 <_printf_float+0x262>
 801a15e:	4a37      	ldr	r2, [pc, #220]	@ (801a23c <_printf_float+0x2d8>)
 801a160:	2301      	movs	r3, #1
 801a162:	4631      	mov	r1, r6
 801a164:	4628      	mov	r0, r5
 801a166:	47b8      	blx	r7
 801a168:	3001      	adds	r0, #1
 801a16a:	f43f af55 	beq.w	801a018 <_printf_float+0xb4>
 801a16e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a172:	4543      	cmp	r3, r8
 801a174:	db02      	blt.n	801a17c <_printf_float+0x218>
 801a176:	6823      	ldr	r3, [r4, #0]
 801a178:	07d8      	lsls	r0, r3, #31
 801a17a:	d50f      	bpl.n	801a19c <_printf_float+0x238>
 801a17c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a180:	4631      	mov	r1, r6
 801a182:	4628      	mov	r0, r5
 801a184:	47b8      	blx	r7
 801a186:	3001      	adds	r0, #1
 801a188:	f43f af46 	beq.w	801a018 <_printf_float+0xb4>
 801a18c:	f04f 0900 	mov.w	r9, #0
 801a190:	f108 38ff 	add.w	r8, r8, #4294967295
 801a194:	f104 0a1a 	add.w	sl, r4, #26
 801a198:	45c8      	cmp	r8, r9
 801a19a:	dc09      	bgt.n	801a1b0 <_printf_float+0x24c>
 801a19c:	6823      	ldr	r3, [r4, #0]
 801a19e:	079b      	lsls	r3, r3, #30
 801a1a0:	f100 8103 	bmi.w	801a3aa <_printf_float+0x446>
 801a1a4:	68e0      	ldr	r0, [r4, #12]
 801a1a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1a8:	4298      	cmp	r0, r3
 801a1aa:	bfb8      	it	lt
 801a1ac:	4618      	movlt	r0, r3
 801a1ae:	e735      	b.n	801a01c <_printf_float+0xb8>
 801a1b0:	2301      	movs	r3, #1
 801a1b2:	4652      	mov	r2, sl
 801a1b4:	4631      	mov	r1, r6
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	47b8      	blx	r7
 801a1ba:	3001      	adds	r0, #1
 801a1bc:	f43f af2c 	beq.w	801a018 <_printf_float+0xb4>
 801a1c0:	f109 0901 	add.w	r9, r9, #1
 801a1c4:	e7e8      	b.n	801a198 <_printf_float+0x234>
 801a1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	dc39      	bgt.n	801a240 <_printf_float+0x2dc>
 801a1cc:	4a1b      	ldr	r2, [pc, #108]	@ (801a23c <_printf_float+0x2d8>)
 801a1ce:	2301      	movs	r3, #1
 801a1d0:	4631      	mov	r1, r6
 801a1d2:	4628      	mov	r0, r5
 801a1d4:	47b8      	blx	r7
 801a1d6:	3001      	adds	r0, #1
 801a1d8:	f43f af1e 	beq.w	801a018 <_printf_float+0xb4>
 801a1dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a1e0:	ea59 0303 	orrs.w	r3, r9, r3
 801a1e4:	d102      	bne.n	801a1ec <_printf_float+0x288>
 801a1e6:	6823      	ldr	r3, [r4, #0]
 801a1e8:	07d9      	lsls	r1, r3, #31
 801a1ea:	d5d7      	bpl.n	801a19c <_printf_float+0x238>
 801a1ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a1f0:	4631      	mov	r1, r6
 801a1f2:	4628      	mov	r0, r5
 801a1f4:	47b8      	blx	r7
 801a1f6:	3001      	adds	r0, #1
 801a1f8:	f43f af0e 	beq.w	801a018 <_printf_float+0xb4>
 801a1fc:	f04f 0a00 	mov.w	sl, #0
 801a200:	f104 0b1a 	add.w	fp, r4, #26
 801a204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a206:	425b      	negs	r3, r3
 801a208:	4553      	cmp	r3, sl
 801a20a:	dc01      	bgt.n	801a210 <_printf_float+0x2ac>
 801a20c:	464b      	mov	r3, r9
 801a20e:	e793      	b.n	801a138 <_printf_float+0x1d4>
 801a210:	2301      	movs	r3, #1
 801a212:	465a      	mov	r2, fp
 801a214:	4631      	mov	r1, r6
 801a216:	4628      	mov	r0, r5
 801a218:	47b8      	blx	r7
 801a21a:	3001      	adds	r0, #1
 801a21c:	f43f aefc 	beq.w	801a018 <_printf_float+0xb4>
 801a220:	f10a 0a01 	add.w	sl, sl, #1
 801a224:	e7ee      	b.n	801a204 <_printf_float+0x2a0>
 801a226:	bf00      	nop
 801a228:	7fefffff 	.word	0x7fefffff
 801a22c:	0801ec89 	.word	0x0801ec89
 801a230:	0801ec85 	.word	0x0801ec85
 801a234:	0801ec91 	.word	0x0801ec91
 801a238:	0801ec8d 	.word	0x0801ec8d
 801a23c:	0801ec95 	.word	0x0801ec95
 801a240:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a242:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a246:	4553      	cmp	r3, sl
 801a248:	bfa8      	it	ge
 801a24a:	4653      	movge	r3, sl
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	4699      	mov	r9, r3
 801a250:	dc36      	bgt.n	801a2c0 <_printf_float+0x35c>
 801a252:	f04f 0b00 	mov.w	fp, #0
 801a256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a25a:	f104 021a 	add.w	r2, r4, #26
 801a25e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a260:	9304      	str	r3, [sp, #16]
 801a262:	eba3 0309 	sub.w	r3, r3, r9
 801a266:	455b      	cmp	r3, fp
 801a268:	dc31      	bgt.n	801a2ce <_printf_float+0x36a>
 801a26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a26c:	459a      	cmp	sl, r3
 801a26e:	dc3a      	bgt.n	801a2e6 <_printf_float+0x382>
 801a270:	6823      	ldr	r3, [r4, #0]
 801a272:	07da      	lsls	r2, r3, #31
 801a274:	d437      	bmi.n	801a2e6 <_printf_float+0x382>
 801a276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a278:	ebaa 0903 	sub.w	r9, sl, r3
 801a27c:	9b04      	ldr	r3, [sp, #16]
 801a27e:	ebaa 0303 	sub.w	r3, sl, r3
 801a282:	4599      	cmp	r9, r3
 801a284:	bfa8      	it	ge
 801a286:	4699      	movge	r9, r3
 801a288:	f1b9 0f00 	cmp.w	r9, #0
 801a28c:	dc33      	bgt.n	801a2f6 <_printf_float+0x392>
 801a28e:	f04f 0800 	mov.w	r8, #0
 801a292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a296:	f104 0b1a 	add.w	fp, r4, #26
 801a29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a29c:	ebaa 0303 	sub.w	r3, sl, r3
 801a2a0:	eba3 0309 	sub.w	r3, r3, r9
 801a2a4:	4543      	cmp	r3, r8
 801a2a6:	f77f af79 	ble.w	801a19c <_printf_float+0x238>
 801a2aa:	2301      	movs	r3, #1
 801a2ac:	465a      	mov	r2, fp
 801a2ae:	4631      	mov	r1, r6
 801a2b0:	4628      	mov	r0, r5
 801a2b2:	47b8      	blx	r7
 801a2b4:	3001      	adds	r0, #1
 801a2b6:	f43f aeaf 	beq.w	801a018 <_printf_float+0xb4>
 801a2ba:	f108 0801 	add.w	r8, r8, #1
 801a2be:	e7ec      	b.n	801a29a <_printf_float+0x336>
 801a2c0:	4642      	mov	r2, r8
 801a2c2:	4631      	mov	r1, r6
 801a2c4:	4628      	mov	r0, r5
 801a2c6:	47b8      	blx	r7
 801a2c8:	3001      	adds	r0, #1
 801a2ca:	d1c2      	bne.n	801a252 <_printf_float+0x2ee>
 801a2cc:	e6a4      	b.n	801a018 <_printf_float+0xb4>
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	4631      	mov	r1, r6
 801a2d2:	4628      	mov	r0, r5
 801a2d4:	9204      	str	r2, [sp, #16]
 801a2d6:	47b8      	blx	r7
 801a2d8:	3001      	adds	r0, #1
 801a2da:	f43f ae9d 	beq.w	801a018 <_printf_float+0xb4>
 801a2de:	9a04      	ldr	r2, [sp, #16]
 801a2e0:	f10b 0b01 	add.w	fp, fp, #1
 801a2e4:	e7bb      	b.n	801a25e <_printf_float+0x2fa>
 801a2e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a2ea:	4631      	mov	r1, r6
 801a2ec:	4628      	mov	r0, r5
 801a2ee:	47b8      	blx	r7
 801a2f0:	3001      	adds	r0, #1
 801a2f2:	d1c0      	bne.n	801a276 <_printf_float+0x312>
 801a2f4:	e690      	b.n	801a018 <_printf_float+0xb4>
 801a2f6:	9a04      	ldr	r2, [sp, #16]
 801a2f8:	464b      	mov	r3, r9
 801a2fa:	4442      	add	r2, r8
 801a2fc:	4631      	mov	r1, r6
 801a2fe:	4628      	mov	r0, r5
 801a300:	47b8      	blx	r7
 801a302:	3001      	adds	r0, #1
 801a304:	d1c3      	bne.n	801a28e <_printf_float+0x32a>
 801a306:	e687      	b.n	801a018 <_printf_float+0xb4>
 801a308:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a30c:	f1ba 0f01 	cmp.w	sl, #1
 801a310:	dc01      	bgt.n	801a316 <_printf_float+0x3b2>
 801a312:	07db      	lsls	r3, r3, #31
 801a314:	d536      	bpl.n	801a384 <_printf_float+0x420>
 801a316:	2301      	movs	r3, #1
 801a318:	4642      	mov	r2, r8
 801a31a:	4631      	mov	r1, r6
 801a31c:	4628      	mov	r0, r5
 801a31e:	47b8      	blx	r7
 801a320:	3001      	adds	r0, #1
 801a322:	f43f ae79 	beq.w	801a018 <_printf_float+0xb4>
 801a326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a32a:	4631      	mov	r1, r6
 801a32c:	4628      	mov	r0, r5
 801a32e:	47b8      	blx	r7
 801a330:	3001      	adds	r0, #1
 801a332:	f43f ae71 	beq.w	801a018 <_printf_float+0xb4>
 801a336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a33a:	2200      	movs	r2, #0
 801a33c:	2300      	movs	r3, #0
 801a33e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a342:	f7e6 fbb9 	bl	8000ab8 <__aeabi_dcmpeq>
 801a346:	b9c0      	cbnz	r0, 801a37a <_printf_float+0x416>
 801a348:	4653      	mov	r3, sl
 801a34a:	f108 0201 	add.w	r2, r8, #1
 801a34e:	4631      	mov	r1, r6
 801a350:	4628      	mov	r0, r5
 801a352:	47b8      	blx	r7
 801a354:	3001      	adds	r0, #1
 801a356:	d10c      	bne.n	801a372 <_printf_float+0x40e>
 801a358:	e65e      	b.n	801a018 <_printf_float+0xb4>
 801a35a:	2301      	movs	r3, #1
 801a35c:	465a      	mov	r2, fp
 801a35e:	4631      	mov	r1, r6
 801a360:	4628      	mov	r0, r5
 801a362:	47b8      	blx	r7
 801a364:	3001      	adds	r0, #1
 801a366:	f43f ae57 	beq.w	801a018 <_printf_float+0xb4>
 801a36a:	f108 0801 	add.w	r8, r8, #1
 801a36e:	45d0      	cmp	r8, sl
 801a370:	dbf3      	blt.n	801a35a <_printf_float+0x3f6>
 801a372:	464b      	mov	r3, r9
 801a374:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a378:	e6df      	b.n	801a13a <_printf_float+0x1d6>
 801a37a:	f04f 0800 	mov.w	r8, #0
 801a37e:	f104 0b1a 	add.w	fp, r4, #26
 801a382:	e7f4      	b.n	801a36e <_printf_float+0x40a>
 801a384:	2301      	movs	r3, #1
 801a386:	4642      	mov	r2, r8
 801a388:	e7e1      	b.n	801a34e <_printf_float+0x3ea>
 801a38a:	2301      	movs	r3, #1
 801a38c:	464a      	mov	r2, r9
 801a38e:	4631      	mov	r1, r6
 801a390:	4628      	mov	r0, r5
 801a392:	47b8      	blx	r7
 801a394:	3001      	adds	r0, #1
 801a396:	f43f ae3f 	beq.w	801a018 <_printf_float+0xb4>
 801a39a:	f108 0801 	add.w	r8, r8, #1
 801a39e:	68e3      	ldr	r3, [r4, #12]
 801a3a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a3a2:	1a5b      	subs	r3, r3, r1
 801a3a4:	4543      	cmp	r3, r8
 801a3a6:	dcf0      	bgt.n	801a38a <_printf_float+0x426>
 801a3a8:	e6fc      	b.n	801a1a4 <_printf_float+0x240>
 801a3aa:	f04f 0800 	mov.w	r8, #0
 801a3ae:	f104 0919 	add.w	r9, r4, #25
 801a3b2:	e7f4      	b.n	801a39e <_printf_float+0x43a>

0801a3b4 <_printf_common>:
 801a3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3b8:	4616      	mov	r6, r2
 801a3ba:	4698      	mov	r8, r3
 801a3bc:	688a      	ldr	r2, [r1, #8]
 801a3be:	690b      	ldr	r3, [r1, #16]
 801a3c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	bfb8      	it	lt
 801a3c8:	4613      	movlt	r3, r2
 801a3ca:	6033      	str	r3, [r6, #0]
 801a3cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a3d0:	4607      	mov	r7, r0
 801a3d2:	460c      	mov	r4, r1
 801a3d4:	b10a      	cbz	r2, 801a3da <_printf_common+0x26>
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	6033      	str	r3, [r6, #0]
 801a3da:	6823      	ldr	r3, [r4, #0]
 801a3dc:	0699      	lsls	r1, r3, #26
 801a3de:	bf42      	ittt	mi
 801a3e0:	6833      	ldrmi	r3, [r6, #0]
 801a3e2:	3302      	addmi	r3, #2
 801a3e4:	6033      	strmi	r3, [r6, #0]
 801a3e6:	6825      	ldr	r5, [r4, #0]
 801a3e8:	f015 0506 	ands.w	r5, r5, #6
 801a3ec:	d106      	bne.n	801a3fc <_printf_common+0x48>
 801a3ee:	f104 0a19 	add.w	sl, r4, #25
 801a3f2:	68e3      	ldr	r3, [r4, #12]
 801a3f4:	6832      	ldr	r2, [r6, #0]
 801a3f6:	1a9b      	subs	r3, r3, r2
 801a3f8:	42ab      	cmp	r3, r5
 801a3fa:	dc26      	bgt.n	801a44a <_printf_common+0x96>
 801a3fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a400:	6822      	ldr	r2, [r4, #0]
 801a402:	3b00      	subs	r3, #0
 801a404:	bf18      	it	ne
 801a406:	2301      	movne	r3, #1
 801a408:	0692      	lsls	r2, r2, #26
 801a40a:	d42b      	bmi.n	801a464 <_printf_common+0xb0>
 801a40c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a410:	4641      	mov	r1, r8
 801a412:	4638      	mov	r0, r7
 801a414:	47c8      	blx	r9
 801a416:	3001      	adds	r0, #1
 801a418:	d01e      	beq.n	801a458 <_printf_common+0xa4>
 801a41a:	6823      	ldr	r3, [r4, #0]
 801a41c:	6922      	ldr	r2, [r4, #16]
 801a41e:	f003 0306 	and.w	r3, r3, #6
 801a422:	2b04      	cmp	r3, #4
 801a424:	bf02      	ittt	eq
 801a426:	68e5      	ldreq	r5, [r4, #12]
 801a428:	6833      	ldreq	r3, [r6, #0]
 801a42a:	1aed      	subeq	r5, r5, r3
 801a42c:	68a3      	ldr	r3, [r4, #8]
 801a42e:	bf0c      	ite	eq
 801a430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a434:	2500      	movne	r5, #0
 801a436:	4293      	cmp	r3, r2
 801a438:	bfc4      	itt	gt
 801a43a:	1a9b      	subgt	r3, r3, r2
 801a43c:	18ed      	addgt	r5, r5, r3
 801a43e:	2600      	movs	r6, #0
 801a440:	341a      	adds	r4, #26
 801a442:	42b5      	cmp	r5, r6
 801a444:	d11a      	bne.n	801a47c <_printf_common+0xc8>
 801a446:	2000      	movs	r0, #0
 801a448:	e008      	b.n	801a45c <_printf_common+0xa8>
 801a44a:	2301      	movs	r3, #1
 801a44c:	4652      	mov	r2, sl
 801a44e:	4641      	mov	r1, r8
 801a450:	4638      	mov	r0, r7
 801a452:	47c8      	blx	r9
 801a454:	3001      	adds	r0, #1
 801a456:	d103      	bne.n	801a460 <_printf_common+0xac>
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a460:	3501      	adds	r5, #1
 801a462:	e7c6      	b.n	801a3f2 <_printf_common+0x3e>
 801a464:	18e1      	adds	r1, r4, r3
 801a466:	1c5a      	adds	r2, r3, #1
 801a468:	2030      	movs	r0, #48	@ 0x30
 801a46a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a46e:	4422      	add	r2, r4
 801a470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a478:	3302      	adds	r3, #2
 801a47a:	e7c7      	b.n	801a40c <_printf_common+0x58>
 801a47c:	2301      	movs	r3, #1
 801a47e:	4622      	mov	r2, r4
 801a480:	4641      	mov	r1, r8
 801a482:	4638      	mov	r0, r7
 801a484:	47c8      	blx	r9
 801a486:	3001      	adds	r0, #1
 801a488:	d0e6      	beq.n	801a458 <_printf_common+0xa4>
 801a48a:	3601      	adds	r6, #1
 801a48c:	e7d9      	b.n	801a442 <_printf_common+0x8e>
	...

0801a490 <_printf_i>:
 801a490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a494:	7e0f      	ldrb	r7, [r1, #24]
 801a496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a498:	2f78      	cmp	r7, #120	@ 0x78
 801a49a:	4691      	mov	r9, r2
 801a49c:	4680      	mov	r8, r0
 801a49e:	460c      	mov	r4, r1
 801a4a0:	469a      	mov	sl, r3
 801a4a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a4a6:	d807      	bhi.n	801a4b8 <_printf_i+0x28>
 801a4a8:	2f62      	cmp	r7, #98	@ 0x62
 801a4aa:	d80a      	bhi.n	801a4c2 <_printf_i+0x32>
 801a4ac:	2f00      	cmp	r7, #0
 801a4ae:	f000 80d2 	beq.w	801a656 <_printf_i+0x1c6>
 801a4b2:	2f58      	cmp	r7, #88	@ 0x58
 801a4b4:	f000 80b7 	beq.w	801a626 <_printf_i+0x196>
 801a4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a4c0:	e03a      	b.n	801a538 <_printf_i+0xa8>
 801a4c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a4c6:	2b15      	cmp	r3, #21
 801a4c8:	d8f6      	bhi.n	801a4b8 <_printf_i+0x28>
 801a4ca:	a101      	add	r1, pc, #4	@ (adr r1, 801a4d0 <_printf_i+0x40>)
 801a4cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a4d0:	0801a529 	.word	0x0801a529
 801a4d4:	0801a53d 	.word	0x0801a53d
 801a4d8:	0801a4b9 	.word	0x0801a4b9
 801a4dc:	0801a4b9 	.word	0x0801a4b9
 801a4e0:	0801a4b9 	.word	0x0801a4b9
 801a4e4:	0801a4b9 	.word	0x0801a4b9
 801a4e8:	0801a53d 	.word	0x0801a53d
 801a4ec:	0801a4b9 	.word	0x0801a4b9
 801a4f0:	0801a4b9 	.word	0x0801a4b9
 801a4f4:	0801a4b9 	.word	0x0801a4b9
 801a4f8:	0801a4b9 	.word	0x0801a4b9
 801a4fc:	0801a63d 	.word	0x0801a63d
 801a500:	0801a567 	.word	0x0801a567
 801a504:	0801a5f3 	.word	0x0801a5f3
 801a508:	0801a4b9 	.word	0x0801a4b9
 801a50c:	0801a4b9 	.word	0x0801a4b9
 801a510:	0801a65f 	.word	0x0801a65f
 801a514:	0801a4b9 	.word	0x0801a4b9
 801a518:	0801a567 	.word	0x0801a567
 801a51c:	0801a4b9 	.word	0x0801a4b9
 801a520:	0801a4b9 	.word	0x0801a4b9
 801a524:	0801a5fb 	.word	0x0801a5fb
 801a528:	6833      	ldr	r3, [r6, #0]
 801a52a:	1d1a      	adds	r2, r3, #4
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	6032      	str	r2, [r6, #0]
 801a530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a538:	2301      	movs	r3, #1
 801a53a:	e09d      	b.n	801a678 <_printf_i+0x1e8>
 801a53c:	6833      	ldr	r3, [r6, #0]
 801a53e:	6820      	ldr	r0, [r4, #0]
 801a540:	1d19      	adds	r1, r3, #4
 801a542:	6031      	str	r1, [r6, #0]
 801a544:	0606      	lsls	r6, r0, #24
 801a546:	d501      	bpl.n	801a54c <_printf_i+0xbc>
 801a548:	681d      	ldr	r5, [r3, #0]
 801a54a:	e003      	b.n	801a554 <_printf_i+0xc4>
 801a54c:	0645      	lsls	r5, r0, #25
 801a54e:	d5fb      	bpl.n	801a548 <_printf_i+0xb8>
 801a550:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a554:	2d00      	cmp	r5, #0
 801a556:	da03      	bge.n	801a560 <_printf_i+0xd0>
 801a558:	232d      	movs	r3, #45	@ 0x2d
 801a55a:	426d      	negs	r5, r5
 801a55c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a560:	4859      	ldr	r0, [pc, #356]	@ (801a6c8 <_printf_i+0x238>)
 801a562:	230a      	movs	r3, #10
 801a564:	e010      	b.n	801a588 <_printf_i+0xf8>
 801a566:	6821      	ldr	r1, [r4, #0]
 801a568:	6833      	ldr	r3, [r6, #0]
 801a56a:	0608      	lsls	r0, r1, #24
 801a56c:	f853 5b04 	ldr.w	r5, [r3], #4
 801a570:	d402      	bmi.n	801a578 <_printf_i+0xe8>
 801a572:	0649      	lsls	r1, r1, #25
 801a574:	bf48      	it	mi
 801a576:	b2ad      	uxthmi	r5, r5
 801a578:	2f6f      	cmp	r7, #111	@ 0x6f
 801a57a:	4853      	ldr	r0, [pc, #332]	@ (801a6c8 <_printf_i+0x238>)
 801a57c:	6033      	str	r3, [r6, #0]
 801a57e:	d159      	bne.n	801a634 <_printf_i+0x1a4>
 801a580:	2308      	movs	r3, #8
 801a582:	2100      	movs	r1, #0
 801a584:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a588:	6866      	ldr	r6, [r4, #4]
 801a58a:	60a6      	str	r6, [r4, #8]
 801a58c:	2e00      	cmp	r6, #0
 801a58e:	db05      	blt.n	801a59c <_printf_i+0x10c>
 801a590:	6821      	ldr	r1, [r4, #0]
 801a592:	432e      	orrs	r6, r5
 801a594:	f021 0104 	bic.w	r1, r1, #4
 801a598:	6021      	str	r1, [r4, #0]
 801a59a:	d04d      	beq.n	801a638 <_printf_i+0x1a8>
 801a59c:	4616      	mov	r6, r2
 801a59e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a5a2:	fb03 5711 	mls	r7, r3, r1, r5
 801a5a6:	5dc7      	ldrb	r7, [r0, r7]
 801a5a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a5ac:	462f      	mov	r7, r5
 801a5ae:	42bb      	cmp	r3, r7
 801a5b0:	460d      	mov	r5, r1
 801a5b2:	d9f4      	bls.n	801a59e <_printf_i+0x10e>
 801a5b4:	2b08      	cmp	r3, #8
 801a5b6:	d10b      	bne.n	801a5d0 <_printf_i+0x140>
 801a5b8:	6823      	ldr	r3, [r4, #0]
 801a5ba:	07df      	lsls	r7, r3, #31
 801a5bc:	d508      	bpl.n	801a5d0 <_printf_i+0x140>
 801a5be:	6923      	ldr	r3, [r4, #16]
 801a5c0:	6861      	ldr	r1, [r4, #4]
 801a5c2:	4299      	cmp	r1, r3
 801a5c4:	bfde      	ittt	le
 801a5c6:	2330      	movle	r3, #48	@ 0x30
 801a5c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a5cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a5d0:	1b92      	subs	r2, r2, r6
 801a5d2:	6122      	str	r2, [r4, #16]
 801a5d4:	f8cd a000 	str.w	sl, [sp]
 801a5d8:	464b      	mov	r3, r9
 801a5da:	aa03      	add	r2, sp, #12
 801a5dc:	4621      	mov	r1, r4
 801a5de:	4640      	mov	r0, r8
 801a5e0:	f7ff fee8 	bl	801a3b4 <_printf_common>
 801a5e4:	3001      	adds	r0, #1
 801a5e6:	d14c      	bne.n	801a682 <_printf_i+0x1f2>
 801a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ec:	b004      	add	sp, #16
 801a5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	f043 0320 	orr.w	r3, r3, #32
 801a5f8:	6023      	str	r3, [r4, #0]
 801a5fa:	4834      	ldr	r0, [pc, #208]	@ (801a6cc <_printf_i+0x23c>)
 801a5fc:	2778      	movs	r7, #120	@ 0x78
 801a5fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a602:	6823      	ldr	r3, [r4, #0]
 801a604:	6831      	ldr	r1, [r6, #0]
 801a606:	061f      	lsls	r7, r3, #24
 801a608:	f851 5b04 	ldr.w	r5, [r1], #4
 801a60c:	d402      	bmi.n	801a614 <_printf_i+0x184>
 801a60e:	065f      	lsls	r7, r3, #25
 801a610:	bf48      	it	mi
 801a612:	b2ad      	uxthmi	r5, r5
 801a614:	6031      	str	r1, [r6, #0]
 801a616:	07d9      	lsls	r1, r3, #31
 801a618:	bf44      	itt	mi
 801a61a:	f043 0320 	orrmi.w	r3, r3, #32
 801a61e:	6023      	strmi	r3, [r4, #0]
 801a620:	b11d      	cbz	r5, 801a62a <_printf_i+0x19a>
 801a622:	2310      	movs	r3, #16
 801a624:	e7ad      	b.n	801a582 <_printf_i+0xf2>
 801a626:	4828      	ldr	r0, [pc, #160]	@ (801a6c8 <_printf_i+0x238>)
 801a628:	e7e9      	b.n	801a5fe <_printf_i+0x16e>
 801a62a:	6823      	ldr	r3, [r4, #0]
 801a62c:	f023 0320 	bic.w	r3, r3, #32
 801a630:	6023      	str	r3, [r4, #0]
 801a632:	e7f6      	b.n	801a622 <_printf_i+0x192>
 801a634:	230a      	movs	r3, #10
 801a636:	e7a4      	b.n	801a582 <_printf_i+0xf2>
 801a638:	4616      	mov	r6, r2
 801a63a:	e7bb      	b.n	801a5b4 <_printf_i+0x124>
 801a63c:	6833      	ldr	r3, [r6, #0]
 801a63e:	6825      	ldr	r5, [r4, #0]
 801a640:	6961      	ldr	r1, [r4, #20]
 801a642:	1d18      	adds	r0, r3, #4
 801a644:	6030      	str	r0, [r6, #0]
 801a646:	062e      	lsls	r6, r5, #24
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	d501      	bpl.n	801a650 <_printf_i+0x1c0>
 801a64c:	6019      	str	r1, [r3, #0]
 801a64e:	e002      	b.n	801a656 <_printf_i+0x1c6>
 801a650:	0668      	lsls	r0, r5, #25
 801a652:	d5fb      	bpl.n	801a64c <_printf_i+0x1bc>
 801a654:	8019      	strh	r1, [r3, #0]
 801a656:	2300      	movs	r3, #0
 801a658:	6123      	str	r3, [r4, #16]
 801a65a:	4616      	mov	r6, r2
 801a65c:	e7ba      	b.n	801a5d4 <_printf_i+0x144>
 801a65e:	6833      	ldr	r3, [r6, #0]
 801a660:	1d1a      	adds	r2, r3, #4
 801a662:	6032      	str	r2, [r6, #0]
 801a664:	681e      	ldr	r6, [r3, #0]
 801a666:	6862      	ldr	r2, [r4, #4]
 801a668:	2100      	movs	r1, #0
 801a66a:	4630      	mov	r0, r6
 801a66c:	f7e5 fda8 	bl	80001c0 <memchr>
 801a670:	b108      	cbz	r0, 801a676 <_printf_i+0x1e6>
 801a672:	1b80      	subs	r0, r0, r6
 801a674:	6060      	str	r0, [r4, #4]
 801a676:	6863      	ldr	r3, [r4, #4]
 801a678:	6123      	str	r3, [r4, #16]
 801a67a:	2300      	movs	r3, #0
 801a67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a680:	e7a8      	b.n	801a5d4 <_printf_i+0x144>
 801a682:	6923      	ldr	r3, [r4, #16]
 801a684:	4632      	mov	r2, r6
 801a686:	4649      	mov	r1, r9
 801a688:	4640      	mov	r0, r8
 801a68a:	47d0      	blx	sl
 801a68c:	3001      	adds	r0, #1
 801a68e:	d0ab      	beq.n	801a5e8 <_printf_i+0x158>
 801a690:	6823      	ldr	r3, [r4, #0]
 801a692:	079b      	lsls	r3, r3, #30
 801a694:	d413      	bmi.n	801a6be <_printf_i+0x22e>
 801a696:	68e0      	ldr	r0, [r4, #12]
 801a698:	9b03      	ldr	r3, [sp, #12]
 801a69a:	4298      	cmp	r0, r3
 801a69c:	bfb8      	it	lt
 801a69e:	4618      	movlt	r0, r3
 801a6a0:	e7a4      	b.n	801a5ec <_printf_i+0x15c>
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	4632      	mov	r2, r6
 801a6a6:	4649      	mov	r1, r9
 801a6a8:	4640      	mov	r0, r8
 801a6aa:	47d0      	blx	sl
 801a6ac:	3001      	adds	r0, #1
 801a6ae:	d09b      	beq.n	801a5e8 <_printf_i+0x158>
 801a6b0:	3501      	adds	r5, #1
 801a6b2:	68e3      	ldr	r3, [r4, #12]
 801a6b4:	9903      	ldr	r1, [sp, #12]
 801a6b6:	1a5b      	subs	r3, r3, r1
 801a6b8:	42ab      	cmp	r3, r5
 801a6ba:	dcf2      	bgt.n	801a6a2 <_printf_i+0x212>
 801a6bc:	e7eb      	b.n	801a696 <_printf_i+0x206>
 801a6be:	2500      	movs	r5, #0
 801a6c0:	f104 0619 	add.w	r6, r4, #25
 801a6c4:	e7f5      	b.n	801a6b2 <_printf_i+0x222>
 801a6c6:	bf00      	nop
 801a6c8:	0801ec97 	.word	0x0801ec97
 801a6cc:	0801eca8 	.word	0x0801eca8

0801a6d0 <std>:
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	b510      	push	{r4, lr}
 801a6d4:	4604      	mov	r4, r0
 801a6d6:	e9c0 3300 	strd	r3, r3, [r0]
 801a6da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a6de:	6083      	str	r3, [r0, #8]
 801a6e0:	8181      	strh	r1, [r0, #12]
 801a6e2:	6643      	str	r3, [r0, #100]	@ 0x64
 801a6e4:	81c2      	strh	r2, [r0, #14]
 801a6e6:	6183      	str	r3, [r0, #24]
 801a6e8:	4619      	mov	r1, r3
 801a6ea:	2208      	movs	r2, #8
 801a6ec:	305c      	adds	r0, #92	@ 0x5c
 801a6ee:	f000 faee 	bl	801acce <memset>
 801a6f2:	4b0d      	ldr	r3, [pc, #52]	@ (801a728 <std+0x58>)
 801a6f4:	6263      	str	r3, [r4, #36]	@ 0x24
 801a6f6:	4b0d      	ldr	r3, [pc, #52]	@ (801a72c <std+0x5c>)
 801a6f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a6fa:	4b0d      	ldr	r3, [pc, #52]	@ (801a730 <std+0x60>)
 801a6fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a6fe:	4b0d      	ldr	r3, [pc, #52]	@ (801a734 <std+0x64>)
 801a700:	6323      	str	r3, [r4, #48]	@ 0x30
 801a702:	4b0d      	ldr	r3, [pc, #52]	@ (801a738 <std+0x68>)
 801a704:	6224      	str	r4, [r4, #32]
 801a706:	429c      	cmp	r4, r3
 801a708:	d006      	beq.n	801a718 <std+0x48>
 801a70a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a70e:	4294      	cmp	r4, r2
 801a710:	d002      	beq.n	801a718 <std+0x48>
 801a712:	33d0      	adds	r3, #208	@ 0xd0
 801a714:	429c      	cmp	r4, r3
 801a716:	d105      	bne.n	801a724 <std+0x54>
 801a718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a720:	f000 bbaa 	b.w	801ae78 <__retarget_lock_init_recursive>
 801a724:	bd10      	pop	{r4, pc}
 801a726:	bf00      	nop
 801a728:	0801aa59 	.word	0x0801aa59
 801a72c:	0801aa7b 	.word	0x0801aa7b
 801a730:	0801aab3 	.word	0x0801aab3
 801a734:	0801aad9 	.word	0x0801aad9
 801a738:	2000d260 	.word	0x2000d260

0801a73c <stdio_exit_handler>:
 801a73c:	4a02      	ldr	r2, [pc, #8]	@ (801a748 <stdio_exit_handler+0xc>)
 801a73e:	4903      	ldr	r1, [pc, #12]	@ (801a74c <stdio_exit_handler+0x10>)
 801a740:	4803      	ldr	r0, [pc, #12]	@ (801a750 <stdio_exit_handler+0x14>)
 801a742:	f000 b86b 	b.w	801a81c <_fwalk_sglue>
 801a746:	bf00      	nop
 801a748:	20002498 	.word	0x20002498
 801a74c:	0801ca85 	.word	0x0801ca85
 801a750:	200024a8 	.word	0x200024a8

0801a754 <cleanup_stdio>:
 801a754:	6841      	ldr	r1, [r0, #4]
 801a756:	4b0c      	ldr	r3, [pc, #48]	@ (801a788 <cleanup_stdio+0x34>)
 801a758:	4299      	cmp	r1, r3
 801a75a:	b510      	push	{r4, lr}
 801a75c:	4604      	mov	r4, r0
 801a75e:	d001      	beq.n	801a764 <cleanup_stdio+0x10>
 801a760:	f002 f990 	bl	801ca84 <_fflush_r>
 801a764:	68a1      	ldr	r1, [r4, #8]
 801a766:	4b09      	ldr	r3, [pc, #36]	@ (801a78c <cleanup_stdio+0x38>)
 801a768:	4299      	cmp	r1, r3
 801a76a:	d002      	beq.n	801a772 <cleanup_stdio+0x1e>
 801a76c:	4620      	mov	r0, r4
 801a76e:	f002 f989 	bl	801ca84 <_fflush_r>
 801a772:	68e1      	ldr	r1, [r4, #12]
 801a774:	4b06      	ldr	r3, [pc, #24]	@ (801a790 <cleanup_stdio+0x3c>)
 801a776:	4299      	cmp	r1, r3
 801a778:	d004      	beq.n	801a784 <cleanup_stdio+0x30>
 801a77a:	4620      	mov	r0, r4
 801a77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a780:	f002 b980 	b.w	801ca84 <_fflush_r>
 801a784:	bd10      	pop	{r4, pc}
 801a786:	bf00      	nop
 801a788:	2000d260 	.word	0x2000d260
 801a78c:	2000d2c8 	.word	0x2000d2c8
 801a790:	2000d330 	.word	0x2000d330

0801a794 <global_stdio_init.part.0>:
 801a794:	4b0c      	ldr	r3, [pc, #48]	@ (801a7c8 <global_stdio_init.part.0+0x34>)
 801a796:	4a0d      	ldr	r2, [pc, #52]	@ (801a7cc <global_stdio_init.part.0+0x38>)
 801a798:	480d      	ldr	r0, [pc, #52]	@ (801a7d0 <global_stdio_init.part.0+0x3c>)
 801a79a:	b510      	push	{r4, lr}
 801a79c:	2104      	movs	r1, #4
 801a79e:	601a      	str	r2, [r3, #0]
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	f7ff ff95 	bl	801a6d0 <std>
 801a7a6:	4b0a      	ldr	r3, [pc, #40]	@ (801a7d0 <global_stdio_init.part.0+0x3c>)
 801a7a8:	2201      	movs	r2, #1
 801a7aa:	461c      	mov	r4, r3
 801a7ac:	2109      	movs	r1, #9
 801a7ae:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 801a7b2:	f7ff ff8d 	bl	801a6d0 <std>
 801a7b6:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a7ba:	2202      	movs	r2, #2
 801a7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7c0:	2112      	movs	r1, #18
 801a7c2:	f7ff bf85 	b.w	801a6d0 <std>
 801a7c6:	bf00      	nop
 801a7c8:	2000d398 	.word	0x2000d398
 801a7cc:	0801a73d 	.word	0x0801a73d
 801a7d0:	2000d260 	.word	0x2000d260

0801a7d4 <__sfp_lock_acquire>:
 801a7d4:	4801      	ldr	r0, [pc, #4]	@ (801a7dc <__sfp_lock_acquire+0x8>)
 801a7d6:	f000 bb50 	b.w	801ae7a <__retarget_lock_acquire_recursive>
 801a7da:	bf00      	nop
 801a7dc:	2000d3a3 	.word	0x2000d3a3

0801a7e0 <__sfp_lock_release>:
 801a7e0:	4801      	ldr	r0, [pc, #4]	@ (801a7e8 <__sfp_lock_release+0x8>)
 801a7e2:	f000 bb4b 	b.w	801ae7c <__retarget_lock_release_recursive>
 801a7e6:	bf00      	nop
 801a7e8:	2000d3a3 	.word	0x2000d3a3

0801a7ec <__sinit>:
 801a7ec:	b510      	push	{r4, lr}
 801a7ee:	4604      	mov	r4, r0
 801a7f0:	f7ff fff0 	bl	801a7d4 <__sfp_lock_acquire>
 801a7f4:	6a23      	ldr	r3, [r4, #32]
 801a7f6:	b11b      	cbz	r3, 801a800 <__sinit+0x14>
 801a7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7fc:	f7ff bff0 	b.w	801a7e0 <__sfp_lock_release>
 801a800:	4b04      	ldr	r3, [pc, #16]	@ (801a814 <__sinit+0x28>)
 801a802:	6223      	str	r3, [r4, #32]
 801a804:	4b04      	ldr	r3, [pc, #16]	@ (801a818 <__sinit+0x2c>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d1f5      	bne.n	801a7f8 <__sinit+0xc>
 801a80c:	f7ff ffc2 	bl	801a794 <global_stdio_init.part.0>
 801a810:	e7f2      	b.n	801a7f8 <__sinit+0xc>
 801a812:	bf00      	nop
 801a814:	0801a755 	.word	0x0801a755
 801a818:	2000d398 	.word	0x2000d398

0801a81c <_fwalk_sglue>:
 801a81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a820:	4607      	mov	r7, r0
 801a822:	4688      	mov	r8, r1
 801a824:	4614      	mov	r4, r2
 801a826:	2600      	movs	r6, #0
 801a828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a82c:	f1b9 0901 	subs.w	r9, r9, #1
 801a830:	d505      	bpl.n	801a83e <_fwalk_sglue+0x22>
 801a832:	6824      	ldr	r4, [r4, #0]
 801a834:	2c00      	cmp	r4, #0
 801a836:	d1f7      	bne.n	801a828 <_fwalk_sglue+0xc>
 801a838:	4630      	mov	r0, r6
 801a83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a83e:	89ab      	ldrh	r3, [r5, #12]
 801a840:	2b01      	cmp	r3, #1
 801a842:	d907      	bls.n	801a854 <_fwalk_sglue+0x38>
 801a844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a848:	3301      	adds	r3, #1
 801a84a:	d003      	beq.n	801a854 <_fwalk_sglue+0x38>
 801a84c:	4629      	mov	r1, r5
 801a84e:	4638      	mov	r0, r7
 801a850:	47c0      	blx	r8
 801a852:	4306      	orrs	r6, r0
 801a854:	3568      	adds	r5, #104	@ 0x68
 801a856:	e7e9      	b.n	801a82c <_fwalk_sglue+0x10>

0801a858 <_fwrite_r>:
 801a858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a85c:	9c08      	ldr	r4, [sp, #32]
 801a85e:	468a      	mov	sl, r1
 801a860:	4690      	mov	r8, r2
 801a862:	fb02 f903 	mul.w	r9, r2, r3
 801a866:	4606      	mov	r6, r0
 801a868:	b118      	cbz	r0, 801a872 <_fwrite_r+0x1a>
 801a86a:	6a03      	ldr	r3, [r0, #32]
 801a86c:	b90b      	cbnz	r3, 801a872 <_fwrite_r+0x1a>
 801a86e:	f7ff ffbd 	bl	801a7ec <__sinit>
 801a872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a874:	07dd      	lsls	r5, r3, #31
 801a876:	d405      	bmi.n	801a884 <_fwrite_r+0x2c>
 801a878:	89a3      	ldrh	r3, [r4, #12]
 801a87a:	0598      	lsls	r0, r3, #22
 801a87c:	d402      	bmi.n	801a884 <_fwrite_r+0x2c>
 801a87e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a880:	f000 fafb 	bl	801ae7a <__retarget_lock_acquire_recursive>
 801a884:	89a3      	ldrh	r3, [r4, #12]
 801a886:	0719      	lsls	r1, r3, #28
 801a888:	d516      	bpl.n	801a8b8 <_fwrite_r+0x60>
 801a88a:	6923      	ldr	r3, [r4, #16]
 801a88c:	b1a3      	cbz	r3, 801a8b8 <_fwrite_r+0x60>
 801a88e:	2500      	movs	r5, #0
 801a890:	454d      	cmp	r5, r9
 801a892:	d01f      	beq.n	801a8d4 <_fwrite_r+0x7c>
 801a894:	68a7      	ldr	r7, [r4, #8]
 801a896:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801a89a:	3f01      	subs	r7, #1
 801a89c:	2f00      	cmp	r7, #0
 801a89e:	60a7      	str	r7, [r4, #8]
 801a8a0:	da04      	bge.n	801a8ac <_fwrite_r+0x54>
 801a8a2:	69a3      	ldr	r3, [r4, #24]
 801a8a4:	429f      	cmp	r7, r3
 801a8a6:	db0f      	blt.n	801a8c8 <_fwrite_r+0x70>
 801a8a8:	290a      	cmp	r1, #10
 801a8aa:	d00d      	beq.n	801a8c8 <_fwrite_r+0x70>
 801a8ac:	6823      	ldr	r3, [r4, #0]
 801a8ae:	1c5a      	adds	r2, r3, #1
 801a8b0:	6022      	str	r2, [r4, #0]
 801a8b2:	7019      	strb	r1, [r3, #0]
 801a8b4:	3501      	adds	r5, #1
 801a8b6:	e7eb      	b.n	801a890 <_fwrite_r+0x38>
 801a8b8:	4621      	mov	r1, r4
 801a8ba:	4630      	mov	r0, r6
 801a8bc:	f000 f98a 	bl	801abd4 <__swsetup_r>
 801a8c0:	2800      	cmp	r0, #0
 801a8c2:	d0e4      	beq.n	801a88e <_fwrite_r+0x36>
 801a8c4:	2500      	movs	r5, #0
 801a8c6:	e005      	b.n	801a8d4 <_fwrite_r+0x7c>
 801a8c8:	4622      	mov	r2, r4
 801a8ca:	4630      	mov	r0, r6
 801a8cc:	f000 f944 	bl	801ab58 <__swbuf_r>
 801a8d0:	3001      	adds	r0, #1
 801a8d2:	d1ef      	bne.n	801a8b4 <_fwrite_r+0x5c>
 801a8d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a8d6:	07da      	lsls	r2, r3, #31
 801a8d8:	d405      	bmi.n	801a8e6 <_fwrite_r+0x8e>
 801a8da:	89a3      	ldrh	r3, [r4, #12]
 801a8dc:	059b      	lsls	r3, r3, #22
 801a8de:	d402      	bmi.n	801a8e6 <_fwrite_r+0x8e>
 801a8e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a8e2:	f000 facb 	bl	801ae7c <__retarget_lock_release_recursive>
 801a8e6:	fbb5 f0f8 	udiv	r0, r5, r8
 801a8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801a8f0 <fwrite>:
 801a8f0:	b507      	push	{r0, r1, r2, lr}
 801a8f2:	9300      	str	r3, [sp, #0]
 801a8f4:	4613      	mov	r3, r2
 801a8f6:	460a      	mov	r2, r1
 801a8f8:	4601      	mov	r1, r0
 801a8fa:	4803      	ldr	r0, [pc, #12]	@ (801a908 <fwrite+0x18>)
 801a8fc:	6800      	ldr	r0, [r0, #0]
 801a8fe:	f7ff ffab 	bl	801a858 <_fwrite_r>
 801a902:	b003      	add	sp, #12
 801a904:	f85d fb04 	ldr.w	pc, [sp], #4
 801a908:	200024a4 	.word	0x200024a4

0801a90c <iprintf>:
 801a90c:	b40f      	push	{r0, r1, r2, r3}
 801a90e:	b507      	push	{r0, r1, r2, lr}
 801a910:	4906      	ldr	r1, [pc, #24]	@ (801a92c <iprintf+0x20>)
 801a912:	ab04      	add	r3, sp, #16
 801a914:	6808      	ldr	r0, [r1, #0]
 801a916:	f853 2b04 	ldr.w	r2, [r3], #4
 801a91a:	6881      	ldr	r1, [r0, #8]
 801a91c:	9301      	str	r3, [sp, #4]
 801a91e:	f001 ff17 	bl	801c750 <_vfiprintf_r>
 801a922:	b003      	add	sp, #12
 801a924:	f85d eb04 	ldr.w	lr, [sp], #4
 801a928:	b004      	add	sp, #16
 801a92a:	4770      	bx	lr
 801a92c:	200024a4 	.word	0x200024a4

0801a930 <_puts_r>:
 801a930:	6a03      	ldr	r3, [r0, #32]
 801a932:	b570      	push	{r4, r5, r6, lr}
 801a934:	6884      	ldr	r4, [r0, #8]
 801a936:	4605      	mov	r5, r0
 801a938:	460e      	mov	r6, r1
 801a93a:	b90b      	cbnz	r3, 801a940 <_puts_r+0x10>
 801a93c:	f7ff ff56 	bl	801a7ec <__sinit>
 801a940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a942:	07db      	lsls	r3, r3, #31
 801a944:	d405      	bmi.n	801a952 <_puts_r+0x22>
 801a946:	89a3      	ldrh	r3, [r4, #12]
 801a948:	0598      	lsls	r0, r3, #22
 801a94a:	d402      	bmi.n	801a952 <_puts_r+0x22>
 801a94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a94e:	f000 fa94 	bl	801ae7a <__retarget_lock_acquire_recursive>
 801a952:	89a3      	ldrh	r3, [r4, #12]
 801a954:	0719      	lsls	r1, r3, #28
 801a956:	d502      	bpl.n	801a95e <_puts_r+0x2e>
 801a958:	6923      	ldr	r3, [r4, #16]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d135      	bne.n	801a9ca <_puts_r+0x9a>
 801a95e:	4621      	mov	r1, r4
 801a960:	4628      	mov	r0, r5
 801a962:	f000 f937 	bl	801abd4 <__swsetup_r>
 801a966:	b380      	cbz	r0, 801a9ca <_puts_r+0x9a>
 801a968:	f04f 35ff 	mov.w	r5, #4294967295
 801a96c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a96e:	07da      	lsls	r2, r3, #31
 801a970:	d405      	bmi.n	801a97e <_puts_r+0x4e>
 801a972:	89a3      	ldrh	r3, [r4, #12]
 801a974:	059b      	lsls	r3, r3, #22
 801a976:	d402      	bmi.n	801a97e <_puts_r+0x4e>
 801a978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a97a:	f000 fa7f 	bl	801ae7c <__retarget_lock_release_recursive>
 801a97e:	4628      	mov	r0, r5
 801a980:	bd70      	pop	{r4, r5, r6, pc}
 801a982:	2b00      	cmp	r3, #0
 801a984:	da04      	bge.n	801a990 <_puts_r+0x60>
 801a986:	69a2      	ldr	r2, [r4, #24]
 801a988:	4293      	cmp	r3, r2
 801a98a:	db17      	blt.n	801a9bc <_puts_r+0x8c>
 801a98c:	290a      	cmp	r1, #10
 801a98e:	d015      	beq.n	801a9bc <_puts_r+0x8c>
 801a990:	6823      	ldr	r3, [r4, #0]
 801a992:	1c5a      	adds	r2, r3, #1
 801a994:	6022      	str	r2, [r4, #0]
 801a996:	7019      	strb	r1, [r3, #0]
 801a998:	68a3      	ldr	r3, [r4, #8]
 801a99a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a99e:	3b01      	subs	r3, #1
 801a9a0:	60a3      	str	r3, [r4, #8]
 801a9a2:	2900      	cmp	r1, #0
 801a9a4:	d1ed      	bne.n	801a982 <_puts_r+0x52>
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	da11      	bge.n	801a9ce <_puts_r+0x9e>
 801a9aa:	4622      	mov	r2, r4
 801a9ac:	210a      	movs	r1, #10
 801a9ae:	4628      	mov	r0, r5
 801a9b0:	f000 f8d2 	bl	801ab58 <__swbuf_r>
 801a9b4:	3001      	adds	r0, #1
 801a9b6:	d0d7      	beq.n	801a968 <_puts_r+0x38>
 801a9b8:	250a      	movs	r5, #10
 801a9ba:	e7d7      	b.n	801a96c <_puts_r+0x3c>
 801a9bc:	4622      	mov	r2, r4
 801a9be:	4628      	mov	r0, r5
 801a9c0:	f000 f8ca 	bl	801ab58 <__swbuf_r>
 801a9c4:	3001      	adds	r0, #1
 801a9c6:	d1e7      	bne.n	801a998 <_puts_r+0x68>
 801a9c8:	e7ce      	b.n	801a968 <_puts_r+0x38>
 801a9ca:	3e01      	subs	r6, #1
 801a9cc:	e7e4      	b.n	801a998 <_puts_r+0x68>
 801a9ce:	6823      	ldr	r3, [r4, #0]
 801a9d0:	1c5a      	adds	r2, r3, #1
 801a9d2:	6022      	str	r2, [r4, #0]
 801a9d4:	220a      	movs	r2, #10
 801a9d6:	701a      	strb	r2, [r3, #0]
 801a9d8:	e7ee      	b.n	801a9b8 <_puts_r+0x88>
	...

0801a9dc <puts>:
 801a9dc:	4b02      	ldr	r3, [pc, #8]	@ (801a9e8 <puts+0xc>)
 801a9de:	4601      	mov	r1, r0
 801a9e0:	6818      	ldr	r0, [r3, #0]
 801a9e2:	f7ff bfa5 	b.w	801a930 <_puts_r>
 801a9e6:	bf00      	nop
 801a9e8:	200024a4 	.word	0x200024a4

0801a9ec <sniprintf>:
 801a9ec:	b40c      	push	{r2, r3}
 801a9ee:	b530      	push	{r4, r5, lr}
 801a9f0:	4b18      	ldr	r3, [pc, #96]	@ (801aa54 <sniprintf+0x68>)
 801a9f2:	1e0c      	subs	r4, r1, #0
 801a9f4:	681d      	ldr	r5, [r3, #0]
 801a9f6:	b09d      	sub	sp, #116	@ 0x74
 801a9f8:	da08      	bge.n	801aa0c <sniprintf+0x20>
 801a9fa:	238b      	movs	r3, #139	@ 0x8b
 801a9fc:	602b      	str	r3, [r5, #0]
 801a9fe:	f04f 30ff 	mov.w	r0, #4294967295
 801aa02:	b01d      	add	sp, #116	@ 0x74
 801aa04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa08:	b002      	add	sp, #8
 801aa0a:	4770      	bx	lr
 801aa0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801aa10:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aa14:	f04f 0300 	mov.w	r3, #0
 801aa18:	931b      	str	r3, [sp, #108]	@ 0x6c
 801aa1a:	bf14      	ite	ne
 801aa1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 801aa20:	4623      	moveq	r3, r4
 801aa22:	9304      	str	r3, [sp, #16]
 801aa24:	9307      	str	r3, [sp, #28]
 801aa26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801aa2a:	9002      	str	r0, [sp, #8]
 801aa2c:	9006      	str	r0, [sp, #24]
 801aa2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aa32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801aa34:	ab21      	add	r3, sp, #132	@ 0x84
 801aa36:	a902      	add	r1, sp, #8
 801aa38:	4628      	mov	r0, r5
 801aa3a:	9301      	str	r3, [sp, #4]
 801aa3c:	f001 fd62 	bl	801c504 <_svfiprintf_r>
 801aa40:	1c43      	adds	r3, r0, #1
 801aa42:	bfbc      	itt	lt
 801aa44:	238b      	movlt	r3, #139	@ 0x8b
 801aa46:	602b      	strlt	r3, [r5, #0]
 801aa48:	2c00      	cmp	r4, #0
 801aa4a:	d0da      	beq.n	801aa02 <sniprintf+0x16>
 801aa4c:	9b02      	ldr	r3, [sp, #8]
 801aa4e:	2200      	movs	r2, #0
 801aa50:	701a      	strb	r2, [r3, #0]
 801aa52:	e7d6      	b.n	801aa02 <sniprintf+0x16>
 801aa54:	200024a4 	.word	0x200024a4

0801aa58 <__sread>:
 801aa58:	b510      	push	{r4, lr}
 801aa5a:	460c      	mov	r4, r1
 801aa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa60:	f000 f9ac 	bl	801adbc <_read_r>
 801aa64:	2800      	cmp	r0, #0
 801aa66:	bfab      	itete	ge
 801aa68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801aa6a:	89a3      	ldrhlt	r3, [r4, #12]
 801aa6c:	181b      	addge	r3, r3, r0
 801aa6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801aa72:	bfac      	ite	ge
 801aa74:	6563      	strge	r3, [r4, #84]	@ 0x54
 801aa76:	81a3      	strhlt	r3, [r4, #12]
 801aa78:	bd10      	pop	{r4, pc}

0801aa7a <__swrite>:
 801aa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa7e:	461f      	mov	r7, r3
 801aa80:	898b      	ldrh	r3, [r1, #12]
 801aa82:	05db      	lsls	r3, r3, #23
 801aa84:	4605      	mov	r5, r0
 801aa86:	460c      	mov	r4, r1
 801aa88:	4616      	mov	r6, r2
 801aa8a:	d505      	bpl.n	801aa98 <__swrite+0x1e>
 801aa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa90:	2302      	movs	r3, #2
 801aa92:	2200      	movs	r2, #0
 801aa94:	f000 f980 	bl	801ad98 <_lseek_r>
 801aa98:	89a3      	ldrh	r3, [r4, #12]
 801aa9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801aaa2:	81a3      	strh	r3, [r4, #12]
 801aaa4:	4632      	mov	r2, r6
 801aaa6:	463b      	mov	r3, r7
 801aaa8:	4628      	mov	r0, r5
 801aaaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aaae:	f000 b9a7 	b.w	801ae00 <_write_r>

0801aab2 <__sseek>:
 801aab2:	b510      	push	{r4, lr}
 801aab4:	460c      	mov	r4, r1
 801aab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aaba:	f000 f96d 	bl	801ad98 <_lseek_r>
 801aabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aac2:	1c42      	adds	r2, r0, #1
 801aac4:	bf0b      	itete	eq
 801aac6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801aaca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801aace:	81a3      	strheq	r3, [r4, #12]
 801aad0:	81a3      	strhne	r3, [r4, #12]
 801aad2:	bf18      	it	ne
 801aad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801aad6:	bd10      	pop	{r4, pc}

0801aad8 <__sclose>:
 801aad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aadc:	f000 b94c 	b.w	801ad78 <_close_r>

0801aae0 <_vsniprintf_r>:
 801aae0:	b530      	push	{r4, r5, lr}
 801aae2:	4614      	mov	r4, r2
 801aae4:	2c00      	cmp	r4, #0
 801aae6:	b09b      	sub	sp, #108	@ 0x6c
 801aae8:	4605      	mov	r5, r0
 801aaea:	461a      	mov	r2, r3
 801aaec:	da05      	bge.n	801aafa <_vsniprintf_r+0x1a>
 801aaee:	238b      	movs	r3, #139	@ 0x8b
 801aaf0:	6003      	str	r3, [r0, #0]
 801aaf2:	f04f 30ff 	mov.w	r0, #4294967295
 801aaf6:	b01b      	add	sp, #108	@ 0x6c
 801aaf8:	bd30      	pop	{r4, r5, pc}
 801aafa:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801aafe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ab02:	f04f 0300 	mov.w	r3, #0
 801ab06:	9319      	str	r3, [sp, #100]	@ 0x64
 801ab08:	bf14      	ite	ne
 801ab0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ab0e:	4623      	moveq	r3, r4
 801ab10:	9302      	str	r3, [sp, #8]
 801ab12:	9305      	str	r3, [sp, #20]
 801ab14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ab18:	9100      	str	r1, [sp, #0]
 801ab1a:	9104      	str	r1, [sp, #16]
 801ab1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ab20:	4669      	mov	r1, sp
 801ab22:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ab24:	f001 fcee 	bl	801c504 <_svfiprintf_r>
 801ab28:	1c43      	adds	r3, r0, #1
 801ab2a:	bfbc      	itt	lt
 801ab2c:	238b      	movlt	r3, #139	@ 0x8b
 801ab2e:	602b      	strlt	r3, [r5, #0]
 801ab30:	2c00      	cmp	r4, #0
 801ab32:	d0e0      	beq.n	801aaf6 <_vsniprintf_r+0x16>
 801ab34:	9b00      	ldr	r3, [sp, #0]
 801ab36:	2200      	movs	r2, #0
 801ab38:	701a      	strb	r2, [r3, #0]
 801ab3a:	e7dc      	b.n	801aaf6 <_vsniprintf_r+0x16>

0801ab3c <vsniprintf>:
 801ab3c:	b507      	push	{r0, r1, r2, lr}
 801ab3e:	9300      	str	r3, [sp, #0]
 801ab40:	4613      	mov	r3, r2
 801ab42:	460a      	mov	r2, r1
 801ab44:	4601      	mov	r1, r0
 801ab46:	4803      	ldr	r0, [pc, #12]	@ (801ab54 <vsniprintf+0x18>)
 801ab48:	6800      	ldr	r0, [r0, #0]
 801ab4a:	f7ff ffc9 	bl	801aae0 <_vsniprintf_r>
 801ab4e:	b003      	add	sp, #12
 801ab50:	f85d fb04 	ldr.w	pc, [sp], #4
 801ab54:	200024a4 	.word	0x200024a4

0801ab58 <__swbuf_r>:
 801ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab5a:	460e      	mov	r6, r1
 801ab5c:	4614      	mov	r4, r2
 801ab5e:	4605      	mov	r5, r0
 801ab60:	b118      	cbz	r0, 801ab6a <__swbuf_r+0x12>
 801ab62:	6a03      	ldr	r3, [r0, #32]
 801ab64:	b90b      	cbnz	r3, 801ab6a <__swbuf_r+0x12>
 801ab66:	f7ff fe41 	bl	801a7ec <__sinit>
 801ab6a:	69a3      	ldr	r3, [r4, #24]
 801ab6c:	60a3      	str	r3, [r4, #8]
 801ab6e:	89a3      	ldrh	r3, [r4, #12]
 801ab70:	071a      	lsls	r2, r3, #28
 801ab72:	d501      	bpl.n	801ab78 <__swbuf_r+0x20>
 801ab74:	6923      	ldr	r3, [r4, #16]
 801ab76:	b943      	cbnz	r3, 801ab8a <__swbuf_r+0x32>
 801ab78:	4621      	mov	r1, r4
 801ab7a:	4628      	mov	r0, r5
 801ab7c:	f000 f82a 	bl	801abd4 <__swsetup_r>
 801ab80:	b118      	cbz	r0, 801ab8a <__swbuf_r+0x32>
 801ab82:	f04f 37ff 	mov.w	r7, #4294967295
 801ab86:	4638      	mov	r0, r7
 801ab88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab8a:	6823      	ldr	r3, [r4, #0]
 801ab8c:	6922      	ldr	r2, [r4, #16]
 801ab8e:	1a98      	subs	r0, r3, r2
 801ab90:	6963      	ldr	r3, [r4, #20]
 801ab92:	b2f6      	uxtb	r6, r6
 801ab94:	4283      	cmp	r3, r0
 801ab96:	4637      	mov	r7, r6
 801ab98:	dc05      	bgt.n	801aba6 <__swbuf_r+0x4e>
 801ab9a:	4621      	mov	r1, r4
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	f001 ff71 	bl	801ca84 <_fflush_r>
 801aba2:	2800      	cmp	r0, #0
 801aba4:	d1ed      	bne.n	801ab82 <__swbuf_r+0x2a>
 801aba6:	68a3      	ldr	r3, [r4, #8]
 801aba8:	3b01      	subs	r3, #1
 801abaa:	60a3      	str	r3, [r4, #8]
 801abac:	6823      	ldr	r3, [r4, #0]
 801abae:	1c5a      	adds	r2, r3, #1
 801abb0:	6022      	str	r2, [r4, #0]
 801abb2:	701e      	strb	r6, [r3, #0]
 801abb4:	6962      	ldr	r2, [r4, #20]
 801abb6:	1c43      	adds	r3, r0, #1
 801abb8:	429a      	cmp	r2, r3
 801abba:	d004      	beq.n	801abc6 <__swbuf_r+0x6e>
 801abbc:	89a3      	ldrh	r3, [r4, #12]
 801abbe:	07db      	lsls	r3, r3, #31
 801abc0:	d5e1      	bpl.n	801ab86 <__swbuf_r+0x2e>
 801abc2:	2e0a      	cmp	r6, #10
 801abc4:	d1df      	bne.n	801ab86 <__swbuf_r+0x2e>
 801abc6:	4621      	mov	r1, r4
 801abc8:	4628      	mov	r0, r5
 801abca:	f001 ff5b 	bl	801ca84 <_fflush_r>
 801abce:	2800      	cmp	r0, #0
 801abd0:	d0d9      	beq.n	801ab86 <__swbuf_r+0x2e>
 801abd2:	e7d6      	b.n	801ab82 <__swbuf_r+0x2a>

0801abd4 <__swsetup_r>:
 801abd4:	b538      	push	{r3, r4, r5, lr}
 801abd6:	4b28      	ldr	r3, [pc, #160]	@ (801ac78 <__swsetup_r+0xa4>)
 801abd8:	4605      	mov	r5, r0
 801abda:	6818      	ldr	r0, [r3, #0]
 801abdc:	460c      	mov	r4, r1
 801abde:	b118      	cbz	r0, 801abe8 <__swsetup_r+0x14>
 801abe0:	6a03      	ldr	r3, [r0, #32]
 801abe2:	b90b      	cbnz	r3, 801abe8 <__swsetup_r+0x14>
 801abe4:	f7ff fe02 	bl	801a7ec <__sinit>
 801abe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801abec:	071a      	lsls	r2, r3, #28
 801abee:	d421      	bmi.n	801ac34 <__swsetup_r+0x60>
 801abf0:	06d8      	lsls	r0, r3, #27
 801abf2:	d407      	bmi.n	801ac04 <__swsetup_r+0x30>
 801abf4:	2209      	movs	r2, #9
 801abf6:	602a      	str	r2, [r5, #0]
 801abf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801abfc:	81a3      	strh	r3, [r4, #12]
 801abfe:	f04f 30ff 	mov.w	r0, #4294967295
 801ac02:	e030      	b.n	801ac66 <__swsetup_r+0x92>
 801ac04:	0759      	lsls	r1, r3, #29
 801ac06:	d512      	bpl.n	801ac2e <__swsetup_r+0x5a>
 801ac08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ac0a:	b141      	cbz	r1, 801ac1e <__swsetup_r+0x4a>
 801ac0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ac10:	4299      	cmp	r1, r3
 801ac12:	d002      	beq.n	801ac1a <__swsetup_r+0x46>
 801ac14:	4628      	mov	r0, r5
 801ac16:	f001 f83b 	bl	801bc90 <_free_r>
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	6363      	str	r3, [r4, #52]	@ 0x34
 801ac1e:	2200      	movs	r2, #0
 801ac20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac24:	6062      	str	r2, [r4, #4]
 801ac26:	6922      	ldr	r2, [r4, #16]
 801ac28:	6022      	str	r2, [r4, #0]
 801ac2a:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ac2e:	f043 0308 	orr.w	r3, r3, #8
 801ac32:	81a3      	strh	r3, [r4, #12]
 801ac34:	6922      	ldr	r2, [r4, #16]
 801ac36:	b93a      	cbnz	r2, 801ac48 <__swsetup_r+0x74>
 801ac38:	059a      	lsls	r2, r3, #22
 801ac3a:	d501      	bpl.n	801ac40 <__swsetup_r+0x6c>
 801ac3c:	0618      	lsls	r0, r3, #24
 801ac3e:	d503      	bpl.n	801ac48 <__swsetup_r+0x74>
 801ac40:	4621      	mov	r1, r4
 801ac42:	4628      	mov	r0, r5
 801ac44:	f001 ff7c 	bl	801cb40 <__smakebuf_r>
 801ac48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ac4c:	f013 0201 	ands.w	r2, r3, #1
 801ac50:	d00a      	beq.n	801ac68 <__swsetup_r+0x94>
 801ac52:	2200      	movs	r2, #0
 801ac54:	60a2      	str	r2, [r4, #8]
 801ac56:	6962      	ldr	r2, [r4, #20]
 801ac58:	4252      	negs	r2, r2
 801ac5a:	61a2      	str	r2, [r4, #24]
 801ac5c:	6922      	ldr	r2, [r4, #16]
 801ac5e:	b942      	cbnz	r2, 801ac72 <__swsetup_r+0x9e>
 801ac60:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ac64:	d1c8      	bne.n	801abf8 <__swsetup_r+0x24>
 801ac66:	bd38      	pop	{r3, r4, r5, pc}
 801ac68:	0799      	lsls	r1, r3, #30
 801ac6a:	bf58      	it	pl
 801ac6c:	6962      	ldrpl	r2, [r4, #20]
 801ac6e:	60a2      	str	r2, [r4, #8]
 801ac70:	e7f4      	b.n	801ac5c <__swsetup_r+0x88>
 801ac72:	2000      	movs	r0, #0
 801ac74:	e7f7      	b.n	801ac66 <__swsetup_r+0x92>
 801ac76:	bf00      	nop
 801ac78:	200024a4 	.word	0x200024a4

0801ac7c <memcmp>:
 801ac7c:	b510      	push	{r4, lr}
 801ac7e:	3901      	subs	r1, #1
 801ac80:	4402      	add	r2, r0
 801ac82:	4290      	cmp	r0, r2
 801ac84:	d101      	bne.n	801ac8a <memcmp+0xe>
 801ac86:	2000      	movs	r0, #0
 801ac88:	e005      	b.n	801ac96 <memcmp+0x1a>
 801ac8a:	7803      	ldrb	r3, [r0, #0]
 801ac8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ac90:	42a3      	cmp	r3, r4
 801ac92:	d001      	beq.n	801ac98 <memcmp+0x1c>
 801ac94:	1b18      	subs	r0, r3, r4
 801ac96:	bd10      	pop	{r4, pc}
 801ac98:	3001      	adds	r0, #1
 801ac9a:	e7f2      	b.n	801ac82 <memcmp+0x6>

0801ac9c <memmove>:
 801ac9c:	4288      	cmp	r0, r1
 801ac9e:	b510      	push	{r4, lr}
 801aca0:	eb01 0402 	add.w	r4, r1, r2
 801aca4:	d902      	bls.n	801acac <memmove+0x10>
 801aca6:	4284      	cmp	r4, r0
 801aca8:	4623      	mov	r3, r4
 801acaa:	d807      	bhi.n	801acbc <memmove+0x20>
 801acac:	1e43      	subs	r3, r0, #1
 801acae:	42a1      	cmp	r1, r4
 801acb0:	d007      	beq.n	801acc2 <memmove+0x26>
 801acb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801acb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801acba:	e7f8      	b.n	801acae <memmove+0x12>
 801acbc:	4402      	add	r2, r0
 801acbe:	4282      	cmp	r2, r0
 801acc0:	d100      	bne.n	801acc4 <memmove+0x28>
 801acc2:	bd10      	pop	{r4, pc}
 801acc4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801acc8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801accc:	e7f7      	b.n	801acbe <memmove+0x22>

0801acce <memset>:
 801acce:	4402      	add	r2, r0
 801acd0:	4603      	mov	r3, r0
 801acd2:	4293      	cmp	r3, r2
 801acd4:	d100      	bne.n	801acd8 <memset+0xa>
 801acd6:	4770      	bx	lr
 801acd8:	f803 1b01 	strb.w	r1, [r3], #1
 801acdc:	e7f9      	b.n	801acd2 <memset+0x4>

0801acde <strchr>:
 801acde:	b2c9      	uxtb	r1, r1
 801ace0:	4603      	mov	r3, r0
 801ace2:	4618      	mov	r0, r3
 801ace4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ace8:	b112      	cbz	r2, 801acf0 <strchr+0x12>
 801acea:	428a      	cmp	r2, r1
 801acec:	d1f9      	bne.n	801ace2 <strchr+0x4>
 801acee:	4770      	bx	lr
 801acf0:	2900      	cmp	r1, #0
 801acf2:	bf18      	it	ne
 801acf4:	2000      	movne	r0, #0
 801acf6:	4770      	bx	lr

0801acf8 <strncmp>:
 801acf8:	b510      	push	{r4, lr}
 801acfa:	b16a      	cbz	r2, 801ad18 <strncmp+0x20>
 801acfc:	3901      	subs	r1, #1
 801acfe:	1884      	adds	r4, r0, r2
 801ad00:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ad08:	429a      	cmp	r2, r3
 801ad0a:	d103      	bne.n	801ad14 <strncmp+0x1c>
 801ad0c:	42a0      	cmp	r0, r4
 801ad0e:	d001      	beq.n	801ad14 <strncmp+0x1c>
 801ad10:	2a00      	cmp	r2, #0
 801ad12:	d1f5      	bne.n	801ad00 <strncmp+0x8>
 801ad14:	1ad0      	subs	r0, r2, r3
 801ad16:	bd10      	pop	{r4, pc}
 801ad18:	4610      	mov	r0, r2
 801ad1a:	e7fc      	b.n	801ad16 <strncmp+0x1e>

0801ad1c <strncpy>:
 801ad1c:	b510      	push	{r4, lr}
 801ad1e:	3901      	subs	r1, #1
 801ad20:	4603      	mov	r3, r0
 801ad22:	b132      	cbz	r2, 801ad32 <strncpy+0x16>
 801ad24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ad28:	f803 4b01 	strb.w	r4, [r3], #1
 801ad2c:	3a01      	subs	r2, #1
 801ad2e:	2c00      	cmp	r4, #0
 801ad30:	d1f7      	bne.n	801ad22 <strncpy+0x6>
 801ad32:	441a      	add	r2, r3
 801ad34:	2100      	movs	r1, #0
 801ad36:	4293      	cmp	r3, r2
 801ad38:	d100      	bne.n	801ad3c <strncpy+0x20>
 801ad3a:	bd10      	pop	{r4, pc}
 801ad3c:	f803 1b01 	strb.w	r1, [r3], #1
 801ad40:	e7f9      	b.n	801ad36 <strncpy+0x1a>

0801ad42 <strstr>:
 801ad42:	780a      	ldrb	r2, [r1, #0]
 801ad44:	b570      	push	{r4, r5, r6, lr}
 801ad46:	b96a      	cbnz	r2, 801ad64 <strstr+0x22>
 801ad48:	bd70      	pop	{r4, r5, r6, pc}
 801ad4a:	429a      	cmp	r2, r3
 801ad4c:	d109      	bne.n	801ad62 <strstr+0x20>
 801ad4e:	460c      	mov	r4, r1
 801ad50:	4605      	mov	r5, r0
 801ad52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d0f6      	beq.n	801ad48 <strstr+0x6>
 801ad5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ad5e:	429e      	cmp	r6, r3
 801ad60:	d0f7      	beq.n	801ad52 <strstr+0x10>
 801ad62:	3001      	adds	r0, #1
 801ad64:	7803      	ldrb	r3, [r0, #0]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d1ef      	bne.n	801ad4a <strstr+0x8>
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	e7ec      	b.n	801ad48 <strstr+0x6>
	...

0801ad70 <_localeconv_r>:
 801ad70:	4800      	ldr	r0, [pc, #0]	@ (801ad74 <_localeconv_r+0x4>)
 801ad72:	4770      	bx	lr
 801ad74:	200025e8 	.word	0x200025e8

0801ad78 <_close_r>:
 801ad78:	b538      	push	{r3, r4, r5, lr}
 801ad7a:	4d06      	ldr	r5, [pc, #24]	@ (801ad94 <_close_r+0x1c>)
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	4604      	mov	r4, r0
 801ad80:	4608      	mov	r0, r1
 801ad82:	602b      	str	r3, [r5, #0]
 801ad84:	f7ee fd16 	bl	80097b4 <_close>
 801ad88:	1c43      	adds	r3, r0, #1
 801ad8a:	d102      	bne.n	801ad92 <_close_r+0x1a>
 801ad8c:	682b      	ldr	r3, [r5, #0]
 801ad8e:	b103      	cbz	r3, 801ad92 <_close_r+0x1a>
 801ad90:	6023      	str	r3, [r4, #0]
 801ad92:	bd38      	pop	{r3, r4, r5, pc}
 801ad94:	2000d39c 	.word	0x2000d39c

0801ad98 <_lseek_r>:
 801ad98:	b538      	push	{r3, r4, r5, lr}
 801ad9a:	4d07      	ldr	r5, [pc, #28]	@ (801adb8 <_lseek_r+0x20>)
 801ad9c:	4604      	mov	r4, r0
 801ad9e:	4608      	mov	r0, r1
 801ada0:	4611      	mov	r1, r2
 801ada2:	2200      	movs	r2, #0
 801ada4:	602a      	str	r2, [r5, #0]
 801ada6:	461a      	mov	r2, r3
 801ada8:	f7ee fd0e 	bl	80097c8 <_lseek>
 801adac:	1c43      	adds	r3, r0, #1
 801adae:	d102      	bne.n	801adb6 <_lseek_r+0x1e>
 801adb0:	682b      	ldr	r3, [r5, #0]
 801adb2:	b103      	cbz	r3, 801adb6 <_lseek_r+0x1e>
 801adb4:	6023      	str	r3, [r4, #0]
 801adb6:	bd38      	pop	{r3, r4, r5, pc}
 801adb8:	2000d39c 	.word	0x2000d39c

0801adbc <_read_r>:
 801adbc:	b538      	push	{r3, r4, r5, lr}
 801adbe:	4d07      	ldr	r5, [pc, #28]	@ (801addc <_read_r+0x20>)
 801adc0:	4604      	mov	r4, r0
 801adc2:	4608      	mov	r0, r1
 801adc4:	4611      	mov	r1, r2
 801adc6:	2200      	movs	r2, #0
 801adc8:	602a      	str	r2, [r5, #0]
 801adca:	461a      	mov	r2, r3
 801adcc:	f7ee fcd4 	bl	8009778 <_read>
 801add0:	1c43      	adds	r3, r0, #1
 801add2:	d102      	bne.n	801adda <_read_r+0x1e>
 801add4:	682b      	ldr	r3, [r5, #0]
 801add6:	b103      	cbz	r3, 801adda <_read_r+0x1e>
 801add8:	6023      	str	r3, [r4, #0]
 801adda:	bd38      	pop	{r3, r4, r5, pc}
 801addc:	2000d39c 	.word	0x2000d39c

0801ade0 <_sbrk_r>:
 801ade0:	b538      	push	{r3, r4, r5, lr}
 801ade2:	4d06      	ldr	r5, [pc, #24]	@ (801adfc <_sbrk_r+0x1c>)
 801ade4:	2300      	movs	r3, #0
 801ade6:	4604      	mov	r4, r0
 801ade8:	4608      	mov	r0, r1
 801adea:	602b      	str	r3, [r5, #0]
 801adec:	f7ee fcee 	bl	80097cc <_sbrk>
 801adf0:	1c43      	adds	r3, r0, #1
 801adf2:	d102      	bne.n	801adfa <_sbrk_r+0x1a>
 801adf4:	682b      	ldr	r3, [r5, #0]
 801adf6:	b103      	cbz	r3, 801adfa <_sbrk_r+0x1a>
 801adf8:	6023      	str	r3, [r4, #0]
 801adfa:	bd38      	pop	{r3, r4, r5, pc}
 801adfc:	2000d39c 	.word	0x2000d39c

0801ae00 <_write_r>:
 801ae00:	b538      	push	{r3, r4, r5, lr}
 801ae02:	4d07      	ldr	r5, [pc, #28]	@ (801ae20 <_write_r+0x20>)
 801ae04:	4604      	mov	r4, r0
 801ae06:	4608      	mov	r0, r1
 801ae08:	4611      	mov	r1, r2
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	602a      	str	r2, [r5, #0]
 801ae0e:	461a      	mov	r2, r3
 801ae10:	f7ee fcc2 	bl	8009798 <_write>
 801ae14:	1c43      	adds	r3, r0, #1
 801ae16:	d102      	bne.n	801ae1e <_write_r+0x1e>
 801ae18:	682b      	ldr	r3, [r5, #0]
 801ae1a:	b103      	cbz	r3, 801ae1e <_write_r+0x1e>
 801ae1c:	6023      	str	r3, [r4, #0]
 801ae1e:	bd38      	pop	{r3, r4, r5, pc}
 801ae20:	2000d39c 	.word	0x2000d39c

0801ae24 <__errno>:
 801ae24:	4b01      	ldr	r3, [pc, #4]	@ (801ae2c <__errno+0x8>)
 801ae26:	6818      	ldr	r0, [r3, #0]
 801ae28:	4770      	bx	lr
 801ae2a:	bf00      	nop
 801ae2c:	200024a4 	.word	0x200024a4

0801ae30 <__libc_init_array>:
 801ae30:	b570      	push	{r4, r5, r6, lr}
 801ae32:	4b0d      	ldr	r3, [pc, #52]	@ (801ae68 <__libc_init_array+0x38>)
 801ae34:	4d0d      	ldr	r5, [pc, #52]	@ (801ae6c <__libc_init_array+0x3c>)
 801ae36:	1b5b      	subs	r3, r3, r5
 801ae38:	109c      	asrs	r4, r3, #2
 801ae3a:	2600      	movs	r6, #0
 801ae3c:	42a6      	cmp	r6, r4
 801ae3e:	d109      	bne.n	801ae54 <__libc_init_array+0x24>
 801ae40:	f002 faae 	bl	801d3a0 <_init>
 801ae44:	4d0a      	ldr	r5, [pc, #40]	@ (801ae70 <__libc_init_array+0x40>)
 801ae46:	4b0b      	ldr	r3, [pc, #44]	@ (801ae74 <__libc_init_array+0x44>)
 801ae48:	1b5b      	subs	r3, r3, r5
 801ae4a:	109c      	asrs	r4, r3, #2
 801ae4c:	2600      	movs	r6, #0
 801ae4e:	42a6      	cmp	r6, r4
 801ae50:	d105      	bne.n	801ae5e <__libc_init_array+0x2e>
 801ae52:	bd70      	pop	{r4, r5, r6, pc}
 801ae54:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae58:	4798      	blx	r3
 801ae5a:	3601      	adds	r6, #1
 801ae5c:	e7ee      	b.n	801ae3c <__libc_init_array+0xc>
 801ae5e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae62:	4798      	blx	r3
 801ae64:	3601      	adds	r6, #1
 801ae66:	e7f2      	b.n	801ae4e <__libc_init_array+0x1e>
 801ae68:	0801f070 	.word	0x0801f070
 801ae6c:	0801f070 	.word	0x0801f070
 801ae70:	0801f070 	.word	0x0801f070
 801ae74:	0801f080 	.word	0x0801f080

0801ae78 <__retarget_lock_init_recursive>:
 801ae78:	4770      	bx	lr

0801ae7a <__retarget_lock_acquire_recursive>:
 801ae7a:	4770      	bx	lr

0801ae7c <__retarget_lock_release_recursive>:
 801ae7c:	4770      	bx	lr

0801ae7e <strcpy>:
 801ae7e:	4603      	mov	r3, r0
 801ae80:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae84:	f803 2b01 	strb.w	r2, [r3], #1
 801ae88:	2a00      	cmp	r2, #0
 801ae8a:	d1f9      	bne.n	801ae80 <strcpy+0x2>
 801ae8c:	4770      	bx	lr

0801ae8e <memcpy>:
 801ae8e:	440a      	add	r2, r1
 801ae90:	4291      	cmp	r1, r2
 801ae92:	f100 33ff 	add.w	r3, r0, #4294967295
 801ae96:	d100      	bne.n	801ae9a <memcpy+0xc>
 801ae98:	4770      	bx	lr
 801ae9a:	b510      	push	{r4, lr}
 801ae9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aea4:	4291      	cmp	r1, r2
 801aea6:	d1f9      	bne.n	801ae9c <memcpy+0xe>
 801aea8:	bd10      	pop	{r4, pc}
	...

0801aeac <__call_exitprocs>:
 801aeac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeb0:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 801af60 <__call_exitprocs+0xb4>
 801aeb4:	9001      	str	r0, [sp, #4]
 801aeb6:	f8d8 0000 	ldr.w	r0, [r8]
 801aeba:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 801af64 <__call_exitprocs+0xb8>
 801aebe:	460f      	mov	r7, r1
 801aec0:	f7ff ffdb 	bl	801ae7a <__retarget_lock_acquire_recursive>
 801aec4:	f8d9 5000 	ldr.w	r5, [r9]
 801aec8:	b935      	cbnz	r5, 801aed8 <__call_exitprocs+0x2c>
 801aeca:	f8d8 0000 	ldr.w	r0, [r8]
 801aece:	b003      	add	sp, #12
 801aed0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed4:	f7ff bfd2 	b.w	801ae7c <__retarget_lock_release_recursive>
 801aed8:	686c      	ldr	r4, [r5, #4]
 801aeda:	f8d5 b088 	ldr.w	fp, [r5, #136]	@ 0x88
 801aede:	1e66      	subs	r6, r4, #1
 801aee0:	3401      	adds	r4, #1
 801aee2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801aee6:	f10b 0a80 	add.w	sl, fp, #128	@ 0x80
 801aeea:	2e00      	cmp	r6, #0
 801aeec:	dbed      	blt.n	801aeca <__call_exitprocs+0x1e>
 801aeee:	b14f      	cbz	r7, 801af04 <__call_exitprocs+0x58>
 801aef0:	f1bb 0f00 	cmp.w	fp, #0
 801aef4:	d102      	bne.n	801aefc <__call_exitprocs+0x50>
 801aef6:	3e01      	subs	r6, #1
 801aef8:	3c04      	subs	r4, #4
 801aefa:	e7f6      	b.n	801aeea <__call_exitprocs+0x3e>
 801aefc:	f85a 2026 	ldr.w	r2, [sl, r6, lsl #2]
 801af00:	42ba      	cmp	r2, r7
 801af02:	d1f8      	bne.n	801aef6 <__call_exitprocs+0x4a>
 801af04:	6869      	ldr	r1, [r5, #4]
 801af06:	6822      	ldr	r2, [r4, #0]
 801af08:	3901      	subs	r1, #1
 801af0a:	42b1      	cmp	r1, r6
 801af0c:	bf16      	itet	ne
 801af0e:	2300      	movne	r3, #0
 801af10:	606e      	streq	r6, [r5, #4]
 801af12:	6023      	strne	r3, [r4, #0]
 801af14:	2a00      	cmp	r2, #0
 801af16:	d0ee      	beq.n	801aef6 <__call_exitprocs+0x4a>
 801af18:	686b      	ldr	r3, [r5, #4]
 801af1a:	9300      	str	r3, [sp, #0]
 801af1c:	f1bb 0f00 	cmp.w	fp, #0
 801af20:	d007      	beq.n	801af32 <__call_exitprocs+0x86>
 801af22:	f8db 1100 	ldr.w	r1, [fp, #256]	@ 0x100
 801af26:	2301      	movs	r3, #1
 801af28:	fa03 fc06 	lsl.w	ip, r3, r6
 801af2c:	ea1c 0f01 	tst.w	ip, r1
 801af30:	d109      	bne.n	801af46 <__call_exitprocs+0x9a>
 801af32:	4790      	blx	r2
 801af34:	6869      	ldr	r1, [r5, #4]
 801af36:	9b00      	ldr	r3, [sp, #0]
 801af38:	f8d9 2000 	ldr.w	r2, [r9]
 801af3c:	4299      	cmp	r1, r3
 801af3e:	d1c1      	bne.n	801aec4 <__call_exitprocs+0x18>
 801af40:	4295      	cmp	r5, r2
 801af42:	d0d8      	beq.n	801aef6 <__call_exitprocs+0x4a>
 801af44:	e7be      	b.n	801aec4 <__call_exitprocs+0x18>
 801af46:	f8db 0104 	ldr.w	r0, [fp, #260]	@ 0x104
 801af4a:	f85b 1026 	ldr.w	r1, [fp, r6, lsl #2]
 801af4e:	ea1c 0f00 	tst.w	ip, r0
 801af52:	d102      	bne.n	801af5a <__call_exitprocs+0xae>
 801af54:	9801      	ldr	r0, [sp, #4]
 801af56:	4790      	blx	r2
 801af58:	e7ec      	b.n	801af34 <__call_exitprocs+0x88>
 801af5a:	4608      	mov	r0, r1
 801af5c:	4790      	blx	r2
 801af5e:	e7e9      	b.n	801af34 <__call_exitprocs+0x88>
 801af60:	200024f4 	.word	0x200024f4
 801af64:	2000d3a4 	.word	0x2000d3a4

0801af68 <__assert_func>:
 801af68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801af6a:	4614      	mov	r4, r2
 801af6c:	461a      	mov	r2, r3
 801af6e:	4b09      	ldr	r3, [pc, #36]	@ (801af94 <__assert_func+0x2c>)
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	4605      	mov	r5, r0
 801af74:	68d8      	ldr	r0, [r3, #12]
 801af76:	b14c      	cbz	r4, 801af8c <__assert_func+0x24>
 801af78:	4b07      	ldr	r3, [pc, #28]	@ (801af98 <__assert_func+0x30>)
 801af7a:	9100      	str	r1, [sp, #0]
 801af7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801af80:	4906      	ldr	r1, [pc, #24]	@ (801af9c <__assert_func+0x34>)
 801af82:	462b      	mov	r3, r5
 801af84:	f001 fda6 	bl	801cad4 <fiprintf>
 801af88:	f001 fe36 	bl	801cbf8 <abort>
 801af8c:	4b04      	ldr	r3, [pc, #16]	@ (801afa0 <__assert_func+0x38>)
 801af8e:	461c      	mov	r4, r3
 801af90:	e7f3      	b.n	801af7a <__assert_func+0x12>
 801af92:	bf00      	nop
 801af94:	200024a4 	.word	0x200024a4
 801af98:	0801ecb9 	.word	0x0801ecb9
 801af9c:	0801ecc6 	.word	0x0801ecc6
 801afa0:	0801ecf4 	.word	0x0801ecf4

0801afa4 <quorem>:
 801afa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa8:	6903      	ldr	r3, [r0, #16]
 801afaa:	690c      	ldr	r4, [r1, #16]
 801afac:	42a3      	cmp	r3, r4
 801afae:	4607      	mov	r7, r0
 801afb0:	db7e      	blt.n	801b0b0 <quorem+0x10c>
 801afb2:	3c01      	subs	r4, #1
 801afb4:	f101 0814 	add.w	r8, r1, #20
 801afb8:	00a3      	lsls	r3, r4, #2
 801afba:	f100 0514 	add.w	r5, r0, #20
 801afbe:	9300      	str	r3, [sp, #0]
 801afc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801afc4:	9301      	str	r3, [sp, #4]
 801afc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801afca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801afce:	3301      	adds	r3, #1
 801afd0:	429a      	cmp	r2, r3
 801afd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801afd6:	fbb2 f6f3 	udiv	r6, r2, r3
 801afda:	d32e      	bcc.n	801b03a <quorem+0x96>
 801afdc:	f04f 0a00 	mov.w	sl, #0
 801afe0:	46c4      	mov	ip, r8
 801afe2:	46ae      	mov	lr, r5
 801afe4:	46d3      	mov	fp, sl
 801afe6:	f85c 3b04 	ldr.w	r3, [ip], #4
 801afea:	b298      	uxth	r0, r3
 801afec:	fb06 a000 	mla	r0, r6, r0, sl
 801aff0:	0c02      	lsrs	r2, r0, #16
 801aff2:	0c1b      	lsrs	r3, r3, #16
 801aff4:	fb06 2303 	mla	r3, r6, r3, r2
 801aff8:	f8de 2000 	ldr.w	r2, [lr]
 801affc:	b280      	uxth	r0, r0
 801affe:	b292      	uxth	r2, r2
 801b000:	1a12      	subs	r2, r2, r0
 801b002:	445a      	add	r2, fp
 801b004:	f8de 0000 	ldr.w	r0, [lr]
 801b008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b00c:	b29b      	uxth	r3, r3
 801b00e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b012:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b016:	b292      	uxth	r2, r2
 801b018:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b01c:	45e1      	cmp	r9, ip
 801b01e:	f84e 2b04 	str.w	r2, [lr], #4
 801b022:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b026:	d2de      	bcs.n	801afe6 <quorem+0x42>
 801b028:	9b00      	ldr	r3, [sp, #0]
 801b02a:	58eb      	ldr	r3, [r5, r3]
 801b02c:	b92b      	cbnz	r3, 801b03a <quorem+0x96>
 801b02e:	9b01      	ldr	r3, [sp, #4]
 801b030:	3b04      	subs	r3, #4
 801b032:	429d      	cmp	r5, r3
 801b034:	461a      	mov	r2, r3
 801b036:	d32f      	bcc.n	801b098 <quorem+0xf4>
 801b038:	613c      	str	r4, [r7, #16]
 801b03a:	4638      	mov	r0, r7
 801b03c:	f001 f8ee 	bl	801c21c <__mcmp>
 801b040:	2800      	cmp	r0, #0
 801b042:	db25      	blt.n	801b090 <quorem+0xec>
 801b044:	4629      	mov	r1, r5
 801b046:	2000      	movs	r0, #0
 801b048:	f858 2b04 	ldr.w	r2, [r8], #4
 801b04c:	f8d1 c000 	ldr.w	ip, [r1]
 801b050:	fa1f fe82 	uxth.w	lr, r2
 801b054:	fa1f f38c 	uxth.w	r3, ip
 801b058:	eba3 030e 	sub.w	r3, r3, lr
 801b05c:	4403      	add	r3, r0
 801b05e:	0c12      	lsrs	r2, r2, #16
 801b060:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b064:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b068:	b29b      	uxth	r3, r3
 801b06a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b06e:	45c1      	cmp	r9, r8
 801b070:	f841 3b04 	str.w	r3, [r1], #4
 801b074:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b078:	d2e6      	bcs.n	801b048 <quorem+0xa4>
 801b07a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b07e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b082:	b922      	cbnz	r2, 801b08e <quorem+0xea>
 801b084:	3b04      	subs	r3, #4
 801b086:	429d      	cmp	r5, r3
 801b088:	461a      	mov	r2, r3
 801b08a:	d30b      	bcc.n	801b0a4 <quorem+0x100>
 801b08c:	613c      	str	r4, [r7, #16]
 801b08e:	3601      	adds	r6, #1
 801b090:	4630      	mov	r0, r6
 801b092:	b003      	add	sp, #12
 801b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b098:	6812      	ldr	r2, [r2, #0]
 801b09a:	3b04      	subs	r3, #4
 801b09c:	2a00      	cmp	r2, #0
 801b09e:	d1cb      	bne.n	801b038 <quorem+0x94>
 801b0a0:	3c01      	subs	r4, #1
 801b0a2:	e7c6      	b.n	801b032 <quorem+0x8e>
 801b0a4:	6812      	ldr	r2, [r2, #0]
 801b0a6:	3b04      	subs	r3, #4
 801b0a8:	2a00      	cmp	r2, #0
 801b0aa:	d1ef      	bne.n	801b08c <quorem+0xe8>
 801b0ac:	3c01      	subs	r4, #1
 801b0ae:	e7ea      	b.n	801b086 <quorem+0xe2>
 801b0b0:	2000      	movs	r0, #0
 801b0b2:	e7ee      	b.n	801b092 <quorem+0xee>
 801b0b4:	0000      	movs	r0, r0
	...

0801b0b8 <_dtoa_r>:
 801b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0bc:	b099      	sub	sp, #100	@ 0x64
 801b0be:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 801b0c2:	920c      	str	r2, [sp, #48]	@ 0x30
 801b0c4:	69c2      	ldr	r2, [r0, #28]
 801b0c6:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 801b0c8:	910a      	str	r1, [sp, #40]	@ 0x28
 801b0ca:	ec57 6b10 	vmov	r6, r7, d0
 801b0ce:	4681      	mov	r9, r0
 801b0d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b0d2:	b982      	cbnz	r2, 801b0f6 <_dtoa_r+0x3e>
 801b0d4:	2010      	movs	r0, #16
 801b0d6:	f7fe fccd 	bl	8019a74 <malloc>
 801b0da:	4602      	mov	r2, r0
 801b0dc:	f8c9 001c 	str.w	r0, [r9, #28]
 801b0e0:	b920      	cbnz	r0, 801b0ec <_dtoa_r+0x34>
 801b0e2:	4bad      	ldr	r3, [pc, #692]	@ (801b398 <_dtoa_r+0x2e0>)
 801b0e4:	21ef      	movs	r1, #239	@ 0xef
 801b0e6:	48ad      	ldr	r0, [pc, #692]	@ (801b39c <_dtoa_r+0x2e4>)
 801b0e8:	f7ff ff3e 	bl	801af68 <__assert_func>
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801b0f2:	6003      	str	r3, [r0, #0]
 801b0f4:	60c3      	str	r3, [r0, #12]
 801b0f6:	6811      	ldr	r1, [r2, #0]
 801b0f8:	b159      	cbz	r1, 801b112 <_dtoa_r+0x5a>
 801b0fa:	6852      	ldr	r2, [r2, #4]
 801b0fc:	604a      	str	r2, [r1, #4]
 801b0fe:	2301      	movs	r3, #1
 801b100:	4093      	lsls	r3, r2
 801b102:	608b      	str	r3, [r1, #8]
 801b104:	4648      	mov	r0, r9
 801b106:	f000 fe4b 	bl	801bda0 <_Bfree>
 801b10a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b10e:	2200      	movs	r2, #0
 801b110:	601a      	str	r2, [r3, #0]
 801b112:	f1b7 0800 	subs.w	r8, r7, #0
 801b116:	bfb5      	itete	lt
 801b118:	2301      	movlt	r3, #1
 801b11a:	2300      	movge	r3, #0
 801b11c:	6023      	strlt	r3, [r4, #0]
 801b11e:	6023      	strge	r3, [r4, #0]
 801b120:	4b9f      	ldr	r3, [pc, #636]	@ (801b3a0 <_dtoa_r+0x2e8>)
 801b122:	bfbc      	itt	lt
 801b124:	f028 4800 	biclt.w	r8, r8, #2147483648	@ 0x80000000
 801b128:	f8cd 803c 	strlt.w	r8, [sp, #60]	@ 0x3c
 801b12c:	ea33 0308 	bics.w	r3, r3, r8
 801b130:	d11a      	bne.n	801b168 <_dtoa_r+0xb0>
 801b132:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b134:	f3c8 0813 	ubfx	r8, r8, #0, #20
 801b138:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b13c:	ea58 0806 	orrs.w	r8, r8, r6
 801b140:	6013      	str	r3, [r2, #0]
 801b142:	f000 856c 	beq.w	801bc1e <_dtoa_r+0xb66>
 801b146:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b148:	b953      	cbnz	r3, 801b160 <_dtoa_r+0xa8>
 801b14a:	4b96      	ldr	r3, [pc, #600]	@ (801b3a4 <_dtoa_r+0x2ec>)
 801b14c:	e021      	b.n	801b192 <_dtoa_r+0xda>
 801b14e:	4b96      	ldr	r3, [pc, #600]	@ (801b3a8 <_dtoa_r+0x2f0>)
 801b150:	9300      	str	r3, [sp, #0]
 801b152:	3308      	adds	r3, #8
 801b154:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b156:	6013      	str	r3, [r2, #0]
 801b158:	9800      	ldr	r0, [sp, #0]
 801b15a:	b019      	add	sp, #100	@ 0x64
 801b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b160:	4b90      	ldr	r3, [pc, #576]	@ (801b3a4 <_dtoa_r+0x2ec>)
 801b162:	9300      	str	r3, [sp, #0]
 801b164:	3303      	adds	r3, #3
 801b166:	e7f5      	b.n	801b154 <_dtoa_r+0x9c>
 801b168:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
 801b16c:	2200      	movs	r2, #0
 801b16e:	ec51 0b17 	vmov	r0, r1, d7
 801b172:	2300      	movs	r3, #0
 801b174:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b178:	f7e5 fc9e 	bl	8000ab8 <__aeabi_dcmpeq>
 801b17c:	4682      	mov	sl, r0
 801b17e:	b150      	cbz	r0, 801b196 <_dtoa_r+0xde>
 801b180:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b182:	2301      	movs	r3, #1
 801b184:	6013      	str	r3, [r2, #0]
 801b186:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b188:	b113      	cbz	r3, 801b190 <_dtoa_r+0xd8>
 801b18a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b18c:	4b87      	ldr	r3, [pc, #540]	@ (801b3ac <_dtoa_r+0x2f4>)
 801b18e:	6013      	str	r3, [r2, #0]
 801b190:	4b87      	ldr	r3, [pc, #540]	@ (801b3b0 <_dtoa_r+0x2f8>)
 801b192:	9300      	str	r3, [sp, #0]
 801b194:	e7e0      	b.n	801b158 <_dtoa_r+0xa0>
 801b196:	ed9d 0b06 	vldr	d0, [sp, #24]
 801b19a:	aa16      	add	r2, sp, #88	@ 0x58
 801b19c:	a917      	add	r1, sp, #92	@ 0x5c
 801b19e:	4648      	mov	r0, r9
 801b1a0:	f001 f8f0 	bl	801c384 <__d2b>
 801b1a4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 801b1a8:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801b1aa:	9001      	str	r0, [sp, #4]
 801b1ac:	d079      	beq.n	801b2a2 <_dtoa_r+0x1ea>
 801b1ae:	9b07      	ldr	r3, [sp, #28]
 801b1b0:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
 801b1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b1b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b1bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b1c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b1c4:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801b1c8:	4619      	mov	r1, r3
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	4b79      	ldr	r3, [pc, #484]	@ (801b3b4 <_dtoa_r+0x2fc>)
 801b1ce:	f7e5 f853 	bl	8000278 <__aeabi_dsub>
 801b1d2:	a36b      	add	r3, pc, #428	@ (adr r3, 801b380 <_dtoa_r+0x2c8>)
 801b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1d8:	f7e5 fa06 	bl	80005e8 <__aeabi_dmul>
 801b1dc:	a36a      	add	r3, pc, #424	@ (adr r3, 801b388 <_dtoa_r+0x2d0>)
 801b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e2:	f7e5 f84b 	bl	800027c <__adddf3>
 801b1e6:	4606      	mov	r6, r0
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	460f      	mov	r7, r1
 801b1ec:	f7e5 f992 	bl	8000514 <__aeabi_i2d>
 801b1f0:	a367      	add	r3, pc, #412	@ (adr r3, 801b390 <_dtoa_r+0x2d8>)
 801b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f6:	f7e5 f9f7 	bl	80005e8 <__aeabi_dmul>
 801b1fa:	4602      	mov	r2, r0
 801b1fc:	460b      	mov	r3, r1
 801b1fe:	4630      	mov	r0, r6
 801b200:	4639      	mov	r1, r7
 801b202:	f7e5 f83b 	bl	800027c <__adddf3>
 801b206:	4606      	mov	r6, r0
 801b208:	460f      	mov	r7, r1
 801b20a:	f7e5 fc9d 	bl	8000b48 <__aeabi_d2iz>
 801b20e:	2200      	movs	r2, #0
 801b210:	4680      	mov	r8, r0
 801b212:	2300      	movs	r3, #0
 801b214:	4630      	mov	r0, r6
 801b216:	4639      	mov	r1, r7
 801b218:	f7e5 fc58 	bl	8000acc <__aeabi_dcmplt>
 801b21c:	b148      	cbz	r0, 801b232 <_dtoa_r+0x17a>
 801b21e:	4640      	mov	r0, r8
 801b220:	f7e5 f978 	bl	8000514 <__aeabi_i2d>
 801b224:	4632      	mov	r2, r6
 801b226:	463b      	mov	r3, r7
 801b228:	f7e5 fc46 	bl	8000ab8 <__aeabi_dcmpeq>
 801b22c:	b908      	cbnz	r0, 801b232 <_dtoa_r+0x17a>
 801b22e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b232:	f1b8 0f16 	cmp.w	r8, #22
 801b236:	d851      	bhi.n	801b2dc <_dtoa_r+0x224>
 801b238:	4b5f      	ldr	r3, [pc, #380]	@ (801b3b8 <_dtoa_r+0x300>)
 801b23a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b246:	f7e5 fc41 	bl	8000acc <__aeabi_dcmplt>
 801b24a:	2800      	cmp	r0, #0
 801b24c:	d048      	beq.n	801b2e0 <_dtoa_r+0x228>
 801b24e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b252:	2300      	movs	r3, #0
 801b254:	9312      	str	r3, [sp, #72]	@ 0x48
 801b256:	1b2d      	subs	r5, r5, r4
 801b258:	1e6b      	subs	r3, r5, #1
 801b25a:	9308      	str	r3, [sp, #32]
 801b25c:	bf43      	ittte	mi
 801b25e:	2300      	movmi	r3, #0
 801b260:	f1c5 0701 	rsbmi	r7, r5, #1
 801b264:	9308      	strmi	r3, [sp, #32]
 801b266:	2700      	movpl	r7, #0
 801b268:	f1b8 0f00 	cmp.w	r8, #0
 801b26c:	db3a      	blt.n	801b2e4 <_dtoa_r+0x22c>
 801b26e:	9b08      	ldr	r3, [sp, #32]
 801b270:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 801b274:	4443      	add	r3, r8
 801b276:	9308      	str	r3, [sp, #32]
 801b278:	2300      	movs	r3, #0
 801b27a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b27e:	2b09      	cmp	r3, #9
 801b280:	d864      	bhi.n	801b34c <_dtoa_r+0x294>
 801b282:	2b05      	cmp	r3, #5
 801b284:	bfc4      	itt	gt
 801b286:	3b04      	subgt	r3, #4
 801b288:	930a      	strgt	r3, [sp, #40]	@ 0x28
 801b28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b28c:	f1a3 0302 	sub.w	r3, r3, #2
 801b290:	bfcc      	ite	gt
 801b292:	2400      	movgt	r4, #0
 801b294:	2401      	movle	r4, #1
 801b296:	2b03      	cmp	r3, #3
 801b298:	d864      	bhi.n	801b364 <_dtoa_r+0x2ac>
 801b29a:	e8df f003 	tbb	[pc, r3]
 801b29e:	5553      	.short	0x5553
 801b2a0:	2b36      	.short	0x2b36
 801b2a2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b2a4:	442c      	add	r4, r5
 801b2a6:	f204 4332 	addw	r3, r4, #1074	@ 0x432
 801b2aa:	2b20      	cmp	r3, #32
 801b2ac:	bfc1      	itttt	gt
 801b2ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b2b2:	fa08 f803 	lslgt.w	r8, r8, r3
 801b2b6:	f204 4312 	addwgt	r3, r4, #1042	@ 0x412
 801b2ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 801b2be:	bfd6      	itet	le
 801b2c0:	f1c3 0320 	rsble	r3, r3, #32
 801b2c4:	ea48 0003 	orrgt.w	r0, r8, r3
 801b2c8:	fa06 f003 	lslle.w	r0, r6, r3
 801b2cc:	f7e5 f912 	bl	80004f4 <__aeabi_ui2d>
 801b2d0:	2201      	movs	r2, #1
 801b2d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b2d6:	3c01      	subs	r4, #1
 801b2d8:	9214      	str	r2, [sp, #80]	@ 0x50
 801b2da:	e775      	b.n	801b1c8 <_dtoa_r+0x110>
 801b2dc:	2301      	movs	r3, #1
 801b2de:	e7b9      	b.n	801b254 <_dtoa_r+0x19c>
 801b2e0:	9012      	str	r0, [sp, #72]	@ 0x48
 801b2e2:	e7b8      	b.n	801b256 <_dtoa_r+0x19e>
 801b2e4:	f1c8 0300 	rsb	r3, r8, #0
 801b2e8:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	eba7 0708 	sub.w	r7, r7, r8
 801b2f0:	930d      	str	r3, [sp, #52]	@ 0x34
 801b2f2:	e7c3      	b.n	801b27c <_dtoa_r+0x1c4>
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b2f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b2fa:	4443      	add	r3, r8
 801b2fc:	9305      	str	r3, [sp, #20]
 801b2fe:	3301      	adds	r3, #1
 801b300:	2b01      	cmp	r3, #1
 801b302:	9304      	str	r3, [sp, #16]
 801b304:	bfb8      	it	lt
 801b306:	2301      	movlt	r3, #1
 801b308:	e006      	b.n	801b318 <_dtoa_r+0x260>
 801b30a:	2301      	movs	r3, #1
 801b30c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b30e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b310:	2b00      	cmp	r3, #0
 801b312:	dd2a      	ble.n	801b36a <_dtoa_r+0x2b2>
 801b314:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801b318:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801b31c:	2100      	movs	r1, #0
 801b31e:	2204      	movs	r2, #4
 801b320:	f102 0514 	add.w	r5, r2, #20
 801b324:	429d      	cmp	r5, r3
 801b326:	f101 0601 	add.w	r6, r1, #1
 801b32a:	d923      	bls.n	801b374 <_dtoa_r+0x2bc>
 801b32c:	6041      	str	r1, [r0, #4]
 801b32e:	4648      	mov	r0, r9
 801b330:	f000 fcf8 	bl	801bd24 <_Balloc>
 801b334:	9000      	str	r0, [sp, #0]
 801b336:	2800      	cmp	r0, #0
 801b338:	d142      	bne.n	801b3c0 <_dtoa_r+0x308>
 801b33a:	4b20      	ldr	r3, [pc, #128]	@ (801b3bc <_dtoa_r+0x304>)
 801b33c:	4602      	mov	r2, r0
 801b33e:	f240 11af 	movw	r1, #431	@ 0x1af
 801b342:	e6d0      	b.n	801b0e6 <_dtoa_r+0x2e>
 801b344:	2300      	movs	r3, #0
 801b346:	e7e1      	b.n	801b30c <_dtoa_r+0x254>
 801b348:	2300      	movs	r3, #0
 801b34a:	e7d4      	b.n	801b2f6 <_dtoa_r+0x23e>
 801b34c:	2401      	movs	r4, #1
 801b34e:	2300      	movs	r3, #0
 801b350:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 801b354:	f04f 33ff 	mov.w	r3, #4294967295
 801b358:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801b35c:	2200      	movs	r2, #0
 801b35e:	2312      	movs	r3, #18
 801b360:	920c      	str	r2, [sp, #48]	@ 0x30
 801b362:	e7d9      	b.n	801b318 <_dtoa_r+0x260>
 801b364:	2301      	movs	r3, #1
 801b366:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b368:	e7f4      	b.n	801b354 <_dtoa_r+0x29c>
 801b36a:	2301      	movs	r3, #1
 801b36c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801b370:	461a      	mov	r2, r3
 801b372:	e7f5      	b.n	801b360 <_dtoa_r+0x2a8>
 801b374:	0052      	lsls	r2, r2, #1
 801b376:	4631      	mov	r1, r6
 801b378:	e7d2      	b.n	801b320 <_dtoa_r+0x268>
 801b37a:	bf00      	nop
 801b37c:	f3af 8000 	nop.w
 801b380:	636f4361 	.word	0x636f4361
 801b384:	3fd287a7 	.word	0x3fd287a7
 801b388:	8b60c8b3 	.word	0x8b60c8b3
 801b38c:	3fc68a28 	.word	0x3fc68a28
 801b390:	509f79fb 	.word	0x509f79fb
 801b394:	3fd34413 	.word	0x3fd34413
 801b398:	0801ebec 	.word	0x0801ebec
 801b39c:	0801ed02 	.word	0x0801ed02
 801b3a0:	7ff00000 	.word	0x7ff00000
 801b3a4:	0801ecfe 	.word	0x0801ecfe
 801b3a8:	0801ecf5 	.word	0x0801ecf5
 801b3ac:	0801ec96 	.word	0x0801ec96
 801b3b0:	0801ec95 	.word	0x0801ec95
 801b3b4:	3ff80000 	.word	0x3ff80000
 801b3b8:	0801ef68 	.word	0x0801ef68
 801b3bc:	0801ed84 	.word	0x0801ed84
 801b3c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b3c4:	9a00      	ldr	r2, [sp, #0]
 801b3c6:	601a      	str	r2, [r3, #0]
 801b3c8:	9b04      	ldr	r3, [sp, #16]
 801b3ca:	2b0e      	cmp	r3, #14
 801b3cc:	f200 80a1 	bhi.w	801b512 <_dtoa_r+0x45a>
 801b3d0:	2c00      	cmp	r4, #0
 801b3d2:	f000 809e 	beq.w	801b512 <_dtoa_r+0x45a>
 801b3d6:	f1b8 0f00 	cmp.w	r8, #0
 801b3da:	dd36      	ble.n	801b44a <_dtoa_r+0x392>
 801b3dc:	4b9e      	ldr	r3, [pc, #632]	@ (801b658 <_dtoa_r+0x5a0>)
 801b3de:	f008 020f 	and.w	r2, r8, #15
 801b3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b3e6:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801b3ea:	e9d3 ab00 	ldrd	sl, fp, [r3]
 801b3ee:	ea4f 1528 	mov.w	r5, r8, asr #4
 801b3f2:	d016      	beq.n	801b422 <_dtoa_r+0x36a>
 801b3f4:	4b99      	ldr	r3, [pc, #612]	@ (801b65c <_dtoa_r+0x5a4>)
 801b3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b3fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b3fe:	f7e5 fa1d 	bl	800083c <__aeabi_ddiv>
 801b402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b406:	f005 050f 	and.w	r5, r5, #15
 801b40a:	2403      	movs	r4, #3
 801b40c:	4e93      	ldr	r6, [pc, #588]	@ (801b65c <_dtoa_r+0x5a4>)
 801b40e:	b975      	cbnz	r5, 801b42e <_dtoa_r+0x376>
 801b410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b414:	4652      	mov	r2, sl
 801b416:	465b      	mov	r3, fp
 801b418:	f7e5 fa10 	bl	800083c <__aeabi_ddiv>
 801b41c:	4682      	mov	sl, r0
 801b41e:	468b      	mov	fp, r1
 801b420:	e02d      	b.n	801b47e <_dtoa_r+0x3c6>
 801b422:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b426:	2402      	movs	r4, #2
 801b428:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b42c:	e7ee      	b.n	801b40c <_dtoa_r+0x354>
 801b42e:	07e9      	lsls	r1, r5, #31
 801b430:	d508      	bpl.n	801b444 <_dtoa_r+0x38c>
 801b432:	4650      	mov	r0, sl
 801b434:	4659      	mov	r1, fp
 801b436:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b43a:	f7e5 f8d5 	bl	80005e8 <__aeabi_dmul>
 801b43e:	3401      	adds	r4, #1
 801b440:	4682      	mov	sl, r0
 801b442:	468b      	mov	fp, r1
 801b444:	106d      	asrs	r5, r5, #1
 801b446:	3608      	adds	r6, #8
 801b448:	e7e1      	b.n	801b40e <_dtoa_r+0x356>
 801b44a:	f000 80ad 	beq.w	801b5a8 <_dtoa_r+0x4f0>
 801b44e:	f1c8 0500 	rsb	r5, r8, #0
 801b452:	4b81      	ldr	r3, [pc, #516]	@ (801b658 <_dtoa_r+0x5a0>)
 801b454:	4e81      	ldr	r6, [pc, #516]	@ (801b65c <_dtoa_r+0x5a4>)
 801b456:	f005 020f 	and.w	r2, r5, #15
 801b45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b466:	f7e5 f8bf 	bl	80005e8 <__aeabi_dmul>
 801b46a:	112d      	asrs	r5, r5, #4
 801b46c:	4682      	mov	sl, r0
 801b46e:	468b      	mov	fp, r1
 801b470:	2300      	movs	r3, #0
 801b472:	2402      	movs	r4, #2
 801b474:	2d00      	cmp	r5, #0
 801b476:	f040 808c 	bne.w	801b592 <_dtoa_r+0x4da>
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d1ce      	bne.n	801b41c <_dtoa_r+0x364>
 801b47e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b480:	2b00      	cmp	r3, #0
 801b482:	f000 8095 	beq.w	801b5b0 <_dtoa_r+0x4f8>
 801b486:	4b76      	ldr	r3, [pc, #472]	@ (801b660 <_dtoa_r+0x5a8>)
 801b488:	2200      	movs	r2, #0
 801b48a:	4650      	mov	r0, sl
 801b48c:	4659      	mov	r1, fp
 801b48e:	f7e5 fb1d 	bl	8000acc <__aeabi_dcmplt>
 801b492:	2800      	cmp	r0, #0
 801b494:	f000 808c 	beq.w	801b5b0 <_dtoa_r+0x4f8>
 801b498:	9b04      	ldr	r3, [sp, #16]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	f000 8088 	beq.w	801b5b0 <_dtoa_r+0x4f8>
 801b4a0:	9b05      	ldr	r3, [sp, #20]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	dd35      	ble.n	801b512 <_dtoa_r+0x45a>
 801b4a6:	f108 33ff 	add.w	r3, r8, #4294967295
 801b4aa:	9302      	str	r3, [sp, #8]
 801b4ac:	4650      	mov	r0, sl
 801b4ae:	4659      	mov	r1, fp
 801b4b0:	4b6c      	ldr	r3, [pc, #432]	@ (801b664 <_dtoa_r+0x5ac>)
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	f7e5 f898 	bl	80005e8 <__aeabi_dmul>
 801b4b8:	9e05      	ldr	r6, [sp, #20]
 801b4ba:	4682      	mov	sl, r0
 801b4bc:	468b      	mov	fp, r1
 801b4be:	3401      	adds	r4, #1
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	f7e5 f827 	bl	8000514 <__aeabi_i2d>
 801b4c6:	4652      	mov	r2, sl
 801b4c8:	465b      	mov	r3, fp
 801b4ca:	f7e5 f88d 	bl	80005e8 <__aeabi_dmul>
 801b4ce:	4b66      	ldr	r3, [pc, #408]	@ (801b668 <_dtoa_r+0x5b0>)
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	f7e4 fed3 	bl	800027c <__adddf3>
 801b4d6:	4604      	mov	r4, r0
 801b4d8:	f1a1 7550 	sub.w	r5, r1, #54525952	@ 0x3400000
 801b4dc:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 801b4e0:	2e00      	cmp	r6, #0
 801b4e2:	d169      	bne.n	801b5b8 <_dtoa_r+0x500>
 801b4e4:	4b61      	ldr	r3, [pc, #388]	@ (801b66c <_dtoa_r+0x5b4>)
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	4650      	mov	r0, sl
 801b4ea:	4659      	mov	r1, fp
 801b4ec:	f7e4 fec4 	bl	8000278 <__aeabi_dsub>
 801b4f0:	4622      	mov	r2, r4
 801b4f2:	462b      	mov	r3, r5
 801b4f4:	4682      	mov	sl, r0
 801b4f6:	468b      	mov	fp, r1
 801b4f8:	f7e5 fb06 	bl	8000b08 <__aeabi_dcmpgt>
 801b4fc:	2800      	cmp	r0, #0
 801b4fe:	f040 8294 	bne.w	801ba2a <_dtoa_r+0x972>
 801b502:	4622      	mov	r2, r4
 801b504:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 801b508:	4650      	mov	r0, sl
 801b50a:	4659      	mov	r1, fp
 801b50c:	f7e5 fade 	bl	8000acc <__aeabi_dcmplt>
 801b510:	bb20      	cbnz	r0, 801b55c <_dtoa_r+0x4a4>
 801b512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b514:	2b00      	cmp	r3, #0
 801b516:	f2c0 8160 	blt.w	801b7da <_dtoa_r+0x722>
 801b51a:	f1b8 0f0e 	cmp.w	r8, #14
 801b51e:	f300 815c 	bgt.w	801b7da <_dtoa_r+0x722>
 801b522:	4b4d      	ldr	r3, [pc, #308]	@ (801b658 <_dtoa_r+0x5a0>)
 801b524:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b528:	e9d3 ab00 	ldrd	sl, fp, [r3]
 801b52c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b52e:	2b00      	cmp	r3, #0
 801b530:	f280 80ee 	bge.w	801b710 <_dtoa_r+0x658>
 801b534:	9b04      	ldr	r3, [sp, #16]
 801b536:	2b00      	cmp	r3, #0
 801b538:	f300 80ea 	bgt.w	801b710 <_dtoa_r+0x658>
 801b53c:	d10e      	bne.n	801b55c <_dtoa_r+0x4a4>
 801b53e:	4b4b      	ldr	r3, [pc, #300]	@ (801b66c <_dtoa_r+0x5b4>)
 801b540:	2200      	movs	r2, #0
 801b542:	4650      	mov	r0, sl
 801b544:	4659      	mov	r1, fp
 801b546:	f7e5 f84f 	bl	80005e8 <__aeabi_dmul>
 801b54a:	4602      	mov	r2, r0
 801b54c:	460b      	mov	r3, r1
 801b54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b552:	f7e5 fac5 	bl	8000ae0 <__aeabi_dcmple>
 801b556:	2800      	cmp	r0, #0
 801b558:	f000 826a 	beq.w	801ba30 <_dtoa_r+0x978>
 801b55c:	2500      	movs	r5, #0
 801b55e:	462c      	mov	r4, r5
 801b560:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b562:	9e00      	ldr	r6, [sp, #0]
 801b564:	43db      	mvns	r3, r3
 801b566:	9302      	str	r3, [sp, #8]
 801b568:	4627      	mov	r7, r4
 801b56a:	2400      	movs	r4, #0
 801b56c:	4629      	mov	r1, r5
 801b56e:	4648      	mov	r0, r9
 801b570:	f000 fc16 	bl	801bda0 <_Bfree>
 801b574:	2f00      	cmp	r7, #0
 801b576:	f000 80c1 	beq.w	801b6fc <_dtoa_r+0x644>
 801b57a:	b12c      	cbz	r4, 801b588 <_dtoa_r+0x4d0>
 801b57c:	42bc      	cmp	r4, r7
 801b57e:	d003      	beq.n	801b588 <_dtoa_r+0x4d0>
 801b580:	4621      	mov	r1, r4
 801b582:	4648      	mov	r0, r9
 801b584:	f000 fc0c 	bl	801bda0 <_Bfree>
 801b588:	4639      	mov	r1, r7
 801b58a:	4648      	mov	r0, r9
 801b58c:	f000 fc08 	bl	801bda0 <_Bfree>
 801b590:	e0b4      	b.n	801b6fc <_dtoa_r+0x644>
 801b592:	07ea      	lsls	r2, r5, #31
 801b594:	d505      	bpl.n	801b5a2 <_dtoa_r+0x4ea>
 801b596:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b59a:	f7e5 f825 	bl	80005e8 <__aeabi_dmul>
 801b59e:	3401      	adds	r4, #1
 801b5a0:	2301      	movs	r3, #1
 801b5a2:	106d      	asrs	r5, r5, #1
 801b5a4:	3608      	adds	r6, #8
 801b5a6:	e765      	b.n	801b474 <_dtoa_r+0x3bc>
 801b5a8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801b5ac:	2402      	movs	r4, #2
 801b5ae:	e766      	b.n	801b47e <_dtoa_r+0x3c6>
 801b5b0:	9e04      	ldr	r6, [sp, #16]
 801b5b2:	f8cd 8008 	str.w	r8, [sp, #8]
 801b5b6:	e783      	b.n	801b4c0 <_dtoa_r+0x408>
 801b5b8:	4b27      	ldr	r3, [pc, #156]	@ (801b658 <_dtoa_r+0x5a0>)
 801b5ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b5be:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801b5c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d055      	beq.n	801b674 <_dtoa_r+0x5bc>
 801b5c8:	4602      	mov	r2, r0
 801b5ca:	460b      	mov	r3, r1
 801b5cc:	2000      	movs	r0, #0
 801b5ce:	4928      	ldr	r1, [pc, #160]	@ (801b670 <_dtoa_r+0x5b8>)
 801b5d0:	f7e5 f934 	bl	800083c <__aeabi_ddiv>
 801b5d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b5d8:	f7e4 fe4e 	bl	8000278 <__aeabi_dsub>
 801b5dc:	9b00      	ldr	r3, [sp, #0]
 801b5de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b5e2:	199d      	adds	r5, r3, r6
 801b5e4:	461e      	mov	r6, r3
 801b5e6:	4659      	mov	r1, fp
 801b5e8:	4650      	mov	r0, sl
 801b5ea:	f7e5 faad 	bl	8000b48 <__aeabi_d2iz>
 801b5ee:	4604      	mov	r4, r0
 801b5f0:	f7e4 ff90 	bl	8000514 <__aeabi_i2d>
 801b5f4:	4602      	mov	r2, r0
 801b5f6:	460b      	mov	r3, r1
 801b5f8:	4650      	mov	r0, sl
 801b5fa:	4659      	mov	r1, fp
 801b5fc:	f7e4 fe3c 	bl	8000278 <__aeabi_dsub>
 801b600:	3430      	adds	r4, #48	@ 0x30
 801b602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b606:	f806 4b01 	strb.w	r4, [r6], #1
 801b60a:	4682      	mov	sl, r0
 801b60c:	468b      	mov	fp, r1
 801b60e:	f7e5 fa5d 	bl	8000acc <__aeabi_dcmplt>
 801b612:	2800      	cmp	r0, #0
 801b614:	d172      	bne.n	801b6fc <_dtoa_r+0x644>
 801b616:	4652      	mov	r2, sl
 801b618:	465b      	mov	r3, fp
 801b61a:	4911      	ldr	r1, [pc, #68]	@ (801b660 <_dtoa_r+0x5a8>)
 801b61c:	2000      	movs	r0, #0
 801b61e:	f7e4 fe2b 	bl	8000278 <__aeabi_dsub>
 801b622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b626:	f7e5 fa51 	bl	8000acc <__aeabi_dcmplt>
 801b62a:	2800      	cmp	r0, #0
 801b62c:	f040 80b6 	bne.w	801b79c <_dtoa_r+0x6e4>
 801b630:	42ae      	cmp	r6, r5
 801b632:	f43f af6e 	beq.w	801b512 <_dtoa_r+0x45a>
 801b636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b63a:	4b0a      	ldr	r3, [pc, #40]	@ (801b664 <_dtoa_r+0x5ac>)
 801b63c:	2200      	movs	r2, #0
 801b63e:	f7e4 ffd3 	bl	80005e8 <__aeabi_dmul>
 801b642:	4b08      	ldr	r3, [pc, #32]	@ (801b664 <_dtoa_r+0x5ac>)
 801b644:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b648:	2200      	movs	r2, #0
 801b64a:	4650      	mov	r0, sl
 801b64c:	4659      	mov	r1, fp
 801b64e:	f7e4 ffcb 	bl	80005e8 <__aeabi_dmul>
 801b652:	4682      	mov	sl, r0
 801b654:	468b      	mov	fp, r1
 801b656:	e7c6      	b.n	801b5e6 <_dtoa_r+0x52e>
 801b658:	0801ef68 	.word	0x0801ef68
 801b65c:	0801ef40 	.word	0x0801ef40
 801b660:	3ff00000 	.word	0x3ff00000
 801b664:	40240000 	.word	0x40240000
 801b668:	401c0000 	.word	0x401c0000
 801b66c:	40140000 	.word	0x40140000
 801b670:	3fe00000 	.word	0x3fe00000
 801b674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b678:	f7e4 ffb6 	bl	80005e8 <__aeabi_dmul>
 801b67c:	9b00      	ldr	r3, [sp, #0]
 801b67e:	9d00      	ldr	r5, [sp, #0]
 801b680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b684:	4433      	add	r3, r6
 801b686:	9315      	str	r3, [sp, #84]	@ 0x54
 801b688:	4659      	mov	r1, fp
 801b68a:	4650      	mov	r0, sl
 801b68c:	f7e5 fa5c 	bl	8000b48 <__aeabi_d2iz>
 801b690:	4604      	mov	r4, r0
 801b692:	f7e4 ff3f 	bl	8000514 <__aeabi_i2d>
 801b696:	3430      	adds	r4, #48	@ 0x30
 801b698:	460b      	mov	r3, r1
 801b69a:	4602      	mov	r2, r0
 801b69c:	4659      	mov	r1, fp
 801b69e:	4650      	mov	r0, sl
 801b6a0:	f7e4 fdea 	bl	8000278 <__aeabi_dsub>
 801b6a4:	f805 4b01 	strb.w	r4, [r5], #1
 801b6a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b6aa:	429d      	cmp	r5, r3
 801b6ac:	4682      	mov	sl, r0
 801b6ae:	468b      	mov	fp, r1
 801b6b0:	d127      	bne.n	801b702 <_dtoa_r+0x64a>
 801b6b2:	9b00      	ldr	r3, [sp, #0]
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b6ba:	441e      	add	r6, r3
 801b6bc:	4bb3      	ldr	r3, [pc, #716]	@ (801b98c <_dtoa_r+0x8d4>)
 801b6be:	f7e4 fddd 	bl	800027c <__adddf3>
 801b6c2:	4602      	mov	r2, r0
 801b6c4:	460b      	mov	r3, r1
 801b6c6:	4650      	mov	r0, sl
 801b6c8:	4659      	mov	r1, fp
 801b6ca:	f7e5 fa1d 	bl	8000b08 <__aeabi_dcmpgt>
 801b6ce:	2800      	cmp	r0, #0
 801b6d0:	d164      	bne.n	801b79c <_dtoa_r+0x6e4>
 801b6d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b6d6:	49ad      	ldr	r1, [pc, #692]	@ (801b98c <_dtoa_r+0x8d4>)
 801b6d8:	2000      	movs	r0, #0
 801b6da:	f7e4 fdcd 	bl	8000278 <__aeabi_dsub>
 801b6de:	4602      	mov	r2, r0
 801b6e0:	460b      	mov	r3, r1
 801b6e2:	4650      	mov	r0, sl
 801b6e4:	4659      	mov	r1, fp
 801b6e6:	f7e5 f9f1 	bl	8000acc <__aeabi_dcmplt>
 801b6ea:	2800      	cmp	r0, #0
 801b6ec:	f43f af11 	beq.w	801b512 <_dtoa_r+0x45a>
 801b6f0:	4633      	mov	r3, r6
 801b6f2:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b6f6:	2a30      	cmp	r2, #48	@ 0x30
 801b6f8:	d0fa      	beq.n	801b6f0 <_dtoa_r+0x638>
 801b6fa:	461e      	mov	r6, r3
 801b6fc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b700:	e03a      	b.n	801b778 <_dtoa_r+0x6c0>
 801b702:	4ba3      	ldr	r3, [pc, #652]	@ (801b990 <_dtoa_r+0x8d8>)
 801b704:	2200      	movs	r2, #0
 801b706:	f7e4 ff6f 	bl	80005e8 <__aeabi_dmul>
 801b70a:	4682      	mov	sl, r0
 801b70c:	468b      	mov	fp, r1
 801b70e:	e7bb      	b.n	801b688 <_dtoa_r+0x5d0>
 801b710:	9e00      	ldr	r6, [sp, #0]
 801b712:	4652      	mov	r2, sl
 801b714:	465b      	mov	r3, fp
 801b716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b71a:	f7e5 f88f 	bl	800083c <__aeabi_ddiv>
 801b71e:	f7e5 fa13 	bl	8000b48 <__aeabi_d2iz>
 801b722:	4607      	mov	r7, r0
 801b724:	f7e4 fef6 	bl	8000514 <__aeabi_i2d>
 801b728:	4652      	mov	r2, sl
 801b72a:	465b      	mov	r3, fp
 801b72c:	f7e4 ff5c 	bl	80005e8 <__aeabi_dmul>
 801b730:	4602      	mov	r2, r0
 801b732:	460b      	mov	r3, r1
 801b734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b738:	f7e4 fd9e 	bl	8000278 <__aeabi_dsub>
 801b73c:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 801b740:	9c00      	ldr	r4, [sp, #0]
 801b742:	f806 cb01 	strb.w	ip, [r6], #1
 801b746:	eba6 0c04 	sub.w	ip, r6, r4
 801b74a:	9c04      	ldr	r4, [sp, #16]
 801b74c:	4564      	cmp	r4, ip
 801b74e:	4602      	mov	r2, r0
 801b750:	460b      	mov	r3, r1
 801b752:	d133      	bne.n	801b7bc <_dtoa_r+0x704>
 801b754:	f7e4 fd92 	bl	800027c <__adddf3>
 801b758:	4652      	mov	r2, sl
 801b75a:	465b      	mov	r3, fp
 801b75c:	4604      	mov	r4, r0
 801b75e:	460d      	mov	r5, r1
 801b760:	f7e5 f9d2 	bl	8000b08 <__aeabi_dcmpgt>
 801b764:	b9c0      	cbnz	r0, 801b798 <_dtoa_r+0x6e0>
 801b766:	4652      	mov	r2, sl
 801b768:	465b      	mov	r3, fp
 801b76a:	4620      	mov	r0, r4
 801b76c:	4629      	mov	r1, r5
 801b76e:	f7e5 f9a3 	bl	8000ab8 <__aeabi_dcmpeq>
 801b772:	b108      	cbz	r0, 801b778 <_dtoa_r+0x6c0>
 801b774:	07fb      	lsls	r3, r7, #31
 801b776:	d40f      	bmi.n	801b798 <_dtoa_r+0x6e0>
 801b778:	9901      	ldr	r1, [sp, #4]
 801b77a:	4648      	mov	r0, r9
 801b77c:	f000 fb10 	bl	801bda0 <_Bfree>
 801b780:	2300      	movs	r3, #0
 801b782:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b784:	7033      	strb	r3, [r6, #0]
 801b786:	f108 0301 	add.w	r3, r8, #1
 801b78a:	6013      	str	r3, [r2, #0]
 801b78c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b78e:	2b00      	cmp	r3, #0
 801b790:	f43f ace2 	beq.w	801b158 <_dtoa_r+0xa0>
 801b794:	601e      	str	r6, [r3, #0]
 801b796:	e4df      	b.n	801b158 <_dtoa_r+0xa0>
 801b798:	f8cd 8008 	str.w	r8, [sp, #8]
 801b79c:	4633      	mov	r3, r6
 801b79e:	461e      	mov	r6, r3
 801b7a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b7a4:	2a39      	cmp	r2, #57	@ 0x39
 801b7a6:	d106      	bne.n	801b7b6 <_dtoa_r+0x6fe>
 801b7a8:	9a00      	ldr	r2, [sp, #0]
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d1f7      	bne.n	801b79e <_dtoa_r+0x6e6>
 801b7ae:	9a02      	ldr	r2, [sp, #8]
 801b7b0:	3201      	adds	r2, #1
 801b7b2:	9202      	str	r2, [sp, #8]
 801b7b4:	2230      	movs	r2, #48	@ 0x30
 801b7b6:	3201      	adds	r2, #1
 801b7b8:	701a      	strb	r2, [r3, #0]
 801b7ba:	e79f      	b.n	801b6fc <_dtoa_r+0x644>
 801b7bc:	4b74      	ldr	r3, [pc, #464]	@ (801b990 <_dtoa_r+0x8d8>)
 801b7be:	2200      	movs	r2, #0
 801b7c0:	f7e4 ff12 	bl	80005e8 <__aeabi_dmul>
 801b7c4:	4602      	mov	r2, r0
 801b7c6:	460b      	mov	r3, r1
 801b7c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	2300      	movs	r3, #0
 801b7d0:	f7e5 f972 	bl	8000ab8 <__aeabi_dcmpeq>
 801b7d4:	2800      	cmp	r0, #0
 801b7d6:	d09c      	beq.n	801b712 <_dtoa_r+0x65a>
 801b7d8:	e7ce      	b.n	801b778 <_dtoa_r+0x6c0>
 801b7da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b7dc:	2a00      	cmp	r2, #0
 801b7de:	f000 80e3 	beq.w	801b9a8 <_dtoa_r+0x8f0>
 801b7e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b7e4:	2a01      	cmp	r2, #1
 801b7e6:	f300 80c2 	bgt.w	801b96e <_dtoa_r+0x8b6>
 801b7ea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b7ec:	2a00      	cmp	r2, #0
 801b7ee:	f000 80ba 	beq.w	801b966 <_dtoa_r+0x8ae>
 801b7f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b7f6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b7f8:	463e      	mov	r6, r7
 801b7fa:	9a08      	ldr	r2, [sp, #32]
 801b7fc:	2101      	movs	r1, #1
 801b7fe:	441a      	add	r2, r3
 801b800:	4648      	mov	r0, r9
 801b802:	441f      	add	r7, r3
 801b804:	9208      	str	r2, [sp, #32]
 801b806:	f000 fb7f 	bl	801bf08 <__i2b>
 801b80a:	4604      	mov	r4, r0
 801b80c:	b156      	cbz	r6, 801b824 <_dtoa_r+0x76c>
 801b80e:	9b08      	ldr	r3, [sp, #32]
 801b810:	2b00      	cmp	r3, #0
 801b812:	dd07      	ble.n	801b824 <_dtoa_r+0x76c>
 801b814:	42b3      	cmp	r3, r6
 801b816:	9a08      	ldr	r2, [sp, #32]
 801b818:	bfa8      	it	ge
 801b81a:	4633      	movge	r3, r6
 801b81c:	1aff      	subs	r7, r7, r3
 801b81e:	1af6      	subs	r6, r6, r3
 801b820:	1ad3      	subs	r3, r2, r3
 801b822:	9308      	str	r3, [sp, #32]
 801b824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b826:	b30b      	cbz	r3, 801b86c <_dtoa_r+0x7b4>
 801b828:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	f000 80c3 	beq.w	801b9b6 <_dtoa_r+0x8fe>
 801b830:	2d00      	cmp	r5, #0
 801b832:	f000 80bd 	beq.w	801b9b0 <_dtoa_r+0x8f8>
 801b836:	4621      	mov	r1, r4
 801b838:	462a      	mov	r2, r5
 801b83a:	4648      	mov	r0, r9
 801b83c:	f000 fc24 	bl	801c088 <__pow5mult>
 801b840:	9a01      	ldr	r2, [sp, #4]
 801b842:	4601      	mov	r1, r0
 801b844:	4604      	mov	r4, r0
 801b846:	4648      	mov	r0, r9
 801b848:	f000 fb74 	bl	801bf34 <__multiply>
 801b84c:	9901      	ldr	r1, [sp, #4]
 801b84e:	4682      	mov	sl, r0
 801b850:	4648      	mov	r0, r9
 801b852:	f000 faa5 	bl	801bda0 <_Bfree>
 801b856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b858:	1b5b      	subs	r3, r3, r5
 801b85a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b85c:	f000 80ae 	beq.w	801b9bc <_dtoa_r+0x904>
 801b860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b862:	4651      	mov	r1, sl
 801b864:	4648      	mov	r0, r9
 801b866:	f000 fc0f 	bl	801c088 <__pow5mult>
 801b86a:	9001      	str	r0, [sp, #4]
 801b86c:	2101      	movs	r1, #1
 801b86e:	4648      	mov	r0, r9
 801b870:	f000 fb4a 	bl	801bf08 <__i2b>
 801b874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b876:	4605      	mov	r5, r0
 801b878:	2b00      	cmp	r3, #0
 801b87a:	f000 81d7 	beq.w	801bc2c <_dtoa_r+0xb74>
 801b87e:	461a      	mov	r2, r3
 801b880:	4601      	mov	r1, r0
 801b882:	4648      	mov	r0, r9
 801b884:	f000 fc00 	bl	801c088 <__pow5mult>
 801b888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b88a:	2b01      	cmp	r3, #1
 801b88c:	4605      	mov	r5, r0
 801b88e:	f300 809d 	bgt.w	801b9cc <_dtoa_r+0x914>
 801b892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b894:	2b00      	cmp	r3, #0
 801b896:	f040 8094 	bne.w	801b9c2 <_dtoa_r+0x90a>
 801b89a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	f040 808e 	bne.w	801b9c2 <_dtoa_r+0x90a>
 801b8a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b8a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b8ac:	0d1b      	lsrs	r3, r3, #20
 801b8ae:	051b      	lsls	r3, r3, #20
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	f000 8089 	beq.w	801b9c8 <_dtoa_r+0x910>
 801b8b6:	9b08      	ldr	r3, [sp, #32]
 801b8b8:	3301      	adds	r3, #1
 801b8ba:	3701      	adds	r7, #1
 801b8bc:	9308      	str	r3, [sp, #32]
 801b8be:	f04f 0a01 	mov.w	sl, #1
 801b8c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	f000 81b7 	beq.w	801bc38 <_dtoa_r+0xb80>
 801b8ca:	692b      	ldr	r3, [r5, #16]
 801b8cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801b8d0:	6918      	ldr	r0, [r3, #16]
 801b8d2:	f000 facd 	bl	801be70 <__hi0bits>
 801b8d6:	f1c0 0020 	rsb	r0, r0, #32
 801b8da:	9b08      	ldr	r3, [sp, #32]
 801b8dc:	4418      	add	r0, r3
 801b8de:	f010 001f 	ands.w	r0, r0, #31
 801b8e2:	d07e      	beq.n	801b9e2 <_dtoa_r+0x92a>
 801b8e4:	f1c0 0320 	rsb	r3, r0, #32
 801b8e8:	2b04      	cmp	r3, #4
 801b8ea:	dd72      	ble.n	801b9d2 <_dtoa_r+0x91a>
 801b8ec:	9b08      	ldr	r3, [sp, #32]
 801b8ee:	f1c0 001c 	rsb	r0, r0, #28
 801b8f2:	4403      	add	r3, r0
 801b8f4:	4407      	add	r7, r0
 801b8f6:	4406      	add	r6, r0
 801b8f8:	9308      	str	r3, [sp, #32]
 801b8fa:	2f00      	cmp	r7, #0
 801b8fc:	dd05      	ble.n	801b90a <_dtoa_r+0x852>
 801b8fe:	9901      	ldr	r1, [sp, #4]
 801b900:	463a      	mov	r2, r7
 801b902:	4648      	mov	r0, r9
 801b904:	f000 fc1c 	bl	801c140 <__lshift>
 801b908:	9001      	str	r0, [sp, #4]
 801b90a:	9b08      	ldr	r3, [sp, #32]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	dd05      	ble.n	801b91c <_dtoa_r+0x864>
 801b910:	4629      	mov	r1, r5
 801b912:	461a      	mov	r2, r3
 801b914:	4648      	mov	r0, r9
 801b916:	f000 fc13 	bl	801c140 <__lshift>
 801b91a:	4605      	mov	r5, r0
 801b91c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d061      	beq.n	801b9e6 <_dtoa_r+0x92e>
 801b922:	9801      	ldr	r0, [sp, #4]
 801b924:	4629      	mov	r1, r5
 801b926:	f000 fc79 	bl	801c21c <__mcmp>
 801b92a:	2800      	cmp	r0, #0
 801b92c:	da5b      	bge.n	801b9e6 <_dtoa_r+0x92e>
 801b92e:	f108 33ff 	add.w	r3, r8, #4294967295
 801b932:	9302      	str	r3, [sp, #8]
 801b934:	9901      	ldr	r1, [sp, #4]
 801b936:	2300      	movs	r3, #0
 801b938:	220a      	movs	r2, #10
 801b93a:	4648      	mov	r0, r9
 801b93c:	f000 fa52 	bl	801bde4 <__multadd>
 801b940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b942:	9001      	str	r0, [sp, #4]
 801b944:	2b00      	cmp	r3, #0
 801b946:	f000 8179 	beq.w	801bc3c <_dtoa_r+0xb84>
 801b94a:	2300      	movs	r3, #0
 801b94c:	4621      	mov	r1, r4
 801b94e:	220a      	movs	r2, #10
 801b950:	4648      	mov	r0, r9
 801b952:	f000 fa47 	bl	801bde4 <__multadd>
 801b956:	9b05      	ldr	r3, [sp, #20]
 801b958:	2b00      	cmp	r3, #0
 801b95a:	4604      	mov	r4, r0
 801b95c:	dc72      	bgt.n	801ba44 <_dtoa_r+0x98c>
 801b95e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b960:	2b02      	cmp	r3, #2
 801b962:	dc49      	bgt.n	801b9f8 <_dtoa_r+0x940>
 801b964:	e06e      	b.n	801ba44 <_dtoa_r+0x98c>
 801b966:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b968:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b96c:	e743      	b.n	801b7f6 <_dtoa_r+0x73e>
 801b96e:	9b04      	ldr	r3, [sp, #16]
 801b970:	1e5d      	subs	r5, r3, #1
 801b972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b974:	42ab      	cmp	r3, r5
 801b976:	db0d      	blt.n	801b994 <_dtoa_r+0x8dc>
 801b978:	1b5d      	subs	r5, r3, r5
 801b97a:	9b04      	ldr	r3, [sp, #16]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	f6bf af3b 	bge.w	801b7f8 <_dtoa_r+0x740>
 801b982:	9b04      	ldr	r3, [sp, #16]
 801b984:	1afe      	subs	r6, r7, r3
 801b986:	2300      	movs	r3, #0
 801b988:	e737      	b.n	801b7fa <_dtoa_r+0x742>
 801b98a:	bf00      	nop
 801b98c:	3fe00000 	.word	0x3fe00000
 801b990:	40240000 	.word	0x40240000
 801b994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b996:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b998:	9509      	str	r5, [sp, #36]	@ 0x24
 801b99a:	1aeb      	subs	r3, r5, r3
 801b99c:	441a      	add	r2, r3
 801b99e:	920d      	str	r2, [sp, #52]	@ 0x34
 801b9a0:	9b04      	ldr	r3, [sp, #16]
 801b9a2:	463e      	mov	r6, r7
 801b9a4:	2500      	movs	r5, #0
 801b9a6:	e728      	b.n	801b7fa <_dtoa_r+0x742>
 801b9a8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b9aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b9ac:	463e      	mov	r6, r7
 801b9ae:	e72d      	b.n	801b80c <_dtoa_r+0x754>
 801b9b0:	f8dd a004 	ldr.w	sl, [sp, #4]
 801b9b4:	e754      	b.n	801b860 <_dtoa_r+0x7a8>
 801b9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9b8:	9901      	ldr	r1, [sp, #4]
 801b9ba:	e753      	b.n	801b864 <_dtoa_r+0x7ac>
 801b9bc:	f8cd a004 	str.w	sl, [sp, #4]
 801b9c0:	e754      	b.n	801b86c <_dtoa_r+0x7b4>
 801b9c2:	f04f 0a00 	mov.w	sl, #0
 801b9c6:	e77c      	b.n	801b8c2 <_dtoa_r+0x80a>
 801b9c8:	469a      	mov	sl, r3
 801b9ca:	e77a      	b.n	801b8c2 <_dtoa_r+0x80a>
 801b9cc:	f04f 0a00 	mov.w	sl, #0
 801b9d0:	e77b      	b.n	801b8ca <_dtoa_r+0x812>
 801b9d2:	d092      	beq.n	801b8fa <_dtoa_r+0x842>
 801b9d4:	9a08      	ldr	r2, [sp, #32]
 801b9d6:	331c      	adds	r3, #28
 801b9d8:	441a      	add	r2, r3
 801b9da:	441f      	add	r7, r3
 801b9dc:	441e      	add	r6, r3
 801b9de:	9208      	str	r2, [sp, #32]
 801b9e0:	e78b      	b.n	801b8fa <_dtoa_r+0x842>
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	e7f6      	b.n	801b9d4 <_dtoa_r+0x91c>
 801b9e6:	9b04      	ldr	r3, [sp, #16]
 801b9e8:	f8cd 8008 	str.w	r8, [sp, #8]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	dc23      	bgt.n	801ba38 <_dtoa_r+0x980>
 801b9f0:	9305      	str	r3, [sp, #20]
 801b9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9f4:	2b02      	cmp	r3, #2
 801b9f6:	dd21      	ble.n	801ba3c <_dtoa_r+0x984>
 801b9f8:	9b05      	ldr	r3, [sp, #20]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	f47f adb0 	bne.w	801b560 <_dtoa_r+0x4a8>
 801ba00:	4629      	mov	r1, r5
 801ba02:	2205      	movs	r2, #5
 801ba04:	4648      	mov	r0, r9
 801ba06:	f000 f9ed 	bl	801bde4 <__multadd>
 801ba0a:	4601      	mov	r1, r0
 801ba0c:	4605      	mov	r5, r0
 801ba0e:	9801      	ldr	r0, [sp, #4]
 801ba10:	f000 fc04 	bl	801c21c <__mcmp>
 801ba14:	2800      	cmp	r0, #0
 801ba16:	f77f ada3 	ble.w	801b560 <_dtoa_r+0x4a8>
 801ba1a:	9e00      	ldr	r6, [sp, #0]
 801ba1c:	2331      	movs	r3, #49	@ 0x31
 801ba1e:	f806 3b01 	strb.w	r3, [r6], #1
 801ba22:	9b02      	ldr	r3, [sp, #8]
 801ba24:	3301      	adds	r3, #1
 801ba26:	9302      	str	r3, [sp, #8]
 801ba28:	e59e      	b.n	801b568 <_dtoa_r+0x4b0>
 801ba2a:	4635      	mov	r5, r6
 801ba2c:	462c      	mov	r4, r5
 801ba2e:	e7f4      	b.n	801ba1a <_dtoa_r+0x962>
 801ba30:	9d04      	ldr	r5, [sp, #16]
 801ba32:	f8cd 8008 	str.w	r8, [sp, #8]
 801ba36:	e7f9      	b.n	801ba2c <_dtoa_r+0x974>
 801ba38:	9b04      	ldr	r3, [sp, #16]
 801ba3a:	9305      	str	r3, [sp, #20]
 801ba3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	f000 8100 	beq.w	801bc44 <_dtoa_r+0xb8c>
 801ba44:	2e00      	cmp	r6, #0
 801ba46:	dd05      	ble.n	801ba54 <_dtoa_r+0x99c>
 801ba48:	4621      	mov	r1, r4
 801ba4a:	4632      	mov	r2, r6
 801ba4c:	4648      	mov	r0, r9
 801ba4e:	f000 fb77 	bl	801c140 <__lshift>
 801ba52:	4604      	mov	r4, r0
 801ba54:	f1ba 0f00 	cmp.w	sl, #0
 801ba58:	d05a      	beq.n	801bb10 <_dtoa_r+0xa58>
 801ba5a:	6861      	ldr	r1, [r4, #4]
 801ba5c:	4648      	mov	r0, r9
 801ba5e:	f000 f961 	bl	801bd24 <_Balloc>
 801ba62:	4606      	mov	r6, r0
 801ba64:	b928      	cbnz	r0, 801ba72 <_dtoa_r+0x9ba>
 801ba66:	4b82      	ldr	r3, [pc, #520]	@ (801bc70 <_dtoa_r+0xbb8>)
 801ba68:	4602      	mov	r2, r0
 801ba6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ba6e:	f7ff bb3a 	b.w	801b0e6 <_dtoa_r+0x2e>
 801ba72:	6922      	ldr	r2, [r4, #16]
 801ba74:	3202      	adds	r2, #2
 801ba76:	0092      	lsls	r2, r2, #2
 801ba78:	f104 010c 	add.w	r1, r4, #12
 801ba7c:	300c      	adds	r0, #12
 801ba7e:	f7ff fa06 	bl	801ae8e <memcpy>
 801ba82:	2201      	movs	r2, #1
 801ba84:	4631      	mov	r1, r6
 801ba86:	4648      	mov	r0, r9
 801ba88:	f000 fb5a 	bl	801c140 <__lshift>
 801ba8c:	4607      	mov	r7, r0
 801ba8e:	9b00      	ldr	r3, [sp, #0]
 801ba90:	9a00      	ldr	r2, [sp, #0]
 801ba92:	f103 0b01 	add.w	fp, r3, #1
 801ba96:	9b05      	ldr	r3, [sp, #20]
 801ba98:	4413      	add	r3, r2
 801ba9a:	9306      	str	r3, [sp, #24]
 801ba9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba9e:	f003 0301 	and.w	r3, r3, #1
 801baa2:	9308      	str	r3, [sp, #32]
 801baa4:	f10b 33ff 	add.w	r3, fp, #4294967295
 801baa8:	4629      	mov	r1, r5
 801baaa:	9801      	ldr	r0, [sp, #4]
 801baac:	9304      	str	r3, [sp, #16]
 801baae:	f7ff fa79 	bl	801afa4 <quorem>
 801bab2:	4621      	mov	r1, r4
 801bab4:	9005      	str	r0, [sp, #20]
 801bab6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801baba:	9801      	ldr	r0, [sp, #4]
 801babc:	f000 fbae 	bl	801c21c <__mcmp>
 801bac0:	463a      	mov	r2, r7
 801bac2:	4680      	mov	r8, r0
 801bac4:	4629      	mov	r1, r5
 801bac6:	4648      	mov	r0, r9
 801bac8:	f000 fbc4 	bl	801c254 <__mdiff>
 801bacc:	68c2      	ldr	r2, [r0, #12]
 801bace:	4606      	mov	r6, r0
 801bad0:	bb02      	cbnz	r2, 801bb14 <_dtoa_r+0xa5c>
 801bad2:	4601      	mov	r1, r0
 801bad4:	9801      	ldr	r0, [sp, #4]
 801bad6:	f000 fba1 	bl	801c21c <__mcmp>
 801bada:	4602      	mov	r2, r0
 801badc:	4631      	mov	r1, r6
 801bade:	4648      	mov	r0, r9
 801bae0:	9209      	str	r2, [sp, #36]	@ 0x24
 801bae2:	f000 f95d 	bl	801bda0 <_Bfree>
 801bae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 801baea:	ea42 0103 	orr.w	r1, r2, r3
 801baee:	9b08      	ldr	r3, [sp, #32]
 801baf0:	4319      	orrs	r1, r3
 801baf2:	465e      	mov	r6, fp
 801baf4:	d110      	bne.n	801bb18 <_dtoa_r+0xa60>
 801baf6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801bafa:	d02b      	beq.n	801bb54 <_dtoa_r+0xa9c>
 801bafc:	f1b8 0f00 	cmp.w	r8, #0
 801bb00:	dd02      	ble.n	801bb08 <_dtoa_r+0xa50>
 801bb02:	9b05      	ldr	r3, [sp, #20]
 801bb04:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801bb08:	9b04      	ldr	r3, [sp, #16]
 801bb0a:	f883 a000 	strb.w	sl, [r3]
 801bb0e:	e52d      	b.n	801b56c <_dtoa_r+0x4b4>
 801bb10:	4627      	mov	r7, r4
 801bb12:	e7bc      	b.n	801ba8e <_dtoa_r+0x9d6>
 801bb14:	2201      	movs	r2, #1
 801bb16:	e7e1      	b.n	801badc <_dtoa_r+0xa24>
 801bb18:	f1b8 0f00 	cmp.w	r8, #0
 801bb1c:	db06      	blt.n	801bb2c <_dtoa_r+0xa74>
 801bb1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bb20:	ea48 0803 	orr.w	r8, r8, r3
 801bb24:	9b08      	ldr	r3, [sp, #32]
 801bb26:	ea58 0803 	orrs.w	r8, r8, r3
 801bb2a:	d120      	bne.n	801bb6e <_dtoa_r+0xab6>
 801bb2c:	2a00      	cmp	r2, #0
 801bb2e:	ddeb      	ble.n	801bb08 <_dtoa_r+0xa50>
 801bb30:	9901      	ldr	r1, [sp, #4]
 801bb32:	2201      	movs	r2, #1
 801bb34:	4648      	mov	r0, r9
 801bb36:	f000 fb03 	bl	801c140 <__lshift>
 801bb3a:	4629      	mov	r1, r5
 801bb3c:	9001      	str	r0, [sp, #4]
 801bb3e:	f000 fb6d 	bl	801c21c <__mcmp>
 801bb42:	2800      	cmp	r0, #0
 801bb44:	dc03      	bgt.n	801bb4e <_dtoa_r+0xa96>
 801bb46:	d1df      	bne.n	801bb08 <_dtoa_r+0xa50>
 801bb48:	f01a 0f01 	tst.w	sl, #1
 801bb4c:	d0dc      	beq.n	801bb08 <_dtoa_r+0xa50>
 801bb4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801bb52:	d1d6      	bne.n	801bb02 <_dtoa_r+0xa4a>
 801bb54:	9a04      	ldr	r2, [sp, #16]
 801bb56:	2339      	movs	r3, #57	@ 0x39
 801bb58:	7013      	strb	r3, [r2, #0]
 801bb5a:	4633      	mov	r3, r6
 801bb5c:	461e      	mov	r6, r3
 801bb5e:	3b01      	subs	r3, #1
 801bb60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801bb64:	2a39      	cmp	r2, #57	@ 0x39
 801bb66:	d052      	beq.n	801bc0e <_dtoa_r+0xb56>
 801bb68:	3201      	adds	r2, #1
 801bb6a:	701a      	strb	r2, [r3, #0]
 801bb6c:	e4fe      	b.n	801b56c <_dtoa_r+0x4b4>
 801bb6e:	2a00      	cmp	r2, #0
 801bb70:	dd07      	ble.n	801bb82 <_dtoa_r+0xaca>
 801bb72:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801bb76:	d0ed      	beq.n	801bb54 <_dtoa_r+0xa9c>
 801bb78:	9a04      	ldr	r2, [sp, #16]
 801bb7a:	f10a 0301 	add.w	r3, sl, #1
 801bb7e:	7013      	strb	r3, [r2, #0]
 801bb80:	e4f4      	b.n	801b56c <_dtoa_r+0x4b4>
 801bb82:	9b06      	ldr	r3, [sp, #24]
 801bb84:	f80b ac01 	strb.w	sl, [fp, #-1]
 801bb88:	455b      	cmp	r3, fp
 801bb8a:	d02a      	beq.n	801bbe2 <_dtoa_r+0xb2a>
 801bb8c:	9901      	ldr	r1, [sp, #4]
 801bb8e:	2300      	movs	r3, #0
 801bb90:	220a      	movs	r2, #10
 801bb92:	4648      	mov	r0, r9
 801bb94:	f000 f926 	bl	801bde4 <__multadd>
 801bb98:	42bc      	cmp	r4, r7
 801bb9a:	9001      	str	r0, [sp, #4]
 801bb9c:	f04f 0300 	mov.w	r3, #0
 801bba0:	f04f 020a 	mov.w	r2, #10
 801bba4:	4621      	mov	r1, r4
 801bba6:	4648      	mov	r0, r9
 801bba8:	d106      	bne.n	801bbb8 <_dtoa_r+0xb00>
 801bbaa:	f000 f91b 	bl	801bde4 <__multadd>
 801bbae:	4604      	mov	r4, r0
 801bbb0:	4607      	mov	r7, r0
 801bbb2:	f10b 0b01 	add.w	fp, fp, #1
 801bbb6:	e775      	b.n	801baa4 <_dtoa_r+0x9ec>
 801bbb8:	f000 f914 	bl	801bde4 <__multadd>
 801bbbc:	4639      	mov	r1, r7
 801bbbe:	4604      	mov	r4, r0
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	220a      	movs	r2, #10
 801bbc4:	4648      	mov	r0, r9
 801bbc6:	f000 f90d 	bl	801bde4 <__multadd>
 801bbca:	4607      	mov	r7, r0
 801bbcc:	e7f1      	b.n	801bbb2 <_dtoa_r+0xafa>
 801bbce:	9b05      	ldr	r3, [sp, #20]
 801bbd0:	1e5e      	subs	r6, r3, #1
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	9b00      	ldr	r3, [sp, #0]
 801bbd6:	bfd8      	it	le
 801bbd8:	2600      	movle	r6, #0
 801bbda:	1c5a      	adds	r2, r3, #1
 801bbdc:	4627      	mov	r7, r4
 801bbde:	4416      	add	r6, r2
 801bbe0:	2400      	movs	r4, #0
 801bbe2:	9901      	ldr	r1, [sp, #4]
 801bbe4:	2201      	movs	r2, #1
 801bbe6:	4648      	mov	r0, r9
 801bbe8:	f000 faaa 	bl	801c140 <__lshift>
 801bbec:	4629      	mov	r1, r5
 801bbee:	9001      	str	r0, [sp, #4]
 801bbf0:	f000 fb14 	bl	801c21c <__mcmp>
 801bbf4:	2800      	cmp	r0, #0
 801bbf6:	dcb0      	bgt.n	801bb5a <_dtoa_r+0xaa2>
 801bbf8:	d102      	bne.n	801bc00 <_dtoa_r+0xb48>
 801bbfa:	f01a 0f01 	tst.w	sl, #1
 801bbfe:	d1ac      	bne.n	801bb5a <_dtoa_r+0xaa2>
 801bc00:	4633      	mov	r3, r6
 801bc02:	461e      	mov	r6, r3
 801bc04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bc08:	2a30      	cmp	r2, #48	@ 0x30
 801bc0a:	d0fa      	beq.n	801bc02 <_dtoa_r+0xb4a>
 801bc0c:	e4ae      	b.n	801b56c <_dtoa_r+0x4b4>
 801bc0e:	9a00      	ldr	r2, [sp, #0]
 801bc10:	429a      	cmp	r2, r3
 801bc12:	d1a3      	bne.n	801bb5c <_dtoa_r+0xaa4>
 801bc14:	9b02      	ldr	r3, [sp, #8]
 801bc16:	3301      	adds	r3, #1
 801bc18:	9302      	str	r3, [sp, #8]
 801bc1a:	2331      	movs	r3, #49	@ 0x31
 801bc1c:	e7af      	b.n	801bb7e <_dtoa_r+0xac6>
 801bc1e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	f47f aa94 	bne.w	801b14e <_dtoa_r+0x96>
 801bc26:	4b13      	ldr	r3, [pc, #76]	@ (801bc74 <_dtoa_r+0xbbc>)
 801bc28:	f7ff bab3 	b.w	801b192 <_dtoa_r+0xda>
 801bc2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bc2e:	2b01      	cmp	r3, #1
 801bc30:	f77f ae2f 	ble.w	801b892 <_dtoa_r+0x7da>
 801bc34:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 801bc38:	2001      	movs	r0, #1
 801bc3a:	e64e      	b.n	801b8da <_dtoa_r+0x822>
 801bc3c:	9b05      	ldr	r3, [sp, #20]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	f77f aed7 	ble.w	801b9f2 <_dtoa_r+0x93a>
 801bc44:	9e00      	ldr	r6, [sp, #0]
 801bc46:	9801      	ldr	r0, [sp, #4]
 801bc48:	4629      	mov	r1, r5
 801bc4a:	f7ff f9ab 	bl	801afa4 <quorem>
 801bc4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801bc52:	9b00      	ldr	r3, [sp, #0]
 801bc54:	f806 ab01 	strb.w	sl, [r6], #1
 801bc58:	1af2      	subs	r2, r6, r3
 801bc5a:	9b05      	ldr	r3, [sp, #20]
 801bc5c:	4293      	cmp	r3, r2
 801bc5e:	ddb6      	ble.n	801bbce <_dtoa_r+0xb16>
 801bc60:	9901      	ldr	r1, [sp, #4]
 801bc62:	2300      	movs	r3, #0
 801bc64:	220a      	movs	r2, #10
 801bc66:	4648      	mov	r0, r9
 801bc68:	f000 f8bc 	bl	801bde4 <__multadd>
 801bc6c:	9001      	str	r0, [sp, #4]
 801bc6e:	e7ea      	b.n	801bc46 <_dtoa_r+0xb8e>
 801bc70:	0801ed84 	.word	0x0801ed84
 801bc74:	0801ecf5 	.word	0x0801ecf5

0801bc78 <__env_lock>:
 801bc78:	4801      	ldr	r0, [pc, #4]	@ (801bc80 <__env_lock+0x8>)
 801bc7a:	f7ff b8fe 	b.w	801ae7a <__retarget_lock_acquire_recursive>
 801bc7e:	bf00      	nop
 801bc80:	2000d3a0 	.word	0x2000d3a0

0801bc84 <__env_unlock>:
 801bc84:	4801      	ldr	r0, [pc, #4]	@ (801bc8c <__env_unlock+0x8>)
 801bc86:	f7ff b8f9 	b.w	801ae7c <__retarget_lock_release_recursive>
 801bc8a:	bf00      	nop
 801bc8c:	2000d3a0 	.word	0x2000d3a0

0801bc90 <_free_r>:
 801bc90:	b538      	push	{r3, r4, r5, lr}
 801bc92:	4605      	mov	r5, r0
 801bc94:	2900      	cmp	r1, #0
 801bc96:	d041      	beq.n	801bd1c <_free_r+0x8c>
 801bc98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc9c:	1f0c      	subs	r4, r1, #4
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	bfb8      	it	lt
 801bca2:	18e4      	addlt	r4, r4, r3
 801bca4:	f7fd ff98 	bl	8019bd8 <__malloc_lock>
 801bca8:	4a1d      	ldr	r2, [pc, #116]	@ (801bd20 <_free_r+0x90>)
 801bcaa:	6813      	ldr	r3, [r2, #0]
 801bcac:	b933      	cbnz	r3, 801bcbc <_free_r+0x2c>
 801bcae:	6063      	str	r3, [r4, #4]
 801bcb0:	6014      	str	r4, [r2, #0]
 801bcb2:	4628      	mov	r0, r5
 801bcb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bcb8:	f7fd bf94 	b.w	8019be4 <__malloc_unlock>
 801bcbc:	42a3      	cmp	r3, r4
 801bcbe:	d908      	bls.n	801bcd2 <_free_r+0x42>
 801bcc0:	6820      	ldr	r0, [r4, #0]
 801bcc2:	1821      	adds	r1, r4, r0
 801bcc4:	428b      	cmp	r3, r1
 801bcc6:	bf01      	itttt	eq
 801bcc8:	6819      	ldreq	r1, [r3, #0]
 801bcca:	685b      	ldreq	r3, [r3, #4]
 801bccc:	1809      	addeq	r1, r1, r0
 801bcce:	6021      	streq	r1, [r4, #0]
 801bcd0:	e7ed      	b.n	801bcae <_free_r+0x1e>
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	685b      	ldr	r3, [r3, #4]
 801bcd6:	b10b      	cbz	r3, 801bcdc <_free_r+0x4c>
 801bcd8:	42a3      	cmp	r3, r4
 801bcda:	d9fa      	bls.n	801bcd2 <_free_r+0x42>
 801bcdc:	6811      	ldr	r1, [r2, #0]
 801bcde:	1850      	adds	r0, r2, r1
 801bce0:	42a0      	cmp	r0, r4
 801bce2:	d10b      	bne.n	801bcfc <_free_r+0x6c>
 801bce4:	6820      	ldr	r0, [r4, #0]
 801bce6:	4401      	add	r1, r0
 801bce8:	1850      	adds	r0, r2, r1
 801bcea:	4283      	cmp	r3, r0
 801bcec:	6011      	str	r1, [r2, #0]
 801bcee:	d1e0      	bne.n	801bcb2 <_free_r+0x22>
 801bcf0:	6818      	ldr	r0, [r3, #0]
 801bcf2:	685b      	ldr	r3, [r3, #4]
 801bcf4:	6053      	str	r3, [r2, #4]
 801bcf6:	4408      	add	r0, r1
 801bcf8:	6010      	str	r0, [r2, #0]
 801bcfa:	e7da      	b.n	801bcb2 <_free_r+0x22>
 801bcfc:	d902      	bls.n	801bd04 <_free_r+0x74>
 801bcfe:	230c      	movs	r3, #12
 801bd00:	602b      	str	r3, [r5, #0]
 801bd02:	e7d6      	b.n	801bcb2 <_free_r+0x22>
 801bd04:	6820      	ldr	r0, [r4, #0]
 801bd06:	1821      	adds	r1, r4, r0
 801bd08:	428b      	cmp	r3, r1
 801bd0a:	bf04      	itt	eq
 801bd0c:	6819      	ldreq	r1, [r3, #0]
 801bd0e:	685b      	ldreq	r3, [r3, #4]
 801bd10:	6063      	str	r3, [r4, #4]
 801bd12:	bf04      	itt	eq
 801bd14:	1809      	addeq	r1, r1, r0
 801bd16:	6021      	streq	r1, [r4, #0]
 801bd18:	6054      	str	r4, [r2, #4]
 801bd1a:	e7ca      	b.n	801bcb2 <_free_r+0x22>
 801bd1c:	bd38      	pop	{r3, r4, r5, pc}
 801bd1e:	bf00      	nop
 801bd20:	2000d25c 	.word	0x2000d25c

0801bd24 <_Balloc>:
 801bd24:	b570      	push	{r4, r5, r6, lr}
 801bd26:	69c4      	ldr	r4, [r0, #28]
 801bd28:	4605      	mov	r5, r0
 801bd2a:	460e      	mov	r6, r1
 801bd2c:	b984      	cbnz	r4, 801bd50 <_Balloc+0x2c>
 801bd2e:	2010      	movs	r0, #16
 801bd30:	f7fd fea0 	bl	8019a74 <malloc>
 801bd34:	4604      	mov	r4, r0
 801bd36:	61e8      	str	r0, [r5, #28]
 801bd38:	b928      	cbnz	r0, 801bd46 <_Balloc+0x22>
 801bd3a:	4602      	mov	r2, r0
 801bd3c:	4b16      	ldr	r3, [pc, #88]	@ (801bd98 <_Balloc+0x74>)
 801bd3e:	4817      	ldr	r0, [pc, #92]	@ (801bd9c <_Balloc+0x78>)
 801bd40:	216b      	movs	r1, #107	@ 0x6b
 801bd42:	f7ff f911 	bl	801af68 <__assert_func>
 801bd46:	2300      	movs	r3, #0
 801bd48:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801bd4c:	6003      	str	r3, [r0, #0]
 801bd4e:	60c3      	str	r3, [r0, #12]
 801bd50:	68e3      	ldr	r3, [r4, #12]
 801bd52:	b953      	cbnz	r3, 801bd6a <_Balloc+0x46>
 801bd54:	2221      	movs	r2, #33	@ 0x21
 801bd56:	2104      	movs	r1, #4
 801bd58:	4628      	mov	r0, r5
 801bd5a:	f7fd fe1d 	bl	8019998 <_calloc_r>
 801bd5e:	69eb      	ldr	r3, [r5, #28]
 801bd60:	60e0      	str	r0, [r4, #12]
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	b90b      	cbnz	r3, 801bd6a <_Balloc+0x46>
 801bd66:	2000      	movs	r0, #0
 801bd68:	bd70      	pop	{r4, r5, r6, pc}
 801bd6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801bd6e:	b130      	cbz	r0, 801bd7e <_Balloc+0x5a>
 801bd70:	6802      	ldr	r2, [r0, #0]
 801bd72:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801bd76:	2300      	movs	r3, #0
 801bd78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bd7c:	e7f4      	b.n	801bd68 <_Balloc+0x44>
 801bd7e:	2101      	movs	r1, #1
 801bd80:	fa01 f406 	lsl.w	r4, r1, r6
 801bd84:	1d62      	adds	r2, r4, #5
 801bd86:	0092      	lsls	r2, r2, #2
 801bd88:	4628      	mov	r0, r5
 801bd8a:	f7fd fe05 	bl	8019998 <_calloc_r>
 801bd8e:	2800      	cmp	r0, #0
 801bd90:	d0e9      	beq.n	801bd66 <_Balloc+0x42>
 801bd92:	e9c0 6401 	strd	r6, r4, [r0, #4]
 801bd96:	e7ee      	b.n	801bd76 <_Balloc+0x52>
 801bd98:	0801ebec 	.word	0x0801ebec
 801bd9c:	0801ed95 	.word	0x0801ed95

0801bda0 <_Bfree>:
 801bda0:	b570      	push	{r4, r5, r6, lr}
 801bda2:	69c6      	ldr	r6, [r0, #28]
 801bda4:	4605      	mov	r5, r0
 801bda6:	460c      	mov	r4, r1
 801bda8:	b976      	cbnz	r6, 801bdc8 <_Bfree+0x28>
 801bdaa:	2010      	movs	r0, #16
 801bdac:	f7fd fe62 	bl	8019a74 <malloc>
 801bdb0:	4602      	mov	r2, r0
 801bdb2:	61e8      	str	r0, [r5, #28]
 801bdb4:	b920      	cbnz	r0, 801bdc0 <_Bfree+0x20>
 801bdb6:	4b09      	ldr	r3, [pc, #36]	@ (801bddc <_Bfree+0x3c>)
 801bdb8:	4809      	ldr	r0, [pc, #36]	@ (801bde0 <_Bfree+0x40>)
 801bdba:	218f      	movs	r1, #143	@ 0x8f
 801bdbc:	f7ff f8d4 	bl	801af68 <__assert_func>
 801bdc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bdc4:	6006      	str	r6, [r0, #0]
 801bdc6:	60c6      	str	r6, [r0, #12]
 801bdc8:	b13c      	cbz	r4, 801bdda <_Bfree+0x3a>
 801bdca:	69eb      	ldr	r3, [r5, #28]
 801bdcc:	6862      	ldr	r2, [r4, #4]
 801bdce:	68db      	ldr	r3, [r3, #12]
 801bdd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bdd4:	6021      	str	r1, [r4, #0]
 801bdd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801bdda:	bd70      	pop	{r4, r5, r6, pc}
 801bddc:	0801ebec 	.word	0x0801ebec
 801bde0:	0801ed95 	.word	0x0801ed95

0801bde4 <__multadd>:
 801bde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bde8:	690d      	ldr	r5, [r1, #16]
 801bdea:	4607      	mov	r7, r0
 801bdec:	460c      	mov	r4, r1
 801bdee:	461e      	mov	r6, r3
 801bdf0:	f101 0c14 	add.w	ip, r1, #20
 801bdf4:	2000      	movs	r0, #0
 801bdf6:	f8dc 3000 	ldr.w	r3, [ip]
 801bdfa:	b299      	uxth	r1, r3
 801bdfc:	fb02 6101 	mla	r1, r2, r1, r6
 801be00:	0c1e      	lsrs	r6, r3, #16
 801be02:	0c0b      	lsrs	r3, r1, #16
 801be04:	fb02 3306 	mla	r3, r2, r6, r3
 801be08:	b289      	uxth	r1, r1
 801be0a:	3001      	adds	r0, #1
 801be0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801be10:	4285      	cmp	r5, r0
 801be12:	f84c 1b04 	str.w	r1, [ip], #4
 801be16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801be1a:	dcec      	bgt.n	801bdf6 <__multadd+0x12>
 801be1c:	b30e      	cbz	r6, 801be62 <__multadd+0x7e>
 801be1e:	68a3      	ldr	r3, [r4, #8]
 801be20:	42ab      	cmp	r3, r5
 801be22:	dc19      	bgt.n	801be58 <__multadd+0x74>
 801be24:	6861      	ldr	r1, [r4, #4]
 801be26:	4638      	mov	r0, r7
 801be28:	3101      	adds	r1, #1
 801be2a:	f7ff ff7b 	bl	801bd24 <_Balloc>
 801be2e:	4680      	mov	r8, r0
 801be30:	b928      	cbnz	r0, 801be3e <__multadd+0x5a>
 801be32:	4602      	mov	r2, r0
 801be34:	4b0c      	ldr	r3, [pc, #48]	@ (801be68 <__multadd+0x84>)
 801be36:	480d      	ldr	r0, [pc, #52]	@ (801be6c <__multadd+0x88>)
 801be38:	21ba      	movs	r1, #186	@ 0xba
 801be3a:	f7ff f895 	bl	801af68 <__assert_func>
 801be3e:	6922      	ldr	r2, [r4, #16]
 801be40:	3202      	adds	r2, #2
 801be42:	f104 010c 	add.w	r1, r4, #12
 801be46:	0092      	lsls	r2, r2, #2
 801be48:	300c      	adds	r0, #12
 801be4a:	f7ff f820 	bl	801ae8e <memcpy>
 801be4e:	4621      	mov	r1, r4
 801be50:	4638      	mov	r0, r7
 801be52:	f7ff ffa5 	bl	801bda0 <_Bfree>
 801be56:	4644      	mov	r4, r8
 801be58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801be5c:	3501      	adds	r5, #1
 801be5e:	615e      	str	r6, [r3, #20]
 801be60:	6125      	str	r5, [r4, #16]
 801be62:	4620      	mov	r0, r4
 801be64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be68:	0801ed84 	.word	0x0801ed84
 801be6c:	0801ed95 	.word	0x0801ed95

0801be70 <__hi0bits>:
 801be70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801be74:	4603      	mov	r3, r0
 801be76:	bf36      	itet	cc
 801be78:	0403      	lslcc	r3, r0, #16
 801be7a:	2000      	movcs	r0, #0
 801be7c:	2010      	movcc	r0, #16
 801be7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801be82:	bf3c      	itt	cc
 801be84:	021b      	lslcc	r3, r3, #8
 801be86:	3008      	addcc	r0, #8
 801be88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801be8c:	bf3c      	itt	cc
 801be8e:	011b      	lslcc	r3, r3, #4
 801be90:	3004      	addcc	r0, #4
 801be92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801be96:	bf3c      	itt	cc
 801be98:	009b      	lslcc	r3, r3, #2
 801be9a:	3002      	addcc	r0, #2
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	db05      	blt.n	801beac <__hi0bits+0x3c>
 801bea0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801bea4:	f100 0001 	add.w	r0, r0, #1
 801bea8:	bf08      	it	eq
 801beaa:	2020      	moveq	r0, #32
 801beac:	4770      	bx	lr

0801beae <__lo0bits>:
 801beae:	6803      	ldr	r3, [r0, #0]
 801beb0:	4602      	mov	r2, r0
 801beb2:	f013 0007 	ands.w	r0, r3, #7
 801beb6:	d00b      	beq.n	801bed0 <__lo0bits+0x22>
 801beb8:	07d9      	lsls	r1, r3, #31
 801beba:	d421      	bmi.n	801bf00 <__lo0bits+0x52>
 801bebc:	0798      	lsls	r0, r3, #30
 801bebe:	bf49      	itett	mi
 801bec0:	085b      	lsrmi	r3, r3, #1
 801bec2:	089b      	lsrpl	r3, r3, #2
 801bec4:	2001      	movmi	r0, #1
 801bec6:	6013      	strmi	r3, [r2, #0]
 801bec8:	bf5c      	itt	pl
 801beca:	6013      	strpl	r3, [r2, #0]
 801becc:	2002      	movpl	r0, #2
 801bece:	4770      	bx	lr
 801bed0:	b299      	uxth	r1, r3
 801bed2:	b909      	cbnz	r1, 801bed8 <__lo0bits+0x2a>
 801bed4:	0c1b      	lsrs	r3, r3, #16
 801bed6:	2010      	movs	r0, #16
 801bed8:	b2d9      	uxtb	r1, r3
 801beda:	b909      	cbnz	r1, 801bee0 <__lo0bits+0x32>
 801bedc:	3008      	adds	r0, #8
 801bede:	0a1b      	lsrs	r3, r3, #8
 801bee0:	0719      	lsls	r1, r3, #28
 801bee2:	bf04      	itt	eq
 801bee4:	091b      	lsreq	r3, r3, #4
 801bee6:	3004      	addeq	r0, #4
 801bee8:	0799      	lsls	r1, r3, #30
 801beea:	bf04      	itt	eq
 801beec:	089b      	lsreq	r3, r3, #2
 801beee:	3002      	addeq	r0, #2
 801bef0:	07d9      	lsls	r1, r3, #31
 801bef2:	d403      	bmi.n	801befc <__lo0bits+0x4e>
 801bef4:	085b      	lsrs	r3, r3, #1
 801bef6:	f100 0001 	add.w	r0, r0, #1
 801befa:	d003      	beq.n	801bf04 <__lo0bits+0x56>
 801befc:	6013      	str	r3, [r2, #0]
 801befe:	4770      	bx	lr
 801bf00:	2000      	movs	r0, #0
 801bf02:	4770      	bx	lr
 801bf04:	2020      	movs	r0, #32
 801bf06:	4770      	bx	lr

0801bf08 <__i2b>:
 801bf08:	b510      	push	{r4, lr}
 801bf0a:	460c      	mov	r4, r1
 801bf0c:	2101      	movs	r1, #1
 801bf0e:	f7ff ff09 	bl	801bd24 <_Balloc>
 801bf12:	4602      	mov	r2, r0
 801bf14:	b928      	cbnz	r0, 801bf22 <__i2b+0x1a>
 801bf16:	4b05      	ldr	r3, [pc, #20]	@ (801bf2c <__i2b+0x24>)
 801bf18:	4805      	ldr	r0, [pc, #20]	@ (801bf30 <__i2b+0x28>)
 801bf1a:	f240 1145 	movw	r1, #325	@ 0x145
 801bf1e:	f7ff f823 	bl	801af68 <__assert_func>
 801bf22:	2301      	movs	r3, #1
 801bf24:	6144      	str	r4, [r0, #20]
 801bf26:	6103      	str	r3, [r0, #16]
 801bf28:	bd10      	pop	{r4, pc}
 801bf2a:	bf00      	nop
 801bf2c:	0801ed84 	.word	0x0801ed84
 801bf30:	0801ed95 	.word	0x0801ed95

0801bf34 <__multiply>:
 801bf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf38:	f8d1 9010 	ldr.w	r9, [r1, #16]
 801bf3c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 801bf40:	45d1      	cmp	r9, sl
 801bf42:	b085      	sub	sp, #20
 801bf44:	4688      	mov	r8, r1
 801bf46:	4614      	mov	r4, r2
 801bf48:	db04      	blt.n	801bf54 <__multiply+0x20>
 801bf4a:	4653      	mov	r3, sl
 801bf4c:	460c      	mov	r4, r1
 801bf4e:	46ca      	mov	sl, r9
 801bf50:	4690      	mov	r8, r2
 801bf52:	4699      	mov	r9, r3
 801bf54:	68a3      	ldr	r3, [r4, #8]
 801bf56:	6861      	ldr	r1, [r4, #4]
 801bf58:	eb0a 0609 	add.w	r6, sl, r9
 801bf5c:	42b3      	cmp	r3, r6
 801bf5e:	bfb8      	it	lt
 801bf60:	3101      	addlt	r1, #1
 801bf62:	f7ff fedf 	bl	801bd24 <_Balloc>
 801bf66:	b930      	cbnz	r0, 801bf76 <__multiply+0x42>
 801bf68:	4602      	mov	r2, r0
 801bf6a:	4b45      	ldr	r3, [pc, #276]	@ (801c080 <__multiply+0x14c>)
 801bf6c:	4845      	ldr	r0, [pc, #276]	@ (801c084 <__multiply+0x150>)
 801bf6e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801bf72:	f7fe fff9 	bl	801af68 <__assert_func>
 801bf76:	f100 0514 	add.w	r5, r0, #20
 801bf7a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 801bf7e:	462b      	mov	r3, r5
 801bf80:	2200      	movs	r2, #0
 801bf82:	42bb      	cmp	r3, r7
 801bf84:	d31f      	bcc.n	801bfc6 <__multiply+0x92>
 801bf86:	f104 0c14 	add.w	ip, r4, #20
 801bf8a:	f108 0114 	add.w	r1, r8, #20
 801bf8e:	eb0c 038a 	add.w	r3, ip, sl, lsl #2
 801bf92:	eb01 0289 	add.w	r2, r1, r9, lsl #2
 801bf96:	9202      	str	r2, [sp, #8]
 801bf98:	1b1a      	subs	r2, r3, r4
 801bf9a:	3a15      	subs	r2, #21
 801bf9c:	f022 0203 	bic.w	r2, r2, #3
 801bfa0:	3415      	adds	r4, #21
 801bfa2:	429c      	cmp	r4, r3
 801bfa4:	bf88      	it	hi
 801bfa6:	2200      	movhi	r2, #0
 801bfa8:	9201      	str	r2, [sp, #4]
 801bfaa:	9a02      	ldr	r2, [sp, #8]
 801bfac:	9103      	str	r1, [sp, #12]
 801bfae:	428a      	cmp	r2, r1
 801bfb0:	d80c      	bhi.n	801bfcc <__multiply+0x98>
 801bfb2:	2e00      	cmp	r6, #0
 801bfb4:	dd03      	ble.n	801bfbe <__multiply+0x8a>
 801bfb6:	f857 3d04 	ldr.w	r3, [r7, #-4]!
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d05d      	beq.n	801c07a <__multiply+0x146>
 801bfbe:	6106      	str	r6, [r0, #16]
 801bfc0:	b005      	add	sp, #20
 801bfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfc6:	f843 2b04 	str.w	r2, [r3], #4
 801bfca:	e7da      	b.n	801bf82 <__multiply+0x4e>
 801bfcc:	f8b1 a000 	ldrh.w	sl, [r1]
 801bfd0:	f1ba 0f00 	cmp.w	sl, #0
 801bfd4:	d024      	beq.n	801c020 <__multiply+0xec>
 801bfd6:	46e0      	mov	r8, ip
 801bfd8:	46a9      	mov	r9, r5
 801bfda:	f04f 0e00 	mov.w	lr, #0
 801bfde:	f858 2b04 	ldr.w	r2, [r8], #4
 801bfe2:	f8d9 4000 	ldr.w	r4, [r9]
 801bfe6:	fa1f fb82 	uxth.w	fp, r2
 801bfea:	b2a4      	uxth	r4, r4
 801bfec:	fb0a 440b 	mla	r4, sl, fp, r4
 801bff0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bff4:	f8d9 2000 	ldr.w	r2, [r9]
 801bff8:	4474      	add	r4, lr
 801bffa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bffe:	fb0a e20b 	mla	r2, sl, fp, lr
 801c002:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801c006:	b2a4      	uxth	r4, r4
 801c008:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c00c:	4543      	cmp	r3, r8
 801c00e:	f849 4b04 	str.w	r4, [r9], #4
 801c012:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c016:	d8e2      	bhi.n	801bfde <__multiply+0xaa>
 801c018:	9a01      	ldr	r2, [sp, #4]
 801c01a:	18aa      	adds	r2, r5, r2
 801c01c:	f8c2 e004 	str.w	lr, [r2, #4]
 801c020:	9a03      	ldr	r2, [sp, #12]
 801c022:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 801c026:	3104      	adds	r1, #4
 801c028:	f1b8 0f00 	cmp.w	r8, #0
 801c02c:	d023      	beq.n	801c076 <__multiply+0x142>
 801c02e:	682a      	ldr	r2, [r5, #0]
 801c030:	46e6      	mov	lr, ip
 801c032:	4691      	mov	r9, r2
 801c034:	46aa      	mov	sl, r5
 801c036:	f04f 0b00 	mov.w	fp, #0
 801c03a:	f8be 4000 	ldrh.w	r4, [lr]
 801c03e:	fb08 b404 	mla	r4, r8, r4, fp
 801c042:	eb04 4419 	add.w	r4, r4, r9, lsr #16
 801c046:	b292      	uxth	r2, r2
 801c048:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c04c:	f84a 2b04 	str.w	r2, [sl], #4
 801c050:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c054:	f8da 9000 	ldr.w	r9, [sl]
 801c058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c05c:	fa1f f289 	uxth.w	r2, r9
 801c060:	fb08 220b 	mla	r2, r8, fp, r2
 801c064:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801c068:	4573      	cmp	r3, lr
 801c06a:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c06e:	d8e4      	bhi.n	801c03a <__multiply+0x106>
 801c070:	9c01      	ldr	r4, [sp, #4]
 801c072:	192c      	adds	r4, r5, r4
 801c074:	6062      	str	r2, [r4, #4]
 801c076:	3504      	adds	r5, #4
 801c078:	e797      	b.n	801bfaa <__multiply+0x76>
 801c07a:	3e01      	subs	r6, #1
 801c07c:	e799      	b.n	801bfb2 <__multiply+0x7e>
 801c07e:	bf00      	nop
 801c080:	0801ed84 	.word	0x0801ed84
 801c084:	0801ed95 	.word	0x0801ed95

0801c088 <__pow5mult>:
 801c088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c08c:	4617      	mov	r7, r2
 801c08e:	f012 0203 	ands.w	r2, r2, #3
 801c092:	4680      	mov	r8, r0
 801c094:	460d      	mov	r5, r1
 801c096:	d007      	beq.n	801c0a8 <__pow5mult+0x20>
 801c098:	4c26      	ldr	r4, [pc, #152]	@ (801c134 <__pow5mult+0xac>)
 801c09a:	3a01      	subs	r2, #1
 801c09c:	2300      	movs	r3, #0
 801c09e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c0a2:	f7ff fe9f 	bl	801bde4 <__multadd>
 801c0a6:	4605      	mov	r5, r0
 801c0a8:	10bf      	asrs	r7, r7, #2
 801c0aa:	d03f      	beq.n	801c12c <__pow5mult+0xa4>
 801c0ac:	f8d8 401c 	ldr.w	r4, [r8, #28]
 801c0b0:	b994      	cbnz	r4, 801c0d8 <__pow5mult+0x50>
 801c0b2:	2010      	movs	r0, #16
 801c0b4:	f7fd fcde 	bl	8019a74 <malloc>
 801c0b8:	4604      	mov	r4, r0
 801c0ba:	f8c8 001c 	str.w	r0, [r8, #28]
 801c0be:	b930      	cbnz	r0, 801c0ce <__pow5mult+0x46>
 801c0c0:	4602      	mov	r2, r0
 801c0c2:	4b1d      	ldr	r3, [pc, #116]	@ (801c138 <__pow5mult+0xb0>)
 801c0c4:	481d      	ldr	r0, [pc, #116]	@ (801c13c <__pow5mult+0xb4>)
 801c0c6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c0ca:	f7fe ff4d 	bl	801af68 <__assert_func>
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801c0d4:	6003      	str	r3, [r0, #0]
 801c0d6:	60c3      	str	r3, [r0, #12]
 801c0d8:	68a6      	ldr	r6, [r4, #8]
 801c0da:	b946      	cbnz	r6, 801c0ee <__pow5mult+0x66>
 801c0dc:	f240 2171 	movw	r1, #625	@ 0x271
 801c0e0:	4640      	mov	r0, r8
 801c0e2:	f7ff ff11 	bl	801bf08 <__i2b>
 801c0e6:	2300      	movs	r3, #0
 801c0e8:	60a0      	str	r0, [r4, #8]
 801c0ea:	4606      	mov	r6, r0
 801c0ec:	6003      	str	r3, [r0, #0]
 801c0ee:	462c      	mov	r4, r5
 801c0f0:	f04f 0900 	mov.w	r9, #0
 801c0f4:	f007 0301 	and.w	r3, r7, #1
 801c0f8:	107f      	asrs	r7, r7, #1
 801c0fa:	b153      	cbz	r3, 801c112 <__pow5mult+0x8a>
 801c0fc:	4629      	mov	r1, r5
 801c0fe:	4632      	mov	r2, r6
 801c100:	4640      	mov	r0, r8
 801c102:	f7ff ff17 	bl	801bf34 <__multiply>
 801c106:	4621      	mov	r1, r4
 801c108:	4605      	mov	r5, r0
 801c10a:	4640      	mov	r0, r8
 801c10c:	f7ff fe48 	bl	801bda0 <_Bfree>
 801c110:	b167      	cbz	r7, 801c12c <__pow5mult+0xa4>
 801c112:	6830      	ldr	r0, [r6, #0]
 801c114:	b938      	cbnz	r0, 801c126 <__pow5mult+0x9e>
 801c116:	4632      	mov	r2, r6
 801c118:	4631      	mov	r1, r6
 801c11a:	4640      	mov	r0, r8
 801c11c:	f7ff ff0a 	bl	801bf34 <__multiply>
 801c120:	6030      	str	r0, [r6, #0]
 801c122:	f8c0 9000 	str.w	r9, [r0]
 801c126:	4606      	mov	r6, r0
 801c128:	462c      	mov	r4, r5
 801c12a:	e7e3      	b.n	801c0f4 <__pow5mult+0x6c>
 801c12c:	4628      	mov	r0, r5
 801c12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c132:	bf00      	nop
 801c134:	0801ef34 	.word	0x0801ef34
 801c138:	0801ebec 	.word	0x0801ebec
 801c13c:	0801ed95 	.word	0x0801ed95

0801c140 <__lshift>:
 801c140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c144:	460c      	mov	r4, r1
 801c146:	6849      	ldr	r1, [r1, #4]
 801c148:	6923      	ldr	r3, [r4, #16]
 801c14a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c14e:	68a3      	ldr	r3, [r4, #8]
 801c150:	4607      	mov	r7, r0
 801c152:	4615      	mov	r5, r2
 801c154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c158:	f108 0901 	add.w	r9, r8, #1
 801c15c:	454b      	cmp	r3, r9
 801c15e:	db0b      	blt.n	801c178 <__lshift+0x38>
 801c160:	4638      	mov	r0, r7
 801c162:	f7ff fddf 	bl	801bd24 <_Balloc>
 801c166:	4606      	mov	r6, r0
 801c168:	b948      	cbnz	r0, 801c17e <__lshift+0x3e>
 801c16a:	4602      	mov	r2, r0
 801c16c:	4b29      	ldr	r3, [pc, #164]	@ (801c214 <__lshift+0xd4>)
 801c16e:	482a      	ldr	r0, [pc, #168]	@ (801c218 <__lshift+0xd8>)
 801c170:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c174:	f7fe fef8 	bl	801af68 <__assert_func>
 801c178:	3101      	adds	r1, #1
 801c17a:	005b      	lsls	r3, r3, #1
 801c17c:	e7ee      	b.n	801c15c <__lshift+0x1c>
 801c17e:	2300      	movs	r3, #0
 801c180:	f100 0c14 	add.w	ip, r0, #20
 801c184:	f100 0210 	add.w	r2, r0, #16
 801c188:	4619      	mov	r1, r3
 801c18a:	4553      	cmp	r3, sl
 801c18c:	db35      	blt.n	801c1fa <__lshift+0xba>
 801c18e:	6922      	ldr	r2, [r4, #16]
 801c190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c194:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801c198:	f104 0314 	add.w	r3, r4, #20
 801c19c:	f015 0e1f 	ands.w	lr, r5, #31
 801c1a0:	4661      	mov	r1, ip
 801c1a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801c1a6:	d02c      	beq.n	801c202 <__lshift+0xc2>
 801c1a8:	f1ce 0a20 	rsb	sl, lr, #32
 801c1ac:	2500      	movs	r5, #0
 801c1ae:	6818      	ldr	r0, [r3, #0]
 801c1b0:	468b      	mov	fp, r1
 801c1b2:	fa00 f00e 	lsl.w	r0, r0, lr
 801c1b6:	4328      	orrs	r0, r5
 801c1b8:	f8cb 0000 	str.w	r0, [fp]
 801c1bc:	f853 5b04 	ldr.w	r5, [r3], #4
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	f101 0104 	add.w	r1, r1, #4
 801c1c6:	fa25 f50a 	lsr.w	r5, r5, sl
 801c1ca:	d8f0      	bhi.n	801c1ae <__lshift+0x6e>
 801c1cc:	1b13      	subs	r3, r2, r4
 801c1ce:	3b15      	subs	r3, #21
 801c1d0:	f023 0303 	bic.w	r3, r3, #3
 801c1d4:	f104 0115 	add.w	r1, r4, #21
 801c1d8:	428a      	cmp	r2, r1
 801c1da:	bf38      	it	cc
 801c1dc:	2300      	movcc	r3, #0
 801c1de:	449c      	add	ip, r3
 801c1e0:	f8cc 5004 	str.w	r5, [ip, #4]
 801c1e4:	b905      	cbnz	r5, 801c1e8 <__lshift+0xa8>
 801c1e6:	46c1      	mov	r9, r8
 801c1e8:	4638      	mov	r0, r7
 801c1ea:	f8c6 9010 	str.w	r9, [r6, #16]
 801c1ee:	4621      	mov	r1, r4
 801c1f0:	f7ff fdd6 	bl	801bda0 <_Bfree>
 801c1f4:	4630      	mov	r0, r6
 801c1f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1fa:	f842 1f04 	str.w	r1, [r2, #4]!
 801c1fe:	3301      	adds	r3, #1
 801c200:	e7c3      	b.n	801c18a <__lshift+0x4a>
 801c202:	f853 5b04 	ldr.w	r5, [r3], #4
 801c206:	600d      	str	r5, [r1, #0]
 801c208:	429a      	cmp	r2, r3
 801c20a:	f101 0104 	add.w	r1, r1, #4
 801c20e:	d8f8      	bhi.n	801c202 <__lshift+0xc2>
 801c210:	e7e9      	b.n	801c1e6 <__lshift+0xa6>
 801c212:	bf00      	nop
 801c214:	0801ed84 	.word	0x0801ed84
 801c218:	0801ed95 	.word	0x0801ed95

0801c21c <__mcmp>:
 801c21c:	690a      	ldr	r2, [r1, #16]
 801c21e:	4603      	mov	r3, r0
 801c220:	6900      	ldr	r0, [r0, #16]
 801c222:	1a80      	subs	r0, r0, r2
 801c224:	b530      	push	{r4, r5, lr}
 801c226:	d10e      	bne.n	801c246 <__mcmp+0x2a>
 801c228:	3314      	adds	r3, #20
 801c22a:	3114      	adds	r1, #20
 801c22c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c234:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c238:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c23c:	4295      	cmp	r5, r2
 801c23e:	d003      	beq.n	801c248 <__mcmp+0x2c>
 801c240:	d205      	bcs.n	801c24e <__mcmp+0x32>
 801c242:	f04f 30ff 	mov.w	r0, #4294967295
 801c246:	bd30      	pop	{r4, r5, pc}
 801c248:	42a3      	cmp	r3, r4
 801c24a:	d3f3      	bcc.n	801c234 <__mcmp+0x18>
 801c24c:	e7fb      	b.n	801c246 <__mcmp+0x2a>
 801c24e:	2001      	movs	r0, #1
 801c250:	e7f9      	b.n	801c246 <__mcmp+0x2a>
	...

0801c254 <__mdiff>:
 801c254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c258:	468a      	mov	sl, r1
 801c25a:	4606      	mov	r6, r0
 801c25c:	4611      	mov	r1, r2
 801c25e:	4650      	mov	r0, sl
 801c260:	4614      	mov	r4, r2
 801c262:	f7ff ffdb 	bl	801c21c <__mcmp>
 801c266:	1e05      	subs	r5, r0, #0
 801c268:	d112      	bne.n	801c290 <__mdiff+0x3c>
 801c26a:	4629      	mov	r1, r5
 801c26c:	4630      	mov	r0, r6
 801c26e:	f7ff fd59 	bl	801bd24 <_Balloc>
 801c272:	4602      	mov	r2, r0
 801c274:	b928      	cbnz	r0, 801c282 <__mdiff+0x2e>
 801c276:	4b41      	ldr	r3, [pc, #260]	@ (801c37c <__mdiff+0x128>)
 801c278:	f240 2137 	movw	r1, #567	@ 0x237
 801c27c:	4840      	ldr	r0, [pc, #256]	@ (801c380 <__mdiff+0x12c>)
 801c27e:	f7fe fe73 	bl	801af68 <__assert_func>
 801c282:	2301      	movs	r3, #1
 801c284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c288:	4610      	mov	r0, r2
 801c28a:	b003      	add	sp, #12
 801c28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c290:	bfbc      	itt	lt
 801c292:	4653      	movlt	r3, sl
 801c294:	46a2      	movlt	sl, r4
 801c296:	4630      	mov	r0, r6
 801c298:	f8da 1004 	ldr.w	r1, [sl, #4]
 801c29c:	bfba      	itte	lt
 801c29e:	461c      	movlt	r4, r3
 801c2a0:	2501      	movlt	r5, #1
 801c2a2:	2500      	movge	r5, #0
 801c2a4:	f7ff fd3e 	bl	801bd24 <_Balloc>
 801c2a8:	4602      	mov	r2, r0
 801c2aa:	b918      	cbnz	r0, 801c2b4 <__mdiff+0x60>
 801c2ac:	4b33      	ldr	r3, [pc, #204]	@ (801c37c <__mdiff+0x128>)
 801c2ae:	f240 2145 	movw	r1, #581	@ 0x245
 801c2b2:	e7e3      	b.n	801c27c <__mdiff+0x28>
 801c2b4:	f8da 7010 	ldr.w	r7, [sl, #16]
 801c2b8:	6926      	ldr	r6, [r4, #16]
 801c2ba:	60c5      	str	r5, [r0, #12]
 801c2bc:	f10a 0914 	add.w	r9, sl, #20
 801c2c0:	f104 0e14 	add.w	lr, r4, #20
 801c2c4:	f100 0514 	add.w	r5, r0, #20
 801c2c8:	f10a 0310 	add.w	r3, sl, #16
 801c2cc:	eb09 0887 	add.w	r8, r9, r7, lsl #2
 801c2d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c2d4:	9301      	str	r3, [sp, #4]
 801c2d6:	46ab      	mov	fp, r5
 801c2d8:	f04f 0c00 	mov.w	ip, #0
 801c2dc:	9b01      	ldr	r3, [sp, #4]
 801c2de:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c2e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c2e6:	9301      	str	r3, [sp, #4]
 801c2e8:	fa1f f38a 	uxth.w	r3, sl
 801c2ec:	4619      	mov	r1, r3
 801c2ee:	b283      	uxth	r3, r0
 801c2f0:	1acb      	subs	r3, r1, r3
 801c2f2:	0c00      	lsrs	r0, r0, #16
 801c2f4:	4463      	add	r3, ip
 801c2f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c2fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c2fe:	b29b      	uxth	r3, r3
 801c300:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c304:	4576      	cmp	r6, lr
 801c306:	f84b 3b04 	str.w	r3, [fp], #4
 801c30a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c30e:	d8e5      	bhi.n	801c2dc <__mdiff+0x88>
 801c310:	1b33      	subs	r3, r6, r4
 801c312:	3b15      	subs	r3, #21
 801c314:	3415      	adds	r4, #21
 801c316:	f023 0303 	bic.w	r3, r3, #3
 801c31a:	42a6      	cmp	r6, r4
 801c31c:	bf38      	it	cc
 801c31e:	2300      	movcc	r3, #0
 801c320:	18e8      	adds	r0, r5, r3
 801c322:	444b      	add	r3, r9
 801c324:	1d1c      	adds	r4, r3, #4
 801c326:	3004      	adds	r0, #4
 801c328:	4626      	mov	r6, r4
 801c32a:	eba5 0509 	sub.w	r5, r5, r9
 801c32e:	4546      	cmp	r6, r8
 801c330:	eb06 0e05 	add.w	lr, r6, r5
 801c334:	d30e      	bcc.n	801c354 <__mdiff+0x100>
 801c336:	f108 0103 	add.w	r1, r8, #3
 801c33a:	1b09      	subs	r1, r1, r4
 801c33c:	f021 0103 	bic.w	r1, r1, #3
 801c340:	3301      	adds	r3, #1
 801c342:	4598      	cmp	r8, r3
 801c344:	bf38      	it	cc
 801c346:	2100      	movcc	r1, #0
 801c348:	4401      	add	r1, r0
 801c34a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801c34e:	b19b      	cbz	r3, 801c378 <__mdiff+0x124>
 801c350:	6117      	str	r7, [r2, #16]
 801c352:	e799      	b.n	801c288 <__mdiff+0x34>
 801c354:	f856 1b04 	ldr.w	r1, [r6], #4
 801c358:	46e2      	mov	sl, ip
 801c35a:	ea4f 4911 	mov.w	r9, r1, lsr #16
 801c35e:	fa1c fc81 	uxtah	ip, ip, r1
 801c362:	4451      	add	r1, sl
 801c364:	eb09 492c 	add.w	r9, r9, ip, asr #16
 801c368:	b289      	uxth	r1, r1
 801c36a:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801c36e:	ea4f 4c29 	mov.w	ip, r9, asr #16
 801c372:	f8ce 1000 	str.w	r1, [lr]
 801c376:	e7da      	b.n	801c32e <__mdiff+0xda>
 801c378:	3f01      	subs	r7, #1
 801c37a:	e7e6      	b.n	801c34a <__mdiff+0xf6>
 801c37c:	0801ed84 	.word	0x0801ed84
 801c380:	0801ed95 	.word	0x0801ed95

0801c384 <__d2b>:
 801c384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c388:	460f      	mov	r7, r1
 801c38a:	2101      	movs	r1, #1
 801c38c:	ec59 8b10 	vmov	r8, r9, d0
 801c390:	4616      	mov	r6, r2
 801c392:	f7ff fcc7 	bl	801bd24 <_Balloc>
 801c396:	4604      	mov	r4, r0
 801c398:	b930      	cbnz	r0, 801c3a8 <__d2b+0x24>
 801c39a:	4602      	mov	r2, r0
 801c39c:	4b23      	ldr	r3, [pc, #140]	@ (801c42c <__d2b+0xa8>)
 801c39e:	4824      	ldr	r0, [pc, #144]	@ (801c430 <__d2b+0xac>)
 801c3a0:	f240 310f 	movw	r1, #783	@ 0x30f
 801c3a4:	f7fe fde0 	bl	801af68 <__assert_func>
 801c3a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c3ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c3b0:	b10d      	cbz	r5, 801c3b6 <__d2b+0x32>
 801c3b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c3b6:	9301      	str	r3, [sp, #4]
 801c3b8:	f1b8 0300 	subs.w	r3, r8, #0
 801c3bc:	d023      	beq.n	801c406 <__d2b+0x82>
 801c3be:	4668      	mov	r0, sp
 801c3c0:	9300      	str	r3, [sp, #0]
 801c3c2:	f7ff fd74 	bl	801beae <__lo0bits>
 801c3c6:	9900      	ldr	r1, [sp, #0]
 801c3c8:	b1d8      	cbz	r0, 801c402 <__d2b+0x7e>
 801c3ca:	9a01      	ldr	r2, [sp, #4]
 801c3cc:	f1c0 0320 	rsb	r3, r0, #32
 801c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 801c3d4:	430b      	orrs	r3, r1
 801c3d6:	40c2      	lsrs	r2, r0
 801c3d8:	6163      	str	r3, [r4, #20]
 801c3da:	9201      	str	r2, [sp, #4]
 801c3dc:	9b01      	ldr	r3, [sp, #4]
 801c3de:	61a3      	str	r3, [r4, #24]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	bf0c      	ite	eq
 801c3e4:	2201      	moveq	r2, #1
 801c3e6:	2202      	movne	r2, #2
 801c3e8:	6122      	str	r2, [r4, #16]
 801c3ea:	b1a5      	cbz	r5, 801c416 <__d2b+0x92>
 801c3ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c3f0:	4405      	add	r5, r0
 801c3f2:	603d      	str	r5, [r7, #0]
 801c3f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c3f8:	6030      	str	r0, [r6, #0]
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	b003      	add	sp, #12
 801c3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c402:	6161      	str	r1, [r4, #20]
 801c404:	e7ea      	b.n	801c3dc <__d2b+0x58>
 801c406:	a801      	add	r0, sp, #4
 801c408:	f7ff fd51 	bl	801beae <__lo0bits>
 801c40c:	9b01      	ldr	r3, [sp, #4]
 801c40e:	6163      	str	r3, [r4, #20]
 801c410:	3020      	adds	r0, #32
 801c412:	2201      	movs	r2, #1
 801c414:	e7e8      	b.n	801c3e8 <__d2b+0x64>
 801c416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c41a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c41e:	6038      	str	r0, [r7, #0]
 801c420:	6918      	ldr	r0, [r3, #16]
 801c422:	f7ff fd25 	bl	801be70 <__hi0bits>
 801c426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c42a:	e7e5      	b.n	801c3f8 <__d2b+0x74>
 801c42c:	0801ed84 	.word	0x0801ed84
 801c430:	0801ed95 	.word	0x0801ed95

0801c434 <_malloc_usable_size_r>:
 801c434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c438:	1f18      	subs	r0, r3, #4
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	bfbc      	itt	lt
 801c43e:	580b      	ldrlt	r3, [r1, r0]
 801c440:	18c0      	addlt	r0, r0, r3
 801c442:	4770      	bx	lr

0801c444 <__ssputs_r>:
 801c444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c448:	688e      	ldr	r6, [r1, #8]
 801c44a:	461f      	mov	r7, r3
 801c44c:	42be      	cmp	r6, r7
 801c44e:	4682      	mov	sl, r0
 801c450:	460c      	mov	r4, r1
 801c452:	4690      	mov	r8, r2
 801c454:	4633      	mov	r3, r6
 801c456:	d853      	bhi.n	801c500 <__ssputs_r+0xbc>
 801c458:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801c45c:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 801c460:	d02b      	beq.n	801c4ba <__ssputs_r+0x76>
 801c462:	6965      	ldr	r5, [r4, #20]
 801c464:	6823      	ldr	r3, [r4, #0]
 801c466:	6909      	ldr	r1, [r1, #16]
 801c468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c46c:	eba3 0901 	sub.w	r9, r3, r1
 801c470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c474:	1c7b      	adds	r3, r7, #1
 801c476:	106d      	asrs	r5, r5, #1
 801c478:	444b      	add	r3, r9
 801c47a:	42ab      	cmp	r3, r5
 801c47c:	462a      	mov	r2, r5
 801c47e:	bf84      	itt	hi
 801c480:	461d      	movhi	r5, r3
 801c482:	462a      	movhi	r2, r5
 801c484:	0543      	lsls	r3, r0, #21
 801c486:	d527      	bpl.n	801c4d8 <__ssputs_r+0x94>
 801c488:	4611      	mov	r1, r2
 801c48a:	4650      	mov	r0, sl
 801c48c:	f7fd fb24 	bl	8019ad8 <_malloc_r>
 801c490:	4606      	mov	r6, r0
 801c492:	b358      	cbz	r0, 801c4ec <__ssputs_r+0xa8>
 801c494:	6921      	ldr	r1, [r4, #16]
 801c496:	464a      	mov	r2, r9
 801c498:	f7fe fcf9 	bl	801ae8e <memcpy>
 801c49c:	89a3      	ldrh	r3, [r4, #12]
 801c49e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c4a6:	81a3      	strh	r3, [r4, #12]
 801c4a8:	6126      	str	r6, [r4, #16]
 801c4aa:	6165      	str	r5, [r4, #20]
 801c4ac:	444e      	add	r6, r9
 801c4ae:	eba5 0509 	sub.w	r5, r5, r9
 801c4b2:	6026      	str	r6, [r4, #0]
 801c4b4:	60a5      	str	r5, [r4, #8]
 801c4b6:	463e      	mov	r6, r7
 801c4b8:	463b      	mov	r3, r7
 801c4ba:	461f      	mov	r7, r3
 801c4bc:	6820      	ldr	r0, [r4, #0]
 801c4be:	463a      	mov	r2, r7
 801c4c0:	4641      	mov	r1, r8
 801c4c2:	f7fe fbeb 	bl	801ac9c <memmove>
 801c4c6:	68a3      	ldr	r3, [r4, #8]
 801c4c8:	1b9b      	subs	r3, r3, r6
 801c4ca:	60a3      	str	r3, [r4, #8]
 801c4cc:	6823      	ldr	r3, [r4, #0]
 801c4ce:	443b      	add	r3, r7
 801c4d0:	6023      	str	r3, [r4, #0]
 801c4d2:	2000      	movs	r0, #0
 801c4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4d8:	4650      	mov	r0, sl
 801c4da:	f7fd fbfd 	bl	8019cd8 <_realloc_r>
 801c4de:	4606      	mov	r6, r0
 801c4e0:	2800      	cmp	r0, #0
 801c4e2:	d1e1      	bne.n	801c4a8 <__ssputs_r+0x64>
 801c4e4:	6921      	ldr	r1, [r4, #16]
 801c4e6:	4650      	mov	r0, sl
 801c4e8:	f7ff fbd2 	bl	801bc90 <_free_r>
 801c4ec:	230c      	movs	r3, #12
 801c4ee:	f8ca 3000 	str.w	r3, [sl]
 801c4f2:	89a3      	ldrh	r3, [r4, #12]
 801c4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c4f8:	81a3      	strh	r3, [r4, #12]
 801c4fa:	f04f 30ff 	mov.w	r0, #4294967295
 801c4fe:	e7e9      	b.n	801c4d4 <__ssputs_r+0x90>
 801c500:	463e      	mov	r6, r7
 801c502:	e7db      	b.n	801c4bc <__ssputs_r+0x78>

0801c504 <_svfiprintf_r>:
 801c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c508:	4698      	mov	r8, r3
 801c50a:	898b      	ldrh	r3, [r1, #12]
 801c50c:	061b      	lsls	r3, r3, #24
 801c50e:	b09d      	sub	sp, #116	@ 0x74
 801c510:	4607      	mov	r7, r0
 801c512:	460d      	mov	r5, r1
 801c514:	4614      	mov	r4, r2
 801c516:	d510      	bpl.n	801c53a <_svfiprintf_r+0x36>
 801c518:	690b      	ldr	r3, [r1, #16]
 801c51a:	b973      	cbnz	r3, 801c53a <_svfiprintf_r+0x36>
 801c51c:	2140      	movs	r1, #64	@ 0x40
 801c51e:	f7fd fadb 	bl	8019ad8 <_malloc_r>
 801c522:	6028      	str	r0, [r5, #0]
 801c524:	6128      	str	r0, [r5, #16]
 801c526:	b930      	cbnz	r0, 801c536 <_svfiprintf_r+0x32>
 801c528:	230c      	movs	r3, #12
 801c52a:	603b      	str	r3, [r7, #0]
 801c52c:	f04f 30ff 	mov.w	r0, #4294967295
 801c530:	b01d      	add	sp, #116	@ 0x74
 801c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c536:	2340      	movs	r3, #64	@ 0x40
 801c538:	616b      	str	r3, [r5, #20]
 801c53a:	2300      	movs	r3, #0
 801c53c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c53e:	2320      	movs	r3, #32
 801c540:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c544:	f8cd 800c 	str.w	r8, [sp, #12]
 801c548:	2330      	movs	r3, #48	@ 0x30
 801c54a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c6e8 <_svfiprintf_r+0x1e4>
 801c54e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c552:	f04f 0901 	mov.w	r9, #1
 801c556:	4623      	mov	r3, r4
 801c558:	469a      	mov	sl, r3
 801c55a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c55e:	b10a      	cbz	r2, 801c564 <_svfiprintf_r+0x60>
 801c560:	2a25      	cmp	r2, #37	@ 0x25
 801c562:	d1f9      	bne.n	801c558 <_svfiprintf_r+0x54>
 801c564:	ebba 0b04 	subs.w	fp, sl, r4
 801c568:	d00b      	beq.n	801c582 <_svfiprintf_r+0x7e>
 801c56a:	465b      	mov	r3, fp
 801c56c:	4622      	mov	r2, r4
 801c56e:	4629      	mov	r1, r5
 801c570:	4638      	mov	r0, r7
 801c572:	f7ff ff67 	bl	801c444 <__ssputs_r>
 801c576:	3001      	adds	r0, #1
 801c578:	f000 80a7 	beq.w	801c6ca <_svfiprintf_r+0x1c6>
 801c57c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c57e:	445a      	add	r2, fp
 801c580:	9209      	str	r2, [sp, #36]	@ 0x24
 801c582:	f89a 3000 	ldrb.w	r3, [sl]
 801c586:	2b00      	cmp	r3, #0
 801c588:	f000 809f 	beq.w	801c6ca <_svfiprintf_r+0x1c6>
 801c58c:	2300      	movs	r3, #0
 801c58e:	f04f 32ff 	mov.w	r2, #4294967295
 801c592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c596:	f10a 0a01 	add.w	sl, sl, #1
 801c59a:	9304      	str	r3, [sp, #16]
 801c59c:	9307      	str	r3, [sp, #28]
 801c59e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c5a2:	931a      	str	r3, [sp, #104]	@ 0x68
 801c5a4:	4654      	mov	r4, sl
 801c5a6:	2205      	movs	r2, #5
 801c5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5ac:	484e      	ldr	r0, [pc, #312]	@ (801c6e8 <_svfiprintf_r+0x1e4>)
 801c5ae:	f7e3 fe07 	bl	80001c0 <memchr>
 801c5b2:	9a04      	ldr	r2, [sp, #16]
 801c5b4:	b9d8      	cbnz	r0, 801c5ee <_svfiprintf_r+0xea>
 801c5b6:	06d0      	lsls	r0, r2, #27
 801c5b8:	bf44      	itt	mi
 801c5ba:	2320      	movmi	r3, #32
 801c5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c5c0:	0711      	lsls	r1, r2, #28
 801c5c2:	bf44      	itt	mi
 801c5c4:	232b      	movmi	r3, #43	@ 0x2b
 801c5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c5ca:	f89a 3000 	ldrb.w	r3, [sl]
 801c5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 801c5d0:	d015      	beq.n	801c5fe <_svfiprintf_r+0xfa>
 801c5d2:	9a07      	ldr	r2, [sp, #28]
 801c5d4:	4654      	mov	r4, sl
 801c5d6:	2000      	movs	r0, #0
 801c5d8:	f04f 0c0a 	mov.w	ip, #10
 801c5dc:	4621      	mov	r1, r4
 801c5de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c5e2:	3b30      	subs	r3, #48	@ 0x30
 801c5e4:	2b09      	cmp	r3, #9
 801c5e6:	d94b      	bls.n	801c680 <_svfiprintf_r+0x17c>
 801c5e8:	b1b0      	cbz	r0, 801c618 <_svfiprintf_r+0x114>
 801c5ea:	9207      	str	r2, [sp, #28]
 801c5ec:	e014      	b.n	801c618 <_svfiprintf_r+0x114>
 801c5ee:	eba0 0308 	sub.w	r3, r0, r8
 801c5f2:	fa09 f303 	lsl.w	r3, r9, r3
 801c5f6:	4313      	orrs	r3, r2
 801c5f8:	9304      	str	r3, [sp, #16]
 801c5fa:	46a2      	mov	sl, r4
 801c5fc:	e7d2      	b.n	801c5a4 <_svfiprintf_r+0xa0>
 801c5fe:	9b03      	ldr	r3, [sp, #12]
 801c600:	1d19      	adds	r1, r3, #4
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	9103      	str	r1, [sp, #12]
 801c606:	2b00      	cmp	r3, #0
 801c608:	bfbb      	ittet	lt
 801c60a:	425b      	neglt	r3, r3
 801c60c:	f042 0202 	orrlt.w	r2, r2, #2
 801c610:	9307      	strge	r3, [sp, #28]
 801c612:	9307      	strlt	r3, [sp, #28]
 801c614:	bfb8      	it	lt
 801c616:	9204      	strlt	r2, [sp, #16]
 801c618:	7823      	ldrb	r3, [r4, #0]
 801c61a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c61c:	d10a      	bne.n	801c634 <_svfiprintf_r+0x130>
 801c61e:	7863      	ldrb	r3, [r4, #1]
 801c620:	2b2a      	cmp	r3, #42	@ 0x2a
 801c622:	d132      	bne.n	801c68a <_svfiprintf_r+0x186>
 801c624:	9b03      	ldr	r3, [sp, #12]
 801c626:	1d1a      	adds	r2, r3, #4
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	9203      	str	r2, [sp, #12]
 801c62c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c630:	3402      	adds	r4, #2
 801c632:	9305      	str	r3, [sp, #20]
 801c634:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c6f8 <_svfiprintf_r+0x1f4>
 801c638:	7821      	ldrb	r1, [r4, #0]
 801c63a:	2203      	movs	r2, #3
 801c63c:	4650      	mov	r0, sl
 801c63e:	f7e3 fdbf 	bl	80001c0 <memchr>
 801c642:	b138      	cbz	r0, 801c654 <_svfiprintf_r+0x150>
 801c644:	9b04      	ldr	r3, [sp, #16]
 801c646:	eba0 000a 	sub.w	r0, r0, sl
 801c64a:	2240      	movs	r2, #64	@ 0x40
 801c64c:	4082      	lsls	r2, r0
 801c64e:	4313      	orrs	r3, r2
 801c650:	3401      	adds	r4, #1
 801c652:	9304      	str	r3, [sp, #16]
 801c654:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c658:	4824      	ldr	r0, [pc, #144]	@ (801c6ec <_svfiprintf_r+0x1e8>)
 801c65a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c65e:	2206      	movs	r2, #6
 801c660:	f7e3 fdae 	bl	80001c0 <memchr>
 801c664:	2800      	cmp	r0, #0
 801c666:	d036      	beq.n	801c6d6 <_svfiprintf_r+0x1d2>
 801c668:	4b21      	ldr	r3, [pc, #132]	@ (801c6f0 <_svfiprintf_r+0x1ec>)
 801c66a:	bb1b      	cbnz	r3, 801c6b4 <_svfiprintf_r+0x1b0>
 801c66c:	9b03      	ldr	r3, [sp, #12]
 801c66e:	3307      	adds	r3, #7
 801c670:	f023 0307 	bic.w	r3, r3, #7
 801c674:	3308      	adds	r3, #8
 801c676:	9303      	str	r3, [sp, #12]
 801c678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c67a:	4433      	add	r3, r6
 801c67c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c67e:	e76a      	b.n	801c556 <_svfiprintf_r+0x52>
 801c680:	fb0c 3202 	mla	r2, ip, r2, r3
 801c684:	460c      	mov	r4, r1
 801c686:	2001      	movs	r0, #1
 801c688:	e7a8      	b.n	801c5dc <_svfiprintf_r+0xd8>
 801c68a:	2300      	movs	r3, #0
 801c68c:	3401      	adds	r4, #1
 801c68e:	9305      	str	r3, [sp, #20]
 801c690:	4619      	mov	r1, r3
 801c692:	f04f 0c0a 	mov.w	ip, #10
 801c696:	4620      	mov	r0, r4
 801c698:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c69c:	3a30      	subs	r2, #48	@ 0x30
 801c69e:	2a09      	cmp	r2, #9
 801c6a0:	d903      	bls.n	801c6aa <_svfiprintf_r+0x1a6>
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d0c6      	beq.n	801c634 <_svfiprintf_r+0x130>
 801c6a6:	9105      	str	r1, [sp, #20]
 801c6a8:	e7c4      	b.n	801c634 <_svfiprintf_r+0x130>
 801c6aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801c6ae:	4604      	mov	r4, r0
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	e7f0      	b.n	801c696 <_svfiprintf_r+0x192>
 801c6b4:	ab03      	add	r3, sp, #12
 801c6b6:	9300      	str	r3, [sp, #0]
 801c6b8:	462a      	mov	r2, r5
 801c6ba:	4b0e      	ldr	r3, [pc, #56]	@ (801c6f4 <_svfiprintf_r+0x1f0>)
 801c6bc:	a904      	add	r1, sp, #16
 801c6be:	4638      	mov	r0, r7
 801c6c0:	f7fd fc50 	bl	8019f64 <_printf_float>
 801c6c4:	1c42      	adds	r2, r0, #1
 801c6c6:	4606      	mov	r6, r0
 801c6c8:	d1d6      	bne.n	801c678 <_svfiprintf_r+0x174>
 801c6ca:	89ab      	ldrh	r3, [r5, #12]
 801c6cc:	065b      	lsls	r3, r3, #25
 801c6ce:	f53f af2d 	bmi.w	801c52c <_svfiprintf_r+0x28>
 801c6d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c6d4:	e72c      	b.n	801c530 <_svfiprintf_r+0x2c>
 801c6d6:	ab03      	add	r3, sp, #12
 801c6d8:	9300      	str	r3, [sp, #0]
 801c6da:	462a      	mov	r2, r5
 801c6dc:	4b05      	ldr	r3, [pc, #20]	@ (801c6f4 <_svfiprintf_r+0x1f0>)
 801c6de:	a904      	add	r1, sp, #16
 801c6e0:	4638      	mov	r0, r7
 801c6e2:	f7fd fed5 	bl	801a490 <_printf_i>
 801c6e6:	e7ed      	b.n	801c6c4 <_svfiprintf_r+0x1c0>
 801c6e8:	0801ee18 	.word	0x0801ee18
 801c6ec:	0801ee22 	.word	0x0801ee22
 801c6f0:	08019f65 	.word	0x08019f65
 801c6f4:	0801c445 	.word	0x0801c445
 801c6f8:	0801ee1e 	.word	0x0801ee1e

0801c6fc <__sfputc_r>:
 801c6fc:	6893      	ldr	r3, [r2, #8]
 801c6fe:	3b01      	subs	r3, #1
 801c700:	2b00      	cmp	r3, #0
 801c702:	b410      	push	{r4}
 801c704:	6093      	str	r3, [r2, #8]
 801c706:	da08      	bge.n	801c71a <__sfputc_r+0x1e>
 801c708:	6994      	ldr	r4, [r2, #24]
 801c70a:	42a3      	cmp	r3, r4
 801c70c:	db01      	blt.n	801c712 <__sfputc_r+0x16>
 801c70e:	290a      	cmp	r1, #10
 801c710:	d103      	bne.n	801c71a <__sfputc_r+0x1e>
 801c712:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c716:	f7fe ba1f 	b.w	801ab58 <__swbuf_r>
 801c71a:	6813      	ldr	r3, [r2, #0]
 801c71c:	1c58      	adds	r0, r3, #1
 801c71e:	6010      	str	r0, [r2, #0]
 801c720:	7019      	strb	r1, [r3, #0]
 801c722:	4608      	mov	r0, r1
 801c724:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c728:	4770      	bx	lr

0801c72a <__sfputs_r>:
 801c72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c72c:	4606      	mov	r6, r0
 801c72e:	460f      	mov	r7, r1
 801c730:	4614      	mov	r4, r2
 801c732:	18d5      	adds	r5, r2, r3
 801c734:	42ac      	cmp	r4, r5
 801c736:	d101      	bne.n	801c73c <__sfputs_r+0x12>
 801c738:	2000      	movs	r0, #0
 801c73a:	e007      	b.n	801c74c <__sfputs_r+0x22>
 801c73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c740:	463a      	mov	r2, r7
 801c742:	4630      	mov	r0, r6
 801c744:	f7ff ffda 	bl	801c6fc <__sfputc_r>
 801c748:	1c43      	adds	r3, r0, #1
 801c74a:	d1f3      	bne.n	801c734 <__sfputs_r+0xa>
 801c74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c750 <_vfiprintf_r>:
 801c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c754:	460d      	mov	r5, r1
 801c756:	b09d      	sub	sp, #116	@ 0x74
 801c758:	4614      	mov	r4, r2
 801c75a:	4698      	mov	r8, r3
 801c75c:	4606      	mov	r6, r0
 801c75e:	b118      	cbz	r0, 801c768 <_vfiprintf_r+0x18>
 801c760:	6a03      	ldr	r3, [r0, #32]
 801c762:	b90b      	cbnz	r3, 801c768 <_vfiprintf_r+0x18>
 801c764:	f7fe f842 	bl	801a7ec <__sinit>
 801c768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c76a:	07d9      	lsls	r1, r3, #31
 801c76c:	d405      	bmi.n	801c77a <_vfiprintf_r+0x2a>
 801c76e:	89ab      	ldrh	r3, [r5, #12]
 801c770:	059a      	lsls	r2, r3, #22
 801c772:	d402      	bmi.n	801c77a <_vfiprintf_r+0x2a>
 801c774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c776:	f7fe fb80 	bl	801ae7a <__retarget_lock_acquire_recursive>
 801c77a:	89ab      	ldrh	r3, [r5, #12]
 801c77c:	071b      	lsls	r3, r3, #28
 801c77e:	d501      	bpl.n	801c784 <_vfiprintf_r+0x34>
 801c780:	692b      	ldr	r3, [r5, #16]
 801c782:	b99b      	cbnz	r3, 801c7ac <_vfiprintf_r+0x5c>
 801c784:	4629      	mov	r1, r5
 801c786:	4630      	mov	r0, r6
 801c788:	f7fe fa24 	bl	801abd4 <__swsetup_r>
 801c78c:	b170      	cbz	r0, 801c7ac <_vfiprintf_r+0x5c>
 801c78e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c790:	07dc      	lsls	r4, r3, #31
 801c792:	d504      	bpl.n	801c79e <_vfiprintf_r+0x4e>
 801c794:	f04f 30ff 	mov.w	r0, #4294967295
 801c798:	b01d      	add	sp, #116	@ 0x74
 801c79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c79e:	89ab      	ldrh	r3, [r5, #12]
 801c7a0:	0598      	lsls	r0, r3, #22
 801c7a2:	d4f7      	bmi.n	801c794 <_vfiprintf_r+0x44>
 801c7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c7a6:	f7fe fb69 	bl	801ae7c <__retarget_lock_release_recursive>
 801c7aa:	e7f3      	b.n	801c794 <_vfiprintf_r+0x44>
 801c7ac:	2300      	movs	r3, #0
 801c7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801c7b0:	2320      	movs	r3, #32
 801c7b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c7ba:	2330      	movs	r3, #48	@ 0x30
 801c7bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c96c <_vfiprintf_r+0x21c>
 801c7c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c7c4:	f04f 0901 	mov.w	r9, #1
 801c7c8:	4623      	mov	r3, r4
 801c7ca:	469a      	mov	sl, r3
 801c7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c7d0:	b10a      	cbz	r2, 801c7d6 <_vfiprintf_r+0x86>
 801c7d2:	2a25      	cmp	r2, #37	@ 0x25
 801c7d4:	d1f9      	bne.n	801c7ca <_vfiprintf_r+0x7a>
 801c7d6:	ebba 0b04 	subs.w	fp, sl, r4
 801c7da:	d00b      	beq.n	801c7f4 <_vfiprintf_r+0xa4>
 801c7dc:	465b      	mov	r3, fp
 801c7de:	4622      	mov	r2, r4
 801c7e0:	4629      	mov	r1, r5
 801c7e2:	4630      	mov	r0, r6
 801c7e4:	f7ff ffa1 	bl	801c72a <__sfputs_r>
 801c7e8:	3001      	adds	r0, #1
 801c7ea:	f000 80a7 	beq.w	801c93c <_vfiprintf_r+0x1ec>
 801c7ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c7f0:	445a      	add	r2, fp
 801c7f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c7f4:	f89a 3000 	ldrb.w	r3, [sl]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	f000 809f 	beq.w	801c93c <_vfiprintf_r+0x1ec>
 801c7fe:	2300      	movs	r3, #0
 801c800:	f04f 32ff 	mov.w	r2, #4294967295
 801c804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c808:	f10a 0a01 	add.w	sl, sl, #1
 801c80c:	9304      	str	r3, [sp, #16]
 801c80e:	9307      	str	r3, [sp, #28]
 801c810:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c814:	931a      	str	r3, [sp, #104]	@ 0x68
 801c816:	4654      	mov	r4, sl
 801c818:	2205      	movs	r2, #5
 801c81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c81e:	4853      	ldr	r0, [pc, #332]	@ (801c96c <_vfiprintf_r+0x21c>)
 801c820:	f7e3 fcce 	bl	80001c0 <memchr>
 801c824:	9a04      	ldr	r2, [sp, #16]
 801c826:	b9d8      	cbnz	r0, 801c860 <_vfiprintf_r+0x110>
 801c828:	06d1      	lsls	r1, r2, #27
 801c82a:	bf44      	itt	mi
 801c82c:	2320      	movmi	r3, #32
 801c82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c832:	0713      	lsls	r3, r2, #28
 801c834:	bf44      	itt	mi
 801c836:	232b      	movmi	r3, #43	@ 0x2b
 801c838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c83c:	f89a 3000 	ldrb.w	r3, [sl]
 801c840:	2b2a      	cmp	r3, #42	@ 0x2a
 801c842:	d015      	beq.n	801c870 <_vfiprintf_r+0x120>
 801c844:	9a07      	ldr	r2, [sp, #28]
 801c846:	4654      	mov	r4, sl
 801c848:	2000      	movs	r0, #0
 801c84a:	f04f 0c0a 	mov.w	ip, #10
 801c84e:	4621      	mov	r1, r4
 801c850:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c854:	3b30      	subs	r3, #48	@ 0x30
 801c856:	2b09      	cmp	r3, #9
 801c858:	d94b      	bls.n	801c8f2 <_vfiprintf_r+0x1a2>
 801c85a:	b1b0      	cbz	r0, 801c88a <_vfiprintf_r+0x13a>
 801c85c:	9207      	str	r2, [sp, #28]
 801c85e:	e014      	b.n	801c88a <_vfiprintf_r+0x13a>
 801c860:	eba0 0308 	sub.w	r3, r0, r8
 801c864:	fa09 f303 	lsl.w	r3, r9, r3
 801c868:	4313      	orrs	r3, r2
 801c86a:	9304      	str	r3, [sp, #16]
 801c86c:	46a2      	mov	sl, r4
 801c86e:	e7d2      	b.n	801c816 <_vfiprintf_r+0xc6>
 801c870:	9b03      	ldr	r3, [sp, #12]
 801c872:	1d19      	adds	r1, r3, #4
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	9103      	str	r1, [sp, #12]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	bfbb      	ittet	lt
 801c87c:	425b      	neglt	r3, r3
 801c87e:	f042 0202 	orrlt.w	r2, r2, #2
 801c882:	9307      	strge	r3, [sp, #28]
 801c884:	9307      	strlt	r3, [sp, #28]
 801c886:	bfb8      	it	lt
 801c888:	9204      	strlt	r2, [sp, #16]
 801c88a:	7823      	ldrb	r3, [r4, #0]
 801c88c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c88e:	d10a      	bne.n	801c8a6 <_vfiprintf_r+0x156>
 801c890:	7863      	ldrb	r3, [r4, #1]
 801c892:	2b2a      	cmp	r3, #42	@ 0x2a
 801c894:	d132      	bne.n	801c8fc <_vfiprintf_r+0x1ac>
 801c896:	9b03      	ldr	r3, [sp, #12]
 801c898:	1d1a      	adds	r2, r3, #4
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	9203      	str	r2, [sp, #12]
 801c89e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c8a2:	3402      	adds	r4, #2
 801c8a4:	9305      	str	r3, [sp, #20]
 801c8a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c97c <_vfiprintf_r+0x22c>
 801c8aa:	7821      	ldrb	r1, [r4, #0]
 801c8ac:	2203      	movs	r2, #3
 801c8ae:	4650      	mov	r0, sl
 801c8b0:	f7e3 fc86 	bl	80001c0 <memchr>
 801c8b4:	b138      	cbz	r0, 801c8c6 <_vfiprintf_r+0x176>
 801c8b6:	9b04      	ldr	r3, [sp, #16]
 801c8b8:	eba0 000a 	sub.w	r0, r0, sl
 801c8bc:	2240      	movs	r2, #64	@ 0x40
 801c8be:	4082      	lsls	r2, r0
 801c8c0:	4313      	orrs	r3, r2
 801c8c2:	3401      	adds	r4, #1
 801c8c4:	9304      	str	r3, [sp, #16]
 801c8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8ca:	4829      	ldr	r0, [pc, #164]	@ (801c970 <_vfiprintf_r+0x220>)
 801c8cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c8d0:	2206      	movs	r2, #6
 801c8d2:	f7e3 fc75 	bl	80001c0 <memchr>
 801c8d6:	2800      	cmp	r0, #0
 801c8d8:	d03f      	beq.n	801c95a <_vfiprintf_r+0x20a>
 801c8da:	4b26      	ldr	r3, [pc, #152]	@ (801c974 <_vfiprintf_r+0x224>)
 801c8dc:	bb1b      	cbnz	r3, 801c926 <_vfiprintf_r+0x1d6>
 801c8de:	9b03      	ldr	r3, [sp, #12]
 801c8e0:	3307      	adds	r3, #7
 801c8e2:	f023 0307 	bic.w	r3, r3, #7
 801c8e6:	3308      	adds	r3, #8
 801c8e8:	9303      	str	r3, [sp, #12]
 801c8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8ec:	443b      	add	r3, r7
 801c8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801c8f0:	e76a      	b.n	801c7c8 <_vfiprintf_r+0x78>
 801c8f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801c8f6:	460c      	mov	r4, r1
 801c8f8:	2001      	movs	r0, #1
 801c8fa:	e7a8      	b.n	801c84e <_vfiprintf_r+0xfe>
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	3401      	adds	r4, #1
 801c900:	9305      	str	r3, [sp, #20]
 801c902:	4619      	mov	r1, r3
 801c904:	f04f 0c0a 	mov.w	ip, #10
 801c908:	4620      	mov	r0, r4
 801c90a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c90e:	3a30      	subs	r2, #48	@ 0x30
 801c910:	2a09      	cmp	r2, #9
 801c912:	d903      	bls.n	801c91c <_vfiprintf_r+0x1cc>
 801c914:	2b00      	cmp	r3, #0
 801c916:	d0c6      	beq.n	801c8a6 <_vfiprintf_r+0x156>
 801c918:	9105      	str	r1, [sp, #20]
 801c91a:	e7c4      	b.n	801c8a6 <_vfiprintf_r+0x156>
 801c91c:	fb0c 2101 	mla	r1, ip, r1, r2
 801c920:	4604      	mov	r4, r0
 801c922:	2301      	movs	r3, #1
 801c924:	e7f0      	b.n	801c908 <_vfiprintf_r+0x1b8>
 801c926:	ab03      	add	r3, sp, #12
 801c928:	9300      	str	r3, [sp, #0]
 801c92a:	462a      	mov	r2, r5
 801c92c:	4b12      	ldr	r3, [pc, #72]	@ (801c978 <_vfiprintf_r+0x228>)
 801c92e:	a904      	add	r1, sp, #16
 801c930:	4630      	mov	r0, r6
 801c932:	f7fd fb17 	bl	8019f64 <_printf_float>
 801c936:	4607      	mov	r7, r0
 801c938:	1c78      	adds	r0, r7, #1
 801c93a:	d1d6      	bne.n	801c8ea <_vfiprintf_r+0x19a>
 801c93c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c93e:	07d9      	lsls	r1, r3, #31
 801c940:	d405      	bmi.n	801c94e <_vfiprintf_r+0x1fe>
 801c942:	89ab      	ldrh	r3, [r5, #12]
 801c944:	059a      	lsls	r2, r3, #22
 801c946:	d402      	bmi.n	801c94e <_vfiprintf_r+0x1fe>
 801c948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c94a:	f7fe fa97 	bl	801ae7c <__retarget_lock_release_recursive>
 801c94e:	89ab      	ldrh	r3, [r5, #12]
 801c950:	065b      	lsls	r3, r3, #25
 801c952:	f53f af1f 	bmi.w	801c794 <_vfiprintf_r+0x44>
 801c956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c958:	e71e      	b.n	801c798 <_vfiprintf_r+0x48>
 801c95a:	ab03      	add	r3, sp, #12
 801c95c:	9300      	str	r3, [sp, #0]
 801c95e:	462a      	mov	r2, r5
 801c960:	4b05      	ldr	r3, [pc, #20]	@ (801c978 <_vfiprintf_r+0x228>)
 801c962:	a904      	add	r1, sp, #16
 801c964:	4630      	mov	r0, r6
 801c966:	f7fd fd93 	bl	801a490 <_printf_i>
 801c96a:	e7e4      	b.n	801c936 <_vfiprintf_r+0x1e6>
 801c96c:	0801ee18 	.word	0x0801ee18
 801c970:	0801ee22 	.word	0x0801ee22
 801c974:	08019f65 	.word	0x08019f65
 801c978:	0801c72b 	.word	0x0801c72b
 801c97c:	0801ee1e 	.word	0x0801ee1e

0801c980 <__sflush_r>:
 801c980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c988:	0716      	lsls	r6, r2, #28
 801c98a:	4605      	mov	r5, r0
 801c98c:	460c      	mov	r4, r1
 801c98e:	d451      	bmi.n	801ca34 <__sflush_r+0xb4>
 801c990:	684b      	ldr	r3, [r1, #4]
 801c992:	2b00      	cmp	r3, #0
 801c994:	dc02      	bgt.n	801c99c <__sflush_r+0x1c>
 801c996:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c998:	2b00      	cmp	r3, #0
 801c99a:	dd49      	ble.n	801ca30 <__sflush_r+0xb0>
 801c99c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c99e:	2e00      	cmp	r6, #0
 801c9a0:	d046      	beq.n	801ca30 <__sflush_r+0xb0>
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c9a8:	682f      	ldr	r7, [r5, #0]
 801c9aa:	602b      	str	r3, [r5, #0]
 801c9ac:	d031      	beq.n	801ca12 <__sflush_r+0x92>
 801c9ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c9b0:	89a3      	ldrh	r3, [r4, #12]
 801c9b2:	0759      	lsls	r1, r3, #29
 801c9b4:	d505      	bpl.n	801c9c2 <__sflush_r+0x42>
 801c9b6:	6863      	ldr	r3, [r4, #4]
 801c9b8:	1ad2      	subs	r2, r2, r3
 801c9ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c9bc:	b10b      	cbz	r3, 801c9c2 <__sflush_r+0x42>
 801c9be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c9c0:	1ad2      	subs	r2, r2, r3
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c9c6:	6a21      	ldr	r1, [r4, #32]
 801c9c8:	4628      	mov	r0, r5
 801c9ca:	47b0      	blx	r6
 801c9cc:	1c42      	adds	r2, r0, #1
 801c9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9d2:	d106      	bne.n	801c9e2 <__sflush_r+0x62>
 801c9d4:	6829      	ldr	r1, [r5, #0]
 801c9d6:	291d      	cmp	r1, #29
 801c9d8:	d846      	bhi.n	801ca68 <__sflush_r+0xe8>
 801c9da:	4a29      	ldr	r2, [pc, #164]	@ (801ca80 <__sflush_r+0x100>)
 801c9dc:	40ca      	lsrs	r2, r1
 801c9de:	07d6      	lsls	r6, r2, #31
 801c9e0:	d542      	bpl.n	801ca68 <__sflush_r+0xe8>
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	6062      	str	r2, [r4, #4]
 801c9e6:	04d9      	lsls	r1, r3, #19
 801c9e8:	6922      	ldr	r2, [r4, #16]
 801c9ea:	6022      	str	r2, [r4, #0]
 801c9ec:	d504      	bpl.n	801c9f8 <__sflush_r+0x78>
 801c9ee:	1c42      	adds	r2, r0, #1
 801c9f0:	d101      	bne.n	801c9f6 <__sflush_r+0x76>
 801c9f2:	682b      	ldr	r3, [r5, #0]
 801c9f4:	b903      	cbnz	r3, 801c9f8 <__sflush_r+0x78>
 801c9f6:	6560      	str	r0, [r4, #84]	@ 0x54
 801c9f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c9fa:	602f      	str	r7, [r5, #0]
 801c9fc:	b1c1      	cbz	r1, 801ca30 <__sflush_r+0xb0>
 801c9fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ca02:	4299      	cmp	r1, r3
 801ca04:	d002      	beq.n	801ca0c <__sflush_r+0x8c>
 801ca06:	4628      	mov	r0, r5
 801ca08:	f7ff f942 	bl	801bc90 <_free_r>
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	6363      	str	r3, [r4, #52]	@ 0x34
 801ca10:	e00e      	b.n	801ca30 <__sflush_r+0xb0>
 801ca12:	6a21      	ldr	r1, [r4, #32]
 801ca14:	2301      	movs	r3, #1
 801ca16:	4628      	mov	r0, r5
 801ca18:	47b0      	blx	r6
 801ca1a:	4602      	mov	r2, r0
 801ca1c:	1c50      	adds	r0, r2, #1
 801ca1e:	d1c7      	bne.n	801c9b0 <__sflush_r+0x30>
 801ca20:	682b      	ldr	r3, [r5, #0]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d0c4      	beq.n	801c9b0 <__sflush_r+0x30>
 801ca26:	2b1d      	cmp	r3, #29
 801ca28:	d001      	beq.n	801ca2e <__sflush_r+0xae>
 801ca2a:	2b16      	cmp	r3, #22
 801ca2c:	d11a      	bne.n	801ca64 <__sflush_r+0xe4>
 801ca2e:	602f      	str	r7, [r5, #0]
 801ca30:	2000      	movs	r0, #0
 801ca32:	e01e      	b.n	801ca72 <__sflush_r+0xf2>
 801ca34:	690f      	ldr	r7, [r1, #16]
 801ca36:	2f00      	cmp	r7, #0
 801ca38:	d0fa      	beq.n	801ca30 <__sflush_r+0xb0>
 801ca3a:	0793      	lsls	r3, r2, #30
 801ca3c:	680e      	ldr	r6, [r1, #0]
 801ca3e:	bf08      	it	eq
 801ca40:	694b      	ldreq	r3, [r1, #20]
 801ca42:	600f      	str	r7, [r1, #0]
 801ca44:	bf18      	it	ne
 801ca46:	2300      	movne	r3, #0
 801ca48:	eba6 0807 	sub.w	r8, r6, r7
 801ca4c:	608b      	str	r3, [r1, #8]
 801ca4e:	f1b8 0f00 	cmp.w	r8, #0
 801ca52:	dded      	ble.n	801ca30 <__sflush_r+0xb0>
 801ca54:	6a21      	ldr	r1, [r4, #32]
 801ca56:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ca58:	4643      	mov	r3, r8
 801ca5a:	463a      	mov	r2, r7
 801ca5c:	4628      	mov	r0, r5
 801ca5e:	47b0      	blx	r6
 801ca60:	2800      	cmp	r0, #0
 801ca62:	dc08      	bgt.n	801ca76 <__sflush_r+0xf6>
 801ca64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca6c:	81a3      	strh	r3, [r4, #12]
 801ca6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ca72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca76:	4407      	add	r7, r0
 801ca78:	eba8 0800 	sub.w	r8, r8, r0
 801ca7c:	e7e7      	b.n	801ca4e <__sflush_r+0xce>
 801ca7e:	bf00      	nop
 801ca80:	20400001 	.word	0x20400001

0801ca84 <_fflush_r>:
 801ca84:	b538      	push	{r3, r4, r5, lr}
 801ca86:	690b      	ldr	r3, [r1, #16]
 801ca88:	4605      	mov	r5, r0
 801ca8a:	460c      	mov	r4, r1
 801ca8c:	b913      	cbnz	r3, 801ca94 <_fflush_r+0x10>
 801ca8e:	2500      	movs	r5, #0
 801ca90:	4628      	mov	r0, r5
 801ca92:	bd38      	pop	{r3, r4, r5, pc}
 801ca94:	b118      	cbz	r0, 801ca9e <_fflush_r+0x1a>
 801ca96:	6a03      	ldr	r3, [r0, #32]
 801ca98:	b90b      	cbnz	r3, 801ca9e <_fflush_r+0x1a>
 801ca9a:	f7fd fea7 	bl	801a7ec <__sinit>
 801ca9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d0f3      	beq.n	801ca8e <_fflush_r+0xa>
 801caa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801caa8:	07d0      	lsls	r0, r2, #31
 801caaa:	d404      	bmi.n	801cab6 <_fflush_r+0x32>
 801caac:	0599      	lsls	r1, r3, #22
 801caae:	d402      	bmi.n	801cab6 <_fflush_r+0x32>
 801cab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cab2:	f7fe f9e2 	bl	801ae7a <__retarget_lock_acquire_recursive>
 801cab6:	4628      	mov	r0, r5
 801cab8:	4621      	mov	r1, r4
 801caba:	f7ff ff61 	bl	801c980 <__sflush_r>
 801cabe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cac0:	07da      	lsls	r2, r3, #31
 801cac2:	4605      	mov	r5, r0
 801cac4:	d4e4      	bmi.n	801ca90 <_fflush_r+0xc>
 801cac6:	89a3      	ldrh	r3, [r4, #12]
 801cac8:	059b      	lsls	r3, r3, #22
 801caca:	d4e1      	bmi.n	801ca90 <_fflush_r+0xc>
 801cacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cace:	f7fe f9d5 	bl	801ae7c <__retarget_lock_release_recursive>
 801cad2:	e7dd      	b.n	801ca90 <_fflush_r+0xc>

0801cad4 <fiprintf>:
 801cad4:	b40e      	push	{r1, r2, r3}
 801cad6:	b503      	push	{r0, r1, lr}
 801cad8:	4601      	mov	r1, r0
 801cada:	ab03      	add	r3, sp, #12
 801cadc:	4805      	ldr	r0, [pc, #20]	@ (801caf4 <fiprintf+0x20>)
 801cade:	f853 2b04 	ldr.w	r2, [r3], #4
 801cae2:	6800      	ldr	r0, [r0, #0]
 801cae4:	9301      	str	r3, [sp, #4]
 801cae6:	f7ff fe33 	bl	801c750 <_vfiprintf_r>
 801caea:	b002      	add	sp, #8
 801caec:	f85d eb04 	ldr.w	lr, [sp], #4
 801caf0:	b003      	add	sp, #12
 801caf2:	4770      	bx	lr
 801caf4:	200024a4 	.word	0x200024a4

0801caf8 <__swhatbuf_r>:
 801caf8:	b570      	push	{r4, r5, r6, lr}
 801cafa:	460c      	mov	r4, r1
 801cafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb00:	2900      	cmp	r1, #0
 801cb02:	b096      	sub	sp, #88	@ 0x58
 801cb04:	4615      	mov	r5, r2
 801cb06:	461e      	mov	r6, r3
 801cb08:	da0a      	bge.n	801cb20 <__swhatbuf_r+0x28>
 801cb0a:	89a1      	ldrh	r1, [r4, #12]
 801cb0c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 801cb10:	d113      	bne.n	801cb3a <__swhatbuf_r+0x42>
 801cb12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801cb16:	2000      	movs	r0, #0
 801cb18:	6031      	str	r1, [r6, #0]
 801cb1a:	602a      	str	r2, [r5, #0]
 801cb1c:	b016      	add	sp, #88	@ 0x58
 801cb1e:	bd70      	pop	{r4, r5, r6, pc}
 801cb20:	466a      	mov	r2, sp
 801cb22:	f000 f847 	bl	801cbb4 <_fstat_r>
 801cb26:	2800      	cmp	r0, #0
 801cb28:	dbef      	blt.n	801cb0a <__swhatbuf_r+0x12>
 801cb2a:	9901      	ldr	r1, [sp, #4]
 801cb2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cb30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cb34:	4259      	negs	r1, r3
 801cb36:	4159      	adcs	r1, r3
 801cb38:	e7eb      	b.n	801cb12 <__swhatbuf_r+0x1a>
 801cb3a:	2100      	movs	r1, #0
 801cb3c:	2240      	movs	r2, #64	@ 0x40
 801cb3e:	e7ea      	b.n	801cb16 <__swhatbuf_r+0x1e>

0801cb40 <__smakebuf_r>:
 801cb40:	898b      	ldrh	r3, [r1, #12]
 801cb42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cb44:	079e      	lsls	r6, r3, #30
 801cb46:	4605      	mov	r5, r0
 801cb48:	460c      	mov	r4, r1
 801cb4a:	d507      	bpl.n	801cb5c <__smakebuf_r+0x1c>
 801cb4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cb50:	6023      	str	r3, [r4, #0]
 801cb52:	6123      	str	r3, [r4, #16]
 801cb54:	2301      	movs	r3, #1
 801cb56:	6163      	str	r3, [r4, #20]
 801cb58:	b002      	add	sp, #8
 801cb5a:	bd70      	pop	{r4, r5, r6, pc}
 801cb5c:	ab01      	add	r3, sp, #4
 801cb5e:	466a      	mov	r2, sp
 801cb60:	f7ff ffca 	bl	801caf8 <__swhatbuf_r>
 801cb64:	9e00      	ldr	r6, [sp, #0]
 801cb66:	4628      	mov	r0, r5
 801cb68:	4631      	mov	r1, r6
 801cb6a:	f7fc ffb5 	bl	8019ad8 <_malloc_r>
 801cb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb72:	b938      	cbnz	r0, 801cb84 <__smakebuf_r+0x44>
 801cb74:	059a      	lsls	r2, r3, #22
 801cb76:	d4ef      	bmi.n	801cb58 <__smakebuf_r+0x18>
 801cb78:	f023 0303 	bic.w	r3, r3, #3
 801cb7c:	f043 0302 	orr.w	r3, r3, #2
 801cb80:	81a3      	strh	r3, [r4, #12]
 801cb82:	e7e3      	b.n	801cb4c <__smakebuf_r+0xc>
 801cb84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cb88:	81a3      	strh	r3, [r4, #12]
 801cb8a:	9b01      	ldr	r3, [sp, #4]
 801cb8c:	6020      	str	r0, [r4, #0]
 801cb8e:	e9c4 0604 	strd	r0, r6, [r4, #16]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d0e0      	beq.n	801cb58 <__smakebuf_r+0x18>
 801cb96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cb9a:	4628      	mov	r0, r5
 801cb9c:	f000 f81c 	bl	801cbd8 <_isatty_r>
 801cba0:	2800      	cmp	r0, #0
 801cba2:	d0d9      	beq.n	801cb58 <__smakebuf_r+0x18>
 801cba4:	89a3      	ldrh	r3, [r4, #12]
 801cba6:	f023 0303 	bic.w	r3, r3, #3
 801cbaa:	f043 0301 	orr.w	r3, r3, #1
 801cbae:	81a3      	strh	r3, [r4, #12]
 801cbb0:	e7d2      	b.n	801cb58 <__smakebuf_r+0x18>
	...

0801cbb4 <_fstat_r>:
 801cbb4:	b538      	push	{r3, r4, r5, lr}
 801cbb6:	4d07      	ldr	r5, [pc, #28]	@ (801cbd4 <_fstat_r+0x20>)
 801cbb8:	2300      	movs	r3, #0
 801cbba:	4604      	mov	r4, r0
 801cbbc:	4608      	mov	r0, r1
 801cbbe:	4611      	mov	r1, r2
 801cbc0:	602b      	str	r3, [r5, #0]
 801cbc2:	f7ec fdfa 	bl	80097ba <_fstat>
 801cbc6:	1c43      	adds	r3, r0, #1
 801cbc8:	d102      	bne.n	801cbd0 <_fstat_r+0x1c>
 801cbca:	682b      	ldr	r3, [r5, #0]
 801cbcc:	b103      	cbz	r3, 801cbd0 <_fstat_r+0x1c>
 801cbce:	6023      	str	r3, [r4, #0]
 801cbd0:	bd38      	pop	{r3, r4, r5, pc}
 801cbd2:	bf00      	nop
 801cbd4:	2000d39c 	.word	0x2000d39c

0801cbd8 <_isatty_r>:
 801cbd8:	b538      	push	{r3, r4, r5, lr}
 801cbda:	4d06      	ldr	r5, [pc, #24]	@ (801cbf4 <_isatty_r+0x1c>)
 801cbdc:	2300      	movs	r3, #0
 801cbde:	4604      	mov	r4, r0
 801cbe0:	4608      	mov	r0, r1
 801cbe2:	602b      	str	r3, [r5, #0]
 801cbe4:	f7ec fdee 	bl	80097c4 <_isatty>
 801cbe8:	1c43      	adds	r3, r0, #1
 801cbea:	d102      	bne.n	801cbf2 <_isatty_r+0x1a>
 801cbec:	682b      	ldr	r3, [r5, #0]
 801cbee:	b103      	cbz	r3, 801cbf2 <_isatty_r+0x1a>
 801cbf0:	6023      	str	r3, [r4, #0]
 801cbf2:	bd38      	pop	{r3, r4, r5, pc}
 801cbf4:	2000d39c 	.word	0x2000d39c

0801cbf8 <abort>:
 801cbf8:	b508      	push	{r3, lr}
 801cbfa:	2006      	movs	r0, #6
 801cbfc:	f000 f84a 	bl	801cc94 <raise>
 801cc00:	2001      	movs	r0, #1
 801cc02:	f7ec fdb3 	bl	800976c <_exit>

0801cc06 <__ascii_mbtowc>:
 801cc06:	b082      	sub	sp, #8
 801cc08:	b901      	cbnz	r1, 801cc0c <__ascii_mbtowc+0x6>
 801cc0a:	a901      	add	r1, sp, #4
 801cc0c:	b142      	cbz	r2, 801cc20 <__ascii_mbtowc+0x1a>
 801cc0e:	b14b      	cbz	r3, 801cc24 <__ascii_mbtowc+0x1e>
 801cc10:	7813      	ldrb	r3, [r2, #0]
 801cc12:	600b      	str	r3, [r1, #0]
 801cc14:	7812      	ldrb	r2, [r2, #0]
 801cc16:	1e10      	subs	r0, r2, #0
 801cc18:	bf18      	it	ne
 801cc1a:	2001      	movne	r0, #1
 801cc1c:	b002      	add	sp, #8
 801cc1e:	4770      	bx	lr
 801cc20:	4610      	mov	r0, r2
 801cc22:	e7fb      	b.n	801cc1c <__ascii_mbtowc+0x16>
 801cc24:	f06f 0001 	mvn.w	r0, #1
 801cc28:	e7f8      	b.n	801cc1c <__ascii_mbtowc+0x16>

0801cc2a <__ascii_wctomb>:
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	4608      	mov	r0, r1
 801cc2e:	b141      	cbz	r1, 801cc42 <__ascii_wctomb+0x18>
 801cc30:	2aff      	cmp	r2, #255	@ 0xff
 801cc32:	d904      	bls.n	801cc3e <__ascii_wctomb+0x14>
 801cc34:	228a      	movs	r2, #138	@ 0x8a
 801cc36:	601a      	str	r2, [r3, #0]
 801cc38:	f04f 30ff 	mov.w	r0, #4294967295
 801cc3c:	4770      	bx	lr
 801cc3e:	700a      	strb	r2, [r1, #0]
 801cc40:	2001      	movs	r0, #1
 801cc42:	4770      	bx	lr

0801cc44 <_raise_r>:
 801cc44:	291f      	cmp	r1, #31
 801cc46:	b538      	push	{r3, r4, r5, lr}
 801cc48:	4605      	mov	r5, r0
 801cc4a:	460c      	mov	r4, r1
 801cc4c:	d904      	bls.n	801cc58 <_raise_r+0x14>
 801cc4e:	2316      	movs	r3, #22
 801cc50:	6003      	str	r3, [r0, #0]
 801cc52:	f04f 30ff 	mov.w	r0, #4294967295
 801cc56:	bd38      	pop	{r3, r4, r5, pc}
 801cc58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cc5a:	b112      	cbz	r2, 801cc62 <_raise_r+0x1e>
 801cc5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cc60:	b94b      	cbnz	r3, 801cc76 <_raise_r+0x32>
 801cc62:	4628      	mov	r0, r5
 801cc64:	f000 f830 	bl	801ccc8 <_getpid_r>
 801cc68:	4622      	mov	r2, r4
 801cc6a:	4601      	mov	r1, r0
 801cc6c:	4628      	mov	r0, r5
 801cc6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cc72:	f000 b817 	b.w	801cca4 <_kill_r>
 801cc76:	2b01      	cmp	r3, #1
 801cc78:	d00a      	beq.n	801cc90 <_raise_r+0x4c>
 801cc7a:	1c59      	adds	r1, r3, #1
 801cc7c:	d103      	bne.n	801cc86 <_raise_r+0x42>
 801cc7e:	2316      	movs	r3, #22
 801cc80:	6003      	str	r3, [r0, #0]
 801cc82:	2001      	movs	r0, #1
 801cc84:	e7e7      	b.n	801cc56 <_raise_r+0x12>
 801cc86:	2100      	movs	r1, #0
 801cc88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	4798      	blx	r3
 801cc90:	2000      	movs	r0, #0
 801cc92:	e7e0      	b.n	801cc56 <_raise_r+0x12>

0801cc94 <raise>:
 801cc94:	4b02      	ldr	r3, [pc, #8]	@ (801cca0 <raise+0xc>)
 801cc96:	4601      	mov	r1, r0
 801cc98:	6818      	ldr	r0, [r3, #0]
 801cc9a:	f7ff bfd3 	b.w	801cc44 <_raise_r>
 801cc9e:	bf00      	nop
 801cca0:	200024a4 	.word	0x200024a4

0801cca4 <_kill_r>:
 801cca4:	b538      	push	{r3, r4, r5, lr}
 801cca6:	4d07      	ldr	r5, [pc, #28]	@ (801ccc4 <_kill_r+0x20>)
 801cca8:	2300      	movs	r3, #0
 801ccaa:	4604      	mov	r4, r0
 801ccac:	4608      	mov	r0, r1
 801ccae:	4611      	mov	r1, r2
 801ccb0:	602b      	str	r3, [r5, #0]
 801ccb2:	f7ec fd53 	bl	800975c <_kill>
 801ccb6:	1c43      	adds	r3, r0, #1
 801ccb8:	d102      	bne.n	801ccc0 <_kill_r+0x1c>
 801ccba:	682b      	ldr	r3, [r5, #0]
 801ccbc:	b103      	cbz	r3, 801ccc0 <_kill_r+0x1c>
 801ccbe:	6023      	str	r3, [r4, #0]
 801ccc0:	bd38      	pop	{r3, r4, r5, pc}
 801ccc2:	bf00      	nop
 801ccc4:	2000d39c 	.word	0x2000d39c

0801ccc8 <_getpid_r>:
 801ccc8:	f7ec bd46 	b.w	8009758 <_getpid>

0801cccc <atan2f>:
 801cccc:	f000 b86c 	b.w	801cda8 <__ieee754_atan2f>

0801ccd0 <fmaxf>:
 801ccd0:	b508      	push	{r3, lr}
 801ccd2:	ed2d 8b02 	vpush	{d8}
 801ccd6:	eef0 8a40 	vmov.f32	s17, s0
 801ccda:	eeb0 8a60 	vmov.f32	s16, s1
 801ccde:	f000 f847 	bl	801cd70 <__fpclassifyf>
 801cce2:	b920      	cbnz	r0, 801ccee <fmaxf+0x1e>
 801cce4:	eeb0 0a48 	vmov.f32	s0, s16
 801cce8:	ecbd 8b02 	vpop	{d8}
 801ccec:	bd08      	pop	{r3, pc}
 801ccee:	eeb0 0a48 	vmov.f32	s0, s16
 801ccf2:	f000 f83d 	bl	801cd70 <__fpclassifyf>
 801ccf6:	b158      	cbz	r0, 801cd10 <fmaxf+0x40>
 801ccf8:	eef4 8ac8 	vcmpe.f32	s17, s16
 801ccfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd00:	bfc8      	it	gt
 801cd02:	eeb0 8a68 	vmovgt.f32	s16, s17
 801cd06:	eeb0 0a48 	vmov.f32	s0, s16
 801cd0a:	ecbd 8b02 	vpop	{d8}
 801cd0e:	bd08      	pop	{r3, pc}
 801cd10:	eeb0 8a68 	vmov.f32	s16, s17
 801cd14:	eeb0 0a48 	vmov.f32	s0, s16
 801cd18:	ecbd 8b02 	vpop	{d8}
 801cd1c:	bd08      	pop	{r3, pc}
 801cd1e:	bf00      	nop

0801cd20 <fminf>:
 801cd20:	b508      	push	{r3, lr}
 801cd22:	ed2d 8b02 	vpush	{d8}
 801cd26:	eef0 8a40 	vmov.f32	s17, s0
 801cd2a:	eeb0 8a60 	vmov.f32	s16, s1
 801cd2e:	f000 f81f 	bl	801cd70 <__fpclassifyf>
 801cd32:	b920      	cbnz	r0, 801cd3e <fminf+0x1e>
 801cd34:	eeb0 0a48 	vmov.f32	s0, s16
 801cd38:	ecbd 8b02 	vpop	{d8}
 801cd3c:	bd08      	pop	{r3, pc}
 801cd3e:	eeb0 0a48 	vmov.f32	s0, s16
 801cd42:	f000 f815 	bl	801cd70 <__fpclassifyf>
 801cd46:	b158      	cbz	r0, 801cd60 <fminf+0x40>
 801cd48:	eef4 8ac8 	vcmpe.f32	s17, s16
 801cd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd50:	bf48      	it	mi
 801cd52:	eeb0 8a68 	vmovmi.f32	s16, s17
 801cd56:	eeb0 0a48 	vmov.f32	s0, s16
 801cd5a:	ecbd 8b02 	vpop	{d8}
 801cd5e:	bd08      	pop	{r3, pc}
 801cd60:	eeb0 8a68 	vmov.f32	s16, s17
 801cd64:	eeb0 0a48 	vmov.f32	s0, s16
 801cd68:	ecbd 8b02 	vpop	{d8}
 801cd6c:	bd08      	pop	{r3, pc}
 801cd6e:	bf00      	nop

0801cd70 <__fpclassifyf>:
 801cd70:	ee10 3a10 	vmov	r3, s0
 801cd74:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801cd78:	d00e      	beq.n	801cd98 <__fpclassifyf+0x28>
 801cd7a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801cd7e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801cd82:	d30d      	bcc.n	801cda0 <__fpclassifyf+0x30>
 801cd84:	4b07      	ldr	r3, [pc, #28]	@ (801cda4 <__fpclassifyf+0x34>)
 801cd86:	1e42      	subs	r2, r0, #1
 801cd88:	429a      	cmp	r2, r3
 801cd8a:	d907      	bls.n	801cd9c <__fpclassifyf+0x2c>
 801cd8c:	f1a0 40ff 	sub.w	r0, r0, #2139095040	@ 0x7f800000
 801cd90:	fab0 f080 	clz	r0, r0
 801cd94:	0940      	lsrs	r0, r0, #5
 801cd96:	4770      	bx	lr
 801cd98:	2002      	movs	r0, #2
 801cd9a:	4770      	bx	lr
 801cd9c:	2003      	movs	r0, #3
 801cd9e:	4770      	bx	lr
 801cda0:	2004      	movs	r0, #4
 801cda2:	4770      	bx	lr
 801cda4:	007ffffe 	.word	0x007ffffe

0801cda8 <__ieee754_atan2f>:
 801cda8:	b510      	push	{r4, lr}
 801cdaa:	b082      	sub	sp, #8
 801cdac:	edcd 0a01 	vstr	s1, [sp, #4]
 801cdb0:	9b01      	ldr	r3, [sp, #4]
 801cdb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801cdb6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801cdba:	eef0 7a40 	vmov.f32	s15, s0
 801cdbe:	d830      	bhi.n	801ce22 <__ieee754_atan2f+0x7a>
 801cdc0:	ee10 0a10 	vmov	r0, s0
 801cdc4:	f020 4100 	bic.w	r1, r0, #2147483648	@ 0x80000000
 801cdc8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801cdcc:	d829      	bhi.n	801ce22 <__ieee754_atan2f+0x7a>
 801cdce:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801cdd2:	d03e      	beq.n	801ce52 <__ieee754_atan2f+0xaa>
 801cdd4:	179c      	asrs	r4, r3, #30
 801cdd6:	f004 0402 	and.w	r4, r4, #2
 801cdda:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801cdde:	b331      	cbz	r1, 801ce2e <__ieee754_atan2f+0x86>
 801cde0:	b37a      	cbz	r2, 801ce42 <__ieee754_atan2f+0x9a>
 801cde2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801cde6:	d03f      	beq.n	801ce68 <__ieee754_atan2f+0xc0>
 801cde8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801cdec:	d029      	beq.n	801ce42 <__ieee754_atan2f+0x9a>
 801cdee:	1a89      	subs	r1, r1, r2
 801cdf0:	f1b1 5ff4 	cmp.w	r1, #511705088	@ 0x1e800000
 801cdf4:	ea4f 52e1 	mov.w	r2, r1, asr #23
 801cdf8:	da33      	bge.n	801ce62 <__ieee754_atan2f+0xba>
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	da41      	bge.n	801ce82 <__ieee754_atan2f+0xda>
 801cdfe:	323c      	adds	r2, #60	@ 0x3c
 801ce00:	da3f      	bge.n	801ce82 <__ieee754_atan2f+0xda>
 801ce02:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 801ced0 <__ieee754_atan2f+0x128>
 801ce06:	2c01      	cmp	r4, #1
 801ce08:	d04d      	beq.n	801cea6 <__ieee754_atan2f+0xfe>
 801ce0a:	2c02      	cmp	r4, #2
 801ce0c:	d042      	beq.n	801ce94 <__ieee754_atan2f+0xec>
 801ce0e:	b164      	cbz	r4, 801ce2a <__ieee754_atan2f+0x82>
 801ce10:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801ced4 <__ieee754_atan2f+0x12c>
 801ce14:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801ced8 <__ieee754_atan2f+0x130>
 801ce18:	ee30 0a07 	vadd.f32	s0, s0, s14
 801ce1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ce20:	e003      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ce22:	ed9d 7a01 	vldr	s14, [sp, #4]
 801ce26:	ee37 0a27 	vadd.f32	s0, s14, s15
 801ce2a:	b002      	add	sp, #8
 801ce2c:	bd10      	pop	{r4, pc}
 801ce2e:	2c02      	cmp	r4, #2
 801ce30:	d00c      	beq.n	801ce4c <__ieee754_atan2f+0xa4>
 801ce32:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 801cedc <__ieee754_atan2f+0x134>
 801ce36:	2c03      	cmp	r4, #3
 801ce38:	bf08      	it	eq
 801ce3a:	eeb0 0a47 	vmoveq.f32	s0, s14
 801ce3e:	b002      	add	sp, #8
 801ce40:	bd10      	pop	{r4, pc}
 801ce42:	2800      	cmp	r0, #0
 801ce44:	db0a      	blt.n	801ce5c <__ieee754_atan2f+0xb4>
 801ce46:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801cee0 <__ieee754_atan2f+0x138>
 801ce4a:	e7ee      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ce4c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 801ced8 <__ieee754_atan2f+0x130>
 801ce50:	e7eb      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ce52:	b002      	add	sp, #8
 801ce54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce58:	f000 b84c 	b.w	801cef4 <atanf>
 801ce5c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 801cee4 <__ieee754_atan2f+0x13c>
 801ce60:	e7e3      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ce62:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 801cee0 <__ieee754_atan2f+0x138>
 801ce66:	e7ce      	b.n	801ce06 <__ieee754_atan2f+0x5e>
 801ce68:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801ce6c:	f104 34ff 	add.w	r4, r4, #4294967295
 801ce70:	d020      	beq.n	801ceb4 <__ieee754_atan2f+0x10c>
 801ce72:	2c02      	cmp	r4, #2
 801ce74:	d826      	bhi.n	801cec4 <__ieee754_atan2f+0x11c>
 801ce76:	4b1c      	ldr	r3, [pc, #112]	@ (801cee8 <__ieee754_atan2f+0x140>)
 801ce78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ce7c:	ed93 0a00 	vldr	s0, [r3]
 801ce80:	e7d3      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ce82:	ed9d 7a01 	vldr	s14, [sp, #4]
 801ce86:	ee87 0a87 	vdiv.f32	s0, s15, s14
 801ce8a:	f000 f905 	bl	801d098 <fabsf>
 801ce8e:	f000 f831 	bl	801cef4 <atanf>
 801ce92:	e7b8      	b.n	801ce06 <__ieee754_atan2f+0x5e>
 801ce94:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 801ced4 <__ieee754_atan2f+0x12c>
 801ce98:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801ced8 <__ieee754_atan2f+0x130>
 801ce9c:	ee30 0a07 	vadd.f32	s0, s0, s14
 801cea0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801cea4:	e7c1      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801cea6:	ee10 3a10 	vmov	r3, s0
 801ceaa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ceae:	ee00 3a10 	vmov	s0, r3
 801ceb2:	e7ba      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ceb4:	2c02      	cmp	r4, #2
 801ceb6:	d808      	bhi.n	801ceca <__ieee754_atan2f+0x122>
 801ceb8:	4b0c      	ldr	r3, [pc, #48]	@ (801ceec <__ieee754_atan2f+0x144>)
 801ceba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801cebe:	ed93 0a00 	vldr	s0, [r3]
 801cec2:	e7b2      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801cec4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801ced0 <__ieee754_atan2f+0x128>
 801cec8:	e7af      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ceca:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 801cef0 <__ieee754_atan2f+0x148>
 801cece:	e7ac      	b.n	801ce2a <__ieee754_atan2f+0x82>
 801ced0:	00000000 	.word	0x00000000
 801ced4:	33bbbd2e 	.word	0x33bbbd2e
 801ced8:	40490fdb 	.word	0x40490fdb
 801cedc:	c0490fdb 	.word	0xc0490fdb
 801cee0:	3fc90fdb 	.word	0x3fc90fdb
 801cee4:	bfc90fdb 	.word	0xbfc90fdb
 801cee8:	0801f030 	.word	0x0801f030
 801ceec:	0801f03c 	.word	0x0801f03c
 801cef0:	3f490fdb 	.word	0x3f490fdb

0801cef4 <atanf>:
 801cef4:	b538      	push	{r3, r4, r5, lr}
 801cef6:	ee10 5a10 	vmov	r5, s0
 801cefa:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801cefe:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801cf02:	eef0 7a40 	vmov.f32	s15, s0
 801cf06:	d307      	bcc.n	801cf18 <atanf+0x24>
 801cf08:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801cf0c:	d855      	bhi.n	801cfba <atanf+0xc6>
 801cf0e:	2d00      	cmp	r5, #0
 801cf10:	dd77      	ble.n	801d002 <atanf+0x10e>
 801cf12:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 801d04c <atanf+0x158>
 801cf16:	bd38      	pop	{r3, r4, r5, pc}
 801cf18:	4b4d      	ldr	r3, [pc, #308]	@ (801d050 <atanf+0x15c>)
 801cf1a:	429c      	cmp	r4, r3
 801cf1c:	d85c      	bhi.n	801cfd8 <atanf+0xe4>
 801cf1e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801cf22:	d34d      	bcc.n	801cfc0 <atanf+0xcc>
 801cf24:	f04f 33ff 	mov.w	r3, #4294967295
 801cf28:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801cf2c:	ed9f 5a49 	vldr	s10, [pc, #292]	@ 801d054 <atanf+0x160>
 801cf30:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801d058 <atanf+0x164>
 801cf34:	eddf 5a49 	vldr	s11, [pc, #292]	@ 801d05c <atanf+0x168>
 801cf38:	eddf 4a49 	vldr	s9, [pc, #292]	@ 801d060 <atanf+0x16c>
 801cf3c:	ee66 6a06 	vmul.f32	s13, s12, s12
 801cf40:	1c5a      	adds	r2, r3, #1
 801cf42:	eea6 7a85 	vfma.f32	s14, s13, s10
 801cf46:	eee6 4aa5 	vfma.f32	s9, s13, s11
 801cf4a:	ed9f 5a46 	vldr	s10, [pc, #280]	@ 801d064 <atanf+0x170>
 801cf4e:	eddf 5a46 	vldr	s11, [pc, #280]	@ 801d068 <atanf+0x174>
 801cf52:	eea7 5a26 	vfma.f32	s10, s14, s13
 801cf56:	eee4 5aa6 	vfma.f32	s11, s9, s13
 801cf5a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 801d06c <atanf+0x178>
 801cf5e:	eddf 4a44 	vldr	s9, [pc, #272]	@ 801d070 <atanf+0x17c>
 801cf62:	eea5 7a26 	vfma.f32	s14, s10, s13
 801cf66:	eee5 4aa6 	vfma.f32	s9, s11, s13
 801cf6a:	ed9f 5a42 	vldr	s10, [pc, #264]	@ 801d074 <atanf+0x180>
 801cf6e:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801d078 <atanf+0x184>
 801cf72:	eea7 5a26 	vfma.f32	s10, s14, s13
 801cf76:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 801d07c <atanf+0x188>
 801cf7a:	eea4 7aa6 	vfma.f32	s14, s9, s13
 801cf7e:	eee5 5a26 	vfma.f32	s11, s10, s13
 801cf82:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cf86:	eea5 7a86 	vfma.f32	s14, s11, s12
 801cf8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801cf8e:	d03b      	beq.n	801d008 <atanf+0x114>
 801cf90:	493b      	ldr	r1, [pc, #236]	@ (801d080 <atanf+0x18c>)
 801cf92:	4a3c      	ldr	r2, [pc, #240]	@ (801d084 <atanf+0x190>)
 801cf94:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801cf98:	edd1 6a00 	vldr	s13, [r1]
 801cf9c:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cfa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cfa4:	edd3 6a00 	vldr	s13, [r3]
 801cfa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801cfac:	2d00      	cmp	r5, #0
 801cfae:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801cfb2:	dab0      	bge.n	801cf16 <atanf+0x22>
 801cfb4:	eeb1 0a40 	vneg.f32	s0, s0
 801cfb8:	bd38      	pop	{r3, r4, r5, pc}
 801cfba:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cfbe:	bd38      	pop	{r3, r4, r5, pc}
 801cfc0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801d088 <atanf+0x194>
 801cfc4:	ee30 7a07 	vadd.f32	s14, s0, s14
 801cfc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cfcc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801cfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfd4:	dda6      	ble.n	801cf24 <atanf+0x30>
 801cfd6:	bd38      	pop	{r3, r4, r5, pc}
 801cfd8:	f000 f85e 	bl	801d098 <fabsf>
 801cfdc:	4b2b      	ldr	r3, [pc, #172]	@ (801d08c <atanf+0x198>)
 801cfde:	429c      	cmp	r4, r3
 801cfe0:	d815      	bhi.n	801d00e <atanf+0x11a>
 801cfe2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801cfe6:	429c      	cmp	r4, r3
 801cfe8:	d826      	bhi.n	801d038 <atanf+0x144>
 801cfea:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801cfee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801cff2:	eea0 7a27 	vfma.f32	s14, s0, s15
 801cff6:	2300      	movs	r3, #0
 801cff8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801cffc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d000:	e792      	b.n	801cf28 <atanf+0x34>
 801d002:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 801d090 <atanf+0x19c>
 801d006:	bd38      	pop	{r3, r4, r5, pc}
 801d008:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801d00c:	bd38      	pop	{r3, r4, r5, pc}
 801d00e:	4b21      	ldr	r3, [pc, #132]	@ (801d094 <atanf+0x1a0>)
 801d010:	429c      	cmp	r4, r3
 801d012:	d80b      	bhi.n	801d02c <atanf+0x138>
 801d014:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801d018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d01c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d020:	2302      	movs	r3, #2
 801d022:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d026:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801d02a:	e77d      	b.n	801cf28 <atanf+0x34>
 801d02c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801d030:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d034:	2303      	movs	r3, #3
 801d036:	e777      	b.n	801cf28 <atanf+0x34>
 801d038:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801d03c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d040:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d044:	2301      	movs	r3, #1
 801d046:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d04a:	e76d      	b.n	801cf28 <atanf+0x34>
 801d04c:	3fc90fdb 	.word	0x3fc90fdb
 801d050:	3edfffff 	.word	0x3edfffff
 801d054:	3c8569d7 	.word	0x3c8569d7
 801d058:	3d4bda59 	.word	0x3d4bda59
 801d05c:	bd15a221 	.word	0xbd15a221
 801d060:	bd6ef16b 	.word	0xbd6ef16b
 801d064:	3d886b35 	.word	0x3d886b35
 801d068:	bd9d8795 	.word	0xbd9d8795
 801d06c:	3dba2e6e 	.word	0x3dba2e6e
 801d070:	bde38e38 	.word	0xbde38e38
 801d074:	3e124925 	.word	0x3e124925
 801d078:	3eaaaaab 	.word	0x3eaaaaab
 801d07c:	be4ccccd 	.word	0xbe4ccccd
 801d080:	0801f048 	.word	0x0801f048
 801d084:	0801f058 	.word	0x0801f058
 801d088:	7149f2ca 	.word	0x7149f2ca
 801d08c:	3f97ffff 	.word	0x3f97ffff
 801d090:	bfc90fdb 	.word	0xbfc90fdb
 801d094:	401bffff 	.word	0x401bffff

0801d098 <fabsf>:
 801d098:	ee10 3a10 	vmov	r3, s0
 801d09c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d0a0:	ee00 3a10 	vmov	s0, r3
 801d0a4:	4770      	bx	lr
 801d0a6:	bf00      	nop

0801d0a8 <__udivmoddi4>:
 801d0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0ac:	9d08      	ldr	r5, [sp, #32]
 801d0ae:	460f      	mov	r7, r1
 801d0b0:	4604      	mov	r4, r0
 801d0b2:	468c      	mov	ip, r1
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d148      	bne.n	801d14a <__udivmoddi4+0xa2>
 801d0b8:	428a      	cmp	r2, r1
 801d0ba:	4616      	mov	r6, r2
 801d0bc:	d961      	bls.n	801d182 <__udivmoddi4+0xda>
 801d0be:	fab2 f382 	clz	r3, r2
 801d0c2:	b14b      	cbz	r3, 801d0d8 <__udivmoddi4+0x30>
 801d0c4:	f1c3 0220 	rsb	r2, r3, #32
 801d0c8:	fa01 fc03 	lsl.w	ip, r1, r3
 801d0cc:	fa20 f202 	lsr.w	r2, r0, r2
 801d0d0:	409e      	lsls	r6, r3
 801d0d2:	ea42 0c0c 	orr.w	ip, r2, ip
 801d0d6:	409c      	lsls	r4, r3
 801d0d8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801d0dc:	b2b7      	uxth	r7, r6
 801d0de:	fbbc f1fe 	udiv	r1, ip, lr
 801d0e2:	0c22      	lsrs	r2, r4, #16
 801d0e4:	fb0e cc11 	mls	ip, lr, r1, ip
 801d0e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801d0ec:	fb01 f007 	mul.w	r0, r1, r7
 801d0f0:	4290      	cmp	r0, r2
 801d0f2:	d909      	bls.n	801d108 <__udivmoddi4+0x60>
 801d0f4:	18b2      	adds	r2, r6, r2
 801d0f6:	f101 3cff 	add.w	ip, r1, #4294967295
 801d0fa:	f080 80ee 	bcs.w	801d2da <__udivmoddi4+0x232>
 801d0fe:	4290      	cmp	r0, r2
 801d100:	f240 80eb 	bls.w	801d2da <__udivmoddi4+0x232>
 801d104:	3902      	subs	r1, #2
 801d106:	4432      	add	r2, r6
 801d108:	1a12      	subs	r2, r2, r0
 801d10a:	b2a4      	uxth	r4, r4
 801d10c:	fbb2 f0fe 	udiv	r0, r2, lr
 801d110:	fb0e 2210 	mls	r2, lr, r0, r2
 801d114:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d118:	fb00 f707 	mul.w	r7, r0, r7
 801d11c:	42a7      	cmp	r7, r4
 801d11e:	d909      	bls.n	801d134 <__udivmoddi4+0x8c>
 801d120:	1934      	adds	r4, r6, r4
 801d122:	f100 32ff 	add.w	r2, r0, #4294967295
 801d126:	f080 80da 	bcs.w	801d2de <__udivmoddi4+0x236>
 801d12a:	42a7      	cmp	r7, r4
 801d12c:	f240 80d7 	bls.w	801d2de <__udivmoddi4+0x236>
 801d130:	4434      	add	r4, r6
 801d132:	3802      	subs	r0, #2
 801d134:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801d138:	1be4      	subs	r4, r4, r7
 801d13a:	2100      	movs	r1, #0
 801d13c:	b11d      	cbz	r5, 801d146 <__udivmoddi4+0x9e>
 801d13e:	40dc      	lsrs	r4, r3
 801d140:	2300      	movs	r3, #0
 801d142:	e9c5 4300 	strd	r4, r3, [r5]
 801d146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d14a:	428b      	cmp	r3, r1
 801d14c:	d906      	bls.n	801d15c <__udivmoddi4+0xb4>
 801d14e:	b10d      	cbz	r5, 801d154 <__udivmoddi4+0xac>
 801d150:	e9c5 0100 	strd	r0, r1, [r5]
 801d154:	2100      	movs	r1, #0
 801d156:	4608      	mov	r0, r1
 801d158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d15c:	fab3 f183 	clz	r1, r3
 801d160:	2900      	cmp	r1, #0
 801d162:	d148      	bne.n	801d1f6 <__udivmoddi4+0x14e>
 801d164:	42bb      	cmp	r3, r7
 801d166:	d302      	bcc.n	801d16e <__udivmoddi4+0xc6>
 801d168:	4282      	cmp	r2, r0
 801d16a:	f200 8107 	bhi.w	801d37c <__udivmoddi4+0x2d4>
 801d16e:	1a84      	subs	r4, r0, r2
 801d170:	eb67 0203 	sbc.w	r2, r7, r3
 801d174:	2001      	movs	r0, #1
 801d176:	4694      	mov	ip, r2
 801d178:	2d00      	cmp	r5, #0
 801d17a:	d0e4      	beq.n	801d146 <__udivmoddi4+0x9e>
 801d17c:	e9c5 4c00 	strd	r4, ip, [r5]
 801d180:	e7e1      	b.n	801d146 <__udivmoddi4+0x9e>
 801d182:	2a00      	cmp	r2, #0
 801d184:	f000 8092 	beq.w	801d2ac <__udivmoddi4+0x204>
 801d188:	fab2 f382 	clz	r3, r2
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	f040 80a8 	bne.w	801d2e2 <__udivmoddi4+0x23a>
 801d192:	1a8a      	subs	r2, r1, r2
 801d194:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801d198:	fa1f fc86 	uxth.w	ip, r6
 801d19c:	2101      	movs	r1, #1
 801d19e:	0c20      	lsrs	r0, r4, #16
 801d1a0:	fbb2 f7fe 	udiv	r7, r2, lr
 801d1a4:	fb0e 2217 	mls	r2, lr, r7, r2
 801d1a8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 801d1ac:	fb0c f007 	mul.w	r0, ip, r7
 801d1b0:	4290      	cmp	r0, r2
 801d1b2:	d907      	bls.n	801d1c4 <__udivmoddi4+0x11c>
 801d1b4:	18b2      	adds	r2, r6, r2
 801d1b6:	f107 38ff 	add.w	r8, r7, #4294967295
 801d1ba:	d202      	bcs.n	801d1c2 <__udivmoddi4+0x11a>
 801d1bc:	4290      	cmp	r0, r2
 801d1be:	f200 80e2 	bhi.w	801d386 <__udivmoddi4+0x2de>
 801d1c2:	4647      	mov	r7, r8
 801d1c4:	1a12      	subs	r2, r2, r0
 801d1c6:	b2a4      	uxth	r4, r4
 801d1c8:	fbb2 f0fe 	udiv	r0, r2, lr
 801d1cc:	fb0e 2210 	mls	r2, lr, r0, r2
 801d1d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d1d4:	fb0c fc00 	mul.w	ip, ip, r0
 801d1d8:	45a4      	cmp	ip, r4
 801d1da:	d907      	bls.n	801d1ec <__udivmoddi4+0x144>
 801d1dc:	1934      	adds	r4, r6, r4
 801d1de:	f100 32ff 	add.w	r2, r0, #4294967295
 801d1e2:	d202      	bcs.n	801d1ea <__udivmoddi4+0x142>
 801d1e4:	45a4      	cmp	ip, r4
 801d1e6:	f200 80cb 	bhi.w	801d380 <__udivmoddi4+0x2d8>
 801d1ea:	4610      	mov	r0, r2
 801d1ec:	eba4 040c 	sub.w	r4, r4, ip
 801d1f0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801d1f4:	e7a2      	b.n	801d13c <__udivmoddi4+0x94>
 801d1f6:	f1c1 0620 	rsb	r6, r1, #32
 801d1fa:	408b      	lsls	r3, r1
 801d1fc:	fa22 fc06 	lsr.w	ip, r2, r6
 801d200:	ea4c 0c03 	orr.w	ip, ip, r3
 801d204:	fa07 f401 	lsl.w	r4, r7, r1
 801d208:	fa20 f306 	lsr.w	r3, r0, r6
 801d20c:	40f7      	lsrs	r7, r6
 801d20e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801d212:	4323      	orrs	r3, r4
 801d214:	fa00 f801 	lsl.w	r8, r0, r1
 801d218:	fa1f fe8c 	uxth.w	lr, ip
 801d21c:	fbb7 f0f9 	udiv	r0, r7, r9
 801d220:	0c1c      	lsrs	r4, r3, #16
 801d222:	fb09 7710 	mls	r7, r9, r0, r7
 801d226:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 801d22a:	fb00 f70e 	mul.w	r7, r0, lr
 801d22e:	42a7      	cmp	r7, r4
 801d230:	fa02 f201 	lsl.w	r2, r2, r1
 801d234:	d90a      	bls.n	801d24c <__udivmoddi4+0x1a4>
 801d236:	eb1c 0404 	adds.w	r4, ip, r4
 801d23a:	f100 3aff 	add.w	sl, r0, #4294967295
 801d23e:	f080 809b 	bcs.w	801d378 <__udivmoddi4+0x2d0>
 801d242:	42a7      	cmp	r7, r4
 801d244:	f240 8098 	bls.w	801d378 <__udivmoddi4+0x2d0>
 801d248:	3802      	subs	r0, #2
 801d24a:	4464      	add	r4, ip
 801d24c:	1be4      	subs	r4, r4, r7
 801d24e:	b29f      	uxth	r7, r3
 801d250:	fbb4 f3f9 	udiv	r3, r4, r9
 801d254:	fb09 4413 	mls	r4, r9, r3, r4
 801d258:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 801d25c:	fb03 fe0e 	mul.w	lr, r3, lr
 801d260:	45a6      	cmp	lr, r4
 801d262:	d909      	bls.n	801d278 <__udivmoddi4+0x1d0>
 801d264:	eb1c 0404 	adds.w	r4, ip, r4
 801d268:	f103 37ff 	add.w	r7, r3, #4294967295
 801d26c:	f080 8082 	bcs.w	801d374 <__udivmoddi4+0x2cc>
 801d270:	45a6      	cmp	lr, r4
 801d272:	d97f      	bls.n	801d374 <__udivmoddi4+0x2cc>
 801d274:	3b02      	subs	r3, #2
 801d276:	4464      	add	r4, ip
 801d278:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801d27c:	eba4 040e 	sub.w	r4, r4, lr
 801d280:	fba0 e702 	umull	lr, r7, r0, r2
 801d284:	42bc      	cmp	r4, r7
 801d286:	4673      	mov	r3, lr
 801d288:	46b9      	mov	r9, r7
 801d28a:	d363      	bcc.n	801d354 <__udivmoddi4+0x2ac>
 801d28c:	d060      	beq.n	801d350 <__udivmoddi4+0x2a8>
 801d28e:	b15d      	cbz	r5, 801d2a8 <__udivmoddi4+0x200>
 801d290:	ebb8 0203 	subs.w	r2, r8, r3
 801d294:	eb64 0409 	sbc.w	r4, r4, r9
 801d298:	fa04 f606 	lsl.w	r6, r4, r6
 801d29c:	fa22 f301 	lsr.w	r3, r2, r1
 801d2a0:	431e      	orrs	r6, r3
 801d2a2:	40cc      	lsrs	r4, r1
 801d2a4:	e9c5 6400 	strd	r6, r4, [r5]
 801d2a8:	2100      	movs	r1, #0
 801d2aa:	e74c      	b.n	801d146 <__udivmoddi4+0x9e>
 801d2ac:	0862      	lsrs	r2, r4, #1
 801d2ae:	0848      	lsrs	r0, r1, #1
 801d2b0:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 801d2b4:	0c0b      	lsrs	r3, r1, #16
 801d2b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d2ba:	b28a      	uxth	r2, r1
 801d2bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d2c0:	fbb3 f1f6 	udiv	r1, r3, r6
 801d2c4:	07e4      	lsls	r4, r4, #31
 801d2c6:	46b4      	mov	ip, r6
 801d2c8:	4637      	mov	r7, r6
 801d2ca:	46b6      	mov	lr, r6
 801d2cc:	231f      	movs	r3, #31
 801d2ce:	fbb0 f0f6 	udiv	r0, r0, r6
 801d2d2:	1bd2      	subs	r2, r2, r7
 801d2d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d2d8:	e761      	b.n	801d19e <__udivmoddi4+0xf6>
 801d2da:	4661      	mov	r1, ip
 801d2dc:	e714      	b.n	801d108 <__udivmoddi4+0x60>
 801d2de:	4610      	mov	r0, r2
 801d2e0:	e728      	b.n	801d134 <__udivmoddi4+0x8c>
 801d2e2:	f1c3 0120 	rsb	r1, r3, #32
 801d2e6:	fa20 f201 	lsr.w	r2, r0, r1
 801d2ea:	409e      	lsls	r6, r3
 801d2ec:	fa27 f101 	lsr.w	r1, r7, r1
 801d2f0:	409f      	lsls	r7, r3
 801d2f2:	433a      	orrs	r2, r7
 801d2f4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801d2f8:	fa1f fc86 	uxth.w	ip, r6
 801d2fc:	fbb1 f7fe 	udiv	r7, r1, lr
 801d300:	fb0e 1017 	mls	r0, lr, r7, r1
 801d304:	0c11      	lsrs	r1, r2, #16
 801d306:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d30a:	fb07 f80c 	mul.w	r8, r7, ip
 801d30e:	4588      	cmp	r8, r1
 801d310:	fa04 f403 	lsl.w	r4, r4, r3
 801d314:	d93a      	bls.n	801d38c <__udivmoddi4+0x2e4>
 801d316:	1871      	adds	r1, r6, r1
 801d318:	f107 30ff 	add.w	r0, r7, #4294967295
 801d31c:	d201      	bcs.n	801d322 <__udivmoddi4+0x27a>
 801d31e:	4588      	cmp	r8, r1
 801d320:	d81f      	bhi.n	801d362 <__udivmoddi4+0x2ba>
 801d322:	eba1 0108 	sub.w	r1, r1, r8
 801d326:	fbb1 f8fe 	udiv	r8, r1, lr
 801d32a:	fb08 f70c 	mul.w	r7, r8, ip
 801d32e:	fb0e 1118 	mls	r1, lr, r8, r1
 801d332:	b292      	uxth	r2, r2
 801d334:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801d338:	42ba      	cmp	r2, r7
 801d33a:	d22f      	bcs.n	801d39c <__udivmoddi4+0x2f4>
 801d33c:	18b2      	adds	r2, r6, r2
 801d33e:	f108 31ff 	add.w	r1, r8, #4294967295
 801d342:	d2c6      	bcs.n	801d2d2 <__udivmoddi4+0x22a>
 801d344:	42ba      	cmp	r2, r7
 801d346:	d2c4      	bcs.n	801d2d2 <__udivmoddi4+0x22a>
 801d348:	f1a8 0102 	sub.w	r1, r8, #2
 801d34c:	4432      	add	r2, r6
 801d34e:	e7c0      	b.n	801d2d2 <__udivmoddi4+0x22a>
 801d350:	45f0      	cmp	r8, lr
 801d352:	d29c      	bcs.n	801d28e <__udivmoddi4+0x1e6>
 801d354:	ebbe 0302 	subs.w	r3, lr, r2
 801d358:	eb67 070c 	sbc.w	r7, r7, ip
 801d35c:	3801      	subs	r0, #1
 801d35e:	46b9      	mov	r9, r7
 801d360:	e795      	b.n	801d28e <__udivmoddi4+0x1e6>
 801d362:	eba6 0808 	sub.w	r8, r6, r8
 801d366:	4441      	add	r1, r8
 801d368:	1eb8      	subs	r0, r7, #2
 801d36a:	fbb1 f8fe 	udiv	r8, r1, lr
 801d36e:	fb08 f70c 	mul.w	r7, r8, ip
 801d372:	e7dc      	b.n	801d32e <__udivmoddi4+0x286>
 801d374:	463b      	mov	r3, r7
 801d376:	e77f      	b.n	801d278 <__udivmoddi4+0x1d0>
 801d378:	4650      	mov	r0, sl
 801d37a:	e767      	b.n	801d24c <__udivmoddi4+0x1a4>
 801d37c:	4608      	mov	r0, r1
 801d37e:	e6fb      	b.n	801d178 <__udivmoddi4+0xd0>
 801d380:	4434      	add	r4, r6
 801d382:	3802      	subs	r0, #2
 801d384:	e732      	b.n	801d1ec <__udivmoddi4+0x144>
 801d386:	3f02      	subs	r7, #2
 801d388:	4432      	add	r2, r6
 801d38a:	e71b      	b.n	801d1c4 <__udivmoddi4+0x11c>
 801d38c:	eba1 0108 	sub.w	r1, r1, r8
 801d390:	4638      	mov	r0, r7
 801d392:	fbb1 f8fe 	udiv	r8, r1, lr
 801d396:	fb08 f70c 	mul.w	r7, r8, ip
 801d39a:	e7c8      	b.n	801d32e <__udivmoddi4+0x286>
 801d39c:	4641      	mov	r1, r8
 801d39e:	e798      	b.n	801d2d2 <__udivmoddi4+0x22a>

0801d3a0 <_init>:
 801d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3a2:	bf00      	nop
 801d3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3a6:	bc08      	pop	{r3}
 801d3a8:	469e      	mov	lr, r3
 801d3aa:	4770      	bx	lr

0801d3ac <_fini>:
 801d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3ae:	bf00      	nop
 801d3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3b2:	bc08      	pop	{r3}
 801d3b4:	469e      	mov	lr, r3
 801d3b6:	4770      	bx	lr
